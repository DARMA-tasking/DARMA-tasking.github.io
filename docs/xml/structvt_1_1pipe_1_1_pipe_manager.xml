<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1_pipe_manager" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::PipeManager</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; PipeManager &gt;</basecompoundref>
    <basecompoundref refid="structvt_1_1pipe_1_1_pipe_manager_t_l" prot="public" virt="non-virtual">vt::pipe::PipeManagerTL</basecompoundref>
    <basecompoundref refid="structvt_1_1pipe_1_1_pipe_manager_typed" prot="public" virt="non-virtual">vt::pipe::PipeManagerTyped</basecompoundref>
    <includes refid="pipe__manager_8h" local="no">pipe_manager.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_1a221ce8bc0fc6639f43dad1e53a08c0d2" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt; FunctorT &gt;::MessageType</type>
        <definition>using vt::pipe::PipeManager::GetMsgType =  typename util::FunctorExtractor&lt;FunctorT&gt;::MessageType</definition>
        <argsstring></argsstring>
        <name>GetMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="98" column="1" bodyfile="src/vt/pipe/pipe_manager.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8d394521df58abfd90c1d81c998f22e3" kindref="member">V</ref></type>
        <definition>using vt::pipe::PipeManager::Void =  V</definition>
        <argsstring></argsstring>
        <name>Void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="99" column="1" bodyfile="src/vt/pipe/pipe_manager.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1pipe_1_1_pipe_manager_1a55c4e1e68f74a2a0796a24ea06711563" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::pipe::PipeManager::group_id_</definition>
        <argsstring></argsstring>
        <name>group_id_</name>
        <initializer>= no_group</initializer>
        <briefdescription>
<para>The group ID used to indicate that the message is being used as a pipe. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="374" column="1" bodyfile="src/vt/pipe/pipe_manager.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1aa2cf0e54dc146056c077aba1aa2ae42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::PipeManager::PipeManager</definition>
        <argsstring>()</argsstring>
        <name>PipeManager</name>
        <briefdescription>
<para>System constructor for making a new <ref refid="structvt_1_1pipe_1_1_pipe_manager" kindref="compound">PipeManager</ref> component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="104" column="1" bodyfile="src/vt/pipe/pipe_manager.cc" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1aad60c922d604dd1b9ff47e428d265eed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::pipe::PipeManager::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="106" column="1" bodyfile="src/vt/pipe/pipe_manager.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a9ceec59c887d0fa1498b931c788962f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ContextT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt;MsgT&gt; vt::pipe::PipeManager::makeFunc</definition>
        <argsstring>(LifetimeEnum life, ContextT *ctx, FuncMsgCtxType&lt; MsgT, ContextT &gt; fn)</argsstring>
        <name>makeFunc</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>ContextT *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" kindref="member">FuncMsgCtxType</ref>&lt; MsgT, ContextT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Make callback to a function (including lambdas) with a context pointer to any object on this node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>One must ensure that the lifetime of context pointer provided to the callback persists at least as long as the last time the callback might be invoked.</para></simplesect>
Example snippet:</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DataMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Context<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>129;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1config_1a0551245b6b893932b95aaf8eac94eed1" kindref="member">ctx</ref><sp/>=<sp/>std::make_unique&lt;Context&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cb<sp/>=<sp/><ref refid="namespacevt_1a673b109e94c7bca58313504c83e1da94" kindref="member">vt::theCB</ref>()-&gt;<ref refid="structvt_1_1pipe_1_1_pipe_manager_1a9ceec59c887d0fa1498b931c788962f6" kindref="member">makeFunc</ref>&lt;DataMsg,Context&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1config_1a0551245b6b893932b95aaf8eac94eed1" kindref="member">ctx</ref>.get(),<sp/>[](DataMsg*<sp/>msg,<sp/>Context*<sp/>my_ctx){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>triggered<sp/>with<sp/>message<sp/>and<sp/>associated<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cb.send();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">life</parametername>
</parameternamelist>
<parameterdescription>
<para>the lifetime for this callback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object context passed to callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>endpoint function that takes a message and context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a0143d5074ac61023fb97646f54bebd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContextT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; <ref refid="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" kindref="member">Void</ref> &gt;</type>
        <definition>Callback&lt;Void&gt; vt::pipe::PipeManager::makeFunc</definition>
        <argsstring>(LifetimeEnum life, ContextT *ctx, FuncCtxType&lt; ContextT &gt; fn)</argsstring>
        <name>makeFunc</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>ContextT *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" kindref="member">FuncCtxType</ref>&lt; ContextT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Make a void callback to a function (including lambdas) with a context pointer to any object on this node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>One must ensure that the lifetime of context pointer provided to the callback persists at least as long as the last time the callback might be invoked.</para></simplesect>
Example snippet:</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Context<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>129;<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1config_1a0551245b6b893932b95aaf8eac94eed1" kindref="member">ctx</ref><sp/>=<sp/>std::make_unique&lt;Context&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cb<sp/>=<sp/><ref refid="namespacevt_1a673b109e94c7bca58313504c83e1da94" kindref="member">vt::theCB</ref>()-&gt;<ref refid="structvt_1_1pipe_1_1_pipe_manager_1a9ceec59c887d0fa1498b931c788962f6" kindref="member">makeFunc</ref>&lt;Context&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1config_1a0551245b6b893932b95aaf8eac94eed1" kindref="member">ctx</ref>.get(),<sp/>[](Context*<sp/>my_ctx){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>triggered<sp/>with<sp/>associated<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cb.send();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">life</parametername>
</parameternamelist>
<parameterdescription>
<para>the lifetime for this callback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the object context passed to callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>endpoint function that takes a context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a85a3af6f11eae0f41d95a5f66433c0e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeFunc</definition>
        <argsstring>(LifetimeEnum life, FuncMsgType&lt; MsgT &gt; fn)</argsstring>
        <name>makeFunc</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" kindref="member">FuncMsgType</ref>&lt; MsgT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Make a callback to a function (including lambdas) on this node with a message. </para>        </briefdescription>
        <detaileddescription>
<para>Example snippet:</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DataMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cb<sp/>=<sp/><ref refid="namespacevt_1a673b109e94c7bca58313504c83e1da94" kindref="member">vt::theCB</ref>()-&gt;<ref refid="structvt_1_1pipe_1_1_pipe_manager_1a9ceec59c887d0fa1498b931c788962f6" kindref="member">makeFunc</ref>&lt;DataMsg&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[](DataMsg*<sp/>msg){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>triggered<sp/>with<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cb.send();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">life</parametername>
</parameternamelist>
<parameterdescription>
<para>the lifetime for this callback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>endpoint function that takes a message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="201" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1aa4f7c8443d33d3453744b5459315f4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; <ref refid="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" kindref="member">Void</ref> &gt;</type>
        <definition>Callback&lt; PipeManager::Void &gt; vt::pipe::PipeManager::makeFunc</definition>
        <argsstring>(LifetimeEnum life, FuncVoidType fn)</argsstring>
        <name>makeFunc</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" kindref="member">FuncVoidType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Make a void callback to a function (including lambdas) on this node. </para>        </briefdescription>
        <detaileddescription>
<para>Example snippet:</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cb<sp/>=<sp/><ref refid="namespacevt_1a673b109e94c7bca58313504c83e1da94" kindref="member">vt::theCB</ref>()-&gt;<ref refid="structvt_1_1pipe_1_1_pipe_manager_1a9ceec59c887d0fa1498b931c788962f6" kindref="member">makeFunc</ref>([]{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callback<sp/>triggered<sp/>with<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cb.send();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">life</parametername>
</parameternamelist>
<parameterdescription>
<para>the lifetime for this callback </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>void endpoint function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="222" column="1" bodyfile="src/vt/pipe/pipe_manager.cc" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a73583be6260418b13ee66e56cdade2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeSend</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>makeSend</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Make a callback to a active message handler to be invoked on a certain node with a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>node to invoke callback on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="233" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a0fc60c66ec9c02e2c1874e08194cac44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_1a221ce8bc0fc6639f43dad1e53a08c0d2" kindref="member">GetMsgType</ref>&lt;FunctorT&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt;MsgT&gt; vt::pipe::PipeManager::makeSend</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>makeSend</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Make a callback to a functor handler to be invoked on a certain node with a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>node to invoke callback on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a89f95b27b13c69f2fe84dc29fd604082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;<ref refid="structvt_1_1pipe_1_1_functor_traits" kindref="compound">FunctorTraits</ref>&lt;FunctorT&gt;::has_no_msg_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; <ref refid="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" kindref="member">Void</ref> &gt;</type>
        <definition>Callback&lt; PipeManager::Void &gt; vt::pipe::PipeManager::makeSend</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>makeSend</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Make a callback to a void functor handler to be invoked on a certain node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>node to invoke callback on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="258" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a612b59953b949edc575577e313e3b187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0bf4e2e805b3ce2be9f499e0e39aadfa" kindref="member">ColHanType</ref>&lt; ColT, MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeSend</definition>
        <argsstring>(typename ColT::ProxyType proxy)</argsstring>
        <name>makeSend</name>
        <param>
          <type>typename ColT::ProxyType</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Make a callback to a particular collection element invoking a non-intrusive collection active function handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>element proxy to collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="269" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a87e25e6a0151c0a9a48b58e6f4679b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1abf7ad21be4f3d0db51d643aa8ea959cc" kindref="member">ColMemType</ref>&lt; ColT, MsgT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt;MsgT&gt; vt::pipe::PipeManager::makeSend</definition>
        <argsstring>(typename ColT::ProxyType proxy)</argsstring>
        <name>makeSend</name>
        <param>
          <type>typename ColT::ProxyType</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Make a callback to a particular collection element invoking an intrusive collection member handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>element proxy to collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1aa5d48a3b64820bec240a6a61bdfb4524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1a8a2e05fd84f8ac7b7dda4b64e5abe5" kindref="member">ObjMemType</ref>&lt; ObjT, MsgT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeSend</definition>
        <argsstring>(objgroup::proxy::ProxyElm&lt; ObjT &gt; proxy)</argsstring>
        <name>makeSend</name>
        <param>
          <type><ref refid="structvt_1_1objgroup_1_1proxy_1_1_proxy_elm" kindref="compound">objgroup::proxy::ProxyElm</ref>&lt; ObjT &gt;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Make a callback to a particular objgroup element (node) invoking a objgroup member handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>element proxy to objgroup</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="291" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a2ea6bd5ea3e001662681b1e5a1971e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeBcast</definition>
        <argsstring>()</argsstring>
        <name>makeBcast</name>
        <briefdescription>
<para>Make a callback to a active message handler with a message to be broadcast to all nodes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="300" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a50e15818da3bc48ac9f129fbd30c3e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_1a221ce8bc0fc6639f43dad1e53a08c0d2" kindref="member">GetMsgType</ref>&lt;FunctorT&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt;MsgT&gt; vt::pipe::PipeManager::makeBcast</definition>
        <argsstring>()</argsstring>
        <name>makeBcast</name>
        <briefdescription>
<para>Make a callback to a functor handler with a message to be broadcast to all nodes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a42e6860c842d31411b7d90154a0c6a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;<ref refid="structvt_1_1pipe_1_1_functor_traits" kindref="compound">FunctorTraits</ref>&lt;FunctorT&gt;::has_no_msg_type&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; <ref refid="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" kindref="member">Void</ref> &gt;</type>
        <definition>Callback&lt; PipeManager::Void &gt; vt::pipe::PipeManager::makeBcast</definition>
        <argsstring>()</argsstring>
        <name>makeBcast</name>
        <briefdescription>
<para>Make a void callback to a functor handler to be broadcast to all nodes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="321" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a1fefc503b58bbdf791e76a6c8f339df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0bf4e2e805b3ce2be9f499e0e39aadfa" kindref="member">ColHanType</ref>&lt; ColT, MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeBcast</definition>
        <argsstring>(ColProxyType&lt; ColT &gt; proxy)</argsstring>
        <name>makeBcast</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af56c58cad882496e35f01227d4da3898" kindref="member">ColProxyType</ref>&lt; ColT &gt;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Make a callback to a whole collection invoking a non-intrusive collection active function handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>proxy to collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="332" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a6fb7d87f8beb2c1e80d492df47036158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1abf7ad21be4f3d0db51d643aa8ea959cc" kindref="member">ColMemType</ref>&lt; ColT, MsgT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt;MsgT&gt; vt::pipe::PipeManager::makeBcast</definition>
        <argsstring>(ColProxyType&lt; ColT &gt; proxy)</argsstring>
        <name>makeBcast</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af56c58cad882496e35f01227d4da3898" kindref="member">ColProxyType</ref>&lt; ColT &gt;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Make a callback to a whole collection invoking an intrusive collection member handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>proxy to collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a4d561c17ce6861401a32892223e434c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1a8a2e05fd84f8ac7b7dda4b64e5abe5" kindref="member">ObjMemType</ref>&lt; ObjT, MsgT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt; MsgT &gt; vt::pipe::PipeManager::makeBcast</definition>
        <argsstring>(objgroup::proxy::Proxy&lt; ObjT &gt; proxy)</argsstring>
        <name>makeBcast</name>
        <param>
          <type><ref refid="structvt_1_1objgroup_1_1proxy_1_1_proxy" kindref="compound">objgroup::proxy::Proxy</ref>&lt; ObjT &gt;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Make a callback to a whole objgroup invoking a objgroup member handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>proxy to objgroup</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="354" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1aaddd05d4eec8fbcbe8134f9c907a7306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManager::triggerSendBack</definition>
        <argsstring>(PipeType const &amp;pipe, MsgT *data)</argsstring>
        <name>triggerSendBack</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Trigger and send back on a pipe that is not locally triggerable and thus requires communication if it is &quot;sent&quot; off-node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>the pipe ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="365" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="68" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1ae7b6be748d81eeeddb0cf84133bb8a7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManager::serialize</definition>
        <argsstring>(Serializer &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>Serializer &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.h" line="368" column="1" bodyfile="src/vt/pipe/pipe_manager.h" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1a51d552105b29056f146fecab880eb6c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; <ref refid="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" kindref="member">PipeManager::Void</ref> &gt;</type>
        <definition>Callback&lt;PipeManager::Void&gt; vt::pipe::PipeManager::makeFunc</definition>
        <argsstring>(LifetimeEnum life, C *ctx, FuncCtxType&lt; C &gt; fn)</argsstring>
        <name>makeFunc</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>C *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" kindref="member">FuncCtxType</ref>&lt; C &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.impl.h" line="81" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_1aeade0c95a974823a05ba925167c82889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a36db99df4c973d48b1118a293fff533f" kindref="member">Callback</ref>&lt; MsgT &gt;</type>
        <definition>Callback&lt;MsgT&gt; vt::pipe::PipeManager::makeFunc</definition>
        <argsstring>(LifetimeEnum life, C *ctx, FuncMsgCtxType&lt; MsgT, C &gt; fn)</argsstring>
        <name>makeFunc</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>C *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" kindref="member">FuncMsgCtxType</ref>&lt; MsgT, C &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.impl.h" line="88" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="88" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core VT component that provides an interface to create type-erased callbacks to many endpoint types. </para>    </briefdescription>
    <detaileddescription>
<para>Allows creation of callback to many types of handlers with different modes<mdash/>like send and broadcast. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2942">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="2943" relation="public-inheritance">
        </childnode>
        <childnode refid="2946" relation="public-inheritance">
        </childnode>
        <childnode refid="2947" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2940">
        <label>vt::pipe::PipeManager</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager"/>
        <childnode refid="2941" relation="public-inheritance">
        </childnode>
        <childnode refid="2948" relation="public-inheritance">
        </childnode>
        <childnode refid="2950" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2945">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="2941">
        <label>vt::runtime::component::Component&lt; PipeManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="2942" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2943">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="2944" relation="public-inheritance">
        </childnode>
        <childnode refid="2945" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2944">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="2946">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="2947">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="2950">
        <label>vt::pipe::PipeManagerTyped</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_typed"/>
        <childnode refid="2949" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2948">
        <label>vt::pipe::PipeManagerTL</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_t_l"/>
        <childnode refid="2949" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2949">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2953">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="2954" relation="public-inheritance">
        </childnode>
        <childnode refid="2957" relation="public-inheritance">
        </childnode>
        <childnode refid="2958" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2951">
        <label>vt::pipe::PipeManager</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager"/>
        <childnode refid="2952" relation="public-inheritance">
        </childnode>
        <childnode refid="2959" relation="public-inheritance">
        </childnode>
        <childnode refid="2961" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2956">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="2952">
        <label>vt::runtime::component::Component&lt; PipeManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="2953" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2954">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="2955" relation="public-inheritance">
        </childnode>
        <childnode refid="2956" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2955">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="2957">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="2958">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="2961">
        <label>vt::pipe::PipeManagerTyped</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_typed"/>
        <childnode refid="2960" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2959">
        <label>vt::pipe::PipeManagerTL</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_t_l"/>
        <childnode refid="2960" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2960">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/pipe/pipe_manager.h" line="96" column="1" bodyfile="src/vt/pipe/pipe_manager.h" bodystart="93" bodyend="375"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a379d983dfbf654ed01281d96148175f3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ae1aee468ba813cc359e3d3602722b161" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa878aef84540ec6c2ca89096683d407e" prot="public" virt="non-virtual" ambiguityscope="vt::pipe::PipeManagerBase::"><scope>vt::pipe::PipeManager</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aee28bc7a33e3a0b796aa8fcdd6f72bd9" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a137d7271f189aa000427a3cb39bd7f52" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af50d2867536e0b9db56560126c3da066" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1abc9236c8ff7a657b1b04fd7604d616b9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerFunctor</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aca69c630748b177c01af61b39ffad0ec" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerFunctor</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a3bbcc3d70bb6840ede74747011f18ea8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerFunctorBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a7f59d9749248fb963a7c279a053fe220" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerFunctorBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a12cd5abf9d9a082369419a5cc5b7b0f8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerFunctorVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a12039964ec1deb173f0ee83ad4c8a543" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerFunctorVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ae486f94f76733fd3d97ff393c35d0e5e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>addListenerVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1aace7b9169efa610aa1d006eef4e68510" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>buildMultiCB</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a3723a2c74fb38e4ad6d7aa546e720ae8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackAnonType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ac17133b080980cbe0bc29b285666b2be" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackAnonVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a4176395e8a35ec2a809890a9aad5b29e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackBcastType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ab028a342e37daeacc38acbfc185e0997" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackBcastVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af6fc2c17f1729fa06450441b0ee81cb1" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a74e5f1a359ab32259f855998f867d93a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackProxyBcastType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a9259903ba569c54c4e4bc6ad7888e059" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackProxySendType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a306c7c126ed7fb6c5b53bfcf38726291" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackSendType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a09eb51f50878116c3b0867fad5f9aab0" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackSendVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1cc1d0f1c80a36488f9b5d282e9755d2" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CallbackType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CBTypes</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1abb75b2bfdb23ebfa7f4f677a7f4bcb77" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>CBVrtTypes</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0bf4e2e805b3ce2be9f499e0e39aadfa" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>ColHanType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1abf7ad21be4f3d0db51d643aa8ea959cc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>ColMemType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af56c58cad882496e35f01227d4da3898" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>ColProxyType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>component_id_</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>DefType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a983e301505317c5ba2041461e7dec84a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>DispatchFuncType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>dumpState</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>finalize</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac2c474a68a93bbc8e1d86eb99dabf1dc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>FnType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>FuncCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>FuncMsgCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>FuncMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>FuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>FuncVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27d24548529db938aeeb6fe11af985a1" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>generalSignalTrigger</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a221ce8bc0fc6639f43dad1e53a08c0d2" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>GetMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a55c4e1e68f74a2a0796a24ea06711563" prot="private" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>group_id_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>initialize</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a2ea6bd5ea3e001662681b1e5a1971e9d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a50e15818da3bc48ac9f129fbd30c3e31" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a42e6860c842d31411b7d90154a0c6a17" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a1fefc503b58bbdf791e76a6c8f339df6" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a6fb7d87f8beb2c1e80d492df47036158" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a4d561c17ce6861401a32892223e434c9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff965bd75d398d45ad11d33feeb7a7c5" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a6fec17887d5cae03c513088ccb4ce3db" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7fbd6f5b88e5cca79f8588ea67ce6161" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a942c7bacba09faa418dd55dfa11e1520" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a023a1dde95875ecbbe53c7484e02caed" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a51f15a63c39eeef9ff73572711363bba" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorBcastVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1afc9683e41b08ba2647db78c292717593" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorBcastVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a446f98d0a74d66539a411e1d41caa505" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2e9eb336fb5e2f6927b64068411ff2c8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac2c128da30637e0672086df5abea84a3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorSendVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a71bfb005f664ca5f0f6935afbcdb17de" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFunctorSendVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a20bf85e7494b5d018ed24b052f56fc28" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackFuncVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a1b4f3f5a713ebec4fff1189021ff501b" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackMultiSendTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8a4da1e38acd018f847aa9fddae44956" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackObjGrpBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a9caf63b8c6577acd4884933c1b9cc886" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackObjGrpBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a98f92fd3f75e48766b55c7b7253c19b4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackObjGrpSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a304681fe59bec2e1ad28a357f48aeab3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackObjGrpSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ad3ee09b4e7976de176b14d76d70b2bdb" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a59f0de1aaa6ab7ea6b0eac0667b495f7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a4bdcd4bf9730aa312336568d005e6d01" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac74f387c8ea9f25e11ca53841cd01779" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aa84891c7d419709ee96473a895d07ae7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1b3d31ba2e73d77ef2ed5c7f752d2eb9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ab09de6a0f8400e1668d4134d24f51bf3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnonTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ae239877cc157e7f5c95aa96421b7e1bb" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnonVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a92e209618d7e21e150a1f13ae4e813d4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnonVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a306040a3eaa54799594e9a39d8d0a191" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleAnonVoidTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a756fde11660cadf687a73aecccf2ecaa" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a44999ebff93b29e571e928b0695ed120" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a74135c6c11f5cd49bf560be506056a03" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleBcastFunctorTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a9392cfaa2787f28fd1193421eff4e837" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleBcastFunctorVoidTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a2ad082461a47d098fa5dadb7aca517e7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleBcastTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0f66ce82b544151cbdec67a13a6ead34" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxyBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff5140772699150c68dc912017e3a670" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxyBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff70024da9ee15ef2c935ca21d18a80d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxyBcastDirect</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff70024da9ee15ef2c935ca21d18a80d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxyBcastDirect</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a41fec001a4e698cb2bac888a6a48d606" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxyBcastDirect</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a4709469e02dda4bbe02cf5f5e18e36d6" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxyBcastTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2c8c3a5aca22b2526fe68dd543a8a888" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxySend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2c8c3a5aca22b2526fe68dd543a8a888" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxySend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0da1b385495f0a625754f17db45a4066" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxySend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1abc80f7c6999d009ddd2a531cc858698e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleProxySendTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8776a3e14cce177c3b31aed347177750" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ab160500f39018d96e56743095a1869e8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a1e7b6839175c1234110288b549e99145" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSendFunctorTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a2bb010b0f35b6587eb65a637443e5243" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSendFunctorVoidTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff917693da92fdfb5b275c7cf61e5e8b" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSendT</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac4d276c82d9f04628263ffd07841fdcf" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSendT</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ac39b55392dbfc09be9f2abe1c68a0e2a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackSingleSendTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a9644742f82b43a851e8a20755302a2e0" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeCallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a9ceec59c887d0fa1498b931c788962f6" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a0143d5074ac61023fb97646f54bebd98" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a85a3af6f11eae0f41d95a5f66433c0e7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1aa4f7c8443d33d3453744b5459315f4ef" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a51d552105b29056f146fecab880eb6c4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1aeade0c95a974823a05ba925167c82889" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af1ba11407837cb69b4d205dd7ba880b0" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makePipeID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a73583be6260418b13ee66e56cdade2da" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a0fc60c66ec9c02e2c1874e08194cac44" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a89f95b27b13c69f2fe84dc29fd604082" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a612b59953b949edc575577e313e3b187" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1a87e25e6a0151c0a9a48b58e6f4679b02" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1aa5d48a3b64820bec240a6a61bdfb4524" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>makeSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1aad60c922d604dd1b9ff47e428d265eed" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>name</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a458f8135ed2a44ec51afb21676c5db50" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>newPipeState</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1a8a2e05fd84f8ac7b7dda4b64e5abe5" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>ObjMemType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1aa2cf0e54dc146056c077aba1aa2ae42b" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>PipeManager</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a6b3b1e6d6bfe21308090d2dc62743961" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>PipeManagerBase</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a1364798bda487c9fb04879599f96c507" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>PipeStateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>progress</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a33bb7d066b2ca629c000d15c05323e4a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>pushTarget</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a2f793d591d216dfa38f8c95cf42e25f1" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>pushTarget</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ae6dbfc18f6dc280c007d02c25bee38dc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>pushTargetBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a89e6ea6de5c6723b1cef14657ba588ab" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>pushTargetBcast</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>reducer</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27f1aea903f8e05655eb84ae1474c729" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerCallback</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1ae7b6be748d81eeeddb0cf84133bb8a7c" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>staticInit</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acae150f3cb2f27a84f39186ad4dd1a37" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>triggerCallbackHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a56855a2a2c55decbb79971f51fb9dcce" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>triggerCallbackMsgHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a32f82a02196fe42e98ae3b628b73ae6d" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>triggerPipe</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a34492ef027a92525ca5acc4e86b360ce" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>triggerPipeTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad21185d07e9c3a0206d3d5a791f668a3" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>triggerPipeUnknown</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1aaddd05d4eec8fbcbe8134f9c907a7306" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>triggerSendBack</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8d394521df58abfd90c1d81c998f22e3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>V</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_1ab720c2580ecfd3ab36e49aeaaff64cc6" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManager</scope><name>Void</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af7b66141f69a485c6fce5e02bbbd3f89" prot="public" virt="virtual"><scope>vt::pipe::PipeManager</scope><name>~PipeManagerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
