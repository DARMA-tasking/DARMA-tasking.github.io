<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="histogram__approx_8h" kind="file" language="C++">
    <compoundname>histogram_approx.h</compoundname>
    <includes refid="config_8h" local="yes">vt/config.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">tuple</includes>
    <includes local="no">limits</includes>
    <includes local="no">cmath</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">fmt/format.h</includes>
    <incdepgraph>
      <node id="240056">
        <label>list</label>
      </node>
      <node id="240008">
        <label>vt/configs/features/features_featureswitch.h</label>
        <link refid="features__featureswitch_8h"/>
        <childnode refid="240009" relation="include">
        </childnode>
      </node>
      <node id="240045">
        <label>vt/runtime/component/component_pack.h</label>
        <link refid="component__pack_8h"/>
        <childnode refid="240046" relation="include">
        </childnode>
        <childnode refid="240055" relation="include">
        </childnode>
        <childnode refid="240056" relation="include">
        </childnode>
        <childnode refid="240057" relation="include">
        </childnode>
        <childnode refid="240048" relation="include">
        </childnode>
        <childnode refid="240043" relation="include">
        </childnode>
        <childnode refid="240058" relation="include">
        </childnode>
      </node>
      <node id="240055">
        <label>vt/runtime/component/movable_fn.h</label>
        <link refid="movable__fn_8h"/>
      </node>
      <node id="240019">
        <label>functional</label>
      </node>
      <node id="240049">
        <label>vt/runtime/component/component_dep.h</label>
        <link refid="component__dep_8h"/>
        <childnode refid="240047" relation="include">
        </childnode>
      </node>
      <node id="240027">
        <label>fmt/format.h</label>
      </node>
      <node id="240069">
        <label>limits</label>
      </node>
      <node id="240010">
        <label>vt/configs/features/features_metafeatures.h</label>
        <link refid="features__metafeatures_8h"/>
        <childnode refid="240009" relation="include">
        </childnode>
      </node>
      <node id="240025">
        <label>vt/configs/debug/debug_colorize.h</label>
        <link refid="debug__colorize_8h"/>
        <childnode refid="240014" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
      </node>
      <node id="240014">
        <label>vt/configs/arguments/app_config.h</label>
        <link refid="app__config_8h"/>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240016" relation="include">
        </childnode>
      </node>
      <node id="240002">
        <label>src/vt/utils/adt/histogram_approx.h</label>
        <link refid="histogram__approx_8h"/>
        <childnode refid="240003" relation="include">
        </childnode>
        <childnode refid="240016" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240069" relation="include">
        </childnode>
        <childnode refid="240070" relation="include">
        </childnode>
        <childnode refid="240071" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240007">
        <label>cstdint</label>
      </node>
      <node id="240054">
        <label>vt/runtime/component/progressable.h</label>
        <link refid="progressable_8h"/>
      </node>
      <node id="240053">
        <label>vt/runtime/component/bufferable.h</label>
        <link refid="bufferable_8h"/>
      </node>
      <node id="240065">
        <label>vt/configs/error/assert_out_info.impl.h</label>
        <link refid="assert__out__info_8impl_8h"/>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240038" relation="include">
        </childnode>
        <childnode refid="240064" relation="include">
        </childnode>
        <childnode refid="240066" relation="include">
        </childnode>
        <childnode refid="240025" relation="include">
        </childnode>
        <childnode refid="240063" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240068" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240070">
        <label>cmath</label>
      </node>
      <node id="240063">
        <label>cassert</label>
      </node>
      <node id="240039">
        <label>vt/configs/error/assert_out.impl.h</label>
        <link refid="assert__out_8impl_8h"/>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240038" relation="include">
        </childnode>
        <childnode refid="240040" relation="include">
        </childnode>
        <childnode refid="240025" relation="include">
        </childnode>
        <childnode refid="240032" relation="include">
        </childnode>
        <childnode refid="240042" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240063" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240022">
        <label>vt/configs/types/types_size.h</label>
        <link refid="types__size_8h"/>
        <childnode refid="240023" relation="include">
        </childnode>
      </node>
      <node id="240030">
        <label>vt/configs/error/common.h</label>
        <link refid="src_2vt_2configs_2error_2common_8h"/>
        <childnode refid="240017" relation="include">
        </childnode>
        <childnode refid="240031" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
      </node>
      <node id="240023">
        <label>vt/utils/bits/bits_counter.h</label>
        <link refid="bits__counter_8h"/>
      </node>
      <node id="240028">
        <label>vt/configs/error/error_headers.h</label>
        <link refid="error__headers_8h"/>
        <childnode refid="240029" relation="include">
        </childnode>
        <childnode refid="240033" relation="include">
        </childnode>
        <childnode refid="240037" relation="include">
        </childnode>
      </node>
      <node id="240015">
        <label>string</label>
      </node>
      <node id="240051">
        <label>vt/runtime/component/base.h</label>
        <link refid="src_2vt_2runtime_2component_2base_8h"/>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240052" relation="include">
        </childnode>
        <childnode refid="240053" relation="include">
        </childnode>
        <childnode refid="240054" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
      </node>
      <node id="240066">
        <label>vt/configs/error/keyval_printer.h</label>
        <link refid="keyval__printer_8h"/>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240041" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240016" relation="include">
        </childnode>
        <childnode refid="240067" relation="include">
        </childnode>
      </node>
      <node id="240067">
        <label>vt/configs/error/keyval_printer.impl.h</label>
        <link refid="keyval__printer_8impl_8h"/>
        <childnode refid="240066" relation="include">
        </childnode>
        <childnode refid="240025" relation="include">
        </childnode>
        <childnode refid="240041" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240016" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240048">
        <label>unordered_set</label>
      </node>
      <node id="240011">
        <label>vt/configs/features/features_enableif.h</label>
        <link refid="features__enableif_8h"/>
        <childnode refid="240008" relation="include">
        </childnode>
        <childnode refid="240009" relation="include">
        </childnode>
      </node>
      <node id="240006">
        <label>vt/configs/debug/debug_config.h</label>
        <link refid="debug__config_8h"/>
        <childnode refid="240007" relation="include">
        </childnode>
        <childnode refid="240008" relation="include">
        </childnode>
        <childnode refid="240009" relation="include">
        </childnode>
        <childnode refid="240010" relation="include">
        </childnode>
        <childnode refid="240011" relation="include">
        </childnode>
        <childnode refid="240012" relation="include">
        </childnode>
      </node>
      <node id="240024">
        <label>vt/configs/types/types_sentinels.h</label>
        <link refid="types__sentinels_8h"/>
        <childnode refid="240004" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240020" relation="include">
        </childnode>
      </node>
      <node id="240050">
        <label>vt/runtime/component/component_traits.h</label>
        <link refid="component__traits_8h"/>
        <childnode refid="240035" relation="include">
        </childnode>
      </node>
      <node id="240047">
        <label>vt/runtime/component/component_registry.h</label>
        <link refid="component__registry_8h"/>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240016" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240048" relation="include">
        </childnode>
      </node>
      <node id="240004">
        <label>vt/configs/debug/debug_masterconfig.h</label>
        <link refid="debug__masterconfig_8h"/>
        <childnode refid="240005" relation="include">
        </childnode>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240013" relation="include">
        </childnode>
      </node>
      <node id="240031">
        <label>vt/collective/basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="240015" relation="include">
        </childnode>
      </node>
      <node id="240018">
        <label>vt/configs/types/types_type.h</label>
        <link refid="types__type_8h"/>
        <childnode refid="240007" relation="include">
        </childnode>
        <childnode refid="240019" relation="include">
        </childnode>
      </node>
      <node id="240034">
        <label>vt/configs/error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="240017" relation="include">
        </childnode>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240036" relation="include">
        </childnode>
      </node>
      <node id="240026">
        <label>vt/configs/debug/debug_var_unused.h</label>
        <link refid="debug__var__unused_8h"/>
        <childnode refid="240021" relation="include">
        </childnode>
      </node>
      <node id="240029">
        <label>vt/configs/error/soft_error.h</label>
        <link refid="soft__error_8h"/>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240032" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240021">
        <label>tuple</label>
      </node>
      <node id="240062">
        <label>vt/utils/tls/tls.impl.h</label>
        <link refid="tls_8impl_8h"/>
        <childnode refid="240003" relation="include">
        </childnode>
      </node>
      <node id="240013">
        <label>vt/configs/debug/debug_print.h</label>
        <link refid="debug__print_8h"/>
        <childnode refid="240014" relation="include">
        </childnode>
        <childnode refid="240017" relation="include">
        </childnode>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240025" relation="include">
        </childnode>
        <childnode refid="240026" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240016">
        <label>vector</label>
      </node>
      <node id="240042">
        <label>vt/context/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="240043" relation="include">
        </childnode>
        <childnode refid="240044" relation="include">
        </childnode>
        <childnode refid="240003" relation="include">
        </childnode>
        <childnode refid="240045" relation="include">
        </childnode>
        <childnode refid="240059" relation="include">
        </childnode>
        <childnode refid="240060" relation="include">
        </childnode>
      </node>
      <node id="240068">
        <label>sstream</label>
      </node>
      <node id="240005">
        <label>vt/cmake_config.h</label>
      </node>
      <node id="240040">
        <label>vt/configs/error/stack_out.h</label>
        <link refid="stack__out_8h"/>
        <childnode refid="240041" relation="include">
        </childnode>
        <childnode refid="240016" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
      </node>
      <node id="240009">
        <label>vt/configs/features/features_defines.h</label>
        <link refid="features__defines_8h"/>
      </node>
      <node id="240041">
        <label>cstdlib</label>
      </node>
      <node id="240033">
        <label>vt/configs/error/hard_error.h</label>
        <link refid="hard__error_8h"/>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240034" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
      </node>
      <node id="240059">
        <label>vt/context/context_attorney_fwd.h</label>
        <link refid="context__attorney__fwd_8h"/>
        <childnode refid="240003" relation="include">
        </childnode>
      </node>
      <node id="240057">
        <label>unordered_map</label>
      </node>
      <node id="240017">
        <label>vt/configs/types/types_headers.h</label>
        <link refid="types__headers_8h"/>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240020" relation="include">
        </childnode>
        <childnode refid="240022" relation="include">
        </childnode>
        <childnode refid="240024" relation="include">
        </childnode>
      </node>
      <node id="240038">
        <label>vt/configs/error/assert_out.h</label>
        <link refid="assert__out_8h"/>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240039" relation="include">
        </childnode>
      </node>
      <node id="240044">
        <label>mpi.h</label>
      </node>
      <node id="240060">
        <label>vt/utils/tls/tls.h</label>
        <link refid="tls_8h"/>
        <childnode refid="240003" relation="include">
        </childnode>
        <childnode refid="240061" relation="include">
        </childnode>
        <childnode refid="240062" relation="include">
        </childnode>
      </node>
      <node id="240058">
        <label>vt/runtime/component/component_pack.impl.h</label>
        <link refid="component__pack_8impl_8h"/>
        <childnode refid="240045" relation="include">
        </childnode>
      </node>
      <node id="240020">
        <label>vt/configs/types/types_rdma.h</label>
        <link refid="types__rdma_8h"/>
        <childnode refid="240004" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240007" relation="include">
        </childnode>
        <childnode refid="240019" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
      </node>
      <node id="240052">
        <label>vt/runtime/component/diagnostic.h</label>
        <link refid="diagnostic_8h"/>
      </node>
      <node id="240035">
        <label>type_traits</label>
      </node>
      <node id="240032">
        <label>vt/configs/error/pretty_print_message.h</label>
        <link refid="pretty__print__message_8h"/>
        <childnode refid="240017" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
      <node id="240061">
        <label>vt/utils/tls/null_tls.h</label>
        <link refid="null__tls_8h"/>
        <childnode refid="240003" relation="include">
        </childnode>
      </node>
      <node id="240003">
        <label>vt/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="240004" relation="include">
        </childnode>
        <childnode refid="240017" relation="include">
        </childnode>
        <childnode refid="240028" relation="include">
        </childnode>
      </node>
      <node id="240071">
        <label>algorithm</label>
      </node>
      <node id="240046">
        <label>vt/runtime/component/component.h</label>
        <link refid="component_8h"/>
        <childnode refid="240033" relation="include">
        </childnode>
        <childnode refid="240047" relation="include">
        </childnode>
        <childnode refid="240049" relation="include">
        </childnode>
        <childnode refid="240050" relation="include">
        </childnode>
        <childnode refid="240051" relation="include">
        </childnode>
        <childnode refid="240043" relation="include">
        </childnode>
      </node>
      <node id="240012">
        <label>vt/configs/debug/debug_printconst.h</label>
        <link refid="debug__printconst_8h"/>
      </node>
      <node id="240043">
        <label>memory</label>
      </node>
      <node id="240037">
        <label>vt/configs/error/config_assert.h</label>
        <link refid="config__assert_8h"/>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240038" relation="include">
        </childnode>
        <childnode refid="240064" relation="include">
        </childnode>
        <childnode refid="240066" relation="include">
        </childnode>
        <childnode refid="240063" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
      </node>
      <node id="240064">
        <label>vt/configs/error/assert_out_info.h</label>
        <link refid="assert__out__info_8h"/>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240018" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240065" relation="include">
        </childnode>
      </node>
      <node id="240036">
        <label>vt/configs/error/error.impl.h</label>
        <link refid="error_8impl_8h"/>
        <childnode refid="240017" relation="include">
        </childnode>
        <childnode refid="240006" relation="include">
        </childnode>
        <childnode refid="240030" relation="include">
        </childnode>
        <childnode refid="240034" relation="include">
        </childnode>
        <childnode refid="240032" relation="include">
        </childnode>
        <childnode refid="240015" relation="include">
        </childnode>
        <childnode refid="240021" relation="include">
        </childnode>
        <childnode refid="240035" relation="include">
        </childnode>
        <childnode refid="240027" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" prot="public">vt::util::adt::detail::Centroid</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1_histogram_approx" prot="public">vt::util::adt::HistogramApprox</innerclass>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1util">vt::util</innernamespace>
    <innernamespace refid="namespacevt_1_1util_1_1adt">vt::util::adt</innernamespace>
    <innernamespace refid="namespacevt_1_1util_1_1adt_1_1detail">vt::util::adt::detail</innernamespace>
    <innernamespace refid="namespacevt_1_1adt">vt::adt</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histogram_approx.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA<sp/>Toolkit<sp/>v.<sp/>1.0.0</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt<sp/>=&gt;<sp/>Virtual<sp/>Transport</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_VT_UTILS_ADT_HISTOGRAM_APPROX_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_VT_UTILS_ADT_HISTOGRAM_APPROX_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">vt/config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="namespacevt_1_1util_1_1adt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt" kindref="compound">vt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">adt<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespacevt_1_1util_1_1adt_1_1detail" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CountT&gt;</highlight></codeline>
<codeline lineno="68" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">Centroid</ref><sp/>{</highlight></codeline>
<codeline lineno="69" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" kindref="member">CountType</ref><sp/>=<sp/>CountT;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a566041829c6432cb574dec14a7686141" kindref="member">Centroid</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a7950a3f8199b064108e117106014b645" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a7950a3f8199b064108e117106014b645" kindref="member">Centroid</ref>(T<sp/>in_value,<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" kindref="member">CountType</ref><sp/>in_count)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref>(in_value),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>(in_count)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a16f468b91d64cd35579e5ca7785b7ff4" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a16f468b91d64cd35579e5ca7785b7ff4" kindref="member">getValue</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac8a85e340729654a913668059d34a278" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" kindref="member">CountType</ref><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac8a85e340729654a913668059d34a278" kindref="member">getCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a3d847e231f7e152242a78be89b41e55b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a3d847e231f7e152242a78be89b41e55b" kindref="member">setValue</ref>(T<sp/>in_value)<sp/>{<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref><sp/>=<sp/>in_value;<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a7abe96415d943f38db8381a7be593fde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a7abe96415d943f38db8381a7be593fde" kindref="member">setCount</ref>(<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" kindref="member">CountType</ref><sp/>in_count)<sp/>{<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref><sp/>=<sp/>in_count;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a781bd5bd78c178a2a4ee8c9a0c991d06" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a781bd5bd78c178a2a4ee8c9a0c991d06" kindref="member">addCount</ref>(<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" kindref="member">CountType</ref><sp/>in_add)<sp/>{<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref><sp/>+=<sp/>in_add;<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1acad584e6798cbc7619d2b09f3f0cc06b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1acad584e6798cbc7619d2b09f3f0cc06b" kindref="member">merge</ref>(<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">Centroid&lt;T, CountT&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref><sp/>&lt;=<sp/>std::numeric_limits&lt;CountT&gt;::max()<sp/>-<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Histogram<sp/>count<sp/>will<sp/>overflow<sp/>as<sp/>result<sp/>of<sp/>this<sp/>merge&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_count<sp/>=<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref><sp/>+<sp/>in.<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_value<sp/>=<sp/>((<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref>*<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>)<sp/>+<sp/>(in.<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref>*in.<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>))/new_count;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref><sp/>=<sp/>new_count;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref><sp/>=<sp/>new_value;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a8564071b97ee50cf6ee90510d9f90aac" kindref="member">exact_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a07ab1f2d6f0497b8b98ce27672d9f0b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a07ab1f2d6f0497b8b98ce27672d9f0b2" kindref="member">isExact</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a8564071b97ee50cf6ee90510d9f90aac" kindref="member">exact_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a6d689befe39b63c2d22558863e56084f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(Centroid&lt;T,<sp/>CountT&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>c1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c1.value_<sp/>&lt;<sp/>val;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline lineno="157" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ad681c6c08ec1b8c48895b75ec370fa84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ad681c6c08ec1b8c48895b75ec370fa84" kindref="member">serialize</ref>(SerializerT&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a8564071b97ee50cf6ee90510d9f90aac" kindref="member">exact_</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="164" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a17b351e747aba8aa88699a4d9137a692" kindref="member">value_</ref><sp/>=<sp/>{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac3815361e4f13eeb8b2863d2eb8db1dd" kindref="member">CountType</ref><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac9df992e5ea17280b5d49bd0defa8c28" kindref="member">count_</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166" refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a8564071b97ee50cf6ee90510d9f90aac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a8564071b97ee50cf6ee90510d9f90aac" kindref="member">exact_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal">};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>detail<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CountT&gt;</highlight></codeline>
<codeline lineno="192" refid="structvt_1_1util_1_1adt_1_1_histogram_approx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx" kindref="compound">HistogramApprox</ref><sp/>{</highlight></codeline>
<codeline lineno="193" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>=<sp/>CountT;</highlight></codeline>
<codeline lineno="194" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">CentroidType</ref><sp/>=<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">detail::Centroid&lt;T, CountType&gt;</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1_1adt_1a486971e142bc22434d6afe695c43b599" kindref="member">HistogramApprox</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>serialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3b78cb4504ac095d913cefe1db3b442a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3b78cb4504ac095d913cefe1db3b442a" kindref="member">HistogramApprox</ref>(<ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>in_max_centroids)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>max_centroids_(in_max_centroids)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3beb5b6e74470f8b6bf295217d5ff843" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3beb5b6e74470f8b6bf295217d5ff843" kindref="member">getMax</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_;<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ab024713bdb28ef694096f3865236faa3" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ab024713bdb28ef694096f3865236faa3" kindref="member">getMin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_;<sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1af61bc8614a5096610387643fc05bf2e9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1af61bc8614a5096610387643fc05bf2e9" kindref="member">getCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_count_;<sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a7d691b9a2139ae2d320a39c1d8fbabab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a7d691b9a2139ae2d320a39c1d8fbabab" kindref="member">add</ref>(T<sp/>value,<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>num_times<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>min_)<sp/>{<sp/>min_<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>max_)<sp/>{<sp/>max_<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>\c<sp/>num_times<sp/>to<sp/>total<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>total_count_<sp/>+=<sp/>num_times;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>an<sp/>index<sp/>k<sp/>such<sp/>that<sp/>value_k<sp/>&lt;=<sp/>value<sp/>&lt;<sp/>value_{k+1}<sp/>using<sp/>a<sp/>O(lg<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>on<sp/>the<sp/>underlying<sp/>centroids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::lower_bound(cs_.begin(),<sp/>cs_.end(),<sp/>value);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>k<sp/>=<sp/>it<sp/>-<sp/>cs_.begin();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>found<sp/>a<sp/>valid<sp/>value<sp/>and<sp/>it&apos;s<sp/>exactly<sp/>equal,<sp/>we<sp/>are<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>cs_.size()<sp/>and<sp/>cs_[k].getValue()<sp/>==<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs_[k].addCount(num_times);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>an<sp/>element<sp/>right<sp/>before<sp/>current<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>cs_.insert(it,<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">CentroidType</ref>{value,<sp/>num_times});</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>are<sp/>at<sp/>capacity;<sp/>otherwise<sp/>nothing<sp/>to<sp/>merge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs_.size()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max_centroids_))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>a<sp/>centroid<sp/>by<sp/>merging<sp/>the<sp/>optimal<sp/>pick</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeOneCentroid();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1afbaecd0105590bf33bbf73611fea5a5c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1afbaecd0105590bf33bbf73611fea5a5c" kindref="member">quantile</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(!(p<sp/>&lt;<sp/>0.0<sp/>||<sp/>p<sp/>&gt;<sp/>1.0),<sp/></highlight><highlight class="stringliteral">&quot;percentile<sp/>must<sp/>be<sp/>between<sp/>0.0<sp/>and<sp/>1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(total_count_<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>have<sp/>at<sp/>least<sp/>one<sp/>value<sp/>to<sp/>calculate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>p<sp/>*<sp/>total_count_;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pv<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>last<sp/>two<sp/>consecutive<sp/>centroids<sp/>(ci,<sp/>cj)<sp/>such<sp/>that<sp/>the<sp/>sum<sp/>of<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>centroid<sp/>weights<sp/>up<sp/>to<sp/>ci<sp/>plus<sp/>half<sp/>of<sp/>cj<sp/>is<sp/>at<sp/>most<sp/>t.<sp/>This<sp/>implies<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>quantile<sp/>is<sp/>between<sp/>ci<sp/>and<sp/>cj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>i<sp/>&lt;<sp/>cs_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>cs_[i].getCount()<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>+<sp/>pv<sp/>+<sp/>v<sp/>&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>v<sp/>+<sp/>pv;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Border<sp/>centroids<sp/>give<sp/>a<sp/>more<sp/>precise<sp/>approximation<sp/>of<sp/>the<sp/>quantiles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>centroids<sp/>=<sp/>getBorderCentroids(i);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ci<sp/>=<sp/>std::get&lt;0&gt;(centroids);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cj<sp/>=<sp/>std::get&lt;1&gt;(centroids);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>found<sp/>exact<sp/>centroids,<sp/>return<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci.isExact()<sp/>and<sp/>cj.isExact())<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cj.getValue();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>paper;<sp/>we<sp/>are<sp/>solving<sp/>a<sp/>quadratic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>cx.p<sp/>=<sp/>cx.getValue(),<sp/>cx.m<sp/>=<sp/>cx.getCount()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>u<sp/>such<sp/>that<sp/>t-s<sp/>=<sp/>(ci.m<sp/>+<sp/>mu)/2<sp/>*<sp/>(u-ci.p)/(cj.p<sp/>-<sp/>ci.p),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>mu<sp/>=<sp/>ci.m<sp/>+<sp/>(u-ci.p)*(cj.m<sp/>-<sp/>ci.m)/(cj.p<sp/>-<sp/>ci.p).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>ci.getCount();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>ci.getValue();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mj<sp/>=<sp/>cj.getCount();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pj<sp/>=<sp/>cj.getValue();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>t<sp/>-<sp/>s;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>mj<sp/>-<sp/>mi;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pi<sp/>+<sp/>(pj<sp/>-<sp/>pi)<sp/>*<sp/>(d<sp/>/<sp/>mi);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>2.0<sp/>*<sp/>ci.getCount();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>-2.0<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(-b<sp/>+<sp/>std::sqrt(b<sp/>*<sp/>b<sp/>-<sp/>4<sp/>*<sp/>a<sp/>*<sp/>c))<sp/>/<sp/>(2<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pi<sp/>+<sp/>(pj<sp/>-<sp/>pi)<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1adc37c23f9b9d846e4fb0f7b788cb54de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1adc37c23f9b9d846e4fb0f7b788cb54de" kindref="member">estimateNumValues</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;=<sp/>max_)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_count_;<sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>min_)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>an<sp/>index<sp/>k<sp/>such<sp/>that<sp/>p_k<sp/>&lt;=<sp/>p<sp/>&lt;<sp/>p_{k+1}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::lower_bound(cs_.begin(),<sp/>cs_.end(),<sp/>p);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>k<sp/>=<sp/>it<sp/>-<sp/>cs_.begin();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>\c<sp/>std::lower_bound<sp/>doesn&apos;t<sp/>quite<sp/>do<sp/>what<sp/>we<sp/>need<sp/>(when<sp/>p<sp/>==<sp/>p_k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cs_[k].<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a16f468b91d64cd35579e5ca7785b7ff4" kindref="member">getValue</ref>()<sp/>==<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>is<sp/>equivalent<sp/>to<sp/>what<sp/>the<sp/>above<sp/>code<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>\c<sp/>std::lower_bound<sp/>does:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::size_t<sp/>k<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(;<sp/>k<sp/>&lt;<sp/>cs_.size();<sp/>k++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(cs_[k].getValue()<sp/>&gt;<sp/>p)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>cs_[i].getCount();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>centroids<sp/>=<sp/>getBorderCentroids(k);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ci<sp/>=<sp/>std::get&lt;0&gt;(centroids);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cj<sp/>=<sp/>std::get&lt;1&gt;(centroids);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>ci.getCount();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>ci.getValue();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mj<sp/>=<sp/>cj.getCount();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pj<sp/>=<sp/>cj.getValue();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>improvement<sp/>on<sp/>the<sp/>paper<sp/>when<sp/>we<sp/>know<sp/>the<sp/>estimation<sp/>is<sp/>exact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>it<sp/>was<sp/>never<sp/>merged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci.isExact()<sp/>&amp;&amp;<sp/>(cj.isExact()<sp/>||<sp/>pi<sp/>==<sp/>p))<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+<sp/>mi;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>formula<sp/>for<sp/>approximating<sp/>across<sp/>the<sp/>centroids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(p<sp/>-<sp/>pi)<sp/>/<sp/>(pj<sp/>-<sp/>pi);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>mi<sp/>+<sp/>(mj<sp/>-<sp/>mi)<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>est<sp/>=<sp/>s<sp/>+<sp/>mi<sp/>/<sp/>2.0<sp/>+<sp/>(mi<sp/>+<sp/>b)<sp/>*<sp/>x<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>est;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1af3a3a4065892e90e346fdfbf6060dc9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1af3a3a4065892e90e346fdfbf6060dc9c" kindref="member">mergeIn</ref>(<ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx" kindref="compound">HistogramApprox&lt;T, CountType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in_hist)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in_cs<sp/>=<sp/>in_hist.<ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac23b01ef594bcdd86859becf7d81c3b2" kindref="member">getCentroids</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max/used<sp/>centroids<sp/>for<sp/>the<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cur_max_centroids<sp/>=<sp/>getMaxCentroids();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cur_used_centroids<sp/>=<sp/>getNumCentroids();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>centroids<sp/>used<sp/>for<sp/>input<sp/>histogram;<sp/>worst<sp/>case<sp/>we<sp/>will<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>many<sp/>to<sp/>insert<sp/>without<sp/>any<sp/>merges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>in_num_centroids<sp/>=<sp/>in_hist.<ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1acdc73bd403084f66fc7d6011e4853ff6" kindref="member">getNumCentroids</ref>();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>to:<sp/>this-&gt;max<sp/>+<sp/>in_hist.used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_max_centroids<sp/>-<sp/>cur_used_centroids<sp/>&lt;<sp/>in_num_centroids)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setMaxCentroids(cur_max_centroids<sp/>+<sp/>in_num_centroids);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>in<sp/>all<sp/>the<sp/>centroids<sp/>from<sp/>the<sp/>input<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>c<sp/>:<sp/>in_cs)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add(c.getValue(),<sp/>c.getCount());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pare<sp/>the<sp/>histogram<sp/>down<sp/>to<sp/>the<sp/>allowed<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>pareToNewMaxCentroids(cur_max_centroids);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a740842719c1af07e00fcfaa4093dc193" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;CountType&gt;<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a740842719c1af07e00fcfaa4093dc193" kindref="member">computeFixedBuckets</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_buckets)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>getMax()<sp/>-<sp/>getMin();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bucket_size<sp/>=<sp/>r<sp/>/<sp/>n_buckets;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>buckets;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_buckets;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>getMin()<sp/>+<sp/>bucket_size*(i+1);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>number<sp/>of<sp/>values<sp/>that<sp/>fall<sp/>less<sp/>than<sp/>this<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_vals<sp/>=<sp/>estimateNumValues(q);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buckets.push_back(n_vals);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CountType&gt;<sp/>segments;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>segments.resize(n_buckets);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>n_buckets<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments[i]<sp/>=<sp/>std::round(buckets[i]);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments[i]<sp/>=<sp/>std::round(buckets[i]<sp/>-<sp/>buckets[i-1]);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segments;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac23b01ef594bcdd86859becf7d81c3b2" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;CentroidType&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac23b01ef594bcdd86859becf7d81c3b2" kindref="member">getCentroids</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs_;<sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a26c7f2922772baf00c50dcf5e88ad023" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a26c7f2922772baf00c50dcf5e88ad023" kindref="member">dump</ref>()<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="debug__print_8h_1ad4964b98cfd2a0b5665f3a481a1a61fe" kindref="member">vt_print</ref>(</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689a5b2fa777115f03c6d550ec721c0a93a5" kindref="member">gen</ref>,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dump:<sp/>count={},<sp/>min={},<sp/>max={},<sp/>cs_.size={}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_count_,<sp/>min_,<sp/>max_,<sp/>cs_.size()</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cs_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debug__print_8h_1ad4964b98cfd2a0b5665f3a481a1a61fe" kindref="member">vt_print</ref>(</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689a5b2fa777115f03c6d550ec721c0a93a5" kindref="member">gen</ref>,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t<sp/>i={}<sp/>value={},<sp/>count={}\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>cs_[i].<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a16f468b91d64cd35579e5ca7785b7ff4" kindref="member">getValue</ref>(),<sp/>cs_[i].<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1ac8a85e340729654a913668059d34a278" kindref="member">getCount</ref>()</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ada0f64fb2e7d5f1e7827bec2762a1291" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ada0f64fb2e7d5f1e7827bec2762a1291" kindref="member">buildContainerString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>container_info<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}<sp/>{}<sp/>{}<sp/>[&quot;</highlight><highlight class="normal">,<sp/>total_count_,<sp/>min_,<sp/>max_);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>c<sp/>:<sp/>cs_)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>container_info<sp/>+=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{{{}<sp/>{}}}&quot;</highlight><highlight class="normal">,<sp/>c.getValue(),<sp/>c.getCount());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>container_info<sp/>+=<sp/>i<sp/>!=<sp/>cs_.size()<sp/>-<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container_info;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline lineno="498" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aae8a321f42f550b711aeeb50ac8ef913" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aae8a321f42f550b711aeeb50ac8ef913" kindref="member">serialize</ref>(SerializerT&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>max_centroids_;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>total_count_;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>min_;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>max_;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>cs_;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a5b6af36eb1219d09bf17349731ed66ff" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a5b6af36eb1219d09bf17349731ed66ff" kindref="member">getMaxCentroids</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_centroids_;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1acdc73bd403084f66fc7d6011e4853ff6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1acdc73bd403084f66fc7d6011e4853ff6" kindref="member">getNumCentroids</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cs_.size();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="534" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa23f54efa5c883d2759ceacd3f32279a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa23f54efa5c883d2759ceacd3f32279a" kindref="member">setMaxCentroids</ref>(<ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>in_max_centroids)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>max_centroids_<sp/>=<sp/>in_max_centroids;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a8827a511e5b810ffca9da33d769bc4b9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a8827a511e5b810ffca9da33d769bc4b9" kindref="member">pareToNewMaxCentroids</ref>(<ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>in_max_centroids)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>removing<sp/>the<sp/>best<sp/>centroid<sp/>until<sp/>we<sp/>pare<sp/>down<sp/>to<sp/>the<sp/>new<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cs_.size()<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in_max_centroids))<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removeOneCentroid();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>set<sp/>the<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>setMaxCentroids(in_max_centroids);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a948e8a7dec4f205fc5bf1d1b896211b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a948e8a7dec4f205fc5bf1d1b896211b1" kindref="member">removeOneCentroid</ref>()<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>best<sp/>candidate<sp/>for<sp/>merging<sp/>two<sp/>centroids<sp/>since<sp/>we<sp/>are<sp/>over<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>space<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min_idx<sp/>=<sp/>findMinimumCentroidPair();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>cs_[min_idx].merge(cs_[min_idx+1]);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shift<sp/>centroids<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>min_idx<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>cs_.size()<sp/>-<sp/>1;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs_[j]<sp/>=<sp/>cs_[j+1];</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>last<sp/>element,<sp/>now<sp/>dead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>cs_.pop_back();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0bba7a9d03149be996f45bfe245abd03" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0bba7a9d03149be996f45bfe245abd03" kindref="member">findMinimumCentroidPair</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>min_dist<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>min_index<sp/>=<sp/>cs_.size();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cs_.size()<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walk<sp/>through<sp/>sorted<sp/>centroids<sp/>calculating<sp/>the<sp/>distance<sp/>between:<sp/>cs_[i]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>cs_[+1];<sp/>return<sp/>the<sp/>best<sp/>match<sp/>for<sp/>merging<sp/>(min<sp/>distance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>std::fabs(cs_[i+1].<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a16f468b91d64cd35579e5ca7785b7ff4" kindref="member">getValue</ref>()<sp/>-<sp/>cs_[i].<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid_1a16f468b91d64cd35579e5ca7785b7ff4" kindref="member">getValue</ref>());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(min_index<sp/>!=<sp/>cs_.size(),<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>valid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_index;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac376fd975845204cca3425c8517376f6" refkind="member"><highlight class="normal"><sp/><sp/>std::tuple&lt;CentroidType,<sp/>CentroidType&gt;<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac376fd975845204cca3425c8517376f6" kindref="member">getBorderCentroids</ref>(std::size_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(<ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">CentroidType</ref>{min_,<sp/>0},<sp/>cs_[0]);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>cs_.size())<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(cs_[cs_.size()-1],<sp/><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">CentroidType</ref>{max_,<sp/>0});</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(cs_[i-1],<sp/>cs_[i]);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="617" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a080a663250287f2c4bb1f2db58d60cf3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>max_centroids_<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="618" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aad876385bbf54051a56e736ef403f7a9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref><sp/>total_count_<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="619" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0cf82abced8b354d01757093e4510d46" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>min_<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="620" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a4bab4f7bffe5cd03a70be4013bd18403" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>max_<sp/>=<sp/>std::numeric_limits&lt;T&gt;::lowest();<sp/></highlight></codeline>
<codeline lineno="621" refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a777a1384cff8b2bd7e0cd8b8a7c4def4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;CentroidType&gt;<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a777a1384cff8b2bd7e0cd8b8a7c4def4" kindref="member">cs_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal">};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>vt::util::adt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="namespacevt_1_1adt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt" kindref="compound">vt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">adt<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CountT&gt;</highlight></codeline>
<codeline lineno="629" refid="namespacevt_1_1adt_1a486971e142bc22434d6afe695c43b599" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx" kindref="compound">HistogramApprox</ref><sp/>=<sp/><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx" kindref="compound">util::adt::HistogramApprox&lt;T, CountT&gt;</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">}}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>vt::adt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_VT_UTILS_ADT_HISTOGRAM_APPROX_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/vt/utils/adt/histogram_approx.h"/>
  </compounddef>
</doxygen>
