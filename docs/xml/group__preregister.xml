<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__preregister" kind="group">
    <compoundname>preregister</compoundname>
    <title>Basic Active Message Send with Pre-Registered Handler</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__preregister_1ga0d38199d7351ef980e166d8aaabe1be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgSz</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>sendMsgSz</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>HandlerType</type>
          <declname>han</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>ByteType</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para>Only invoke this variant if you know the size or the <computeroutput>sizeof(Message)</computeroutput> is different than the number of bytes you actually want to send</para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="568" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="198" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>HandlerType</type>
          <declname>han</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send (shared ptr) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="589" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="187" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1gad30a4e31445d40f9c3c36521fc04f975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>HandlerType</type>
          <declname>han</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>sendMessage</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="611" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="210" bodyend="218"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Send a message to pre-registered active message handler. </para>    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyMsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_a)<sp/>:<sp/>a_(in_a)<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>myHandler(MyMsg*<sp/>msg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>work<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sendCode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Explicit<sp/>user<sp/>registration<sp/>of<sp/>the<sp/>handler,<sp/>must<sp/>be<sp/>ordered<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>collective<sp/>invocation<sp/>across<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>han<sp/>=<sp/><ref refid="structvt_1_1messaging_1_1_active_messenger_1a018435c71415f6f10dc578230397a85c" kindref="member">registerNewHandler</ref>(my_handler);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>makeMessage&lt;MyMsg&gt;(156);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-&gt;<ref refid="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" kindref="member">sendMsg</ref>(29,<sp/>han,<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
