<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1param_1_1_param" kind="struct" language="C++" prot="public">
    <compoundname>vt::param::Param</compoundname>
    <includes refid="parameterization_8h" local="no">parameterization.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1acaea25a7afac63671b36abff3c4d6e00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendDataTuple</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const &amp;han, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>sendDataTuple</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="119" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="119" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a8d670f74eb5f0a1b5ea312e8b174b648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::staticCheckCopyable</definition>
        <argsstring>()</argsstring>
        <name>staticCheckCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="136" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a2615b77a887582b584f2e508d7b7b8e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendDataMsg</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const &amp;__attribute__((unused)) han, DataMsg *m)</argsstring>
        <name>sendDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;__attribute__((unused))</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="146" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1aea67124175d1d028b36f4d3e38b4dd48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Tuple tup, NonType&lt; T, value &gt; __attribute__((unused)) non=NonType&lt; T, value &gt;())</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>tup</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
          <defval><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="156" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a40cf6112cd6f7a4167680e8fa5c1eb1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, DataMsg&lt; std::tuple&lt; Args... &gt;&gt; *msg, NonType&lt; T, value &gt; __attribute__((unused)) non=NonType&lt; T, value &gt;())</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; std::tuple&lt; Args... &gt;&gt; *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
          <defval><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="165" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a18098e4b5fe1dbf053db7d8d8d3317d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, NonType&lt; T, value &gt; __attribute__((unused)) non, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="175" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="175" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a6ad80695f54db7da23e920bef98af13a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="193" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ad665f1614785929383007acbc26a9a41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendDataHelperFunctor</definition>
        <argsstring>(NodeType const &amp;dest, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>sendDataHelperFunctor</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="202" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1af49d5db588fcdbf6355cd6a055666531" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Tuple tup)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="212" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a4ab35026b32979ddba2708379ebe8185" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, DataMsg&lt; std::tuple&lt; Args... &gt;&gt; *msg)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; std::tuple&lt; Args... &gt;&gt; *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="217" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="217" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1aba248d94d04ed2d6247af406685cdb36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="229" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="229" bodyend="243"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/parameterization/parameterization.h" line="116" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="116" bodyend="244"/>
    <listofallmembers>
      <member refid="structvt_1_1param_1_1_param_1aea67124175d1d028b36f4d3e38b4dd48" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a40cf6112cd6f7a4167680e8fa5c1eb1e" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a18098e4b5fe1dbf053db7d8d8d3317d8" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a6ad80695f54db7da23e920bef98af13a" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1af49d5db588fcdbf6355cd6a055666531" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a4ab35026b32979ddba2708379ebe8185" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1aba248d94d04ed2d6247af406685cdb36" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ad665f1614785929383007acbc26a9a41" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataHelperFunctor</name></member>
      <member refid="structvt_1_1param_1_1_param_1a2615b77a887582b584f2e508d7b7b8e6" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataMsg</name></member>
      <member refid="structvt_1_1param_1_1_param_1acaea25a7afac63671b36abff3c4d6e00" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataTuple</name></member>
      <member refid="structvt_1_1param_1_1_param_1a8d670f74eb5f0a1b5ea312e8b174b648" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>staticCheckCopyable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
