<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1param_1_1_param" kind="struct" language="C++" prot="public">
    <compoundname>vt::param::Param</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; Param &gt;</basecompoundref>
    <includes refid="parameterization_8h" local="no">parameterization.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a848380f8509c11b8bffcf0724af77127" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::param::Param::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="142" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1adf25c8f5db146087b244ab244f874000" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendDataTuple</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const han, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>sendDataTuple</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>han</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="145" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="145" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a8d670f74eb5f0a1b5ea312e8b174b648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::staticCheckCopyable</definition>
        <argsstring>()</argsstring>
        <name>staticCheckCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="159" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a5a4f7cdd18507a9012936f138397d075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendDataMsg</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const __attribute__((unused)) han, MsgSharedPtr&lt; DataMsg &gt; m)</argsstring>
        <name>sendDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const __attribute__((unused))</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref> &gt;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="169" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="169" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a6b2fedacd76ee622efdb14038b0d82fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Tuple tup, NonType&lt; T, value &gt; __attribute__((unused)) non=NonType&lt; T, value &gt;())</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>tup</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
          <defval><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="178" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="178" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1af0791eb37c18d175bdcce5e2f2384427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; DataMsg&lt; std::tuple&lt; Args... &gt;&gt;&gt; msg, NonType&lt; T, value &gt; __attribute__((unused)) non=NonType&lt; T, value &gt;())</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; std::tuple&lt; Args... &gt;&gt;&gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
          <defval><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="187" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ac71ae9da515916042649b9c6074cbdf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, NonType&lt; T, value &gt; __attribute__((unused)) non, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="197" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="197" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ae748b6bd022c33e842a83a50865454be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="212" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a51452ecb0d885e4a3755df33657d613e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendDataHelperFunctor</definition>
        <argsstring>(NodeType const &amp;dest, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>sendDataHelperFunctor</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="221" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="221" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ad7524b5a6d2609de674fe4040d2fb90d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Tuple tup)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="231" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1aa2405fed990331c40b9f8e05e8649a26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; DataMsg&lt; std::tuple&lt; Args... &gt;&gt;&gt; msg)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; std::tuple&lt; Args... &gt;&gt;&gt;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="236" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="236" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a706146de8f6eab423f7e5c7872587519" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="250" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="250" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a5219f9e3f445450d223cad10eda7498f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::serialize</definition>
        <argsstring>(Serializer &amp;)</argsstring>
        <name>serialize</name>
        <param>
          <type>Serializer &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="264" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="264" bodyend="264"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An experimental component for parameterizing handlers. </para>    </briefdescription>
    <detaileddescription>
<para>Clean support for parameterization does not exist until C++17. This component is an attempt at parameterizing for C++14 with non-type templates.</para><para><simplesect kind="warning"><para>This is an experimental component. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2839">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="2840" relation="public-inheritance">
        </childnode>
        <childnode refid="2843" relation="public-inheritance">
        </childnode>
        <childnode refid="2844" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2838">
        <label>vt::runtime::component::Component&lt; Param &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="2839" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2842">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="2840">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="2841" relation="public-inheritance">
        </childnode>
        <childnode refid="2842" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2837">
        <label>vt::param::Param</label>
        <link refid="structvt_1_1param_1_1_param"/>
        <childnode refid="2838" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2841">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="2843">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="2844">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2847">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="2848" relation="public-inheritance">
        </childnode>
        <childnode refid="2851" relation="public-inheritance">
        </childnode>
        <childnode refid="2852" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2846">
        <label>vt::runtime::component::Component&lt; Param &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="2847" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2850">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="2848">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="2849" relation="public-inheritance">
        </childnode>
        <childnode refid="2850" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2845">
        <label>vt::param::Param</label>
        <link refid="structvt_1_1param_1_1_param"/>
        <childnode refid="2846" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2849">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="2851">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="2852">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/parameterization/parameterization.h" line="140" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="140" bodyend="265"/>
    <listofallmembers>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>component_id_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>dumpState</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>fatalError</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>initialize</name></member>
      <member refid="structvt_1_1param_1_1_param_1a848380f8509c11b8bffcf0724af77127" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>name</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1param_1_1_param_1a6b2fedacd76ee622efdb14038b0d82fe" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1af0791eb37c18d175bdcce5e2f2384427" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ac71ae9da515916042649b9c6074cbdf3" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ae748b6bd022c33e842a83a50865454be" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ad7524b5a6d2609de674fe4040d2fb90d" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1aa2405fed990331c40b9f8e05e8649a26" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a706146de8f6eab423f7e5c7872587519" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a51452ecb0d885e4a3755df33657d613e" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataHelperFunctor</name></member>
      <member refid="structvt_1_1param_1_1_param_1a5a4f7cdd18507a9012936f138397d075" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataMsg</name></member>
      <member refid="structvt_1_1param_1_1_param_1adf25c8f5db146087b244ab244f874000" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataTuple</name></member>
      <member refid="structvt_1_1param_1_1_param_1a5219f9e3f445450d223cad10eda7498f" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>startup</name></member>
      <member refid="structvt_1_1param_1_1_param_1a8d670f74eb5f0a1b5ea312e8b174b648" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>staticCheckCopyable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>staticInit</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::param::Param</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::param::Param</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
