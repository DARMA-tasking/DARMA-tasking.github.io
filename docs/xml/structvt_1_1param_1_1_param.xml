<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1param_1_1_param" kind="struct" language="C++" prot="public">
    <compoundname>vt::param::Param</compoundname>
    <includes refid="parameterization_8h" local="no">parameterization.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ac12a098c0d64dcd483cdb590874e45ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendDataTuple</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const &amp;han, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>sendDataTuple</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="133" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="133" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a8d670f74eb5f0a1b5ea312e8b174b648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::staticCheckCopyable</definition>
        <argsstring>()</argsstring>
        <name>staticCheckCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="147" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="147" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1acad0af6824812d028e5e0f088b4757dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendDataMsg</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const &amp;__attribute__((unused)) han, MsgSharedPtr&lt; DataMsg &gt; m)</argsstring>
        <name>sendDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;__attribute__((unused))</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref> &gt;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="157" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a6b2fedacd76ee622efdb14038b0d82fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Tuple tup, NonType&lt; T, value &gt; __attribute__((unused)) non=NonType&lt; T, value &gt;())</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>tup</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
          <defval><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="165" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1af0791eb37c18d175bdcce5e2f2384427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; DataMsg&lt; std::tuple&lt; Args... &gt;&gt;&gt; msg, NonType&lt; T, value &gt; __attribute__((unused)) non=NonType&lt; T, value &gt;())</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; std::tuple&lt; Args... &gt;&gt;&gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
          <defval><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="174" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="174" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ac71ae9da515916042649b9c6074cbdf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, NonType&lt; T, value &gt; __attribute__((unused)) non, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1param_1_1_non_type" kindref="compound">NonType</ref>&lt; T, value &gt; __attribute__((unused))</type>
          <declname>non</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="184" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="184" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ae748b6bd022c33e842a83a50865454be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="199" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a51452ecb0d885e4a3755df33657d613e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendDataHelperFunctor</definition>
        <argsstring>(NodeType const &amp;dest, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>sendDataHelperFunctor</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="208" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="208" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1ad7524b5a6d2609de674fe4040d2fb90d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Tuple tup)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="218" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1aa2405fed990331c40b9f8e05e8649a26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; DataMsg&lt; std::tuple&lt; Args... &gt;&gt;&gt; msg)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; std::tuple&lt; Args... &gt;&gt;&gt;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="223" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="223" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1param_1_1_param_1a706146de8f6eab423f7e5c7872587519" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::Param::sendData</definition>
        <argsstring>(NodeType const &amp;dest, Args &amp;&amp;... a)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="237" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="237" bodyend="248"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/parameterization/parameterization.h" line="130" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="130" bodyend="249"/>
    <listofallmembers>
      <member refid="structvt_1_1param_1_1_param_1a6b2fedacd76ee622efdb14038b0d82fe" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1af0791eb37c18d175bdcce5e2f2384427" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ac71ae9da515916042649b9c6074cbdf3" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ae748b6bd022c33e842a83a50865454be" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1ad7524b5a6d2609de674fe4040d2fb90d" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1aa2405fed990331c40b9f8e05e8649a26" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a706146de8f6eab423f7e5c7872587519" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendData</name></member>
      <member refid="structvt_1_1param_1_1_param_1a51452ecb0d885e4a3755df33657d613e" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataHelperFunctor</name></member>
      <member refid="structvt_1_1param_1_1_param_1acad0af6824812d028e5e0f088b4757dd" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataMsg</name></member>
      <member refid="structvt_1_1param_1_1_param_1ac12a098c0d64dcd483cdb590874e45ca" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>sendDataTuple</name></member>
      <member refid="structvt_1_1param_1_1_param_1a8d670f74eb5f0a1b5ea312e8b174b648" prot="public" virt="non-virtual"><scope>vt::param::Param</scope><name>staticCheckCopyable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
