<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1_invokable" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::Invokable</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BaseProxyT</basecompoundref>
    <includes refid="invokable_8h" local="no">invokable.h</includes>
    <templateparamlist>
      <param>
        <type>typename ColT</type>
      </param>
      <param>
        <type>typename IndexT</type>
      </param>
      <param>
        <type>typename BaseProxyT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_invokable_1a6e64beec04b07f74b75ff37d088df3fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;::Invokable</definition>
        <argsstring>()=default</argsstring>
        <name>Invokable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/invoke/invokable.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_invokable_1ac560937c6424cfb4471ba165914f0702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;::Invokable</definition>
        <argsstring>(typename BaseProxyT::ProxyType const &amp;in_proxy, typename BaseProxyT::ElementProxyType const &amp;in_elm)</argsstring>
        <name>Invokable</name>
        <param>
          <type>typename BaseProxyT::ProxyType const &amp;</type>
          <declname>in_proxy</declname>
        </param>
        <param>
          <type>typename BaseProxyT::ElementProxyType const &amp;</type>
          <declname>in_elm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/invoke/invokable.h" line="56" column="1" bodyfile="src/vt/vrt/collection/invoke/invokable.impl.h" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_invokable_1ab7ad9b74cbf75b0f1df13e0cc88311b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;::invoke</definition>
        <argsstring>(Args &amp;&amp;... args) const</argsstring>
        <name>invoke</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke member message handler on a collection element The function will be invoked inline without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for creating the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/invoke/invokable.h" line="70" column="1" bodyfile="src/vt/vrt/collection/invoke/invokable.impl.h" bodystart="64" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_invokable_1ab7ad9b74cbf75b0f1df13e0cc88311b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;::invoke</definition>
        <argsstring>(Args &amp;&amp;... args) const</argsstring>
        <name>invoke</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke message handler on a collection element The function will be invoked inline without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for creating the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/invoke/invokable.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_invokable_1a7e79eec4ab212b7e940c0ffaa8a2c171" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>Type</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;::invoke</definition>
        <argsstring>(Args &amp;&amp;... args) const</argsstring>
        <name>invoke</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke function &apos;f&apos; on a collection element The function will be invoked inline without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>function arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/invoke/invokable.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2246">
        <label>vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1_invokable"/>
        <childnode refid="2247" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2247">
        <label>BaseProxyT</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2248">
        <label>vt::vrt::collection::Invokable&lt; ColT, IndexT, BaseProxyT &gt;</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1_invokable"/>
        <childnode refid="2249" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2249">
        <label>BaseProxyT</label>
      </node>
    </collaborationgraph>
    <location file="src/vt/vrt/collection/invoke/invokable.h" line="54" column="1" bodyfile="src/vt/vrt/collection/invoke/invokable.h" bodystart="54" bodyend="92"/>
    <listofallmembers>
      <member refid="structvt_1_1vrt_1_1collection_1_1_invokable_1a6e64beec04b07f74b75ff37d088df3fe" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Invokable</scope><name>Invokable</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_invokable_1ac560937c6424cfb4471ba165914f0702" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Invokable</scope><name>Invokable</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_invokable_1ab7ad9b74cbf75b0f1df13e0cc88311b7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Invokable</scope><name>invoke</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_invokable_1ab7ad9b74cbf75b0f1df13e0cc88311b7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Invokable</scope><name>invoke</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_invokable_1a7e79eec4ab212b7e940c0ffaa8a2c171" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Invokable</scope><name>invoke</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
