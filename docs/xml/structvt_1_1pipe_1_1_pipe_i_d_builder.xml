<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1_pipe_i_d_builder" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::PipeIDBuilder</compoundname>
    <includes refid="pipe__id_8h" local="no">pipe_id.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1acb826a923e3af487c922d1263375d00d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
        <definition>PipeType vt::pipe::PipeIDBuilder::createPipeID</definition>
        <argsstring>(PipeIDType const &amp;id, NodeType const &amp;node, bool const &amp;is_send_back=false, bool const &amp;is_persist=true)</argsstring>
        <name>createPipeID</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1a8aa7908de242917ac0922b9e9c85fea4" kindref="member">PipeIDType</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_send_back</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_persist</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="68" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1aba1c4bd52ca11ec80630cca91216c226" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeIDBuilder::setIsSendback</definition>
        <argsstring>(PipeType &amp;pipe, bool const &amp;is_send_back)</argsstring>
        <name>setIsSendback</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_send_back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="73" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1abbacf9d32122e6b0502a53c0e48e0297" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeIDBuilder::setIsPersist</definition>
        <argsstring>(PipeType &amp;pipe, bool const &amp;is_persist)</argsstring>
        <name>setIsPersist</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_persist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="74" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1a7562c08f180335fec1eb7adb41a35587" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeIDBuilder::setNode</definition>
        <argsstring>(PipeType &amp;pipe, NodeType const &amp;node)</argsstring>
        <name>setNode</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="75" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1a47d32ec9891e61c47eb96edc10db1e12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeIDBuilder::setID</definition>
        <argsstring>(PipeType &amp;pipe, PipeIDType const &amp;id)</argsstring>
        <name>setID</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1a8aa7908de242917ac0922b9e9c85fea4" kindref="member">PipeIDType</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="76" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1a5abea1b337eddd3c4958d563f69ee134" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pipe::PipeIDBuilder::isSendback</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>isSendback</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="77" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1aa41d388099f07c484914bc03be5749d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pipe::PipeIDBuilder::isPersist</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>isPersist</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="78" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1a7fb285d1a62b6d7fef4a04a195ce8ffd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::pipe::PipeIDBuilder::getNode</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>getNode</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="79" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_i_d_builder_1ac02b448be5ebc3545ae961e16263b78e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1pipe_1a8aa7908de242917ac0922b9e9c85fea4" kindref="member">PipeIDType</ref></type>
        <definition>PipeIDType vt::pipe::PipeIDBuilder::getPipeID</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>getPipeID</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/id/pipe_id.h" line="80" column="1" bodyfile="src/vt/pipe/id/pipe_id.cc" bodystart="103" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/pipe/id/pipe_id.h" line="67" column="1" bodyfile="src/vt/pipe/id/pipe_id.h" bodystart="67" bodyend="81"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1acb826a923e3af487c922d1263375d00d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>createPipeID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1a7fb285d1a62b6d7fef4a04a195ce8ffd" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>getNode</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1ac02b448be5ebc3545ae961e16263b78e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>getPipeID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1aa41d388099f07c484914bc03be5749d3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>isPersist</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1a5abea1b337eddd3c4958d563f69ee134" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>isSendback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1a47d32ec9891e61c47eb96edc10db1e12" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>setID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1abbacf9d32122e6b0502a53c0e48e0297" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>setIsPersist</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1aba1c4bd52ca11ec80630cca91216c226" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>setIsSendback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_i_d_builder_1a7562c08f180335fec1eb7adb41a35587" prot="public" virt="non-virtual"><scope>vt::pipe::PipeIDBuilder</scope><name>setNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
