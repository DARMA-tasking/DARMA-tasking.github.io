<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1ctx_1_1_base" kind="struct" language="C++" prot="public">
    <compoundname>vt::ctx::Base</compoundname>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_collection" prot="public" virt="non-virtual">vt::ctx::Collection&lt; IndexT &gt;</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_continuation" prot="public" virt="non-virtual">vt::ctx::Continuation</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_from_node" prot="public" virt="non-virtual">vt::ctx::FromNode</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_l_b_stats" prot="public" virt="non-virtual">vt::ctx::LBStats</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_set_context" prot="public" virt="non-virtual">vt::ctx::SetContext</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_t_d" prot="public" virt="non-virtual">vt::ctx::TD</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1ctx_1_1_trace" prot="public" virt="non-virtual">vt::ctx::Trace</derivedcompoundref>
    <includes refid="src_2vt_2context_2runnable__context_2base_8h" local="no">base.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_base_1a11811118c1c91d93e7679610bf8377f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual vt::ctx::Base::~Base</definition>
        <argsstring>()=default</argsstring>
        <name>~Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/runnable_context/base.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_base_1aab5524952e1bb163ccba5df64a303168" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void vt::ctx::Base::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <reimplementedby refid="structvt_1_1ctx_1_1_set_context_1aa882626f5fcf98cd6e8aa61c59395b5a">begin</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_collection_1a1555355c83dd6f692c03c66882b74846">begin</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_l_b_stats_1a209aad8645b7e7a4328b71c29f935da4">begin</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_t_d_1a5ba29186cd3ac75a48272e0ac050228b">begin</reimplementedby>
        <briefdescription>
<para>Invoked immediately before a task is executed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/runnable_context/base.h" line="75" column="1" bodyfile="src/vt/context/runnable_context/base.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_base_1a113bac732b2831caa8eed11609ccaf0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void vt::ctx::Base::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <reimplementedby refid="structvt_1_1ctx_1_1_continuation_1aab0f231b54f257740a902a6b3258a33a">end</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_set_context_1a17029268846a24e61fa35339e9bdcc10">end</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_collection_1afbbbbaa3a85469b7ddded1ded70bd83d">end</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_l_b_stats_1a55efc4d1d6eb579943b5b39d2a823328">end</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_t_d_1a5131b9af6b389c90c1ac908c7dcc59b9">end</reimplementedby>
        <briefdescription>
<para>Invoked immediately after a task is executed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/runnable_context/base.h" line="80" column="1" bodyfile="src/vt/context/runnable_context/base.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_base_1a445badaaad72b44313084b2c95a13003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void vt::ctx::Base::suspend</definition>
        <argsstring>()</argsstring>
        <name>suspend</name>
        <reimplementedby refid="structvt_1_1ctx_1_1_set_context_1a6c371395c3d947e751d661f47157ba46">suspend</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_collection_1a8355e824435241b61bb9774b4546c0de">suspend</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_l_b_stats_1a15d4c77ea06465f8e3a0b51c90bc6ddc">suspend</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_t_d_1aa0a190994d71eda5321da08464a810a9">suspend</reimplementedby>
        <briefdescription>
<para>Invoked when a task is suspended (for ULTs, when enabled) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/runnable_context/base.h" line="85" column="1" bodyfile="src/vt/context/runnable_context/base.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_base_1a303afabb40ed83057fbe30c744db95da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void vt::ctx::Base::resume</definition>
        <argsstring>()</argsstring>
        <name>resume</name>
        <reimplementedby refid="structvt_1_1ctx_1_1_set_context_1a5d0e979f3d601900223d0db9bb8992d3">resume</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_collection_1a4cf87cf7d38bd8d4706ffda41e31c9c6">resume</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_l_b_stats_1a099850f1bd53aafe650ed9e3958ca54b">resume</reimplementedby>
        <reimplementedby refid="structvt_1_1ctx_1_1_t_d_1aa21b5afe01312244e338eefecde83bc6">resume</reimplementedby>
        <briefdescription>
<para>Invoked when a handler is resumed (for ULTs, when enabled) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/runnable_context/base.h" line="90" column="1" bodyfile="src/vt/context/runnable_context/base.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_base_1ad704f380544dc7e874e23f5700c52db0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void vt::ctx::Base::send</definition>
        <argsstring>(NodeType dest, MsgSizeType size, bool bcast)</argsstring>
        <name>send</name>
        <reimplementedby refid="structvt_1_1ctx_1_1_l_b_stats_1af8d33aaf1858c87072cfbc19c5d649a8">send</reimplementedby>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a408e86a8c7c89309b52907dc5a513924" kindref="member">MsgSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bcast</declname>
        </param>
        <briefdescription>
<para>Invoked when a message is sent to any node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bcast</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the message is being broadcast or sent </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/runnable_context/base.h" line="99" column="1" bodyfile="src/vt/context/runnable_context/base.h" bodystart="99" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structvt_1_1ctx_1_1_base" kindref="compound">Base</ref> context for runnable tasks. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structvt_1_1ctx_1_1_base" kindref="compound">ctx::Base</ref></computeroutput> is used to create contexts that are associated with tasks wrapped with the <computeroutput>runnable::Runnable</computeroutput> class. When messages arrive and trigger a handler or other actions occur, contexts that inherit from <computeroutput><ref refid="structvt_1_1ctx_1_1_base" kindref="compound">Base</ref></computeroutput> can be used to maintain a particular context when that runnable is passed to the scheduler for later execution. The <computeroutput><ref refid="structvt_1_1ctx_1_1_base_1aab5524952e1bb163ccba5df64a303168" kindref="member">begin()</ref></computeroutput> and <computeroutput><ref refid="structvt_1_1ctx_1_1_base_1a113bac732b2831caa8eed11609ccaf0e" kindref="member">end()</ref></computeroutput> methods are called when the task starts and stops. If VT is built with user-level threads (ULTs), <computeroutput><ref refid="structvt_1_1ctx_1_1_base_1a445badaaad72b44313084b2c95a13003" kindref="member">suspend()</ref></computeroutput> and <computeroutput>resume</computeroutput> might be called if the thread that a task is running in suspends the stack mid-execution (typically waiting for a dependency). Thus, any context is expected to save all state in suspend and then return that state back during resume when the ULT is resumed. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="249">
        <label>vt::ctx::TD</label>
        <link refid="structvt_1_1ctx_1_1_t_d"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="248">
        <label>vt::ctx::SetContext</label>
        <link refid="structvt_1_1ctx_1_1_set_context"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="244">
        <label>vt::ctx::Collection&lt; IndexT &gt;</label>
        <link refid="structvt_1_1ctx_1_1_collection"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="250">
        <label>vt::ctx::Trace</label>
        <link refid="structvt_1_1ctx_1_1_trace"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="243">
        <label>vt::ctx::Base</label>
        <link refid="structvt_1_1ctx_1_1_base"/>
      </node>
      <node id="245">
        <label>vt::ctx::Continuation</label>
        <link refid="structvt_1_1ctx_1_1_continuation"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="246">
        <label>vt::ctx::FromNode</label>
        <link refid="structvt_1_1ctx_1_1_from_node"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
      <node id="247">
        <label>vt::ctx::LBStats</label>
        <link refid="structvt_1_1ctx_1_1_l_b_stats"/>
        <childnode refid="243" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/vt/context/runnable_context/base.h" line="68" column="1" bodyfile="src/vt/context/runnable_context/base.h" bodystart="68" bodyend="100"/>
    <listofallmembers>
      <member refid="structvt_1_1ctx_1_1_base_1aab5524952e1bb163ccba5df64a303168" prot="public" virt="virtual"><scope>vt::ctx::Base</scope><name>begin</name></member>
      <member refid="structvt_1_1ctx_1_1_base_1a113bac732b2831caa8eed11609ccaf0e" prot="public" virt="virtual"><scope>vt::ctx::Base</scope><name>end</name></member>
      <member refid="structvt_1_1ctx_1_1_base_1a303afabb40ed83057fbe30c744db95da" prot="public" virt="virtual"><scope>vt::ctx::Base</scope><name>resume</name></member>
      <member refid="structvt_1_1ctx_1_1_base_1ad704f380544dc7e874e23f5700c52db0" prot="public" virt="virtual"><scope>vt::ctx::Base</scope><name>send</name></member>
      <member refid="structvt_1_1ctx_1_1_base_1a445badaaad72b44313084b2c95a13003" prot="public" virt="virtual"><scope>vt::ctx::Base</scope><name>suspend</name></member>
      <member refid="structvt_1_1ctx_1_1_base_1a11811118c1c91d93e7679610bf8377f2" prot="public" virt="virtual"><scope>vt::ctx::Base</scope><name>~Base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
