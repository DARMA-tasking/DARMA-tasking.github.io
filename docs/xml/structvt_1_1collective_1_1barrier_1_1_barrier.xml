<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1collective_1_1barrier_1_1_barrier" kind="struct" language="C++" prot="public">
    <compoundname>vt::collective::barrier::Barrier</compoundname>
    <basecompoundref refid="structvt_1_1collective_1_1tree_1_1_tree" prot="public" virt="virtual">vt::collective::tree::Tree</basecompoundref>
    <derivedcompoundref refid="structvt_1_1collective_1_1_collective_alg" prot="public" virt="virtual">vt::collective::CollectiveAlg</derivedcompoundref>
    <includes refid="barrier_8h" local="no">barrier.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a9b612818f7b44ca65f2caee0dee094f3" prot="public" static="no">
        <type><ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_state" kindref="compound">BarrierState</ref></type>
        <definition>using vt::collective::barrier::Barrier::BarrierStateType =  BarrierState</definition>
        <argsstring></argsstring>
        <name>BarrierStateType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="81" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a84bfbd26a48a1c3bb7272e81245e4873" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref>, T &gt;</type>
        <definition>using vt::collective::barrier::Barrier::ContainerType =  std::unordered_map&lt;BarrierType, T&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="89" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1collective_1_1barrier_1_1_barrier_1ad3e45365fa6ddf4ca0e08e7f877a580a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref></type>
        <definition>BarrierType vt::collective::barrier::Barrier::cur_named_barrier_</definition>
        <argsstring></argsstring>
        <name>cur_named_barrier_</name>
        <initializer>= <ref refid="namespacevt_1_1collective_1_1barrier_1a43d35d830e81f62b5dfb571ce5e0939e" kindref="member">fst_barrier</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="249" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a19701ef650907899ae95d750343db5ac" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref></type>
        <definition>BarrierType vt::collective::barrier::Barrier::cur_named_coll_barrier_</definition>
        <argsstring></argsstring>
        <name>cur_named_coll_barrier_</name>
        <initializer>= <ref refid="namespacevt_1_1collective_1_1barrier_1a02bc7e6a890bd33f1e0b1b264326099c" kindref="member">fst_coll_barrier</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="250" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a320d125e93446c9f39baab502c260a1f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref></type>
        <definition>BarrierType vt::collective::barrier::Barrier::cur_unnamed_barrier_</definition>
        <argsstring></argsstring>
        <name>cur_unnamed_barrier_</name>
        <initializer>= <ref refid="namespacevt_1_1collective_1_1barrier_1a43d35d830e81f62b5dfb571ce5e0939e" kindref="member">fst_barrier</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="251" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1barrier_1_1_barrier_1ae5a50600bf815ba049915d93bc48b727" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a84bfbd26a48a1c3bb7272e81245e4873" kindref="member">ContainerType</ref>&lt; <ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a9b612818f7b44ca65f2caee0dee094f3" kindref="member">BarrierStateType</ref> &gt;</type>
        <definition>ContainerType&lt;BarrierStateType&gt; vt::collective::barrier::Barrier::named_barrier_state_</definition>
        <argsstring></argsstring>
        <name>named_barrier_state_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="253" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a83ad5a95d40a7cfcff7782dbc461fb1c" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a84bfbd26a48a1c3bb7272e81245e4873" kindref="member">ContainerType</ref>&lt; <ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a9b612818f7b44ca65f2caee0dee094f3" kindref="member">BarrierStateType</ref> &gt;</type>
        <definition>ContainerType&lt;BarrierStateType&gt; vt::collective::barrier::Barrier::unnamed_barrier_state_</definition>
        <argsstring></argsstring>
        <name>unnamed_barrier_state_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="253" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1aa69e5135299fa366a2c59ac96a9f318d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::barrier::Barrier::Barrier</definition>
        <argsstring>()</argsstring>
        <name>Barrier</name>
        <briefdescription>
<para>Construct a new barrier manager. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="86" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1aa3f74f986e523701c1d85ed97d3ad5a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a9b612818f7b44ca65f2caee0dee094f3" kindref="member">BarrierStateType</ref> &amp;</type>
        <definition>Barrier::BarrierStateType &amp; vt::collective::barrier::Barrier::insertFindBarrier</definition>
        <argsstring>(bool const &amp;is_named, bool const &amp;is_wait, BarrierType const &amp;barrier, ActionType cont_action=nullptr)</argsstring>
        <name>insertFindBarrier</name>
        <param>
          <type>bool const &amp;</type>
          <declname>is_named</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_wait</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>cont_action</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Insert/find a barrier. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_named</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is named </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is of waiting type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cont_action</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) continuation to attach after completion</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the barrier state </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="101" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="65" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a56128065b0b7735958b998dd97a4938b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::removeBarrier</definition>
        <argsstring>(bool const &amp;is_named, bool const &amp;is_wait, BarrierType const &amp;barrier)</argsstring>
        <name>removeBarrier</name>
        <param>
          <type>bool const &amp;</type>
          <declname>is_named</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_wait</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
<para>Remove the state of a barrier. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_named</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is named </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is of waiting type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="113" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="93" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a0d8e74149ddca96f06c1ff6071b73a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref></type>
        <definition>BarrierType vt::collective::barrier::Barrier::newNamedBarrier</definition>
        <argsstring>()</argsstring>
        <name>newNamedBarrier</name>
        <briefdescription>
<para>Rooted call to create a new named barrier, returning the ID. </para>        </briefdescription>
        <detaileddescription>
<para>After calling this, one must broadcast/send this to other nodes. Typical use case is to put it in a message for later coordination.</para><para><simplesect kind="return"><para>the barrier ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="125" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a3e101519fbcfa9eee139bf02f991f085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref></type>
        <definition>BarrierType vt::collective::barrier::Barrier::newNamedCollectiveBarrier</definition>
        <argsstring>()</argsstring>
        <name>newNamedCollectiveBarrier</name>
        <briefdescription>
<para>Collective call to create a new named barrier, returning the ID. </para>        </briefdescription>
        <detaileddescription>
<para>All nodes must call this in the same order to generate a consistent barrier ID for waiting on later.</para><para><simplesect kind="return"><para>the barrier ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="135" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a79096d77724cb095c08696e8af673dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrierUp</definition>
        <argsstring>(bool const &amp;is_named, bool const &amp;is_wait, BarrierType const &amp;barrier, bool const &amp;skip_term)</argsstring>
        <name>barrierUp</name>
        <param>
          <type>bool const &amp;</type>
          <declname>is_named</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_wait</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>skip_term</declname>
        </param>
        <briefdescription>
<para>Send a barrier up the tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_named</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is named </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is of waiting type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">skip_term</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to skip termination (mark barrier a TD message) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="145" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="193" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a962a1cbd78c359e1dee7a8e7df5cfd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrierDown</definition>
        <argsstring>(bool const &amp;is_named, bool const &amp;is_wait, BarrierType const &amp;barrier)</argsstring>
        <name>barrierDown</name>
        <param>
          <type>bool const &amp;</type>
          <declname>is_named</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_wait</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
<para>Send a barrier down the tree to release nodes (barrier is reached!) </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_named</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is named </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the barrier is of waiting type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="158" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="175" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a05124050c7d353a4f3475ee1875dd46a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrier</definition>
        <argsstring>(ActionType poll_action=nullptr, BarrierType const &amp;barrier=no_barrier)</argsstring>
        <name>barrier</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>poll_action</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
          <defval>no_barrier</defval>
        </param>
        <briefdescription>
<para>Wait on a barrier. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">poll_action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute while polling for barrier completion in addition to polling scheduler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier ID to wait on </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="169" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a21adace64047e0e773fb4b55846aab2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrierThen</definition>
        <argsstring>(ActionType fn)</argsstring>
        <name>barrierThen</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Collectively create a new barrier and once completed execute an action. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to execute after the barrier is reached by all nodes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="182" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a3f1be86145f4b0fe20d6ffd67a285e53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrierThen</definition>
        <argsstring>(BarrierType const &amp;barrier, ActionType fn)</argsstring>
        <name>barrierThen</name>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Collective wait for a barrier and once completed execute an action. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">barrier</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier to wait on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to execute after the barrier is reached by all nodes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="193" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a31b7fc393348cd50a9beac2372aabd79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::systemMetaBarrier</definition>
        <argsstring>()</argsstring>
        <name>systemMetaBarrier</name>
        <briefdescription>
<para>Collectively barrier skipping termination. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="warning"><para>This is dangerous to call in any code outside of internal initialize and finalize. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="203" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1ad3c1ad5f531262cfebcfd4295db341d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::systemMetaBarrierCont</definition>
        <argsstring>(ActionType fn)</argsstring>
        <name>systemMetaBarrierCont</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Collectively barrier skipping termination and then execute a continuation. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute after barrier is reached</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This is dangerous to call in any code outside of internal initialize and finalize. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="217" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="217" bodyend="220"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1ab229e28e7dea8c0dcdaf07b13173984d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrierUp</definition>
        <argsstring>(BarrierMsg *msg)</argsstring>
        <name>barrierUp</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_msg" kindref="compound">BarrierMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Active handler to send a barrier up the spanning tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="227" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a81c35871762c47ea8901fe70ac9b8082" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::barrierDown</definition>
        <argsstring>(BarrierMsg *msg)</argsstring>
        <name>barrierDown</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1barrier_1_1_barrier_msg" kindref="compound">BarrierMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Active handler to send a barrier down the spanning tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the barrier message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="234" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="61" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1a014858c233344d9fd7e1ffc4050a1d8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::waitBarrier</definition>
        <argsstring>(ActionType poll_action=nullptr, BarrierType const &amp;barrier=no_barrier, bool const skip_term=false)</argsstring>
        <name>waitBarrier</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>poll_action</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
          <defval>no_barrier</defval>
        </param>
        <param>
          <type>bool const</type>
          <declname>skip_term</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="238" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="118" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1barrier_1_1_barrier_1aecec014f5db3d5b608ca553a91acc732" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::barrier::Barrier::contBarrier</definition>
        <argsstring>(ActionType fn, BarrierType const &amp;barrier=no_barrier, bool const skip_term=false)</argsstring>
        <name>contBarrier</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const &amp;</type>
          <declname>barrier</declname>
          <defval>no_barrier</defval>
        </param>
        <param>
          <type>bool const</type>
          <declname>skip_term</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/barrier/barrier.h" line="243" column="1" bodyfile="src/vt/collective/barrier/barrier.cc" bodystart="151" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Perform a collective barrier that is safe to use with VT handlers in flight. </para>    </briefdescription>
    <detaileddescription>
<para>Align execution across multiple nodes to ensure each node across the communicator/runtime reach a &quot;matching&quot; barrier.</para><para><simplesect kind="warning"><para>Barriers are not recommended for users for parallel coordination. First, barriers do not guarantee that work is actually done when the barrier is reached. It only ensures that the node reaches that point. Thus, messages sent or work enqueued for the scheduler might not be done when a barrier is reached. For ensuring that work is complete, use the <computeroutput>TerminationDetector</computeroutput> component to create an epoch that groups the piece of work (see <computeroutput><ref refid="namespacevt_1a9f5cbbc484d7f14f2ad0ee46d62dfb6e" kindref="member">vt::runInEpochRooted</ref></computeroutput> and <computeroutput><ref refid="namespacevt_1a2fc4ef34f30b49a1781d765804bfadbb" kindref="member">vt::runInEpochCollective</ref></computeroutput> ). Second, barriers may limit the concurrency in a program; in many cases only a reduction is necessary for correctness. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="240">
        <label>vt::collective::CollectiveAlg</label>
        <link refid="structvt_1_1collective_1_1_collective_alg"/>
        <childnode refid="238" relation="public-inheritance">
        </childnode>
      </node>
      <node id="238">
        <label>vt::collective::barrier::Barrier</label>
        <link refid="structvt_1_1collective_1_1barrier_1_1_barrier"/>
        <childnode refid="239" relation="public-inheritance">
        </childnode>
      </node>
      <node id="239">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="241">
        <label>vt::collective::barrier::Barrier</label>
        <link refid="structvt_1_1collective_1_1barrier_1_1_barrier"/>
        <childnode refid="242" relation="public-inheritance">
        </childnode>
      </node>
      <node id="242">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/collective/barrier/barrier.h" line="80" column="1" bodyfile="src/vt/collective/barrier/barrier.h" bodystart="80" bodyend="254"/>
    <listofallmembers>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1aa69e5135299fa366a2c59ac96a9f318d" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>Barrier</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a05124050c7d353a4f3475ee1875dd46a" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrier</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a962a1cbd78c359e1dee7a8e7df5cfd75" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrierDown</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a81c35871762c47ea8901fe70ac9b8082" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrierDown</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a9b612818f7b44ca65f2caee0dee094f3" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>BarrierStateType</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a21adace64047e0e773fb4b55846aab2e" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrierThen</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a3f1be86145f4b0fe20d6ffd67a285e53" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrierThen</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a79096d77724cb095c08696e8af673dfb" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrierUp</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1ab229e28e7dea8c0dcdaf07b13173984d" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>barrierUp</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a84bfbd26a48a1c3bb7272e81245e4873" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>ContainerType</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1aecec014f5db3d5b608ca553a91acc732" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>contBarrier</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1ad3e45365fa6ddf4ca0e08e7f877a580a" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>cur_named_barrier_</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a19701ef650907899ae95d750343db5ac" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>cur_named_coll_barrier_</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a320d125e93446c9f39baab502c260a1f" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>cur_unnamed_barrier_</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad5546485f90dd449a203f174b1374a01" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a8200f03bf19b18b2323d1fcb99d5335f" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a57b3edade6230de16232213b7c4380f5" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a39e27b1538bf00674a5a653dfd7a0e83" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad68dc6aac90193cc15955d7bd1a5b1fc" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>getNumChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5375e6fbda5c36891b21cc17acc204dd" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a26e27c8c2da5db17c5cc26f15c2ebfb8" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ab509dada696b718152e8ac04edd551af" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>getParent</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1aa3f74f986e523701c1d85ed97d3ad5a4" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>insertFindBarrier</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a88b2add909b0035f4844317481ed559b" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>isRoot</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1ae5a50600bf815ba049915d93bc48b727" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>named_barrier_state_</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a0d8e74149ddca96f06c1ff6071b73a74" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>newNamedBarrier</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a3e101519fbcfa9eee139bf02f991f085" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>newNamedCollectiveBarrier</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>NodeListType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a56532f6b47b9c71864980b73deee2d5a" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>numLevels</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>NumLevelsType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>OperationType</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a56128065b0b7735958b998dd97a4938b" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>removeBarrier</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1aa3120d3bdbb2a308dd6831aa52d0ebb0" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>setupTree</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a31b7fc393348cd50a9beac2372aabd79" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>systemMetaBarrier</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1ad3c1ad5f531262cfebcfd4295db341d4" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>systemMetaBarrierCont</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ae9570e9a8f303295744e99b527603a51" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad759f716890ce5344a6c6053fcdc7055" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a949f8b592559125bf225bd3828bd6b88" prot="public" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a83ad5a95d40a7cfcff7782dbc461fb1c" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>unnamed_barrier_state_</name></member>
      <member refid="structvt_1_1collective_1_1barrier_1_1_barrier_1a014858c233344d9fd7e1ffc4050a1d8c" prot="private" virt="non-virtual"><scope>vt::collective::barrier::Barrier</scope><name>waitBarrier</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
