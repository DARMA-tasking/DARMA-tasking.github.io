<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="namespacevt" kind="namespace" language="C++">
    <compoundname>vt</compoundname>
    <innerclass refid="structvt_1_1_c_b_traits" prot="public">vt::CBTraits</innerclass>
    <innerclass refid="structvt_1_1_collective_any_ops" prot="public">vt::CollectiveAnyOps</innerclass>
    <innerclass refid="structvt_1_1_epoch_guard" prot="public">vt::EpochGuard</innerclass>
    <innerclass refid="structvt_1_1_event_check_finished_msg" prot="public">vt::EventCheckFinishedMsg</innerclass>
    <innerclass refid="structvt_1_1_event_finished_msg" prot="public">vt::EventFinishedMsg</innerclass>
    <innerclass refid="structvt_1_1from__s" prot="public">vt::from_s</innerclass>
    <innerclass refid="structvt_1_1_functor_traits" prot="public">vt::FunctorTraits</innerclass>
    <innerclass refid="structvt_1_1_func_traits" prot="public">vt::FuncTraits</innerclass>
    <innerclass refid="structvt_1_1_handler_manager" prot="public">vt::HandlerManager</innerclass>
    <innerclass refid="structvt_1_1_msg_props" prot="public">vt::MsgProps</innerclass>
    <innerclass refid="structvt_1_1_obj_func_traits" prot="public">vt::ObjFuncTraits</innerclass>
    <innerclass refid="structvt_1_1_put_envelope" prot="public">vt::PutEnvelope</innerclass>
    <innerclass refid="structvt_1_1_strong_node_type" prot="public">vt::StrongNodeType</innerclass>
    <innerclass refid="structvt_1_1_time_type_wrapper" prot="public">vt::TimeTypeWrapper</innerclass>
    <innerclass refid="structvt_1_1to__s" prot="public">vt::to_s</innerclass>
    <innernamespace refid="namespacevt_1_1adt">vt::adt</innernamespace>
    <innernamespace refid="namespacevt_1_1arguments">vt::arguments</innernamespace>
    <innernamespace refid="namespacevt_1_1auto__registry">vt::auto_registry</innernamespace>
    <innernamespace refid="namespacevt_1_1_c_l_i">vt::CLI</innernamespace>
    <innernamespace refid="namespacevt_1_1collective">vt::collective</innernamespace>
    <innernamespace refid="namespacevt_1_1config">vt::config</innernamespace>
    <innernamespace refid="namespacevt_1_1ctx">vt::ctx</innernamespace>
    <innernamespace refid="namespacevt_1_1debug">vt::debug</innernamespace>
    <innernamespace refid="namespacevt_1_1detail">vt::detail</innernamespace>
    <innernamespace refid="namespacevt_1_1diagnostic">vt::diagnostic</innernamespace>
    <innernamespace refid="namespacevt_1_1elm">vt::elm</innernamespace>
    <innernamespace refid="namespacevt_1_1epoch">vt::epoch</innernamespace>
    <innernamespace refid="namespacevt_1_1error">vt::error</innernamespace>
    <innernamespace refid="namespacevt_1_1event">vt::event</innernamespace>
    <innernamespace refid="namespacevt_1_1group">vt::group</innernamespace>
    <innernamespace refid="namespacevt_1_1index">vt::index</innernamespace>
    <innernamespace refid="namespacevt_1_1location">vt::location</innernamespace>
    <innernamespace refid="namespacevt_1_1mapping">vt::mapping</innernamespace>
    <innernamespace refid="namespacevt_1_1messaging">vt::messaging</innernamespace>
    <innernamespace refid="namespacevt_1_1metrics">vt::metrics</innernamespace>
    <innernamespace refid="namespacevt_1_1objgroup">vt::objgroup</innernamespace>
    <innernamespace refid="namespacevt_1_1param">vt::param</innernamespace>
    <innernamespace refid="namespacevt_1_1phase">vt::phase</innernamespace>
    <innernamespace refid="namespacevt_1_1pipe">vt::pipe</innernamespace>
    <innernamespace refid="namespacevt_1_1pool">vt::pool</innernamespace>
    <innernamespace refid="namespacevt_1_1rdma">vt::rdma</innernamespace>
    <innernamespace refid="namespacevt_1_1runnable">vt::runnable</innernamespace>
    <innernamespace refid="namespacevt_1_1runtime">vt::runtime</innernamespace>
    <innernamespace refid="namespacevt_1_1sched">vt::sched</innernamespace>
    <innernamespace refid="namespacevt_1_1serialization">vt::serialization</innernamespace>
    <innernamespace refid="namespacevt_1_1standalone">vt::standalone</innernamespace>
    <innernamespace refid="namespacevt_1_1term">vt::term</innernamespace>
    <innernamespace refid="namespacevt_1_1termination">vt::termination</innernamespace>
    <innernamespace refid="namespacevt_1_1timetrigger">vt::timetrigger</innernamespace>
    <innernamespace refid="namespacevt_1_1timing">vt::timing</innernamespace>
    <innernamespace refid="namespacevt_1_1trace">vt::trace</innernamespace>
    <innernamespace refid="namespacevt_1_1util">vt::util</innernamespace>
    <innernamespace refid="namespacevt_1_1utils">vt::utils</innernamespace>
    <innernamespace refid="namespacevt_1_1vrt">vt::vrt</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2" prot="public" static="no" strong="no">
        <type></type>
        <name>eHandlerBits</name>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2abfa992da505171200949c7e580e84ea2" prot="public">
          <name>Auto</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2ac61e9f48e514369f0eb8ac5cebf9fb14" prot="public">
          <name>Functor</name>
          <initializer>= eHandlerBits::Auto           + auto_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2aee391b103987f3eb488e081ecc1fc5e8" prot="public">
          <name>Trace</name>
          <initializer>= eHandlerBits::Functor        + functor_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2a3e3fe7a58187c2288f3c2177be08d4d5" prot="public">
          <name>Control</name>
          <initializer>= eHandlerBits::Trace          + trace_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2acff3b95c0c9083c01b66480d93ef1209" prot="public">
          <name>BaseMsgDerived</name>
          <initializer>= eHandlerBits::Control        + control_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2a38b6a6e4bb9065af38719600c607754a" prot="public">
          <name>RegistryType</name>
          <initializer>= eHandlerBits::BaseMsgDerived + base_msg_derived_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2a4f58efa47c6cfd117a011be7820d1d8a" prot="public">
          <name>Identifier</name>
          <initializer>= eHandlerBits::RegistryType   + registry_type_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="86" column="18" bodyfile="src/vt/handler/handler.h" bodystart="86" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *)&gt;</type>
        <definition>using vt::ActiveClosureFnType = typedef std::function&lt;void(vt::BaseMessage*)&gt;</definition>
        <argsstring></argsstring>
        <name>ActiveClosureFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="88" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a546925d221208866b866b2edf8f24d04" prot="public" static="no">
        <type>void(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *)</type>
        <definition>using vt::ActiveFnType = typedef void(vt::BaseMessage *)</definition>
        <argsstring></argsstring>
        <name>ActiveFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="89" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a70e19bd64d031e65083c2125b2c65426" prot="public" static="no">
        <type>void(*)(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *)</type>
        <definition>using vt::ActiveFnPtrType = typedef void(*)(vt::BaseMessage *)</definition>
        <argsstring></argsstring>
        <name>ActiveFnPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="90" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad0569ad32e87f0c5fb53fccd669f8dfa" prot="public" static="no">
        <type>void()</type>
        <definition>using vt::ActiveVoidFnType = typedef void()</definition>
        <argsstring></argsstring>
        <name>ActiveVoidFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="92" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type>void(MessageT *)</type>
        <definition>using vt::ActiveTypedFnType = typedef void(MessageT *)</definition>
        <argsstring></argsstring>
        <name>ActiveTypedFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="95" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aac79af69904337145f4d3d441802c932" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool) &gt;</type>
        <definition>using vt::ActiveClosureRDMAGetFnType = typedef std::function&lt; RDMA_GetType(vt::BaseMessage*, ByteType, ByteType, TagType, bool) &gt;</definition>
        <argsstring></argsstring>
        <name>ActiveClosureRDMAGetFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="97" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae4fbf97da623bfcd09ee8379de756257" prot="public" static="no">
        <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>(*)(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveRDMAGetFnPtrType = typedef RDMA_GetType(*)( vt::BaseMessage *, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveRDMAGetFnPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="100" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1add83fe11410931719f6543a575acfe87" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>(MessageT *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveTypedRDMAGetFnType = typedef RDMA_GetType( MessageT*, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveTypedRDMAGetFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="104" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab526cbb2c45e18f3e7ba7d7727e5b0de" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1aab05b4a584f7ee835a6d0f66915cf59b" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool) &gt;</type>
        <definition>using vt::ActiveClosureRDMAPutFnType = typedef std::function&lt; void(vt::BaseMessage*, RDMA_PtrType, ByteType, ByteType, TagType, bool) &gt;</definition>
        <argsstring></argsstring>
        <name>ActiveClosureRDMAPutFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="108" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a23220eaaee4345f7371d35e3aee23c70" prot="public" static="no">
        <type>void(*)(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1aab05b4a584f7ee835a6d0f66915cf59b" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveRDMAPutFnPtrType = typedef void(*)( vt::BaseMessage *, RDMA_PtrType, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveRDMAPutFnPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="111" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a881ee9bd1e4e71905da1f563ee26ce25" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type>void(MessageT *, <ref refid="namespacevt_1aab05b4a584f7ee835a6d0f66915cf59b" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveTypedRDMAPutFnType = typedef void( MessageT*, RDMA_PtrType, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveTypedRDMAPutFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="115" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a776b30f114cff62549e798fedeb6222b" prot="public" static="no">
        <type><ref refid="structvt_1_1_collective_any_ops" kindref="compound">CollectiveAnyOps</ref>&lt; collective_default_inst &gt;</type>
        <definition>using vt::CollectiveOps = typedef CollectiveAnyOps&lt;collective_default_inst&gt;</definition>
        <argsstring></argsstring>
        <name>CollectiveOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="86" column="1" bodyfile="src/vt/collective/collective_ops.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aab05b4a584f7ee835a6d0f66915cf59b" prot="public" static="no">
        <type>std::byte *</type>
        <definition>using vt::RDMA_PtrType = typedef std::byte *</definition>
        <argsstring></argsstring>
        <name>RDMA_PtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="55" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2c2a902092b72056f70210c159f966f0" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::RDMA_ElmType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_ElmType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="56" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae54d2ca8f6bb4d65faf65118c82cd6f7" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::RDMA_BlockType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_BlockType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="57" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a10442579ec4e7ebef223818e64bcf908" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::RDMA_HandleType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_HandleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="58" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9530efb893c0f3846e8ac5f0507e0f49" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::RDMA_HandlerType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_HandlerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="59" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="namespacevt_1aab05b4a584f7ee835a6d0f66915cf59b" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref> &gt;</type>
        <definition>using vt::RDMA_GetType = typedef std::tuple&lt;RDMA_PtrType, ByteType&gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="60" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a50fcc3338d68f7b147b99c0a82ec3a10" prot="public" static="no">
        <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref></type>
        <definition>using vt::RDMA_PutRetType = typedef RDMA_GetType</definition>
        <argsstring></argsstring>
        <name>RDMA_PutRetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="61" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9880273f1697d78c2171f8d8f044de51" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>)&gt;</type>
        <definition>using vt::RDMA_ContinuationType = typedef std::function&lt;void(RDMA_GetType)&gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_ContinuationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="62" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref>) &gt;</type>
        <definition>using vt::RDMA_ContinuationDeleteType = typedef std::function&lt; void(RDMA_GetType, ActionType) &gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_ContinuationDeleteType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="63" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1abeb0129c92a5721f6f2c01b621f149fe" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespacevt_1a50fcc3338d68f7b147b99c0a82ec3a10" kindref="member">RDMA_PutRetType</ref>(<ref refid="namespacevt_1a50fcc3338d68f7b147b99c0a82ec3a10" kindref="member">RDMA_PutRetType</ref>)&gt;</type>
        <definition>using vt::RDMA_PutSerialize = typedef std::function&lt;RDMA_PutRetType(RDMA_PutRetType)&gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_PutSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="66" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" prot="public" static="no">
        <type>int16_t</type>
        <definition>using vt::PhysicalResourceType = typedef int16_t</definition>
        <argsstring></argsstring>
        <name>PhysicalResourceType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="55" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" prot="public" static="no">
        <type><ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>using vt::NodeType = typedef PhysicalResourceType</definition>
        <argsstring></argsstring>
        <name>NodeType</name>
        <briefdescription>
<para>Used to hold the current node/rank or the number of nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="57" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a74b11b22c02feaabab8591acc87c7c52" prot="public" static="no">
        <type><ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>using vt::CoreType = typedef PhysicalResourceType</definition>
        <argsstring></argsstring>
        <name>CoreType</name>
        <briefdescription>
<para>Used to hold a core ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="59" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af64846b57dfcaf104da3ef6967917573" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::HandlerType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>HandlerType</name>
        <briefdescription>
<para>Used to hold a handler ID which identifier a function pointer/context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="63" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae2e13198bdef4d5b8e603d6c1c7f0969" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::SeedType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>SeedType</name>
        <briefdescription>
<para>Used to hold a seed for random generation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="65" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2740126d59f361d9ba46f66b3b4b0d3d" prot="public" static="no">
        <type>int8_t</type>
        <definition>using vt::EnvelopeDataType = typedef int8_t</definition>
        <argsstring></argsstring>
        <name>EnvelopeDataType</name>
        <briefdescription>
<para>Used to hold the control bits in an envelope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="67" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a009267401def7ae8bf201892222d060f" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::EventType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>EventType</name>
        <briefdescription>
<para>Used to hold a local/remote event to wait for completion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="69" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::SequentialIDType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>SequentialIDType</name>
        <briefdescription>
<para>Used to hold a sequential identifier for ordered/stateful operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="71" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::TagType = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>TagType</name>
        <briefdescription>
<para>Used to hold an tag, e.g., on messages or reduces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="73" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::BarrierType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>BarrierType</name>
        <briefdescription>
<para>Used to identify a specific barrier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="75" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a5ffcf8e168b77b0f36e11b616049a1cf" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::CollectiveAlgType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>CollectiveAlgType</name>
        <briefdescription>
<para>Used to identify a collective operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="77" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a60fda95dc2316580f0ccf87d570f1d9e" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using vt::RefType = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>RefType</name>
        <briefdescription>
<para>Used to hold the reference count for messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="79" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ace18d74dd489d9ea506d38789fffce34" prot="public" static="no">
        <type>int16_t</type>
        <definition>using vt::PipeRefType = typedef int16_t</definition>
        <argsstring></argsstring>
        <name>PipeRefType</name>
        <briefdescription>
<para>Used to hold the reference count for messages in pipes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="81" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aab8d55968084610ce3b17057981e9300" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::ByteType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>ByteType</name>
        <briefdescription>
<para>Used to store some number of bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="83" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::BitCountType = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>BitCountType</name>
        <briefdescription>
<para>Used to store the number of bits in a field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="85" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad48e08beb69a7f184fb1fdb4b7044174" prot="public" static="no">
        <type>char</type>
        <definition>using vt::SerialByteType = typedef char</definition>
        <argsstring></argsstring>
        <name>SerialByteType</name>
        <briefdescription>
<para>Used to store the number of bits for serialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="87" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a793764d753923abc3d32929870beb485" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::ErrorCodeType = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>ErrorCodeType</name>
        <briefdescription>
<para>Used to store an error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="89" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::VirtualProxyType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>VirtualProxyType</name>
        <briefdescription>
<para>Used to hold an identifier for a collection or other proxy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="91" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa68633cd16822ae31c1cf521f817a23e" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::VirtualElmOnlyProxyType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>VirtualElmOnlyProxyType</name>
        <briefdescription>
<para>Used to hold an identifier for an element in a collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="93" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac115668758184050beff7a9281a2c490" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::VirtualElmCountType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>VirtualElmCountType</name>
        <briefdescription>
<para>Used to hold the count of elements in a collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="95" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a913e1f07b5228dd8bb64040dc6dcea14" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::UniqueIndexBitType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>UniqueIndexBitType</name>
        <briefdescription>
<para>Used for mapping between index to contiguous bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="97" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::GroupType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>GroupType</name>
        <briefdescription>
<para>Used for hold an identifier for a group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="99" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a408e86a8c7c89309b52907dc5a513924" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::MsgSizeType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>MsgSizeType</name>
        <briefdescription>
<para>Used for hold the size of a message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="101" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::PhaseType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>PhaseType</name>
        <briefdescription>
<para>Used for hold a phase for load balancing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="103" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a8fb51741340b87d7aaee0bef60e9896b" prot="public" static="no">
        <type>double</type>
        <definition>using vt::LoadType = typedef double</definition>
        <argsstring></argsstring>
        <name>LoadType</name>
        <briefdescription>
<para>LoadType used for load balancing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="105" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae78cbfdf1e57470e33eedb074f2beeba" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using vt::SubphaseType = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>SubphaseType</name>
        <briefdescription>
<para>Used for hold a sub-phase for load balancing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="107" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::PipeType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>PipeType</name>
        <briefdescription>
<para>Used for hold the identifier for a pipe (callbacks) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="109" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad7cae989df485fccca57f0792a880a8e" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::ObjGroupProxyType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>ObjGroupProxyType</name>
        <briefdescription>
<para>Used for hold the proxy ID for an objgroup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="111" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using vt::PriorityType = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>PriorityType</name>
        <briefdescription>
<para>Used for hold the priority of a message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="113" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using vt::PriorityLevelType = typedef uint8_t</definition>
        <argsstring></argsstring>
        <name>PriorityLevelType</name>
        <briefdescription>
<para>Used for hold the level for a priority of a message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="115" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab6ac935c168b809c422d5121da4f2700" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using vt::ComponentIDType = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>ComponentIDType</name>
        <briefdescription>
<para>Used for hold a unique ID for each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="117" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::ThreadIDType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>ThreadIDType</name>
        <briefdescription>
<para>Used to hold a unique ID for a user-level thread on a particular node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="119" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a74091f087d3a26643d18f66c7fb7da8d" prot="public" static="no">
        <type>int</type>
        <definition>using vt::SharedIDType = typedef int</definition>
        <argsstring></argsstring>
        <name>SharedIDType</name>
        <briefdescription>
<para>Used to hold a shared ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="121" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using vt::ActionType = typedef std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>ActionType</name>
        <briefdescription>
<para>Used for generically store an action to perform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="125" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a102aa105d64254d89f7e585d106c95aa" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>)&gt;</type>
        <definition>using vt::ActionProxyType = typedef std::function&lt;void(VirtualProxyType)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionProxyType</name>
        <briefdescription>
<para>Used for generically store an action that requires a proxy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="127" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0436cb2d620dcbb21b5b49cd9c9c4749" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>)&gt;</type>
        <definition>using vt::ActionNodeType = typedef std::function&lt;void(NodeType)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionNodeType</name>
        <briefdescription>
<para>Used for generically store an action that requires a node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="129" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a81d11b28122d43bf9834577e4a06440f" prot="public" static="no">
        <type><ref refid="structvt_1_1epoch_1_1_epoch_type" kindref="compound">epoch::EpochType</ref></type>
        <definition>using vt::EpochType = typedef epoch::EpochType</definition>
        <argsstring></argsstring>
        <name>EpochType</name>
        <briefdescription>
<para>The strong epoch type for holding a epoch for termination detection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="159" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2dc2f149222f88a250ec9a13db36865d" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_record" kindref="compound">event::EventRecord</ref></type>
        <definition>using vt::EventRecordType = typedef event::EventRecord</definition>
        <argsstring></argsstring>
        <name>EventRecordType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="231" column="1" bodyfile="src/vt/event/event.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a59ae068fe828d1c33051ff96f3d016b6" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::HandlerIdentifierType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>HandlerIdentifierType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="59" column="1" bodyfile="src/vt/handler/handler.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1adbbef13b92f0a93b14c219b7cc8a48f2" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using vt::HandlerControlType = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>HandlerControlType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="62" column="1" bodyfile="src/vt/handler/handler.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2695972ba7486466c06160df0b12ee2d" prot="public" static="no">
        <type>std::tuple&lt; std::byte *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref> &gt;</type>
        <definition>using vt::PtrLenPairType = typedef std::tuple&lt;std::byte*, ByteType&gt;</definition>
        <argsstring></argsstring>
        <name>PtrLenPairType</name>
        <briefdescription>
<para>A pair of a std::byte* and number of bytes (length) for sending data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="84" column="1" bodyfile="src/vt/messaging/active.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a6de3bd201e2a040be9362d9d24d1e446" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a2695972ba7486466c06160df0b12ee2d" kindref="member">PtrLenPairType</ref> data, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref> deleter)&gt;</type>
        <definition>using vt::ContinuationDeleterType = typedef std::function&lt;void(PtrLenPairType data, ActionType deleter)&gt;</definition>
        <argsstring></argsstring>
        <name>ContinuationDeleterType</name>
        <briefdescription>
<para>A continuation function with an allocated pointer with a deleter function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="87" column="1" bodyfile="src/vt/messaging/active.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a04777c732e1a2b2c317995af9972b999" prot="public" static="no">
        <type><ref refid="namespacevt_1adbd3338278905742eb2de6db590fd2f1" kindref="member">Strong</ref>&lt; <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>, uninitialized_destination, <ref refid="structvt_1_1_strong_node_type" kindref="compound">StrongNodeType</ref> &gt;</type>
        <definition>using vt::Node = typedef Strong&lt;NodeType, uninitialized_destination, StrongNodeType&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="95" column="1" bodyfile="src/vt/messaging/active.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad548cc368cddb926753ac237eb454dae" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger" kindref="compound">messaging::ActiveMessenger</ref></type>
        <definition>using vt::Active = typedef messaging::ActiveMessenger</definition>
        <argsstring></argsstring>
        <name>Active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1788" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa9c8cc094b5361482021d63012987814" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_envelope" kindref="compound">messaging::ActiveEnvelope</ref></type>
        <definition>using vt::Envelope = typedef messaging::ActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>Envelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_base.h" line="114" column="1" bodyfile="src/vt/messaging/envelope/envelope_base.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af71a025689a3da5037785b53a7a8e78c" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_epoch_active_envelope" kindref="compound">messaging::EpochActiveEnvelope</ref></type>
        <definition>using vt::EpochEnvelope = typedef messaging::EpochActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>EpochEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended.h" line="103" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a7b951ab92dca9319e12e3fc406ccb309" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_tag_active_envelope" kindref="compound">messaging::TagActiveEnvelope</ref></type>
        <definition>using vt::TagEnvelope = typedef messaging::TagActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>TagEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended.h" line="104" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af23b58014ced6898422213a0e5e6a27a" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_epoch_tag_active_envelope" kindref="compound">messaging::EpochTagActiveEnvelope</ref></type>
        <definition>using vt::EpochTagEnvelope = typedef messaging::EpochTagActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>EpochTagEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended.h" line="105" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1abdfe9ac50e3799705ee21853c1509bf6" prot="public" static="no">
        <type><ref refid="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6c" kindref="member">messaging::eEnvelopeType</ref></type>
        <definition>typedef messaging::eEnvelopeType vt::eEnvType</definition>
        <argsstring></argsstring>
        <name>eEnvType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_type.h" line="79" column="1" bodyfile="src/vt/messaging/envelope/envelope_type.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2714874e46551037c873d5e4a6603cc1" prot="public" static="no">
        <type>std::byte *</type>
        <definition>using vt::PutPtrType = typedef std::byte*</definition>
        <argsstring></argsstring>
        <name>PutPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="53" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab7485f5735971a4951ec5e13d8cbf388" prot="public" static="no">
        <type>std::byte const  *</type>
        <definition>using vt::PutPtrConstType = typedef std::byte const*</definition>
        <argsstring></argsstring>
        <name>PutPtrConstType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="54" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa241444e21c15238e185923792814fe4" prot="public" static="no">
        <type>size_t</type>
        <definition>using vt::PutEnvSizeType = typedef size_t</definition>
        <argsstring></argsstring>
        <name>PutEnvSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="55" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a38f077afcffb8ed5e18c6760e6697bbc" prot="public" static="no">
        <type><ref refid="namespacevt_1af23b58014ced6898422213a0e5e6a27a" kindref="member">EpochTagEnvelope</ref></type>
        <definition>using vt::PutUnderEnvelopeT = typedef EpochTagEnvelope</definition>
        <argsstring></argsstring>
        <name>PutUnderEnvelopeT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="56" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a4e561211bbf1d8d9a4766eb159852736" prot="public" static="no">
        <type><ref refid="structvt_1_1_put_envelope" kindref="compound">PutEnvelope</ref>&lt; <ref refid="namespacevt_1af23b58014ced6898422213a0e5e6a27a" kindref="member">EpochTagEnvelope</ref>, size_t &gt;</type>
        <definition>using vt::PutShortEnvelope = typedef PutEnvelope&lt;EpochTagEnvelope, size_t&gt;</definition>
        <argsstring></argsstring>
        <name>PutShortEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="78" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_base_msg" kindref="compound">messaging::BaseMsg</ref></type>
        <definition>using vt::BaseMessage = typedef messaging::BaseMsg</definition>
        <argsstring></argsstring>
        <name>BaseMessage</name>
        <briefdescription>
<para>Alias to the base of all messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="206" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a00eb67bd138395b6a4f744fab3fa0678" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename EnvelopeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; EnvelopeT &gt;</type>
        <definition>using vt::ActiveMessage = typedef messaging::ActiveMsg&lt;EnvelopeT&gt;</definition>
        <argsstring></argsstring>
        <name>ActiveMessage</name>
        <briefdescription>
<para>Alias to the a message with any envelope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="209" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; <ref refid="namespacevt_1aa9c8cc094b5361482021d63012987814" kindref="member">Envelope</ref> &gt;</type>
        <definition>using vt::ShortMessage = typedef messaging::ActiveMsg&lt;Envelope&gt;</definition>
        <argsstring></argsstring>
        <name>ShortMessage</name>
        <briefdescription>
<para>Alias to the shortest message available with no epoch or tag allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="211" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad67368ffae52d7325002586b41bb150e" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; <ref refid="namespacevt_1af71a025689a3da5037785b53a7a8e78c" kindref="member">EpochEnvelope</ref> &gt;</type>
        <definition>using vt::EpochMessage = typedef messaging::ActiveMsg&lt;EpochEnvelope&gt;</definition>
        <argsstring></argsstring>
        <name>EpochMessage</name>
        <briefdescription>
<para>Alias to a message with only an epoch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="213" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a4ccc13b06bff8a4a35426a1a082a95a9" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; <ref refid="namespacevt_1af23b58014ced6898422213a0e5e6a27a" kindref="member">EpochTagEnvelope</ref> &gt;</type>
        <definition>using vt::EpochTagMessage = typedef messaging::ActiveMsg&lt;EpochTagEnvelope&gt;</definition>
        <argsstring></argsstring>
        <name>EpochTagMessage</name>
        <briefdescription>
<para>Alias to a message with an epoch and tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="215" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3a3ddfef40b4c90915fa43cdd5f129ea" prot="public" static="no">
        <type><ref refid="namespacevt_1a4ccc13b06bff8a4a35426a1a082a95a9" kindref="member">EpochTagMessage</ref></type>
        <definition>using vt::Message = typedef EpochTagMessage</definition>
        <argsstring></argsstring>
        <name>Message</name>
        <briefdescription>
<para>Alias to the default message (with an epoch and tag) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="217" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" prot="public" static="no">
        <type><ref refid="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" kindref="member">ShortMessage</ref></type>
        <definition>using vt::BaseMsgType = typedef ShortMessage</definition>
        <argsstring></argsstring>
        <name>BaseMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="219" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a378e4a02213923b4ba1c3f9d2a1424c7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename SelfT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_non_serialized_msg" kindref="compound">vt::messaging::NonSerializedMsg</ref>&lt; MsgT, SelfT &gt;</type>
        <definition>using vt::NonSerialized = typedef vt::messaging::NonSerializedMsg&lt;MsgT, SelfT&gt;</definition>
        <argsstring></argsstring>
        <name>NonSerialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="457" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3862b8e3f67ab03f3a4313d828592fa9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename SelfT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_serialize_supported_msg" kindref="compound">vt::messaging::SerializeSupportedMsg</ref>&lt; MsgT, SelfT &gt;</type>
        <definition>using vt::SerializeSupported = typedef vt::messaging::SerializeSupportedMsg&lt;MsgT, SelfT&gt;</definition>
        <argsstring></argsstring>
        <name>SerializeSupported</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="460" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9e60e2e8929828639383ac1d6643384d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename SelfT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_serialize_required_msg" kindref="compound">vt::messaging::SerializeRequiredMsg</ref>&lt; MsgT, SelfT &gt;</type>
        <definition>using vt::SerializeRequired = typedef vt::messaging::SerializeRequiredMsg&lt;MsgT, SelfT&gt;</definition>
        <argsstring></argsstring>
        <name>SerializeRequired</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="463" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0a4ad8c256fcffa564e9fa7800e4b495" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename SelfT</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>DepTypesT</declname>
            <defname>DepTypesT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_serialize_if_needed_msg" kindref="compound">vt::messaging::SerializeIfNeededMsg</ref>&lt; MsgT, SelfT, DepTypesT... &gt;</type>
        <definition>using vt::SerializeIfNeeded = typedef vt::messaging::SerializeIfNeededMsg&lt;MsgT, SelfT, DepTypesT...&gt;</definition>
        <argsstring></argsstring>
        <name>SerializeIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="466" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a89a92229c5622b855c02c549f83a1a68" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_put_message_component" kindref="compound">messaging::PutMessageComponent</ref>&lt; <ref refid="namespacevt_1a00eb67bd138395b6a4f744fab3fa0678" kindref="member">ActiveMessage</ref>&lt; <ref refid="namespacevt_1a4e561211bbf1d8d9a4766eb159852736" kindref="member">PutShortEnvelope</ref> &gt; &gt;</type>
        <definition>using vt::PayloadMessage = typedef messaging::PutMessageComponent&lt; ActiveMessage&lt;PutShortEnvelope&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>PayloadMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/put_message.h" line="70" column="1" bodyfile="src/vt/messaging/message/put_message.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a82b5c92ea7ca3ddd2e8a2e27df87fa1a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; T &gt;</type>
        <definition>using vt::MsgVirtualPtr = typedef messaging::MsgSharedPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MsgVirtualPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>\obsolete Use <computeroutput>MsgPtr&lt;T&gt;</computeroutput>, for which this is an alias. </para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="357" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a54674b9f819f4f3a652c6f78d9b62aaf" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" kindref="member">ShortMessage</ref> &gt;</type>
        <definition>using vt::MsgVirtualPtrAny = typedef messaging::MsgSharedPtr&lt;ShortMessage&gt;</definition>
        <argsstring></argsstring>
        <name>MsgVirtualPtrAny</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>\obsolete Use <computeroutput>MsgPtr&lt;ShortMessage&gt;</computeroutput>, or as appropriate. </para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="363" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; T &gt;</type>
        <definition>using vt::MsgSharedPtr = typedef messaging::MsgSharedPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MsgSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>\obsolete Use <computeroutput>MsgPtr&lt;T&gt;</computeroutput>, for which this is an alias. </para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="370" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; T &gt;</type>
        <definition>using vt::MsgPtr = typedef messaging::MsgSharedPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MsgPtr</name>
        <briefdescription>
<para>Wrapper to manage Active Messages. </para>
        </briefdescription>
        <detaileddescription>
<para>A MsgPtr represents a &apos;shared pointer like&apos; object wrapping a message that correctly manages reference-counts to order to eliminate memory leaks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="380" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a57b238783d05de96bc2c4027f7073b7f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">pipe::callback::cbunion::CallbackTyped</ref>&lt; Args... &gt;</type>
        <definition>using vt::Callback = typedef pipe::callback::cbunion::CallbackTyped&lt;Args...&gt;</definition>
        <argsstring></argsstring>
        <name>Callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.fwd.h" line="56" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.fwd.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af79a43a97bc3593fc349f086c874c48e" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" kindref="compound">pipe::callback::cbunion::CallbackRawBaseSingle</ref></type>
        <definition>using vt::CallbackU = typedef pipe::callback::cbunion::CallbackRawBaseSingle</definition>
        <argsstring></argsstring>
        <name>CallbackU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.fwd.h" line="58" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.fwd.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9bf03a57102d0274cc229b9ef94bb59e" prot="public" static="no">
        <type><ref refid="structvt_1_1rdma_1_1_target" kindref="compound">rdma::Target</ref></type>
        <definition>using vt::RDMA_TargetType = typedef rdma::Target</definition>
        <argsstring></argsstring>
        <name>RDMA_TargetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.h" line="86" column="1" bodyfile="src/vt/rdma/rdma_types.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae5bd2866e5ee83f4d6a53e8730cd3202" prot="public" static="no">
        <type><ref refid="structvt_1_1rdma_1_1_non_target" kindref="compound">rdma::NonTarget</ref></type>
        <definition>using vt::RDMA_NonTargetType = typedef rdma::NonTarget</definition>
        <argsstring></argsstring>
        <name>RDMA_NonTargetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.h" line="87" column="1" bodyfile="src/vt/rdma/rdma_types.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1abc3449a4b87363b942453d0b8cc18a7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename I</type>
            <defval><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">vt::NodeType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">rdma::Handle</ref>&lt; T, <ref refid="namespacevt_1_1rdma_1a0234ff19cfb3c04718cfdfd36b2d6d88a0c5c41d6a0319a61d3a5e8a060b7c4d7" kindref="member">rdma::HandleEnum::StaticSize</ref>, I &gt;</type>
        <definition>using vt::HandleRDMA = typedef rdma::Handle&lt;T, rdma::HandleEnum::StaticSize, I&gt;</definition>
        <argsstring></argsstring>
        <name>HandleRDMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.h" line="54" column="1" bodyfile="src/vt/rdmahandle/handle.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae3eb725d1ffe20cd7d82a8c42f3e52ef" prot="public" static="no">
        <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">rdma::Lock</ref></type>
        <definition>using vt::Lock = typedef rdma::Lock</definition>
        <argsstring></argsstring>
        <name>Lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/lock_mpi.h" line="102" column="1" bodyfile="src/vt/rdmahandle/lock_mpi.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a290f7e8941f9f411b54cdb15b6cea107" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager" kindref="compound">vrt::collection::CollectionManager</ref></type>
        <definition>using vt::CollectionManagerType = typedef vrt::collection::CollectionManager</definition>
        <argsstring></argsstring>
        <name>CollectionManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="89" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a19cb20485baa09ecc30086fbc62fd6ef" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_node_l_b_data" kindref="compound">vrt::collection::balance::NodeLBData</ref></type>
        <definition>using vt::NodeLBDataType = typedef vrt::collection::balance::NodeLBData</definition>
        <argsstring></argsstring>
        <name>NodeLBDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="90" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1afa4cbc17d753afab37e21dd902f68e9e" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_data_restart_reader" kindref="compound">vrt::collection::balance::LBDataRestartReader</ref></type>
        <definition>using vt::LBDataRestartReaderType = typedef vrt::collection::balance::LBDataRestartReader</definition>
        <argsstring></argsstring>
        <name>LBDataRestartReaderType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="91" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1ae0212259259772d2e857f497714e1b" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_manager" kindref="compound">vrt::collection::balance::LBManager</ref></type>
        <definition>using vt::LBManagerType = typedef vrt::collection::balance::LBManager</definition>
        <argsstring></argsstring>
        <name>LBManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="92" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab6a0fefc7e53fbe4eaec0fef22ae15e3" prot="public" static="no">
        <type><ref refid="structvt_1_1timetrigger_1_1_time_trigger_manager" kindref="compound">timetrigger::TimeTriggerManager</ref></type>
        <definition>using vt::TimeTriggerManagerType = typedef timetrigger::TimeTriggerManager</definition>
        <argsstring></argsstring>
        <name>TimeTriggerManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="93" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a5c1db2c048b259a2ba8961766ddb9278" prot="public" static="no">
        <type><ref refid="namespacevt_1_1runtime_1ab09d044cce417fbcdb7e1e29b7aabbc3" kindref="member">runtime::RuntimeHolderType</ref></type>
        <definition>using vt::RuntimeType = typedef runtime::RuntimeHolderType</definition>
        <argsstring></argsstring>
        <name>RuntimeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_headers.h" line="65" column="1" bodyfile="src/vt/runtime/runtime_headers.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a8019b70cc4b9b0833c38559c85dfd53b" prot="public" static="no">
        <type><ref refid="namespacevt_1_1runtime_1a69931905b04961a874e4a70a43083a83" kindref="member">runtime::RuntimeHolderUnsafePtrType</ref></type>
        <definition>using vt::RuntimeUnsafePtrType = typedef runtime::RuntimeHolderUnsafePtrType</definition>
        <argsstring></argsstring>
        <name>RuntimeUnsafePtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_headers.h" line="66" column="1" bodyfile="src/vt/runtime/runtime_headers.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" prot="public" static="no">
        <type><ref refid="namespacevt_1a5c1db2c048b259a2ba8961766ddb9278" kindref="member">RuntimeType</ref></type>
        <definition>using vt::RuntimePtrType = typedef RuntimeType</definition>
        <argsstring></argsstring>
        <name>RuntimePtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_headers.h" line="67" column="1" bodyfile="src/vt/runtime/runtime_headers.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a490b7af99bdeb06e988d94a7ab389b43" prot="public" static="no">
        <type>::<ref refid="structvt_1_1serialization_1_1_serialized_messenger" kindref="compound">vt::serialization::SerializedMessenger</ref></type>
        <definition>using vt::SerializedMessenger = typedef ::vt::serialization::SerializedMessenger</definition>
        <argsstring></argsstring>
        <name>SerializedMessenger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/messaging/serialized_messenger.h" line="110" column="1" bodyfile="src/vt/serialization/messaging/serialized_messenger.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af8fc7210a3d8e598330cf3375857ef1e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DomainT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1term_1_1interval_1_1_integral_set_base" kindref="compound">term::interval::IntegralSetBase</ref>&lt; DomainT, DomainT{}, std::allocator, <ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">term::interval::Interval</ref>, std::set, <ref refid="namespacevt_1ab51b754f1d22841f555246195fab9d41" kindref="member">IntervalCompare</ref> &gt;</type>
        <definition>using vt::IntegralSet = typedef term::interval::IntegralSetBase&lt; DomainT, DomainT{}, std::allocator, term::interval::Interval, std::set, IntervalCompare &gt;</definition>
        <argsstring></argsstring>
        <name>IntegralSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/integral_set.h" line="495" column="1" bodyfile="src/vt/termination/interval/integral_set.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab51b754f1d22841f555246195fab9d41" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DomainT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_compare" kindref="compound">term::interval::IntervalCompare</ref>&lt; DomainT &gt;</type>
        <definition>using vt::IntervalCompare = typedef term::interval::IntervalCompare&lt;DomainT&gt;</definition>
        <argsstring></argsstring>
        <name>IntervalCompare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="226" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0036b5cb523aef3477d6d5de9d94eabb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DomainT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">term::interval::Interval</ref>&lt; DomainT &gt;</type>
        <definition>using vt::Interval = typedef term::interval::Interval&lt;DomainT&gt;</definition>
        <argsstring></argsstring>
        <name>Interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="229" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aaefb2bd6d08c8dc0ff26ed43636611b1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1term_1_1interval_1_1_strong_integral_set" kindref="compound">term::interval::StrongIntegralSet</ref>&lt; T &gt;</type>
        <definition>using vt::StrongIntegralSet = typedef term::interval::StrongIntegralSet&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>StrongIntegralSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/strong_integral_set.h" line="133" column="1" bodyfile="src/vt/termination/interval/strong_integral_set.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2b9f28078dc309ad0706b69ded743e69" prot="public" static="no">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>using vt::TimeType = typedef TimeTypeWrapper</definition>
        <argsstring></argsstring>
        <name>TimeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="167" column="1" bodyfile="src/vt/timing/timing_type.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac016d9c31465ce11c14eab2be11f9183" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename IndexType</type>
          </param>
          <param>
            <type>index::NumDimensionsType</type>
            <declname>ndim</declname>
            <defname>ndim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1index_1_1_dense_index_array" kindref="compound">index::DenseIndexArray</ref>&lt; IndexType, ndim &gt;</type>
        <definition>using vt::DenseIndex = typedef index::DenseIndexArray&lt;IndexType, ndim&gt;</definition>
        <argsstring></argsstring>
        <name>DenseIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="79" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1afb96657e28fa98eb685c5e0c6b1b122e" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref></type>
        <definition>using vt::IdxBase = typedef index::IdxBase</definition>
        <argsstring></argsstring>
        <name>IdxBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="80" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a5540efc78234273e1796fb003fe4d234" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a091a4f5a7a2c993d9727eaa60cf67d81" kindref="member">index::Index1D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index1D = typedef index::Index1D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index1D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="82" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3bab786053b74a3d856fff1412ffa73a" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a8373801efc8343f24d6e8ba57df40a69" kindref="member">index::Index2D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index2D = typedef index::Index2D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="83" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2c8053bc5f2df4934272542fb3e5a0bc" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a2c09a09f7346d370a0bcbbfb0d4459cd" kindref="member">index::Index3D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index3D = typedef index::Index3D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="84" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad103a1d5ba6390d0e6bffa5955fe2702" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1adbd083c2ee983c80150bec95310651bd" kindref="member">index::Index4D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index4D = typedef index::Index4D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index4D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="85" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a16ed846f4c3ffdf44510eb4cf7012179" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a19e5b1e17db3e11bb5af351136c6c4a3" kindref="member">index::Index5D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index5D = typedef index::Index5D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index5D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="86" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a240b6f704ce45714a8e5313fb6d245ab" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a9fe419a08b396c7a6fc5df26636106eb" kindref="member">index::Index6D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index6D = typedef index::Index6D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index6D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="87" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a03846344a8d106928ae0dfbb2360ec30" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a939bace7aba6cd4a76b2c12a138c5991" kindref="member">index::IdxType</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref>, N &gt;</type>
        <definition>using vt::IndexND = typedef index::IdxType&lt;index::IdxBase, N&gt;</definition>
        <argsstring></argsstring>
        <name>IndexND</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="89" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a906c25b521ff516f5e8ba6d96fe2d424" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int8_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a939bace7aba6cd4a76b2c12a138c5991" kindref="member">index::IdxType</ref>&lt; T, N &gt;</type>
        <definition>using vt::IdxType = typedef index::IdxType&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="91" column="15" bodyfile="src/vt/topos/index/index.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a36127c6500f2311908c959be653da40e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a091a4f5a7a2c993d9727eaa60cf67d81" kindref="member">index::Index1D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType1D = typedef index::Index1D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType1D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="92" column="23" bodyfile="src/vt/topos/index/index.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab0fbc5ddf69b5aa0ed6a8d1658b504eb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a8373801efc8343f24d6e8ba57df40a69" kindref="member">index::Index2D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType2D = typedef index::Index2D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="93" column="23" bodyfile="src/vt/topos/index/index.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a65e4a83c0567ecb7a54b78e9b8e7d7ab" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a2c09a09f7346d370a0bcbbfb0d4459cd" kindref="member">index::Index3D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType3D = typedef index::Index3D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="94" column="23" bodyfile="src/vt/topos/index/index.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab6aabeedeb27ecef8ef6d9c58cc92474" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1adbd083c2ee983c80150bec95310651bd" kindref="member">index::Index4D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType4D = typedef index::Index4D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType4D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="95" column="23" bodyfile="src/vt/topos/index/index.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a653844e1fee777ee53aa009443f2e156" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a19e5b1e17db3e11bb5af351136c6c4a3" kindref="member">index::Index5D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType5D = typedef index::Index5D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType5D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="96" column="23" bodyfile="src/vt/topos/index/index.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2afddcb36763770a39de9aac5cb724f5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1index_1a9fe419a08b396c7a6fc5df26636106eb" kindref="member">index::Index6D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType6D = typedef index::Index6D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType6D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="97" column="23" bodyfile="src/vt/topos/index/index.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0cb65f2151629893480ef391def4e733" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename EntityID</type>
          </param>
          <param>
            <type>typename ActiveMessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1location_1_1_entity_msg" kindref="compound">location::EntityMsg</ref>&lt; EntityID, ActiveMessageT &gt;</type>
        <definition>using vt::LocationRoutedMsg = typedef location::EntityMsg&lt;EntityID, ActiveMessageT&gt;</definition>
        <argsstring></argsstring>
        <name>LocationRoutedMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/location/message/msg.h" line="139" column="1" bodyfile="src/vt/topos/location/message/msg.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a34b3eb2eea8db3cf4ae27ced35b19b46" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt; T &gt;</type>
        <definition>using vt::BitCounterType = typedef utils::BitCounter&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>BitCounterType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/bits/bits_common.h" line="53" column="1" bodyfile="src/vt/utils/bits/bits_common.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a80d5091925c65efd88ca7f49fe1d633b" prot="public" static="no">
        <type><ref refid="structvt_1_1utils_1_1_bit_packer" kindref="compound">utils::BitPacker</ref></type>
        <definition>typedef utils::BitPacker vt::BitPackerType</definition>
        <argsstring></argsstring>
        <name>BitPackerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/bits/bits_common.h" line="55" column="1" bodyfile="src/vt/utils/bits/bits_common.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af7c7e4af1ee59911bd84482b2332c736" prot="public" static="no">
        <type><ref refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_no_msg" kindref="compound">util::fntraits::detail::NoMsg</ref></type>
        <definition>using vt::NoMsg = typedef util::fntraits::detail::NoMsg</definition>
        <argsstring></argsstring>
        <name>NoMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/fntraits/fntraits.h" line="398" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1adbd3338278905742eb2de6db590fd2f1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>init_val</declname>
            <defname>init_val</defname>
          </param>
          <param>
            <type>typename Tag</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong" kindref="compound">util::strong::detail::Strong</ref>&lt; T, init_val, Tag &gt;</type>
        <definition>using vt::Strong = typedef util::strong::detail::Strong&lt;T, init_val, Tag&gt;</definition>
        <argsstring></argsstring>
        <name>Strong</name>
        <briefdescription>
<para>Type-alias for strong types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="195" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae7700e12f79c0fec16964aab84838428" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>::<ref refid="namespacevt_1a3a3ddfef40b4c90915fa43cdd5f129ea" kindref="member">vt::Message</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">vrt::collection::CollectionMessage</ref>&lt; ColT, MsgT &gt;</type>
        <definition>using vt::CollectionMessage = typedef vrt::collection::CollectionMessage&lt;ColT, MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/messages/user.h" line="151" column="1" bodyfile="src/vt/vrt/collection/messages/user.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac72e048964e4bb536faaa8bc90f58db7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection" kindref="compound">vrt::collection::Collection</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::Collection = typedef vrt::collection::Collection&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>Collection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/types/type_aliases.h" line="61" column="1" bodyfile="src/vt/vrt/collection/types/type_aliases.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3fe0bbd9abf8f98d69d9f73c9f89e0a5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection" kindref="compound">vrt::collection::Collection</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::InsertableCollection = typedef vrt::collection::Collection&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>InsertableCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/types/type_aliases.h" line="64" column="1" bodyfile="src/vt/vrt/collection/types/type_aliases.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2be17f5dafb626fe9f58d762b6aad2f0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_proxy" kindref="compound">vrt::collection::CollectionProxy</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::CollectionIndexProxy = typedef vrt::collection::CollectionProxy&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionIndexProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/proxy/collection_proxy.h" line="124" column="1" bodyfile="src/vt/vrt/proxy/collection_proxy.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0d58a693bfb96e0ce5d145692a1a1f98" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_proxy" kindref="compound">vrt::collection::CollectionProxy</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::CollectionProxy = typedef vrt::collection::CollectionProxy&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/proxy/collection_proxy.h" line="127" column="1" bodyfile="src/vt/vrt/proxy/collection_proxy.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacevt_1a2beda9a3549e42fb6b45a40d106629a2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1_1runtime_1afca910c1b38b3975f7c1da8001a77d58" kindref="member">runtime::RuntimeInstType</ref></type>
        <definition>constexpr const runtime::RuntimeInstType vt::collective_default_inst</definition>
        <argsstring></argsstring>
        <name>collective_default_inst</name>
        <initializer>=
  runtime::RuntimeInstType::DefaultInstance</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="57" column="49" bodyfile="src/vt/collective/collective_ops.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a07abc8f1752a784f54c226bbc4c3b1fe" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1runtime_1_1_runtime" kindref="compound">runtime::Runtime</ref> *</type>
        <definition>runtime::Runtime * vt::curRT</definition>
        <argsstring></argsstring>
        <name>curRT</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_inst.cc" line="52" column="18" bodyfile="src/vt/runtime/runtime_inst.cc" bodystart="52" bodyend="-1" declfile="src/vt/runtime/runtime_inst.h" declline="69" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac16b1bb5f9be850ebea17dd8ed9d00b1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>constexpr const NodeType vt::uninitialized_destination</definition>
        <argsstring></argsstring>
        <name>uninitialized_destination</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>&gt;(0xFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="53" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a64610db9515389fa7b2c3713d970c65d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>constexpr const PhysicalResourceType vt::no_workers</definition>
        <argsstring></argsstring>
        <name>no_workers</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref>&gt;(0xFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="55" column="45" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a76b4792e24ddd1b25f777103d1b2c042" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const uint64_t</type>
        <definition>constexpr const uint64_t vt::u64empty</definition>
        <argsstring></argsstring>
        <name>u64empty</name>
        <initializer>= 0xFFFFFFFFFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="58" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa3999744c74d8f5ab0c7b96a739fbfd0" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const uint32_t</type>
        <definition>constexpr const uint32_t vt::u32empty</definition>
        <argsstring></argsstring>
        <name>u32empty</name>
        <initializer>= 0xFEEDFEED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="59" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae3da28a576618e76f06011571c553207" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const int64_t</type>
        <definition>constexpr const int64_t vt::s64empty</definition>
        <argsstring></argsstring>
        <name>s64empty</name>
        <initializer>= 0xFFFFFFFFFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="60" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1abd38b10159969a1ca7f3bb3fd5f7551a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const int32_t</type>
        <definition>constexpr const int32_t vt::s32empty</definition>
        <argsstring></argsstring>
        <name>s32empty</name>
        <initializer>= 0xFEEDFEED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="61" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a2e27cbeca258f30fb22766c9ab8ccbf3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const int</type>
        <definition>constexpr const int vt::num_check_actions</definition>
        <argsstring></argsstring>
        <name>num_check_actions</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="64" column="28" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aee23d2bc67d123cd22c928e99edd9118" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>constexpr const TagType vt::no_tag</definition>
        <argsstring></argsstring>
        <name>no_tag</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="65" column="32" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a0a2d85d8807315ae767fd6e375181d69" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>constexpr const EventType vt::no_event</definition>
        <argsstring></argsstring>
        <name>no_event</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="66" column="34" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1af9a34308794328c5113855ec76e2e9fb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref></type>
        <definition>constexpr const BarrierType vt::no_barrier</definition>
        <argsstring></argsstring>
        <name>no_barrier</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="67" column="36" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a2ee10c4439b85ebcded5e6b90d163fb8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a10442579ec4e7ebef223818e64bcf908" kindref="member">RDMA_HandleType</ref></type>
        <definition>constexpr const RDMA_HandleType vt::no_rdma_handle</definition>
        <argsstring></argsstring>
        <name>no_rdma_handle</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="68" column="40" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a0fa5d6b1713278dd4c6a107c7a56136b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
        <definition>constexpr const ByteType vt::no_byte</definition>
        <argsstring></argsstring>
        <name>no_byte</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="69" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a89d1c55d0ddd1d4e2414a783f0b44b5d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
        <definition>constexpr const ByteType vt::no_offset</definition>
        <argsstring></argsstring>
        <name>no_offset</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="70" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aac9a4a978eb03fc99ef559b45a3bf5f5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto vt::no_action</definition>
        <argsstring></argsstring>
        <name>no_action</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="71" column="23" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a9ccdefdfcb1268ed2ec22ee335b6b668" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1aab05b4a584f7ee835a6d0f66915cf59b" kindref="member">RDMA_PtrType</ref></type>
        <definition>constexpr const RDMA_PtrType vt::no_rdma_ptr</definition>
        <argsstring></argsstring>
        <name>no_rdma_ptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="72" column="37" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1afcf3dcd03912e3d41c1f35cc39ec8360" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
        <definition>constexpr const VirtualProxyType vt::no_vrt_proxy</definition>
        <argsstring></argsstring>
        <name>no_vrt_proxy</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="73" column="41" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a7cd8b5f59c6ed165a9ed88b99d4aedb6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>constexpr const HandlerType vt::uninitialized_handler</definition>
        <argsstring></argsstring>
        <name>uninitialized_handler</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="74" column="36" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a5c6b8a85f07bf23c00d868daefca2a0c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a9530efb893c0f3846e8ac5f0507e0f49" kindref="member">RDMA_HandlerType</ref></type>
        <definition>constexpr const RDMA_HandlerType vt::uninitialized_rdma_handler</definition>
        <argsstring></argsstring>
        <name>uninitialized_rdma_handler</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="75" column="41" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8a658e7755693c1059c3a8b7b2f8e67d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a60fda95dc2316580f0ccf87d570f1d9e" kindref="member">RefType</ref></type>
        <definition>constexpr const RefType vt::not_shared_message</definition>
        <argsstring></argsstring>
        <name>not_shared_message</name>
        <initializer>= 65535</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="76" column="32" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a6854fc5f066dca967bee50c8f5b42021" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1ae54d2ca8f6bb4d65faf65118c82cd6f7" kindref="member">RDMA_BlockType</ref></type>
        <definition>constexpr const RDMA_BlockType vt::no_rdma_block</definition>
        <argsstring></argsstring>
        <name>no_rdma_block</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="77" column="39" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8d5c25e958d114707839b2440e6d119b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1ae2e13198bdef4d5b8e603d6c1c7f0969" kindref="member">SeedType</ref></type>
        <definition>constexpr const SeedType vt::no_seed</definition>
        <argsstring></argsstring>
        <name>no_seed</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="78" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8b65a059587c7188a4c55aef851b21ff" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1ac115668758184050beff7a9281a2c490" kindref="member">VirtualElmCountType</ref></type>
        <definition>constexpr const VirtualElmCountType vt::no_elms</definition>
        <argsstring></argsstring>
        <name>no_elms</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="79" column="44" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ad3388eac7e6dad28eae504a1be131a07" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>constexpr const TagType vt::local_rdma_op_tag</definition>
        <argsstring></argsstring>
        <name>local_rdma_op_tag</name>
        <initializer>= s32empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="80" column="32" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae004bed5659c801b459bdb20191c0e0a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>constexpr const GroupType vt::no_group</definition>
        <argsstring></argsstring>
        <name>no_group</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="81" column="34" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a6c442e072ced6b6dcf398f881769e94c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>constexpr const GroupType vt::default_group</definition>
        <argsstring></argsstring>
        <name>default_group</name>
        <initializer>= 0xFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="82" column="34" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a12c9e36568bedda5f417e1d6ad4ba4b3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
        <definition>constexpr const PhaseType vt::fst_lb_phase</definition>
        <argsstring></argsstring>
        <name>fst_lb_phase</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="83" column="34" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8a8ed62571b4b624ad6b497baba1a372" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
        <definition>constexpr const PhaseType vt::no_lb_phase</definition>
        <argsstring></argsstring>
        <name>no_lb_phase</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="84" column="34" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a326e020f2d09ab5d047df88a81bf7549" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
        <definition>constexpr const PipeType vt::no_pipe</definition>
        <argsstring></argsstring>
        <name>no_pipe</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="85" column="33" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae99c1529e9cbd67131a890dcd304dbf6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
        <definition>constexpr const ObjGroupProxyType vt::no_obj_group</definition>
        <argsstring></argsstring>
        <name>no_obj_group</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="86" column="42" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a55e319df6da5adfdf230386c5897c687" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" kindref="member">SequentialIDType</ref></type>
        <definition>constexpr const SequentialIDType vt::no_seq_id</definition>
        <argsstring></argsstring>
        <name>no_seq_id</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="87" column="41" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a130ba394230507a25340cfeaf8942421" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" kindref="member">SequentialIDType</ref></type>
        <definition>constexpr const SequentialIDType vt::first_seq_id</definition>
        <argsstring></argsstring>
        <name>first_seq_id</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="88" column="41" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1af6d052d45124efeb39b066ebd262aaf8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>constexpr const PriorityType vt::no_priority</definition>
        <argsstring></argsstring>
        <name>no_priority</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="89" column="37" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ab2bef300e176411b49c7e2d6477514fd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
        <definition>constexpr const PriorityLevelType vt::no_priority_level</definition>
        <argsstring></argsstring>
        <name>no_priority_level</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="90" column="42" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a03fdc66b365e76bee445beab417e6f25" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" kindref="member">ThreadIDType</ref></type>
        <definition>constexpr const ThreadIDType vt::no_thread_id</definition>
        <argsstring></argsstring>
        <name>no_thread_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="91" column="37" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a6d49bc121a27f33cd89855e42cd3210f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a74091f087d3a26643d18f66c7fb7da8d" kindref="member">SharedIDType</ref></type>
        <definition>constexpr const SharedIDType vt::no_shared_id</definition>
        <argsstring></argsstring>
        <name>no_shared_id</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="92" column="37" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8e28c73a15606e1e75b94ea59bdc77e5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::node_num_bits</definition>
        <argsstring></argsstring>
        <name>node_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="53" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a58f8a5e73978a5ea4d0d4829a70daae2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::handler_num_bits</definition>
        <argsstring></argsstring>
        <name>handler_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="55" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a7fc738470c58cf72be35528806bd7ae1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::ref_num_bits</definition>
        <argsstring></argsstring>
        <name>ref_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a60fda95dc2316580f0ccf87d570f1d9e" kindref="member">RefType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="57" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a99cdcc29441c515048716f32c9d8d083" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::epoch_num_bits</definition>
        <argsstring></argsstring>
        <name>epoch_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1_1epoch_1_1detail_1a9adc5df96a521e516dc20511eb553075" kindref="member">vt::epoch::detail::EpochImplType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="59" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a34ff5d948dd56b40d15645a3d5186239" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::tag_num_bits</definition>
        <argsstring></argsstring>
        <name>tag_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="61" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1af846c64d8db0a9476f7465ad721a203f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::group_num_bits</definition>
        <argsstring></argsstring>
        <name>group_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="63" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa58381b0db3bc62c0e7963ce5cd05719" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::priority_num_bits</definition>
        <argsstring></argsstring>
        <name>priority_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="65" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1acec8c564d0a7489a145795ed57e4cbec" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::priority_level_num_bits</definition>
        <argsstring></argsstring>
        <name>priority_level_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="67" column="5" bodyfile="src/vt/configs/types/types_size.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1acae2669f0501c3df159fbdf911eb2ed9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>constexpr const EpochType vt::no_epoch</definition>
        <argsstring></argsstring>
        <name>no_epoch</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>The sentinel value for a empty epoch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="162" column="34" bodyfile="src/vt/epoch/epoch_type.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a570bc5403031e45a957476ffae6f67c1" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::event_finished_han</definition>
        <argsstring></argsstring>
        <name>event_finished_han</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event_msgs.h" line="74" column="20" declfile="src/vt/event/event_msgs.h" declline="74" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a9764c5fa4f463d23a7db5d56cc121881" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::check_event_finished_han</definition>
        <argsstring></argsstring>
        <name>check_event_finished_han</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event_msgs.h" line="75" column="20" declfile="src/vt/event/event_msgs.h" declline="75" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a87c7c78e44305a0fe01439650bb8a539" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a59ae068fe828d1c33051ff96f3d016b6" kindref="member">HandlerIdentifierType</ref></type>
        <definition>constexpr const HandlerIdentifierType vt::first_handle_identifier</definition>
        <argsstring></argsstring>
        <name>first_handle_identifier</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="64" column="46" bodyfile="src/vt/handler/handler.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa21333a4180477be435dc519001a70cf" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a59ae068fe828d1c33051ff96f3d016b6" kindref="member">HandlerIdentifierType</ref></type>
        <definition>constexpr const HandlerIdentifierType vt::uninitialized_handle_identifier</definition>
        <argsstring></argsstring>
        <name>uninitialized_handle_identifier</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="65" column="46" bodyfile="src/vt/handler/handler.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aae35011c95785aca17a51a6698db7519" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>constexpr const HandlerType vt::blank_handler</definition>
        <argsstring></argsstring>
        <name>blank_handler</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="66" column="36" bodyfile="src/vt/handler/handler.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a26a2dac8c8a1b341394f795f521ed893" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::auto_num_bits</definition>
        <argsstring></argsstring>
        <name>auto_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="68" column="37" bodyfile="src/vt/handler/handler.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a46a3edc19e8ba6a45181bad0b912cf99" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::functor_num_bits</definition>
        <argsstring></argsstring>
        <name>functor_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="69" column="37" bodyfile="src/vt/handler/handler.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aca513e562a3f5e02d7015fa5b702e598" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::trace_num_bits</definition>
        <argsstring></argsstring>
        <name>trace_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="70" column="37" bodyfile="src/vt/handler/handler.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a413aadefb81f8b0acf11aa12d9cef2fd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::control_num_bits</definition>
        <argsstring></argsstring>
        <name>control_num_bits</name>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="71" column="37" bodyfile="src/vt/handler/handler.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aeafe36e63dee0d2b9da70ee7b704e2b9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::base_msg_derived_num_bits</definition>
        <argsstring></argsstring>
        <name>base_msg_derived_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="72" column="37" bodyfile="src/vt/handler/handler.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a56cb0b71b4f2930f454f80c9628b7ca1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::registry_type_bits</definition>
        <argsstring></argsstring>
        <name>registry_type_bits</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="73" column="37" bodyfile="src/vt/handler/handler.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a895696c7b8268cfa193d7a9b2406e931" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref></type>
        <definition>constexpr const BitCountType vt::handler_id_num_bits</definition>
        <argsstring></argsstring>
        <name>handler_id_num_bits</name>
        <initializer>=
 <ref refid="namespacevt_1a34b3eb2eea8db3cf4ae27ced35b19b46" kindref="member">BitCounterType</ref>&lt;<ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>&gt;::value - (
     auto_num_bits
   + functor_num_bits
   + control_num_bits
   + trace_num_bits
   + base_msg_derived_num_bits
   + registry_type_bits
 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="74" column="37" bodyfile="src/vt/handler/handler.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae446ed1f5bb8bba34af5c747ea1f244d" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1from__s" kindref="compound">from_s</ref></type>
        <definition>from_s vt::rdma_from</definition>
        <argsstring></argsstring>
        <name>rdma_from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.cc" line="48" column="8" bodyfile="src/vt/rdma/rdma_types.cc" bodystart="48" bodyend="-1" declfile="src/vt/rdma/rdma_types.h" declline="101" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a627aea388cdbf2818bf1393dca90938e" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1to__s" kindref="compound">to_s</ref></type>
        <definition>to_s vt::rdma_to</definition>
        <argsstring></argsstring>
        <name>rdma_to</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.cc" line="49" column="6" bodyfile="src/vt/rdma/rdma_types.cc" bodystart="49" bodyend="-1" declfile="src/vt/rdma/rdma_types.h" declline="102" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1acce65ec10b513659274e722365aaa36d" prot="public" static="no" mutable="no">
        <type>::<ref refid="structvt_1_1runtime_1_1_runtime" kindref="compound">vt::runtime::Runtime</ref> *</type>
        <definition>runtime::Runtime * vt::rt</definition>
        <argsstring></argsstring>
        <name>rt</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_inst.cc" line="53" column="24" bodyfile="src/vt/runtime/runtime_inst.cc" bodystart="53" bodyend="-1" declfile="src/vt/runtime/runtime_inst.h" declline="70" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a156fb1330862ba3946cd001a98adf5b5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1_1sched_1a2dbd1daff26f79efbff3f418ad9b2a8b" kindref="member">sched::PriorityArrayType</ref></type>
        <definition>constexpr sched::PriorityArrayType vt::breadth_priority</definition>
        <argsstring></argsstring>
        <name>breadth_priority</name>
        <initializer>= <ref refid="namespacevt_1_1sched_1a4a522d8f67561a0ae0446769584c2deb" kindref="member">sched::breadthArray</ref>&lt;&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="228" column="43" bodyfile="src/vt/scheduler/priority.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a2708bc34cf707128668c95dc18ec277d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1_1sched_1a2dbd1daff26f79efbff3f418ad9b2a8b" kindref="member">sched::PriorityArrayType</ref></type>
        <definition>constexpr sched::PriorityArrayType vt::medium_priority</definition>
        <argsstring></argsstring>
        <name>medium_priority</name>
        <initializer>= <ref refid="namespacevt_1_1sched_1a05afd033ab9ecc1f0d1dc37b8b9b7827" kindref="member">sched::mediumArray</ref>&lt;&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="229" column="43" bodyfile="src/vt/scheduler/priority.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1afd299530f78d3789ddcc0aa56d7e2ad4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>constexpr const PriorityType vt::sys_max_priority</definition>
        <argsstring></argsstring>
        <name>sys_max_priority</name>
        <initializer>= breadth_priority[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="230" column="37" bodyfile="src/vt/scheduler/priority.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ad448820bd445609a1c28cce369fbfbb8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>constexpr const PriorityType vt::sys_min_priority</definition>
        <argsstring></argsstring>
        <name>sys_min_priority</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="231" column="37" bodyfile="src/vt/scheduler/priority.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1af099b6c1d0719d26b0e74b3d4ec4d489" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>constexpr const PriorityType vt::max_priority</definition>
        <argsstring></argsstring>
        <name>max_priority</name>
        <initializer>= breadth_priority[1]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="232" column="37" bodyfile="src/vt/scheduler/priority.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aeff99dc67b5a76c06582f5e90c83ae84" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>constexpr const PriorityType vt::min_priority</definition>
        <argsstring></argsstring>
        <name>min_priority</name>
        <initializer>= medium_priority[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="233" column="37" bodyfile="src/vt/scheduler/priority.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aaa157acc64535bdc02f118f9a8999af8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>constexpr const PriorityType vt::default_priority</definition>
        <argsstring></argsstring>
        <name>default_priority</name>
        <initializer>= <ref refid="structvt_1_1sched_1_1_default_mask" kindref="compound">sched::DefaultMask</ref>&lt;&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="234" column="37" bodyfile="src/vt/scheduler/priority.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1ad36ca8eb7e5b9cc794a793b290b9c2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::abort</definition>
        <argsstring>(std::string const str, int32_t const code)</argsstring>
        <name>abort</name>
        <param>
          <type>std::string const</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int32_t const</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/basic.cc" line="52" column="6" bodyfile="src/vt/collective/basic.cc" bodystart="52" bodyend="56" declfile="src/vt/collective/basic.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a3435f69ba053685a43d1d49317d635de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::output</definition>
        <argsstring>(std::string const &amp;str, int32_t const code, bool error, bool formatted, bool decorate, bool abort_out)</argsstring>
        <name>output</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int32_t const</type>
          <declname>code</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>formatted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>decorate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>abort_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/basic.cc" line="58" column="6" bodyfile="src/vt/collective/basic.cc" bodystart="58" bodyend="67" declfile="src/vt/collective/basic.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aff96ace008dc847d4c0f44cfa5dfb3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vt::rerror</definition>
        <argsstring>(char const *str)</argsstring>
        <name>rerror</name>
        <param>
          <type>char const *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/basic.cc" line="69" column="5" bodyfile="src/vt/collective/basic.cc" bodystart="69" bodyend="75" declfile="src/vt/collective/basic.h" declline="56" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa8e0c0ab253e7ad1acd5d09e36fea769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1_collective_alg" kindref="compound">collective::CollectiveAlg</ref> *</type>
        <definition>collective::CollectiveAlg * vt::theCollective</definition>
        <argsstring>()</argsstring>
        <name>theCollective</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="101" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="101" bodyend="101" declfile="src/vt/collective/collective_alg.h" declline="169" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a92861d98501258a2800b90420bb116ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1arguments_1_1_argv_container" kindref="compound">arguments::ArgvContainer</ref> &gt;</type>
        <definition>std::unique_ptr&lt; arguments::ArgvContainer &gt; vt::preconfigure</definition>
        <argsstring>(int &amp;argc, char **&amp;argv)</argsstring>
        <name>preconfigure</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="53" column="1" bodyfile="src/vt/collective/startup.cc" bodystart="53" bodyend="55" declfile="src/vt/collective/startup.h" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a30208aeb42d41dc7534b32bf07ee7985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initializePreconfigured</definition>
        <argsstring>(MPI_Comm *comm, arguments::AppConfig const *appConfig, arguments::ArgvContainer const *preconfigure_args)</argsstring>
        <name>initializePreconfigured</name>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> const *</type>
          <declname>appConfig</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1arguments_1_1_argv_container" kindref="compound">arguments::ArgvContainer</ref> const *</type>
          <declname>preconfigure_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="57" column="16" bodyfile="src/vt/collective/startup.cc" bodystart="57" bodyend="71" declfile="src/vt/collective/startup.h" declline="56" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a580ef23e9a224fc0907da1a6db308b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, MPI_Comm *comm, arguments::AppConfig const *appConfig)</argsstring>
        <name>initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> const *</type>
          <declname>appConfig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="74" column="16" bodyfile="src/vt/collective/startup.cc" bodystart="74" bodyend="81" declfile="src/vt/collective/startup.h" declline="61" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9e13ed8a04b3395bbff2f035cae656af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(MPI_Comm *comm)</argsstring>
        <name>initialize</name>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="83" column="16" bodyfile="src/vt/collective/startup.cc" bodystart="83" bodyend="88" declfile="src/vt/collective/startup.h" declline="65" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1abc3ee2a9bd23da2ae2ffc703d1779b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, arguments::AppConfig const *appConfig)</argsstring>
        <name>initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> const *</type>
          <declname>appConfig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="90" column="16" bodyfile="src/vt/collective/startup.cc" bodystart="90" bodyend="94" declfile="src/vt/collective/startup.h" declline="66" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9aa3720155b98fe5d498469cd43ba7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(arguments::AppConfig const *appConfig)</argsstring>
        <name>initialize</name>
        <param>
          <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> const *</type>
          <declname>appConfig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="96" column="16" bodyfile="src/vt/collective/startup.cc" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a540d90dbd6e97b69f1dcbc9ee9314cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::finalize</definition>
        <argsstring>(RuntimePtrType in_rt)</argsstring>
        <name>finalize</name>
        <param>
          <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
          <declname>in_rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="102" column="6" bodyfile="src/vt/collective/startup.cc" bodystart="102" bodyend="108" declfile="src/vt/collective/startup.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ae8e663109f635cbeca94c39b89b4683c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="110" column="6" bodyfile="src/vt/collective/startup.cc" bodystart="110" bodyend="112" declfile="src/vt/collective/startup.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> *</type>
        <definition>vt::arguments::AppConfig * vt::theConfig</definition>
        <argsstring>()</argsstring>
        <name>theConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="118" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="118" bodyend="118" declfile="src/vt/configs/arguments/app_config.h" declline="431" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1acf9462cfd6a8ac89af3346dfc7ada772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(all)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>all</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="233" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="233" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1afea784305c9f1772dac4f4f10030eec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(none)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>none</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="234" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="234" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab642c359ee1459a19ca5569abab8f8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(gen)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>gen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="235" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="235" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a0a4e0fe79471843ed5a9147a3999b817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(runtime)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>runtime</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="236" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="236" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aaadf644fae9261561bb16233f1236587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(active)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>active</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="237" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="237" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1adb4fd0fa2066e9755d34af0e6ee0d2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(term)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>term</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="238" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad496742d76660d1c09948a97978048ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(termds)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>termds</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="239" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="239" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1c205bce8e59515b433a1f1442b9b66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(barrier)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>barrier</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="240" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a40ebe0dfd97e226e418c7ea46eb0d7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(event)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>event</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="241" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="241" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a71136fc3d3142f41e9a199e62ce8353c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(pipe)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>pipe</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="242" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="242" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a7624c9858c93adb4020077c4f68d2eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(pool)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>pool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="243" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="243" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a84c286af295eaf2782e7cb85301b003d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(reduce)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>reduce</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="244" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="244" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a7392486739effccf126ee84c1e30cca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(rdma)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>rdma</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="245" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="245" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab40737e3d1de24e6a287c81f2708c6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(rdma_channel)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>rdma_channel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="246" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="246" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1afff708430bcf409f5b2f3f460f1fb73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(rdma_state)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>rdma_state</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="247" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="247" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a90f73b6c953eb077ccf9175d9c711ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(param)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>param</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="248" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="248" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa4b265bf4cbeb0c9f61c09e813ccaff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(handler)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>handler</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="249" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a8daecd978da63d1df72e9a9cc0bffc49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(hierlb)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>hierlb</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="250" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="250" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a822d445a8154b6ea29badc31cb81aaf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(temperedlb)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>temperedlb</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="251" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="251" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a975b532b19a5fa1ed3f207b0e8851fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(scatter)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>scatter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="252" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="252" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4ea6f0894f8deef49b15a4c6f26d884b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(serial_msg)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>serial_msg</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="253" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a81fc517b7158102e1f7fb66cebe33e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(trace)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>trace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="254" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="254" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a682a4a87b64283df9f1063b6491e7bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(location)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>location</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="255" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="255" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9327c3778e8ba538cb72b7fdd45aea12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(lb)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>lb</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="256" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9c54ebbddb25a7d81ffe4fc468802374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(vrt)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>vrt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="257" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="257" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4bd585a459c900cdad5a56714ce92117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(vrt_coll)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>vrt_coll</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="258" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="258" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a3e9129a32a218d374bd0621949e9aaf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(worker)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>worker</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="259" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad34fbceb21886656063fc2cbe9d48505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(group)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>group</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="260" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="260" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aef03874b94184cf243952f547b0e82c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(broadcast)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>broadcast</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="261" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="261" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a501bb44cff50ef10c87bc14ab6130fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(objgroup)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>objgroup</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="262" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a113f563d569a7ad8d995e260d6887bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(phase)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>phase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="263" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="263" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a64148ce9910dd063178241c3fafcc19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(context)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>context</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="264" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="264" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a6f16341dcf3744fca647c111f6a442cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vt_declare_debug_scoped_modifiers</definition>
        <argsstring>(epoch)</argsstring>
        <name>vt_declare_debug_scoped_modifiers</name>
        <param>
          <type>epoch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="265" column="1" declfile="src/vt/configs/debug/debug_print.h" declline="265" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa6fe252e38e90473ff359bfa7586bc8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt;</type>
        <definition>std::enable_if_t&lt;std::tuple_size&lt;std::tuple&lt;Args...&gt; &gt;::value != 0&gt; vt::warningImpl</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, Args &amp;&amp;... args)</argsstring>
        <name>warningImpl</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="69" column="1" bodyfile="src/vt/configs/error/soft_error.h" bodystart="69" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ac2393b110683f788d50b4a83521676e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value==0 &gt;</type>
        <definition>std::enable_if_t&lt;std::tuple_size&lt;std::tuple&lt;Args...&gt; &gt;::value == 0&gt; vt::warningImpl</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, [[maybe_unused]] Args &amp;&amp;... args)</argsstring>
        <name>warningImpl</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="86" column="1" bodyfile="src/vt/configs/error/soft_error.h" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af998935c41a6f414a373f182156d72e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::warningImplTup</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, Tuple &amp;&amp;tup, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>warningImplTup</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="101" column="13" bodyfile="src/vt/configs/error/soft_error.h" bodystart="101" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af11de63df5da8fa58bd668f4e5026a72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::warning</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>warning</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="115" column="13" bodyfile="src/vt/configs/error/soft_error.h" bodystart="115" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1ctx_1_1_context" kindref="compound">ctx::Context</ref> *</type>
        <definition>ctx::Context * vt::theContext</definition>
        <argsstring>()</argsstring>
        <name>theContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="96" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="96" bodyend="96" declfile="src/vt/context/context.h" declline="187" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad246530e523687095c567ccab203556a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1epoch_1_1_epoch_manip" kindref="compound">epoch::EpochManip</ref> *</type>
        <definition>epoch::EpochManip * vt::theEpoch</definition>
        <argsstring>()</argsstring>
        <name>theEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="120" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="120" bodyend="120" declfile="src/vt/epoch/epoch_manip.h" declline="263" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa297fcaadc8a330890eb90c5b0081ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1event_1_1_async_event" kindref="compound">event::AsyncEvent</ref> *</type>
        <definition>event::AsyncEvent * vt::theEvent</definition>
        <argsstring>()</argsstring>
        <name>theEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="102" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="102" bodyend="102" declfile="src/vt/event/event.h" declline="233" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4548473dce44fb654400009e2b2fe64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1group_1_1_group_manager" kindref="compound">group::GroupManager</ref> *</type>
        <definition>group::GroupManager * vt::theGroup</definition>
        <argsstring>()</argsstring>
        <name>theGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="109" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="109" bodyend="109" declfile="src/vt/group/group_manager.h" declline="489" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger" kindref="compound">messaging::ActiveMessenger</ref> *</type>
        <definition>messaging::ActiveMessenger * vt::theMsg</definition>
        <argsstring>()</argsstring>
        <name>theMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="103" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="103" bodyend="103" declfile="src/vt/messaging/active.h" declline="1790" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad5495e7900227550b44837e899c5bb13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::envelopeGetEpoch</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetEpoch</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the epoch on an envelope; must be able to hold one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch in the envelope </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="53" column="18" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="53" bodyend="62" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="64" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4a0a9928690206b588dbcac2afb71088" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetEpoch</definition>
        <argsstring>(Env &amp;env, EpochType const &amp;epoch)</argsstring>
        <name>envelopeSetEpoch</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Set the epoch on an envelope; must be able to hold one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="65" column="13" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="65" bodyend="73" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af16ad10e40d8a2f2c1128068774c1bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::envelopeGetTag</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetTag</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the tag on an envelope; must be able to hold one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the tag in the envelope </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="76" column="16" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="76" bodyend="85" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="83" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a0eb7eef640bbf48bff94e6683be7a3dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetTag</definition>
        <argsstring>(Env &amp;env, TagType const &amp;tag)</argsstring>
        <name>envelopeSetTag</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Set the tag on an envelope; must be able to hold one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="88" column="13" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="88" bodyend="96" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="92" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ae56472f58b6582abacae687ead397380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(EpochEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1af71a025689a3da5037785b53a7a8e78c" kindref="member">EpochEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an epoch envelope with default values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="98" column="13" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="98" bodyend="103" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="99" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2c8d0d4109460ccb89316ca4b3cc3aea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(TagEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1a7b951ab92dca9319e12e3fc406ccb309" kindref="member">TagEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an tag envelope with default values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="105" column="13" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="105" bodyend="110" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a358f72f3e1d5ce12cca7d622ee512302" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(EpochTagEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1af23b58014ced6898422213a0e5e6a27a" kindref="member">EpochTagEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an epoch and tag envelope with default values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.impl.h" line="112" column="13" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="112" bodyend="119" declfile="src/vt/messaging/envelope/envelope_extended_util.h" declline="113" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad3c1fff07670b717ba492d97e9eecc48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::envelopeGetHandler</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetHandler</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the handler on an envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the handler in the envelope </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.impl.h" line="53" column="20" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="53" bodyend="55" declfile="src/vt/messaging/envelope/envelope_get.h" declline="65" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a99cdbbb47f13203e14b01fa43bca99e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::envelopeGetDest</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetDest</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the destination node on an envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the destination node in the envelope </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.impl.h" line="58" column="17" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="58" bodyend="60" declfile="src/vt/messaging/envelope/envelope_get.h" declline="75" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a3f298caa64a97f60a0772b74cad8b620" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::envelopeGetDeliverBcast</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetDeliverBcast</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Check whether bcast should be delivered to sender. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether to deliver msg to sender </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.impl.h" line="63" column="13" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="63" bodyend="65" declfile="src/vt/messaging/envelope/envelope_get.h" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a76b9bdf05b27d6470bac66186c32d9eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::envelopeGetGroup</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeGetGroup</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the group on an envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group in the envelope </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.impl.h" line="68" column="18" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="68" bodyend="70" declfile="src/vt/messaging/envelope/envelope_get.h" declline="95" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad664e6e94c1ea309344adad1c3fb291c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a60fda95dc2316580f0ccf87d570f1d9e" kindref="member">RefType</ref></type>
        <definition>RefType vt::envelopeGetRef</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeGetRef</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the reference count on an envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the reference count in the envelope </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.impl.h" line="73" column="16" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="73" bodyend="75" declfile="src/vt/messaging/envelope/envelope_get.h" declline="105" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a68c41bd1b8addd0f8feea15a61d5c372" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeRef</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeRef</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Increase the reference count on an envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_ref.impl.h" line="53" column="13" bodyfile="src/vt/messaging/envelope/envelope_ref.impl.h" bodystart="53" bodyend="64" declfile="src/vt/messaging/envelope/envelope_ref.h" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a6083c0bb47b5d180acb1f32542833e67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a60fda95dc2316580f0ccf87d570f1d9e" kindref="member">RefType</ref></type>
        <definition>RefType vt::envelopeDeref</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeDeref</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Decrement and get (sub-fetch) reference count on envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference count after decrement </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_ref.impl.h" line="67" column="16" bodyfile="src/vt/messaging/envelope/envelope_ref.impl.h" bodystart="67" bodyend="73" declfile="src/vt/messaging/envelope/envelope_ref.h" declline="73" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa76e59d48d53aa1e4c60bd55ff520d6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setNormalType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setNormalType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Clear all type bits make &quot;normal&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="54" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="54" bodyend="57" declfile="src/vt/messaging/envelope/envelope_set.h" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4ecba7a91cd1d5a6b6473cbac2042c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setPipeType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setPipeType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set pipe bit <computeroutput>EnvPipe</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="60" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="60" bodyend="63" declfile="src/vt/messaging/envelope/envelope_set.h" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab25ac0a12270d261c2f5c3c634f6370e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setPutType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setPutType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set put bit <computeroutput>EnvPut</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="66" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="66" bodyend="69" declfile="src/vt/messaging/envelope/envelope_set.h" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa42d7e0adc8b283dd10602ece422699d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setTermType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setTermType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set term bit <computeroutput>EnvTerm</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="72" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="72" bodyend="75" declfile="src/vt/messaging/envelope/envelope_set.h" declline="87" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af6e10f3d27abb3321ca34830880c0f7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setBroadcastType</definition>
        <argsstring>(Env &amp;env, bool deliver_to_sender=true)</argsstring>
        <name>setBroadcastType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deliver_to_sender</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set broadcast bit (changes how <computeroutput>dest</computeroutput> is interpreted) <computeroutput>EnvBroadcast</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deliver_to_sender</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the message should be delivered to sender </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="78" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="78" bodyend="82" declfile="src/vt/messaging/envelope/envelope_set.h" declline="96" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1afb12c8cb2f8d47e2f06ffa25574f0dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setEpochType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setEpochType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set epoch bit <computeroutput>EnvEpoch</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Indicates that the envelope is either of type <computeroutput>EpochActiveEnvelope</computeroutput> or <computeroutput>EpochTagActiveEnvelope</computeroutput> depending on whether <computeroutput>EnvTag</computeroutput> is set or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="85" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="85" bodyend="88" declfile="src/vt/messaging/envelope/envelope_set.h" declline="107" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad088db89648b82eef7ca9b4837a907cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setTagType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setTagType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set tag bit <computeroutput>EnvTag</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Indicates that the envelope is either of type <computeroutput>TagActiveEnvelope</computeroutput> or <computeroutput>EpochTagActiveEnvelope</computeroutput> depending on whether <computeroutput>EnvEpoch</computeroutput> is set or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="91" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="91" bodyend="94" declfile="src/vt/messaging/envelope/envelope_set.h" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a48ddc3677e112fd6f53d0f918c21300e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetHandler</definition>
        <argsstring>(Env &amp;env, HandlerType const handler)</argsstring>
        <name>envelopeSetHandler</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Set handler field in envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="97" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="97" bodyend="100" declfile="src/vt/messaging/envelope/envelope_set.h" declline="127" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a78ef1cf108e91a92d83c525fd16fbd4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetDest</definition>
        <argsstring>(Env &amp;env, NodeType const &amp;dest)</argsstring>
        <name>envelopeSetDest</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Set destination <computeroutput>dest</computeroutput> field in envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination if set or root if (non-group) broadcast </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="103" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="103" bodyend="106" declfile="src/vt/messaging/envelope/envelope_set.h" declline="136" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a43dd08b8f10d3a1c79872a759aa11662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetRef</definition>
        <argsstring>(Env &amp;env, RefType const &amp;ref=0)</argsstring>
        <name>envelopeSetRef</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a60fda95dc2316580f0ccf87d570f1d9e" kindref="member">RefType</ref> const &amp;</type>
          <declname>ref</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set reference count on envelope. </para>
        </briefdescription>
        <detaileddescription>
<para>This overrides the typical mechanism for (de-)referencing May be dangerous to set directly. Typically you should use this in special cases when the current reference count does not apply. For instance, when a message arrives off the network and the count needs to be reset.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ref</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="109" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="109" bodyend="112" declfile="src/vt/messaging/envelope/envelope_set.h" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9f9d4ce6034c0eaaf98bdffd33d0e1c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetGroup</definition>
        <argsstring>(Env &amp;env, GroupType const &amp;group=default_group)</argsstring>
        <name>envelopeSetGroup</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const &amp;</type>
          <declname>group</declname>
          <defval>default_group</defval>
        </param>
        <briefdescription>
<para>Set pipe bit <computeroutput>EnvPipe</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="115" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="115" bodyend="118" declfile="src/vt/messaging/envelope/envelope_set.h" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a32c449c2c4c6e0806cdab6798e275c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetHasBeenSerialized</definition>
        <argsstring>(Env &amp;env, bool has_been_serialized)</argsstring>
        <name>envelopeSetHasBeenSerialized</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_been_serialized</declname>
        </param>
        <briefdescription>
<para>Set whether this message&apos;s base serializer has been called. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">has_been_serialized</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicating message is serialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="149" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="149" bodyend="152" declfile="src/vt/messaging/envelope/envelope_set.h" declline="207" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a645d6c6a63b59b426bdf0b8644d7f2ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetCommLBDataRecordedAboveBareHandler</definition>
        <argsstring>(Env &amp;env, bool comm_lb_data_recorded_above_bare_handler)</argsstring>
        <name>envelopeSetCommLBDataRecordedAboveBareHandler</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>comm_lb_data_recorded_above_bare_handler</declname>
        </param>
        <briefdescription>
<para>Set whether this message shouldn&apos;t record bare handler communication data for LB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comm_lb_data_recorded_above_bare_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicating message shouldn&apos;t record bare handler LB data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="155" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="155" bodyend="160" declfile="src/vt/messaging/envelope/envelope_set.h" declline="218" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aeda768e2b7668340d73e5254a6b2923f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetIsLocked</definition>
        <argsstring>(Env &amp;env, bool is_locked)</argsstring>
        <name>envelopeSetIsLocked</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_locked</declname>
        </param>
        <briefdescription>
<para>Set whether this message&apos;s envelope is locked. </para>
        </briefdescription>
        <detaileddescription>
<para>A locked message will prevent key parts of the envelope from being updated with a guard assert. This is to prevent accidental edge-cases such as sending a message twice.</para>
<para>A message is locked when it is sent and received. Unlocking messages should be reserved for special cases as done in some core code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_locked</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicating if message is locked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="163" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="163" bodyend="165" declfile="src/vt/messaging/envelope/envelope_set.h" declline="236" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af3b1b3751353bac014e08070383062e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeUnlockForForwarding</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeUnlockForForwarding</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Unlock an envelope, denoting the use is a proxy handler. </para>
        </briefdescription>
        <detaileddescription>
<para>A received message is normally locked to discourage the re-usage of messages supplied to handlers. However, some proxy/forwarding handlers re-use the original message.</para>
<para>This is equivalent to calling <computeroutput>envelopeSetIsLocked</computeroutput> with false and should generally be set inside the message handler itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.impl.h" line="168" column="13" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="168" bodyend="170" declfile="src/vt/messaging/envelope/envelope_set.h" declline="251" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a28259c2647b43612398b9355a3e1916c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetup</definition>
        <argsstring>(Env &amp;env, NodeType const &amp;dest, HandlerType const handler)</argsstring>
        <name>envelopeSetup</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Setup an envelope for the first time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.impl.h" line="54" column="13" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="54" bodyend="59" declfile="src/vt/messaging/envelope/envelope_setup.h" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a26b669aa49c2c9fa4a0fb88902518adb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeInit</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeInit</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an envelope with default/sentinel values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.impl.h" line="62" column="13" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="62" bodyend="79" declfile="src/vt/messaging/envelope/envelope_setup.h" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2594d3d4a1f40c4db73713a8b62b24df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(Envelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1aa9c8cc094b5361482021d63012987814" kindref="member">Envelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an envelope without defaults. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.impl.h" line="81" column="13" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="81" bodyend="83" declfile="src/vt/messaging/envelope/envelope_setup.h" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a931b61a10a85d44d2355e984e40177ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeInitCopy</definition>
        <argsstring>(Env &amp;env, Env const &amp;src_env)</argsstring>
        <name>envelopeInitCopy</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>Env const &amp;</type>
          <declname>src_env</declname>
        </param>
        <briefdescription>
<para>Initialize an envelope via a copy. </para>
        </briefdescription>
        <detaileddescription>
<para>Some properties of the target envelope are preserved. The target envelope is left unlocked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the target envelope to init </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the original envelope to use as a copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.impl.h" line="86" column="13" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="86" bodyend="91" declfile="src/vt/messaging/envelope/envelope_setup.h" declline="92" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a16caa74ca477155c59de62474b2e1f89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeCopyBcastData</definition>
        <argsstring>(Env &amp;env, Env const &amp;src_env)</argsstring>
        <name>envelopeCopyBcastData</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>Env const &amp;</type>
          <declname>src_env</declname>
        </param>
        <briefdescription>
<para>Copy broadcast related data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the target envelope to copy to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the original envelope to use as a copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.impl.h" line="94" column="13" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="94" bodyend="99" declfile="src/vt/messaging/envelope/envelope_setup.h" declline="101" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ace3e4542ae09ecd9728bea6548d71d5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeInitRecv</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeInitRecv</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize/validate an envelope that has been received. </para>
        </briefdescription>
        <detaileddescription>
<para>The ref-count is set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.impl.h" line="102" column="13" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="102" bodyend="110" declfile="src/vt/messaging/envelope/envelope_setup.h" declline="111" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab507eac4b5cf7e2712f2c626b379498e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(PutShortEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1a4e561211bbf1d8d9a4766eb159852736" kindref="member">PutShortEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize a <computeroutput><ref refid="structvt_1_1_put_envelope" kindref="compound">PutEnvelope</ref></computeroutput> with extra put-related fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="86" column="13" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a56ab014300930ba8ffc902793035eca2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a2714874e46551037c873d5e4a6603cc1" kindref="member">PutPtrType</ref></type>
        <definition>PutPtrType vt::envelopeGetPutPtr</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetPutPtr</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the put pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the put pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="104" column="19" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1abbd3e4684f30ad052e43a1655f540b6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1aa241444e21c15238e185923792814fe4" kindref="member">PutEnvSizeType</ref></type>
        <definition>PutEnvSizeType vt::envelopeGetPutSize</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetPutSize</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the put payload byte length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the put length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="122" column="23" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="122" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aaf50340390d58fe42775ae5b8e413f28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::envelopeGetPutTag</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetPutTag</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the put tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the put tag </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="140" column="16" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="140" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a17f0a4c162ef2b8337dfeab15f1c3a5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetPutPtr</definition>
        <argsstring>(Env &amp;env, PutPtrConstType ptr, PutEnvSizeType size)</argsstring>
        <name>envelopeSetPutPtr</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab7485f5735971a4951ec5e13d8cbf388" kindref="member">PutPtrConstType</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aa241444e21c15238e185923792814fe4" kindref="member">PutEnvSizeType</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the put pointer and byte length for put. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the put pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the put byte length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="158" column="13" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="158" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4e63ee5cc991a0a2052300feaae4bd4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetPutPtrOnly</definition>
        <argsstring>(Env &amp;env, PutPtrConstType ptr)</argsstring>
        <name>envelopeSetPutPtrOnly</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab7485f5735971a4951ec5e13d8cbf388" kindref="member">PutPtrConstType</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set the put pointer only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the put pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="177" column="13" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="177" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a43128d4858572c9b60cfc1c420acc882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetPutTag</definition>
        <argsstring>(Env &amp;env, TagType const &amp;in_tag)</argsstring>
        <name>envelopeSetPutTag</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>in_tag</declname>
        </param>
        <briefdescription>
<para>Set the put tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the put tag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="193" column="13" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="193" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2206947364b94e9c7dba38df257d095b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setPackedPutType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setPackedPutType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set the envelope type bit for <computeroutput>EnvPackedPut</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="208" column="13" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aba8a23bc60c8177816d94e913aed6107" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::envelopeIsPackedPutType</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsPackedPutType</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if <computeroutput>EnvPackedPut</computeroutput> is set on the envelope. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="220" column="13" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa4a692a62fffd91e7e708d8047897a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messageRef</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>messageRef</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/refs.impl.h" line="54" column="6" bodyfile="src/vt/messaging/message/refs.impl.h" bodystart="54" bodyend="62" declfile="src/vt/messaging/message/refs.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a85f2aa61b92eeeedc61654cd4865b2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messageDeref</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>messageDeref</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/refs.impl.h" line="65" column="6" bodyfile="src/vt/messaging/message/refs.impl.h" bodystart="65" bodyend="88" declfile="src/vt/messaging/message/refs.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a6c87ed02a655497ee05109f3c50374fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>MsgT *</type>
        <definition>MsgT * vt::makeSharedMessage</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>makeSharedMessage</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new &apos;raw&apos; message. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>makeMessage</computeroutput>. </para>
</xrefdescription></xrefsect>Create a new message and initialize internal state. The arguments are forwarded down to the underlying message&apos;s constructor.</para>
<para><simplesect kind="warning"><para>The returned pointer represents a leaked object until &apos;promoted&apos; to a MsgPtr. While <computeroutput>theMsg</computeroutput> send API will automatically perform a promotion, automatic message promotion should generally not be relied upon.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a bare message pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.impl.h" line="94" column="6" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="94" bodyend="102" declfile="src/vt/messaging/message/shared_message.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1cad9543b26045826f0fa5d17a2dfd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>MsgT *</type>
        <definition>MsgT * vt::makeSharedMessageSz</definition>
        <argsstring>(std::size_t size, Args &amp;&amp;... args)</argsstring>
        <name>makeSharedMessageSz</name>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new &apos;raw&apos; message, of a given size. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>makeMessage</computeroutput>. </para>
</xrefdescription></xrefsect>Create a new message and initialize internal state. The arguments are forwarded down to the underlying message&apos;s constructor.</para>
<para><simplesect kind="warning"><para>The returned pointer represents a leaked object until &apos;promoted&apos; to a MsgPtr. While <computeroutput>theMsg</computeroutput> send API will automatically perform a promotion, automatic message promotion should generally not be relied upon.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>extra requested size at the end of message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a bare message pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.impl.h" line="105" column="6" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="105" bodyend="113" declfile="src/vt/messaging/message/shared_message.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a948c0bbe39c34326b5453065a461ebaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; MsgT &gt;</type>
        <definition>MsgPtr&lt; MsgT &gt; vt::makeMessage</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>makeMessage</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new message. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new message already wrapped in a MsgPtr. The arguments are forwarded down to the underlying message&apos;s constructor.</para>
<para>The lifetime of the message is controlled by MsgPtr and will be destroyed when the returned MsgPtr (and all copies of such) are destroyed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared message pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.impl.h" line="116" column="8" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="116" bodyend="119" declfile="src/vt/messaging/message/shared_message.h" declline="109" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a02d4a45f1b229ac6fd5da4bf289d6654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; MsgT &gt;</type>
        <definition>MsgPtr&lt; MsgT &gt; vt::makeMessageSz</definition>
        <argsstring>(std::size_t size, Args &amp;&amp;... args)</argsstring>
        <name>makeMessageSz</name>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new message, of a size. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new message already wrapped in a MsgPtr. The arguments are forwarded down to the underlying message&apos;s constructor.</para>
<para>The lifetime of the message is controlled by MsgPtr and will be destroyed when the returned MsgPtr (and all copies of such) are destroyed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>extra requested size at the end of message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared message pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.impl.h" line="122" column="8" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="122" bodyend="125" declfile="src/vt/messaging/message/shared_message.h" declline="126" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a67418c428a6a98bdc05c264ef8517dd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
        <definition>MsgPtr&lt;T&gt; vt::promoteMsgOwner</definition>
        <argsstring>(T *const msg)</argsstring>
        <name>promoteMsgOwner</name>
        <param>
          <type>T *const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obsolete form - do not use. There is no direct replacement; has_owner_ is removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="386" column="15" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af00ebdeb74801e5658cf5726193d5753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
        <definition>MsgPtr&lt;T&gt; vt::promoteMsg</definition>
        <argsstring>(MsgPtr&lt; T &gt; msg)</argsstring>
        <name>promoteMsg</name>
        <param>
          <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obsolete form - do not use. There is no direct replacement; has_owner_ is removed and the semantic operation differed from <ref refid="namespacevt_1a991383de8a150393ef67012fbe689dd0" kindref="member">promoteMsg(T*)</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="395" column="15" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="395" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a991383de8a150393ef67012fbe689dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
        <definition>MsgPtr&lt;T&gt; vt::promoteMsg</definition>
        <argsstring>(T *msg)</argsstring>
        <name>promoteMsg</name>
        <param>
          <type>T *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Wrap a message as a MsgPtr&lt;Msg&gt;, increasing ref-ownership. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same as using MsgPtr&lt;T&gt;{T*} directly. The primary usage is in historic call-sites as new code should prefer using <computeroutput>makeMessage</computeroutput> (and accepting a MsgPtr) instead of creating a raw message first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="408" column="15" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a431449da12f047af8e271f2270d6ffce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1metrics_1_1_perf_data" kindref="compound">metrics::PerfData</ref> *</type>
        <definition>metrics::PerfData* vt::thePerfData</definition>
        <argsstring>()</argsstring>
        <name>thePerfData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="195" column="26" declfile="src/vt/metrics/perf_data.h" declline="195" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a833f0115b692f578167cbd88e30d39c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1objgroup_1_1_obj_group_manager" kindref="compound">objgroup::ObjGroupManager</ref> *</type>
        <definition>objgroup::ObjGroupManager * vt::theObjGroup</definition>
        <argsstring>()</argsstring>
        <name>theObjGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="111" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="111" bodyend="111" declfile="src/vt/objgroup/manager.fwd.h" declline="82" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a3799d6b51fb71d7b6505760aad457e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1phase_1_1_phase_manager" kindref="compound">phase::PhaseManager</ref> *</type>
        <definition>vt::phase::PhaseManager * vt::thePhase</definition>
        <argsstring>()</argsstring>
        <name>thePhase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="119" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="119" bodyend="119" declfile="src/vt/phase/phase_manager.h" declline="287" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a673b109e94c7bca58313504c83e1da94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager" kindref="compound">pipe::PipeManager</ref> *</type>
        <definition>pipe::PipeManager * vt::theCB</definition>
        <argsstring>()</argsstring>
        <name>theCB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="110" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="110" bodyend="110" declfile="src/vt/pipe/pipe_manager.fwd.h" declline="71" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aab3530d89a64e5ea903b0ccf303ecbb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_pool" kindref="compound">pool::Pool</ref> *</type>
        <definition>pool::Pool * vt::thePool</definition>
        <argsstring>()</argsstring>
        <name>thePool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="97" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="97" bodyend="97" declfile="src/vt/pool/pool.h" declline="258" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a68b8410bc2b86d3b5228d7dbb6b40bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_r_d_m_a_manager" kindref="compound">rdma::RDMAManager</ref> *</type>
        <definition>rdma::RDMAManager * vt::theRDMA</definition>
        <argsstring>()</argsstring>
        <name>theRDMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="104" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="104" bodyend="104" declfile="src/vt/rdma/rdma.h" declline="953" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aecb87ec2c40b5b7fc57ba4cf8ea838b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_manager" kindref="compound">rdma::Manager</ref> *</type>
        <definition>rdma::Manager * vt::theHandleRDMA</definition>
        <argsstring>()</argsstring>
        <name>theHandleRDMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="112" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="112" bodyend="112" declfile="src/vt/rdmahandle/manager.fwd.h" declline="57" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad46b232b74b745991314a4a509c648f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1_virtual_context_manager" kindref="compound">vrt::VirtualContextManager</ref> *</type>
        <definition>vrt::VirtualContextManager * vt::theVirtualManager</definition>
        <argsstring>()</argsstring>
        <name>theVirtualManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="98" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="98" bodyend="98" declfile="src/vt/vrt/context/context_vrtmanager.h" declline="216" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4508b38e6ab664b64f1415aecbb83571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1sched_1_1_scheduler" kindref="compound">sched::Scheduler</ref> *</type>
        <definition>sched::Scheduler * vt::theSched</definition>
        <argsstring>()</argsstring>
        <name>theSched</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="105" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="105" bodyend="105" declfile="src/vt/scheduler/scheduler.h" declline="482" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a127580fdfcaba0b4171e5c48c5676733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_termination_detector" kindref="compound">term::TerminationDetector</ref> *</type>
        <definition>term::TerminationDetector * vt::theTerm</definition>
        <argsstring>()</argsstring>
        <name>theTerm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="106" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="106" bodyend="106" declfile="src/vt/termination/term_common.h" declline="65" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ace1c9d64e09732e3b7414d02517ecfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1location_1_1_location_manager" kindref="compound">location::LocationManager</ref> *</type>
        <definition>location::LocationManager * vt::theLocMan</definition>
        <argsstring>()</argsstring>
        <name>theLocMan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="107" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="107" bodyend="107" declfile="src/vt/topos/location/manager.h" declline="213" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1c45ce63bfd2c327ff7d76a319a371d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a290f7e8941f9f411b54cdb15b6cea107" kindref="member">CollectionManagerType</ref> *</type>
        <definition>vrt::collection::CollectionManager * vt::theCollection</definition>
        <argsstring>()</argsstring>
        <name>theCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="108" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="108" bodyend="108" declfile="src/vt/vrt/collection/manager.fwd.h" declline="61" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a38d485d3cf840b9a623e47e7754ef72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage" kindref="compound">util::memory::MemoryUsage</ref> *</type>
        <definition>util::memory::MemoryUsage * vt::theMemUsage</definition>
        <argsstring>()</argsstring>
        <name>theMemUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="113" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="113" bodyend="113" declfile="src/vt/utils/memory/memory_usage.h" declline="202" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af2ddfbdc455e98a0d46732522d8cf589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a19cb20485baa09ecc30086fbc62fd6ef" kindref="member">NodeLBDataType</ref> *</type>
        <definition>vrt::collection::balance::NodeLBData * vt::theNodeLBData</definition>
        <argsstring>()</argsstring>
        <name>theNodeLBData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="114" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="114" bodyend="114" declfile="src/vt/vrt/collection/balance/node_lb_data.h" declline="322" declcolumn="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a6dc000b04e41df77184588b50280b312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1afa4cbc17d753afab37e21dd902f68e9e" kindref="member">LBDataRestartReaderType</ref> *</type>
        <definition>vrt::collection::balance::LBDataRestartReader * vt::theLBDataReader</definition>
        <argsstring>()</argsstring>
        <name>theLBDataReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="115" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="115" bodyend="115" declfile="src/vt/vrt/collection/balance/lb_data_restart_reader.h" declline="254" declcolumn="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a05187076eac8c66c9951b062b0955520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a1ae0212259259772d2e857f497714e1b" kindref="member">LBManagerType</ref> *</type>
        <definition>vrt::collection::balance::LBManager * vt::theLBManager</definition>
        <argsstring>()</argsstring>
        <name>theLBManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="116" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="116" bodyend="116" declfile="src/vt/vrt/collection/balance/lb_invoke/lb_manager.h" declline="331" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1e1a39cdf2a3fc1adefcdfcca4716bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1ab6a0fefc7e53fbe4eaec0fef22ae15e3" kindref="member">TimeTriggerManagerType</ref> *</type>
        <definition>timetrigger::TimeTriggerManager * vt::theTimeTrigger</definition>
        <argsstring>()</argsstring>
        <name>theTimeTrigger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="117" column="28" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="117" bodyend="117" declfile="src/vt/timetrigger/time_trigger_manager.h" declline="127" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa550774c1c9c668176ce535fd7d58fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runSchedulerThrough</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>runSchedulerThrough</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.cc" line="399" column="6" bodyfile="src/vt/scheduler/scheduler.cc" bodystart="399" bodyend="407" declfile="src/vt/scheduler/scheduler.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9f5cbbc484d7f14f2ad0ee46d62dfb6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochRooted</definition>
        <argsstring>(Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochRooted</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.impl.h" line="76" column="6" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="76" bodyend="78" declfile="src/vt/scheduler/scheduler.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af80867582a504d0f3cf4e2d95596645b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochRooted</definition>
        <argsstring>(std::string const &amp;label, Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochRooted</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.impl.h" line="81" column="6" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="81" bodyend="84" declfile="src/vt/scheduler/scheduler.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2fc4ef34f30b49a1781d765804bfadbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochCollective</definition>
        <argsstring>(Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochCollective</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.impl.h" line="65" column="6" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="65" bodyend="67" declfile="src/vt/scheduler/scheduler.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa6f98f3a207d6d329cf36cbd6d523626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochCollective</definition>
        <argsstring>(std::string const &amp;label, Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochCollective</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.impl.h" line="70" column="6" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="70" bodyend="73" declfile="src/vt/scheduler/scheduler.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab95230c4145a8f4fb6874188eda37991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpoch</definition>
        <argsstring>(EpochType ep, Callable &amp;&amp;fn)</argsstring>
        <name>runInEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.impl.h" line="54" column="6" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a19a89f0706559e09bbe84eec1ff9f1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1param_1_1_construct_params" kindref="compound">vrt::collection::param::ConstructParams</ref>&lt; ColT &gt;</type>
        <definition>vrt::collection::param::ConstructParams&lt;ColT&gt; vt::makeCollection</definition>
        <argsstring>(const std::string &amp;label={})</argsstring>
        <name>makeCollection</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Collectively construct a new collection with the parameter object builder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter configuration object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/param/construct_params.h" line="460" column="41" bodyfile="src/vt/vrt/collection/param/construct_params.h" bodystart="460" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1acbbf58b2c85959c964a7ae8c536fe9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1param_1_1_construct_params" kindref="compound">vrt::collection::param::ConstructParams</ref>&lt; ColT &gt;</type>
        <definition>vrt::collection::param::ConstructParams&lt;ColT&gt; vt::makeCollectionRooted</definition>
        <argsstring>(const std::string &amp;label={})</argsstring>
        <name>makeCollectionRooted</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new collection (from a single node) with the parameter object builder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the parameter configuration object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/param/construct_params.h" line="476" column="41" bodyfile="src/vt/vrt/collection/param/construct_params.h" bodystart="476" bodyend="481"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/activefn/activefn.h" line="51" column="12"/>
  </compounddef>
</doxygen>
