<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt" kind="namespace" language="C++">
    <compoundname>vt</compoundname>
    <innerclass refid="structvt_1_1_collective_any_ops" prot="public">vt::CollectiveAnyOps</innerclass>
    <innerclass refid="structvt_1_1_event_check_finished_msg" prot="public">vt::EventCheckFinishedMsg</innerclass>
    <innerclass refid="structvt_1_1_event_finished_msg" prot="public">vt::EventFinishedMsg</innerclass>
    <innerclass refid="structvt_1_1from__s" prot="public">vt::from_s</innerclass>
    <innerclass refid="structvt_1_1_handler_manager" prot="public">vt::HandlerManager</innerclass>
    <innerclass refid="structvt_1_1_put_envelope" prot="public">vt::PutEnvelope</innerclass>
    <innerclass refid="structvt_1_1to__s" prot="public">vt::to_s</innerclass>
    <innernamespace refid="namespacevt_1_1adt">vt::adt</innernamespace>
    <innernamespace refid="namespacevt_1_1arguments">vt::arguments</innernamespace>
    <innernamespace refid="namespacevt_1_1auto__registry">vt::auto_registry</innernamespace>
    <innernamespace refid="namespacevt_1_1collective">vt::collective</innernamespace>
    <innernamespace refid="namespacevt_1_1config">vt::config</innernamespace>
    <innernamespace refid="namespacevt_1_1ctx">vt::ctx</innernamespace>
    <innernamespace refid="namespacevt_1_1debug">vt::debug</innernamespace>
    <innernamespace refid="namespacevt_1_1detail">vt::detail</innernamespace>
    <innernamespace refid="namespacevt_1_1diagnostic">vt::diagnostic</innernamespace>
    <innernamespace refid="namespacevt_1_1epoch">vt::epoch</innernamespace>
    <innernamespace refid="namespacevt_1_1error">vt::error</innernamespace>
    <innernamespace refid="namespacevt_1_1event">vt::event</innernamespace>
    <innernamespace refid="namespacevt_1_1group">vt::group</innernamespace>
    <innernamespace refid="namespacevt_1_1index">vt::index</innernamespace>
    <innernamespace refid="namespacevt_1_1location">vt::location</innernamespace>
    <innernamespace refid="namespacevt_1_1mapping">vt::mapping</innernamespace>
    <innernamespace refid="namespacevt_1_1messaging">vt::messaging</innernamespace>
    <innernamespace refid="namespacevt_1_1objgroup">vt::objgroup</innernamespace>
    <innernamespace refid="namespacevt_1_1param">vt::param</innernamespace>
    <innernamespace refid="namespacevt_1_1phase">vt::phase</innernamespace>
    <innernamespace refid="namespacevt_1_1pipe">vt::pipe</innernamespace>
    <innernamespace refid="namespacevt_1_1pool">vt::pool</innernamespace>
    <innernamespace refid="namespacevt_1_1rdma">vt::rdma</innernamespace>
    <innernamespace refid="namespacevt_1_1registry">vt::registry</innernamespace>
    <innernamespace refid="namespacevt_1_1runnable">vt::runnable</innernamespace>
    <innernamespace refid="namespacevt_1_1runtime">vt::runtime</innernamespace>
    <innernamespace refid="namespacevt_1_1sched">vt::sched</innernamespace>
    <innernamespace refid="namespacevt_1_1seq">vt::seq</innernamespace>
    <innernamespace refid="namespacevt_1_1serialization">vt::serialization</innernamespace>
    <innernamespace refid="namespacevt_1_1standalone">vt::standalone</innernamespace>
    <innernamespace refid="namespacevt_1_1term">vt::term</innernamespace>
    <innernamespace refid="namespacevt_1_1termination">vt::termination</innernamespace>
    <innernamespace refid="namespacevt_1_1timetrigger">vt::timetrigger</innernamespace>
    <innernamespace refid="namespacevt_1_1timing">vt::timing</innernamespace>
    <innernamespace refid="namespacevt_1_1trace">vt::trace</innernamespace>
    <innernamespace refid="namespacevt_1_1util">vt::util</innernamespace>
    <innernamespace refid="namespacevt_1_1utils">vt::utils</innernamespace>
    <innernamespace refid="namespacevt_1_1vrt">vt::vrt</innernamespace>
    <innernamespace refid="namespacevt_1_1worker">vt::worker</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2" prot="public" static="no">
        <name>eHandlerBits</name>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2ad0350d799a68d110696009c434e5b701" prot="public">
          <name>ObjGroup</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2abfa992da505171200949c7e580e84ea2" prot="public">
          <name>Auto</name>
          <initializer>= eHandlerBits::ObjGroup + objgroup_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2ac61e9f48e514369f0eb8ac5cebf9fb14" prot="public">
          <name>Functor</name>
          <initializer>= eHandlerBits::Auto     + auto_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2aee391b103987f3eb488e081ecc1fc5e8" prot="public">
          <name>Trace</name>
          <initializer>= eHandlerBits::Functor  + functor_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2a3e3fe7a58187c2288f3c2177be08d4d5" prot="public">
          <name>Control</name>
          <initializer>= eHandlerBits::Trace    + trace_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2a4e2cf24ac4752089ddca27fb7e8a43f8" prot="public">
          <name>Member</name>
          <initializer>= eHandlerBits::Control  + control_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1af182285b57b225b163d5d8aff03cb8c2a4f58efa47c6cfd117a011be7820d1d8a" prot="public">
          <name>Identifier</name>
          <initializer>= eHandlerBits::Member   + member_num_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="86" column="1" bodyfile="src/vt/handler/handler.h" bodystart="86" bodyend="94"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *)&gt;</type>
        <definition>using vt::ActiveClosureFnType = typedef std::function&lt;void(vt::BaseMessage*)&gt;</definition>
        <argsstring></argsstring>
        <name>ActiveClosureFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="90" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a546925d221208866b866b2edf8f24d04" prot="public" static="no">
        <type>void(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *)</type>
        <definition>using vt::ActiveFnType = typedef void(vt::BaseMessage *)</definition>
        <argsstring></argsstring>
        <name>ActiveFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="91" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a70e19bd64d031e65083c2125b2c65426" prot="public" static="no">
        <type>void(*)(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *)</type>
        <definition>using vt::ActiveFnPtrType = typedef void(*)(vt::BaseMessage *)</definition>
        <argsstring></argsstring>
        <name>ActiveFnPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="92" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" prot="public" static="no">
        <type>void(MessageT *)</type>
        <definition>using vt::ActiveTypedFnType = typedef void(MessageT *)</definition>
        <argsstring></argsstring>
        <name>ActiveTypedFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="95" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aac79af69904337145f4d3d441802c932" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool) &gt;</type>
        <definition>using vt::ActiveClosureRDMAGetFnType = typedef std::function&lt; RDMA_GetType(vt::BaseMessage*, ByteType, ByteType, TagType, bool) &gt;</definition>
        <argsstring></argsstring>
        <name>ActiveClosureRDMAGetFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="97" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae4fbf97da623bfcd09ee8379de756257" prot="public" static="no">
        <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>(*)(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveRDMAGetFnPtrType = typedef RDMA_GetType(*)( vt::BaseMessage *, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveRDMAGetFnPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="100" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1add83fe11410931719f6543a575acfe87" prot="public" static="no">
        <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>(MessageT *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveTypedRDMAGetFnType = typedef RDMA_GetType( MessageT*, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveTypedRDMAGetFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="104" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab526cbb2c45e18f3e7ba7d7727e5b0de" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1a9e2c953286c7616f7c218e9951790776" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool) &gt;</type>
        <definition>using vt::ActiveClosureRDMAPutFnType = typedef std::function&lt; void(vt::BaseMessage*, RDMA_PtrType, ByteType, ByteType, TagType, bool) &gt;</definition>
        <argsstring></argsstring>
        <name>ActiveClosureRDMAPutFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="108" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a23220eaaee4345f7371d35e3aee23c70" prot="public" static="no">
        <type>void(*)(<ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">vt::BaseMessage</ref> *, <ref refid="namespacevt_1a9e2c953286c7616f7c218e9951790776" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveRDMAPutFnPtrType = typedef void(*)( vt::BaseMessage *, RDMA_PtrType, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveRDMAPutFnPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="111" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a881ee9bd1e4e71905da1f563ee26ce25" prot="public" static="no">
        <type>void(MessageT *, <ref refid="namespacevt_1a9e2c953286c7616f7c218e9951790776" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, bool)</type>
        <definition>using vt::ActiveTypedRDMAPutFnType = typedef void( MessageT*, RDMA_PtrType, ByteType, ByteType, TagType, bool )</definition>
        <argsstring></argsstring>
        <name>ActiveTypedRDMAPutFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/activefn/activefn.h" line="115" column="1" bodyfile="src/vt/activefn/activefn.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a776b30f114cff62549e798fedeb6222b" prot="public" static="no">
        <type><ref refid="structvt_1_1_collective_any_ops" kindref="compound">CollectiveAnyOps</ref>&lt; collective_default_inst &gt;</type>
        <definition>using vt::CollectiveOps = typedef CollectiveAnyOps&lt;collective_default_inst&gt;</definition>
        <argsstring></argsstring>
        <name>CollectiveOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="84" column="1" bodyfile="src/vt/collective/collective_ops.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9e2c953286c7616f7c218e9951790776" prot="public" static="no">
        <type>void *</type>
        <definition>using vt::RDMA_PtrType = typedef void *</definition>
        <argsstring></argsstring>
        <name>RDMA_PtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="57" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2c2a902092b72056f70210c159f966f0" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::RDMA_ElmType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_ElmType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="58" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae54d2ca8f6bb4d65faf65118c82cd6f7" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::RDMA_BlockType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_BlockType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="59" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a10442579ec4e7ebef223818e64bcf908" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::RDMA_HandleType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_HandleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="60" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9530efb893c0f3846e8ac5f0507e0f49" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::RDMA_HandlerType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>RDMA_HandlerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="61" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="namespacevt_1a9e2c953286c7616f7c218e9951790776" kindref="member">RDMA_PtrType</ref>, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref> &gt;</type>
        <definition>using vt::RDMA_GetType = typedef std::tuple&lt;RDMA_PtrType, ByteType&gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_GetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="62" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a50fcc3338d68f7b147b99c0a82ec3a10" prot="public" static="no">
        <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref></type>
        <definition>using vt::RDMA_PutRetType = typedef RDMA_GetType</definition>
        <argsstring></argsstring>
        <name>RDMA_PutRetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="63" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9880273f1697d78c2171f8d8f044de51" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>)&gt;</type>
        <definition>using vt::RDMA_ContinuationType = typedef std::function&lt;void(RDMA_GetType)&gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_ContinuationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="64" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref>) &gt;</type>
        <definition>using vt::RDMA_ContinuationDeleteType = typedef std::function&lt; void(RDMA_GetType, ActionType) &gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_ContinuationDeleteType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="65" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1abeb0129c92a5721f6f2c01b621f149fe" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespacevt_1a50fcc3338d68f7b147b99c0a82ec3a10" kindref="member">RDMA_PutRetType</ref>(<ref refid="namespacevt_1a50fcc3338d68f7b147b99c0a82ec3a10" kindref="member">RDMA_PutRetType</ref>)&gt;</type>
        <definition>using vt::RDMA_PutSerialize = typedef std::function&lt;RDMA_PutRetType(RDMA_PutRetType)&gt;</definition>
        <argsstring></argsstring>
        <name>RDMA_PutSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_rdma.h" line="68" column="1" bodyfile="src/vt/configs/types/types_rdma.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" prot="public" static="no">
        <type>int16_t</type>
        <definition>using vt::PhysicalResourceType = typedef int16_t</definition>
        <argsstring></argsstring>
        <name>PhysicalResourceType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="56" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" prot="public" static="no">
        <type><ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>using vt::NodeType = typedef PhysicalResourceType</definition>
        <argsstring></argsstring>
        <name>NodeType</name>
        <briefdescription>
<para>Used to hold the current node/rank or the number of nodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="58" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a74b11b22c02feaabab8591acc87c7c52" prot="public" static="no">
        <type><ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>using vt::CoreType = typedef PhysicalResourceType</definition>
        <argsstring></argsstring>
        <name>CoreType</name>
        <briefdescription>
<para>Used to hold a core ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="60" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" prot="public" static="no">
        <type><ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>using vt::WorkerCountType = typedef PhysicalResourceType</definition>
        <argsstring></argsstring>
        <name>WorkerCountType</name>
        <briefdescription>
<para>Used to hold the number of workers on a node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="62" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a656e362091da17b9b93d0655b36e3392" prot="public" static="no">
        <type><ref refid="namespacevt_1a2dc36fcada816dc6d11774d650328ee9" kindref="member">PhysicalResourceType</ref></type>
        <definition>using vt::WorkerIDType = typedef PhysicalResourceType</definition>
        <argsstring></argsstring>
        <name>WorkerIDType</name>
        <briefdescription>
<para>Used to hold the ID of a worker on a node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="64" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af64846b57dfcaf104da3ef6967917573" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::HandlerType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>HandlerType</name>
        <briefdescription>
<para>Used to hold a handler ID which identifier a function pointer/context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="68" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae2e13198bdef4d5b8e603d6c1c7f0969" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::SeedType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>SeedType</name>
        <briefdescription>
<para>Used to hold a seed for random generation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="70" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2740126d59f361d9ba46f66b3b4b0d3d" prot="public" static="no">
        <type>int8_t</type>
        <definition>using vt::EnvelopeDataType = typedef int8_t</definition>
        <argsstring></argsstring>
        <name>EnvelopeDataType</name>
        <briefdescription>
<para>Used to hold the control bits in an envelope. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="72" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a009267401def7ae8bf201892222d060f" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::EventType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>EventType</name>
        <briefdescription>
<para>Used to hold a local/remote event to wait for completion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="74" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::SequentialIDType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>SequentialIDType</name>
        <briefdescription>
<para>Used to hold a sequential identifier for ordered/stateful operations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="76" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a985a5adf291c34a3ca263b3378388236" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::EpochType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>EpochType</name>
        <briefdescription>
<para>Used to hold an epoch for termination detection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="78" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::TagType = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>TagType</name>
        <briefdescription>
<para>Used to hold an tag, e.g., on messages or reduces. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="80" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::BarrierType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>BarrierType</name>
        <briefdescription>
<para>Used to identify a specific barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="82" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a5ffcf8e168b77b0f36e11b616049a1cf" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::CollectiveAlgType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>CollectiveAlgType</name>
        <briefdescription>
<para>Used to identify a collective operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="84" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9b39ce9494bb04674d0d5b895a5aa50f" prot="public" static="no">
        <type>int16_t</type>
        <definition>using vt::RefType = typedef int16_t</definition>
        <argsstring></argsstring>
        <name>RefType</name>
        <briefdescription>
<para>Used to hold the reference count for messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="86" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aab8d55968084610ce3b17057981e9300" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::ByteType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>ByteType</name>
        <briefdescription>
<para>Used to store some number of bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="88" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::BitCountType = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>BitCountType</name>
        <briefdescription>
<para>Used to store the number of bits in a field. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="90" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad48e08beb69a7f184fb1fdb4b7044174" prot="public" static="no">
        <type>char</type>
        <definition>using vt::SerialByteType = typedef char</definition>
        <argsstring></argsstring>
        <name>SerialByteType</name>
        <briefdescription>
<para>Used to store the number of bits for serialization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="92" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a793764d753923abc3d32929870beb485" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::ErrorCodeType = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>ErrorCodeType</name>
        <briefdescription>
<para>Used to store an error code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="94" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::VirtualProxyType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>VirtualProxyType</name>
        <briefdescription>
<para>Used to hold an identifier for a collection or other proxy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="96" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa68633cd16822ae31c1cf521f817a23e" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::VirtualElmOnlyProxyType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>VirtualElmOnlyProxyType</name>
        <briefdescription>
<para>Used to hold an identifier for an element in a collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="98" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac115668758184050beff7a9281a2c490" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::VirtualElmCountType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>VirtualElmCountType</name>
        <briefdescription>
<para>Used to hold the count of elements in a collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="100" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a913e1f07b5228dd8bb64040dc6dcea14" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::UniqueIndexBitType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>UniqueIndexBitType</name>
        <briefdescription>
<para>Used for mapping between index to contiguous bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="102" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::GroupType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>GroupType</name>
        <briefdescription>
<para>Used for hold an identifier for a group. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="104" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a408e86a8c7c89309b52907dc5a513924" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::MsgSizeType = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>MsgSizeType</name>
        <briefdescription>
<para>Used for hold the size of a message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="106" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::PhaseType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>PhaseType</name>
        <briefdescription>
<para>Used for hold a phase for load balancing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="108" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae78cbfdf1e57470e33eedb074f2beeba" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using vt::SubphaseType = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>SubphaseType</name>
        <briefdescription>
<para>Used for hold a sub-phase for load balancing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="110" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::PipeType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>PipeType</name>
        <briefdescription>
<para>Used for hold the identifier for a pipe (callbacks) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="112" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad7cae989df485fccca57f0792a880a8e" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::ObjGroupProxyType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>ObjGroupProxyType</name>
        <briefdescription>
<para>Used for hold the proxy ID for an objgroup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="114" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using vt::PriorityType = typedef uint16_t</definition>
        <argsstring></argsstring>
        <name>PriorityType</name>
        <briefdescription>
<para>Used for hold the priority of a message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="116" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using vt::PriorityLevelType = typedef uint8_t</definition>
        <argsstring></argsstring>
        <name>PriorityLevelType</name>
        <briefdescription>
<para>Used for hold the level for a priority of a message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="118" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab6ac935c168b809c422d5121da4f2700" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using vt::ComponentIDType = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>ComponentIDType</name>
        <briefdescription>
<para>Used for hold a unique ID for each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="120" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::ThreadIDType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>ThreadIDType</name>
        <briefdescription>
<para>Used to hold a unique ID for a user-level thread on a particular node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="122" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using vt::ActionType = typedef std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>ActionType</name>
        <briefdescription>
<para>Used for generically store an action to perform. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="126" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a102aa105d64254d89f7e585d106c95aa" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>)&gt;</type>
        <definition>using vt::ActionProxyType = typedef std::function&lt;void(VirtualProxyType)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionProxyType</name>
        <briefdescription>
<para>Used for generically store an action that requires a proxy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="128" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0436cb2d620dcbb21b5b49cd9c9c4749" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>)&gt;</type>
        <definition>using vt::ActionNodeType = typedef std::function&lt;void(NodeType)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionNodeType</name>
        <briefdescription>
<para>Used for generically store an action that requires a node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_type.h" line="130" column="1" bodyfile="src/vt/configs/types/types_type.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2dc2f149222f88a250ec9a13db36865d" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_record" kindref="compound">event::EventRecord</ref></type>
        <definition>using vt::EventRecordType = typedef event::EventRecord</definition>
        <argsstring></argsstring>
        <name>EventRecordType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="232" column="1" bodyfile="src/vt/event/event.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a59ae068fe828d1c33051ff96f3d016b6" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::HandlerIdentifierType = typedef uint64_t</definition>
        <argsstring></argsstring>
        <name>HandlerIdentifierType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="59" column="1" bodyfile="src/vt/handler/handler.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1adbbef13b92f0a93b14c219b7cc8a48f2" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using vt::HandlerControlType = typedef uint32_t</definition>
        <argsstring></argsstring>
        <name>HandlerControlType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="62" column="1" bodyfile="src/vt/handler/handler.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a97f320a1d3b9b4035e591671cd7d10f0" prot="public" static="no">
        <type>std::tuple&lt; void *, <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref> &gt;</type>
        <definition>using vt::PtrLenPairType = typedef std::tuple&lt;void*, ByteType&gt;</definition>
        <argsstring></argsstring>
        <name>PtrLenPairType</name>
        <briefdescription>
<para>A pair of a void* and number of bytes (length) for sending data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="81" column="1" bodyfile="src/vt/messaging/active.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a6de3bd201e2a040be9362d9d24d1e446" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a97f320a1d3b9b4035e591671cd7d10f0" kindref="member">PtrLenPairType</ref> data, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref> deleter)&gt;</type>
        <definition>using vt::ContinuationDeleterType = typedef std::function&lt;void(PtrLenPairType data, ActionType deleter)&gt;</definition>
        <argsstring></argsstring>
        <name>ContinuationDeleterType</name>
        <briefdescription>
<para>A continuation function with an allocated pointer with a deleter function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="84" column="1" bodyfile="src/vt/messaging/active.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad548cc368cddb926753ac237eb454dae" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger" kindref="compound">messaging::ActiveMessenger</ref></type>
        <definition>using vt::Active = typedef messaging::ActiveMessenger</definition>
        <argsstring></argsstring>
        <name>Active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1785" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa9c8cc094b5361482021d63012987814" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_envelope" kindref="compound">messaging::ActiveEnvelope</ref></type>
        <definition>using vt::Envelope = typedef messaging::ActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>Envelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_base.h" line="111" column="1" bodyfile="src/vt/messaging/envelope/envelope_base.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af71a025689a3da5037785b53a7a8e78c" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_epoch_active_envelope" kindref="compound">messaging::EpochActiveEnvelope</ref></type>
        <definition>using vt::EpochEnvelope = typedef messaging::EpochActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>EpochEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended.h" line="104" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a7b951ab92dca9319e12e3fc406ccb309" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_tag_active_envelope" kindref="compound">messaging::TagActiveEnvelope</ref></type>
        <definition>using vt::TagEnvelope = typedef messaging::TagActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>TagEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended.h" line="105" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af23b58014ced6898422213a0e5e6a27a" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_epoch_tag_active_envelope" kindref="compound">messaging::EpochTagActiveEnvelope</ref></type>
        <definition>using vt::EpochTagEnvelope = typedef messaging::EpochTagActiveEnvelope</definition>
        <argsstring></argsstring>
        <name>EpochTagEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended.h" line="106" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1abdfe9ac50e3799705ee21853c1509bf6" prot="public" static="no">
        <type><ref refid="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6c" kindref="member">messaging::eEnvelopeType</ref></type>
        <definition>typedef messaging::eEnvelopeType vt::eEnvType</definition>
        <argsstring></argsstring>
        <name>eEnvType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_type.h" line="80" column="1" bodyfile="src/vt/messaging/envelope/envelope_type.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a537693bfe0223c71eb52bdbd6ea2c741" prot="public" static="no">
        <type>void *</type>
        <definition>using vt::PutPtrType = typedef void*</definition>
        <argsstring></argsstring>
        <name>PutPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="54" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a494d6c6dc5cdb9a8d61eaedfa2c4d4f3" prot="public" static="no">
        <type>void const  *</type>
        <definition>using vt::PutPtrConstType = typedef void const*</definition>
        <argsstring></argsstring>
        <name>PutPtrConstType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="55" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1aa241444e21c15238e185923792814fe4" prot="public" static="no">
        <type>size_t</type>
        <definition>using vt::PutEnvSizeType = typedef size_t</definition>
        <argsstring></argsstring>
        <name>PutEnvSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="56" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a233c004b26ccd826ef10686169371e01" prot="public" static="no">
        <type><ref refid="namespacevt_1aa9c8cc094b5361482021d63012987814" kindref="member">Envelope</ref></type>
        <definition>using vt::PutUnderEnvelopeT = typedef Envelope</definition>
        <argsstring></argsstring>
        <name>PutUnderEnvelopeT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="57" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a8d7a7de9e76bfea1600009a775b7298c" prot="public" static="no">
        <type><ref refid="structvt_1_1_put_envelope" kindref="compound">PutEnvelope</ref>&lt; <ref refid="namespacevt_1aa9c8cc094b5361482021d63012987814" kindref="member">Envelope</ref>, size_t &gt;</type>
        <definition>using vt::PutShortEnvelope = typedef PutEnvelope&lt;Envelope, size_t&gt;</definition>
        <argsstring></argsstring>
        <name>PutShortEnvelope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="80" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_base_msg" kindref="compound">messaging::BaseMsg</ref></type>
        <definition>using vt::BaseMessage = typedef messaging::BaseMsg</definition>
        <argsstring></argsstring>
        <name>BaseMessage</name>
        <briefdescription>
<para>Alias to the base of all messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="251" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a00eb67bd138395b6a4f744fab3fa0678" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; EnvelopeT &gt;</type>
        <definition>using vt::ActiveMessage = typedef messaging::ActiveMsg&lt;EnvelopeT&gt;</definition>
        <argsstring></argsstring>
        <name>ActiveMessage</name>
        <briefdescription>
<para>Alias to the a message with any envelope. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="254" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; <ref refid="namespacevt_1aa9c8cc094b5361482021d63012987814" kindref="member">Envelope</ref> &gt;</type>
        <definition>using vt::ShortMessage = typedef messaging::ActiveMsg&lt;Envelope&gt;</definition>
        <argsstring></argsstring>
        <name>ShortMessage</name>
        <briefdescription>
<para>Alias to the shortest message available with no epoch or tag allowed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="256" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ad67368ffae52d7325002586b41bb150e" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; <ref refid="namespacevt_1af71a025689a3da5037785b53a7a8e78c" kindref="member">EpochEnvelope</ref> &gt;</type>
        <definition>using vt::EpochMessage = typedef messaging::ActiveMsg&lt;EpochEnvelope&gt;</definition>
        <argsstring></argsstring>
        <name>EpochMessage</name>
        <briefdescription>
<para>Alias to a message with only an epoch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="258" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a4ccc13b06bff8a4a35426a1a082a95a9" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">messaging::ActiveMsg</ref>&lt; <ref refid="namespacevt_1af23b58014ced6898422213a0e5e6a27a" kindref="member">EpochTagEnvelope</ref> &gt;</type>
        <definition>using vt::EpochTagMessage = typedef messaging::ActiveMsg&lt;EpochTagEnvelope&gt;</definition>
        <argsstring></argsstring>
        <name>EpochTagMessage</name>
        <briefdescription>
<para>Alias to a message with an epoch and tag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="260" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3a3ddfef40b4c90915fa43cdd5f129ea" prot="public" static="no">
        <type><ref refid="namespacevt_1a4ccc13b06bff8a4a35426a1a082a95a9" kindref="member">EpochTagMessage</ref></type>
        <definition>using vt::Message = typedef EpochTagMessage</definition>
        <argsstring></argsstring>
        <name>Message</name>
        <briefdescription>
<para>Alias to the default message (with an epoch and tag) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="262" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" prot="public" static="no">
        <type><ref refid="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" kindref="member">ShortMessage</ref></type>
        <definition>using vt::BaseMsgType = typedef ShortMessage</definition>
        <argsstring></argsstring>
        <name>BaseMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message.h" line="264" column="1" bodyfile="src/vt/messaging/message/message.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a378e4a02213923b4ba1c3f9d2a1424c7" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_non_serialized_msg" kindref="compound">vt::messaging::NonSerializedMsg</ref>&lt; MsgT, SelfT &gt;</type>
        <definition>using vt::NonSerialized = typedef vt::messaging::NonSerializedMsg&lt;MsgT, SelfT&gt;</definition>
        <argsstring></argsstring>
        <name>NonSerialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="458" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3862b8e3f67ab03f3a4313d828592fa9" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_serialize_supported_msg" kindref="compound">vt::messaging::SerializeSupportedMsg</ref>&lt; MsgT, SelfT &gt;</type>
        <definition>using vt::SerializeSupported = typedef vt::messaging::SerializeSupportedMsg&lt;MsgT, SelfT&gt;</definition>
        <argsstring></argsstring>
        <name>SerializeSupported</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="461" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9e60e2e8929828639383ac1d6643384d" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_serialize_required_msg" kindref="compound">vt::messaging::SerializeRequiredMsg</ref>&lt; MsgT, SelfT &gt;</type>
        <definition>using vt::SerializeRequired = typedef vt::messaging::SerializeRequiredMsg&lt;MsgT, SelfT&gt;</definition>
        <argsstring></argsstring>
        <name>SerializeRequired</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="464" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0a4ad8c256fcffa564e9fa7800e4b495" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_serialize_if_needed_msg" kindref="compound">vt::messaging::SerializeIfNeededMsg</ref>&lt; MsgT, SelfT, DepTypesT... &gt;</type>
        <definition>using vt::SerializeIfNeeded = typedef vt::messaging::SerializeIfNeededMsg&lt;MsgT, SelfT, DepTypesT...&gt;</definition>
        <argsstring></argsstring>
        <name>SerializeIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="467" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a89a92229c5622b855c02c549f83a1a68" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_put_message_component" kindref="compound">messaging::PutMessageComponent</ref>&lt; <ref refid="namespacevt_1a00eb67bd138395b6a4f744fab3fa0678" kindref="member">ActiveMessage</ref>&lt; <ref refid="namespacevt_1a8d7a7de9e76bfea1600009a775b7298c" kindref="member">PutShortEnvelope</ref> &gt; &gt;</type>
        <definition>using vt::PayloadMessage = typedef messaging::PutMessageComponent&lt; ActiveMessage&lt;PutShortEnvelope&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>PayloadMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/put_message.h" line="71" column="1" bodyfile="src/vt/messaging/message/put_message.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a82b5c92ea7ca3ddd2e8a2e27df87fa1a" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; T &gt;</type>
        <definition>using vt::MsgVirtualPtr = typedef messaging::MsgSharedPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MsgVirtualPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>Use <computeroutput>MsgPtr&lt;T&gt;</computeroutput>, for which this is an alias. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="342" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a54674b9f819f4f3a652c6f78d9b62aaf" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" kindref="member">ShortMessage</ref> &gt;</type>
        <definition>using vt::MsgVirtualPtrAny = typedef messaging::MsgSharedPtr&lt;ShortMessage&gt;</definition>
        <argsstring></argsstring>
        <name>MsgVirtualPtrAny</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>Use <computeroutput>MsgPtr&lt;ShortMessage&gt;</computeroutput>, or as appropriate. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="348" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; T &gt;</type>
        <definition>using vt::MsgSharedPtr = typedef messaging::MsgSharedPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MsgSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>Use <computeroutput>MsgPtr&lt;T&gt;</computeroutput>, for which this is an alias. </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="355" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">messaging::MsgSharedPtr</ref>&lt; T &gt;</type>
        <definition>using vt::MsgPtr = typedef messaging::MsgSharedPtr&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>MsgPtr</name>
        <briefdescription>
<para>Wrapper to manage Active Messages. </para>        </briefdescription>
        <detaileddescription>
<para>A MsgPtr represents a &apos;shared pointer like&apos; object wrapping a message that correcly manages reference-counts to order to eliminate memory leaks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="365" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae108c204035ac2513c8d09e6971a4a31" prot="public" static="no">
        <type><ref refid="namespacevt_1_1pipe_1_1signal_1acbe257d1ae44f20fa9fd9b6ed3057caf" kindref="member">pipe::signal::SigVoidType</ref></type>
        <definition>using vt::VoidMsg = typedef pipe::signal::SigVoidType</definition>
        <argsstring></argsstring>
        <name>VoidMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="270" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a36db99df4c973d48b1118a293fff533f" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">pipe::callback::cbunion::CallbackTyped</ref>&lt; MsgT &gt;</type>
        <definition>using vt::Callback = typedef pipe::callback::cbunion::CallbackTyped&lt;MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>Callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="273" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af79a43a97bc3593fc349f086c874c48e" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" kindref="compound">pipe::callback::cbunion::CallbackRawBaseSingle</ref></type>
        <definition>using vt::CallbackU = typedef pipe::callback::cbunion::CallbackRawBaseSingle</definition>
        <argsstring></argsstring>
        <name>CallbackU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="275" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a9bf03a57102d0274cc229b9ef94bb59e" prot="public" static="no">
        <type><ref refid="structvt_1_1rdma_1_1_target" kindref="compound">rdma::Target</ref></type>
        <definition>using vt::RDMA_TargetType = typedef rdma::Target</definition>
        <argsstring></argsstring>
        <name>RDMA_TargetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.h" line="87" column="1" bodyfile="src/vt/rdma/rdma_types.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae5bd2866e5ee83f4d6a53e8730cd3202" prot="public" static="no">
        <type><ref refid="structvt_1_1rdma_1_1_non_target" kindref="compound">rdma::NonTarget</ref></type>
        <definition>using vt::RDMA_NonTargetType = typedef rdma::NonTarget</definition>
        <argsstring></argsstring>
        <name>RDMA_NonTargetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.h" line="88" column="1" bodyfile="src/vt/rdma/rdma_types.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1abc3449a4b87363b942453d0b8cc18a7d" prot="public" static="no">
        <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">rdma::Handle</ref>&lt; T, <ref refid="namespacevt_1_1rdma_1a0234ff19cfb3c04718cfdfd36b2d6d88a0c5c41d6a0319a61d3a5e8a060b7c4d7" kindref="member">rdma::HandleEnum::StaticSize</ref>, I &gt;</type>
        <definition>using vt::HandleRDMA = typedef rdma::Handle&lt;T, rdma::HandleEnum::StaticSize, I&gt;</definition>
        <argsstring></argsstring>
        <name>HandleRDMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.h" line="55" column="1" bodyfile="src/vt/rdmahandle/handle.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae3eb725d1ffe20cd7d82a8c42f3e52ef" prot="public" static="no">
        <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">rdma::Lock</ref></type>
        <definition>using vt::Lock = typedef rdma::Lock</definition>
        <argsstring></argsstring>
        <name>Lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/lock_mpi.h" line="103" column="1" bodyfile="src/vt/rdmahandle/lock_mpi.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a290f7e8941f9f411b54cdb15b6cea107" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager" kindref="compound">vrt::collection::CollectionManager</ref></type>
        <definition>using vt::CollectionManagerType = typedef vrt::collection::CollectionManager</definition>
        <argsstring></argsstring>
        <name>CollectionManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="108" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a5c1db2c048b259a2ba8961766ddb9278" prot="public" static="no">
        <type><ref refid="namespacevt_1_1runtime_1ab09d044cce417fbcdb7e1e29b7aabbc3" kindref="member">runtime::RuntimeHolderType</ref></type>
        <definition>using vt::RuntimeType = typedef runtime::RuntimeHolderType</definition>
        <argsstring></argsstring>
        <name>RuntimeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_headers.h" line="66" column="1" bodyfile="src/vt/runtime/runtime_headers.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a8019b70cc4b9b0833c38559c85dfd53b" prot="public" static="no">
        <type><ref refid="namespacevt_1_1runtime_1a69931905b04961a874e4a70a43083a83" kindref="member">runtime::RuntimeHolderUnsafePtrType</ref></type>
        <definition>using vt::RuntimeUnsafePtrType = typedef runtime::RuntimeHolderUnsafePtrType</definition>
        <argsstring></argsstring>
        <name>RuntimeUnsafePtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_headers.h" line="67" column="1" bodyfile="src/vt/runtime/runtime_headers.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" prot="public" static="no">
        <type><ref refid="namespacevt_1a5c1db2c048b259a2ba8961766ddb9278" kindref="member">RuntimeType</ref></type>
        <definition>using vt::RuntimePtrType = typedef RuntimeType</definition>
        <argsstring></argsstring>
        <name>RuntimePtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_headers.h" line="68" column="1" bodyfile="src/vt/runtime/runtime_headers.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a98ecd5e376bd317a21b245064361240e" prot="public" static="no">
        <type><ref refid="namespacevt_1_1seq_1a3b612da217ac669d39c159f134ab8434" kindref="member">seq::SeqType</ref></type>
        <definition>using vt::SeqType = typedef seq::SeqType</definition>
        <argsstring></argsstring>
        <name>SeqType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/sequence/seq_common.h" line="115" column="1" bodyfile="src/vt/sequence/seq_common.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1affe11140b7cc6953030f1f158b40750c" prot="public" static="no">
        <type><ref refid="namespacevt_1_1seq_1aeb4674d25dcb5d27248b68ec83fad2b6" kindref="member">seq::UserSeqFunType</ref></type>
        <definition>using vt::UserSeqFunType = typedef seq::UserSeqFunType</definition>
        <argsstring></argsstring>
        <name>UserSeqFunType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/sequence/seq_common.h" line="116" column="1" bodyfile="src/vt/sequence/seq_common.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3170103960b4d8f8a0f722750bc0dcc9" prot="public" static="no">
        <type><ref refid="namespacevt_1_1seq_1a1a58d0ebe1d6bbed8438607a9c717779" kindref="member">seq::UserSeqFunWithIDType</ref></type>
        <definition>using vt::UserSeqFunWithIDType = typedef seq::UserSeqFunWithIDType</definition>
        <argsstring></argsstring>
        <name>UserSeqFunWithIDType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/sequence/seq_common.h" line="117" column="1" bodyfile="src/vt/sequence/seq_common.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a490b7af99bdeb06e988d94a7ab389b43" prot="public" static="no">
        <type>::<ref refid="structvt_1_1serialization_1_1_serialized_messenger" kindref="compound">vt::serialization::SerializedMessenger</ref></type>
        <definition>using vt::SerializedMessenger = typedef ::vt::serialization::SerializedMessenger</definition>
        <argsstring></argsstring>
        <name>SerializedMessenger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/messaging/serialized_messenger.h" line="111" column="1" bodyfile="src/vt/serialization/messaging/serialized_messenger.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1af8fc7210a3d8e598330cf3375857ef1e" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1interval_1_1_integral_set_base" kindref="compound">term::interval::IntegralSetBase</ref>&lt; DomainT, DomainT{}, std::allocator, <ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">term::interval::Interval</ref>, std::set, <ref refid="namespacevt_1ab51b754f1d22841f555246195fab9d41" kindref="member">IntervalCompare</ref> &gt;</type>
        <definition>using vt::IntegralSet = typedef term::interval::IntegralSetBase&lt; DomainT, DomainT{}, std::allocator, term::interval::Interval, std::set, IntervalCompare &gt;</definition>
        <argsstring></argsstring>
        <name>IntegralSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/integral_set.h" line="498" column="1" bodyfile="src/vt/termination/interval/integral_set.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab51b754f1d22841f555246195fab9d41" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_compare" kindref="compound">term::interval::IntervalCompare</ref>&lt; DomainT &gt;</type>
        <definition>using vt::IntervalCompare = typedef term::interval::IntervalCompare&lt;DomainT&gt;</definition>
        <argsstring></argsstring>
        <name>IntervalCompare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="223" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0036b5cb523aef3477d6d5de9d94eabb" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">term::interval::Interval</ref>&lt; DomainT &gt;</type>
        <definition>using vt::Interval = typedef term::interval::Interval&lt;DomainT&gt;</definition>
        <argsstring></argsstring>
        <name>Interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="226" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a876a9d0cd5a952859c72de8a46881442" prot="public" static="no">
        <type>double</type>
        <definition>using vt::TimeType = typedef double</definition>
        <argsstring></argsstring>
        <name>TimeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="52" column="1" bodyfile="src/vt/timing/timing_type.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac016d9c31465ce11c14eab2be11f9183" prot="public" static="no">
        <type><ref refid="structvt_1_1index_1_1_dense_index_array" kindref="compound">index::DenseIndexArray</ref>&lt; IndexType, ndim &gt;</type>
        <definition>using vt::DenseIndex = typedef index::DenseIndexArray&lt;IndexType, ndim&gt;</definition>
        <argsstring></argsstring>
        <name>DenseIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="74" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1afb96657e28fa98eb685c5e0c6b1b122e" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref></type>
        <definition>using vt::IdxBase = typedef index::IdxBase</definition>
        <argsstring></argsstring>
        <name>IdxBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="75" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a5540efc78234273e1796fb003fe4d234" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a091a4f5a7a2c993d9727eaa60cf67d81" kindref="member">index::Index1D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index1D = typedef index::Index1D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index1D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="77" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a3bab786053b74a3d856fff1412ffa73a" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a8373801efc8343f24d6e8ba57df40a69" kindref="member">index::Index2D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index2D = typedef index::Index2D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="78" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2c8053bc5f2df4934272542fb3e5a0bc" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a2c09a09f7346d370a0bcbbfb0d4459cd" kindref="member">index::Index3D</ref>&lt; <ref refid="namespacevt_1_1index_1a0dbb8d47463da27c1436e8e4ddb02743" kindref="member">index::IdxBase</ref> &gt;</type>
        <definition>using vt::Index3D = typedef index::Index3D&lt;index::IdxBase&gt;</definition>
        <argsstring></argsstring>
        <name>Index3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="79" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a906c25b521ff516f5e8ba6d96fe2d424" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a939bace7aba6cd4a76b2c12a138c5991" kindref="member">index::IdxType</ref>&lt; T, N &gt;</type>
        <definition>using vt::IdxType = typedef index::IdxType&lt;T, N&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="81" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a36127c6500f2311908c959be653da40e" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a091a4f5a7a2c993d9727eaa60cf67d81" kindref="member">index::Index1D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType1D = typedef index::Index1D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType1D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="82" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ab0fbc5ddf69b5aa0ed6a8d1658b504eb" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a8373801efc8343f24d6e8ba57df40a69" kindref="member">index::Index2D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType2D = typedef index::Index2D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="83" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a65e4a83c0567ecb7a54b78e9b8e7d7ab" prot="public" static="no">
        <type><ref refid="namespacevt_1_1index_1a2c09a09f7346d370a0bcbbfb0d4459cd" kindref="member">index::Index3D</ref>&lt; T &gt;</type>
        <definition>using vt::IdxType3D = typedef index::Index3D&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>IdxType3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index.h" line="84" column="1" bodyfile="src/vt/topos/index/index.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0cb65f2151629893480ef391def4e733" prot="public" static="no">
        <type><ref refid="structvt_1_1location_1_1_entity_msg" kindref="compound">location::EntityMsg</ref>&lt; EntityID, ActiveMessageT &gt;</type>
        <definition>using vt::LocationRoutedMsg = typedef location::EntityMsg&lt;EntityID, ActiveMessageT&gt;</definition>
        <argsstring></argsstring>
        <name>LocationRoutedMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/location/message/msg.h" line="144" column="1" bodyfile="src/vt/topos/location/message/msg.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a34b3eb2eea8db3cf4ae27ced35b19b46" prot="public" static="no">
        <type><ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt; T &gt;</type>
        <definition>using vt::BitCounterType = typedef utils::BitCounter&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>BitCounterType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/bits/bits_common.h" line="54" column="1" bodyfile="src/vt/utils/bits/bits_common.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a80d5091925c65efd88ca7f49fe1d633b" prot="public" static="no">
        <type><ref refid="structvt_1_1utils_1_1_bit_packer" kindref="compound">utils::BitPacker</ref></type>
        <definition>typedef utils::BitPacker vt::BitPackerType</definition>
        <argsstring></argsstring>
        <name>BitPackerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/bits/bits_common.h" line="56" column="1" bodyfile="src/vt/utils/bits/bits_common.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ae7700e12f79c0fec16964aab84838428" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">vrt::collection::CollectionMessage</ref>&lt; ColT, MsgT &gt;</type>
        <definition>using vt::CollectionMessage = typedef vrt::collection::CollectionMessage&lt;ColT, MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/messages/user.h" line="160" column="1" bodyfile="src/vt/vrt/collection/messages/user.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1ac72e048964e4bb536faaa8bc90f58db7" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection" kindref="compound">vrt::collection::Collection</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::Collection = typedef vrt::collection::Collection&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>Collection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/types/type_aliases.h" line="74" column="1" bodyfile="src/vt/vrt/collection/types/type_aliases.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a7ffafd5682603cf80b1874f83cc7234f" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_insertable_collection" kindref="compound">vrt::collection::InsertableCollection</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::InsertableCollection = typedef vrt::collection::InsertableCollection&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>InsertableCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/types/type_aliases.h" line="77" column="1" bodyfile="src/vt/vrt/collection/types/type_aliases.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a2be17f5dafb626fe9f58d762b6aad2f0" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_proxy" kindref="compound">vrt::collection::CollectionProxy</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::CollectionIndexProxy = typedef vrt::collection::CollectionProxy&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionIndexProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/proxy/collection_proxy.h" line="125" column="1" bodyfile="src/vt/vrt/proxy/collection_proxy.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1a0d58a693bfb96e0ce5d145692a1a1f98" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_proxy" kindref="compound">vrt::collection::CollectionProxy</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::CollectionProxy = typedef vrt::collection::CollectionProxy&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/proxy/collection_proxy.h" line="128" column="1" bodyfile="src/vt/vrt/proxy/collection_proxy.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacevt_1afd31d62e29de1576d4564b5c0b883270" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1_1runtime_1afca910c1b38b3975f7c1da8001a77d58" kindref="member">runtime::RuntimeInstType</ref> const</type>
        <definition>constexpr runtime::RuntimeInstType const vt::collective_default_inst</definition>
        <argsstring></argsstring>
        <name>collective_default_inst</name>
        <initializer>=
  runtime::RuntimeInstType::DefaultInstance</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="59" column="1" bodyfile="src/vt/collective/collective_ops.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a07abc8f1752a784f54c226bbc4c3b1fe" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1runtime_1_1_runtime" kindref="compound">runtime::Runtime</ref> *</type>
        <definition>runtime::Runtime * vt::curRT</definition>
        <argsstring></argsstring>
        <name>curRT</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="168" column="1" bodyfile="src/vt/runtime/runtime_inst.cc" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a6297c1b6139cf25fa03a26313b1efd2d" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
        <definition>constexpr NodeType const vt::uninitialized_destination</definition>
        <argsstring></argsstring>
        <name>uninitialized_destination</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>&gt;(0xFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="55" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac1c855ed2af47bef76c7f745d2892fcb" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const</type>
        <definition>constexpr WorkerCountType const vt::no_workers</definition>
        <argsstring></argsstring>
        <name>no_workers</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref>&gt;(0xFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="56" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac3901e414d1b26aa2431e161f8bc0029" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref> const</type>
        <definition>constexpr WorkerIDType const vt::no_worker_id</definition>
        <argsstring></argsstring>
        <name>no_worker_id</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref>&gt;(0xFFFE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="57" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a17bef8cbc576e5d1db3bbb1829287235" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref> const</type>
        <definition>constexpr WorkerIDType const vt::worker_id_comm_thread</definition>
        <argsstring></argsstring>
        <name>worker_id_comm_thread</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref>&gt;(0xFEED)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="58" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa082347743bd70b56aed43a20f01ba44" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref> const</type>
        <definition>constexpr WorkerIDType const vt::comm_debug_print</definition>
        <argsstring></argsstring>
        <name>comm_debug_print</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref>&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="59" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a56809c766c6eb8569aae62542946d9ab" prot="public" static="yes" mutable="no">
        <type>constexpr uint64_t const</type>
        <definition>constexpr uint64_t const vt::u64empty</definition>
        <argsstring></argsstring>
        <name>u64empty</name>
        <initializer>= 0xFFFFFFFFFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="62" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ab900bbeb7619f7020e2b38f9775a7011" prot="public" static="yes" mutable="no">
        <type>constexpr uint32_t const</type>
        <definition>constexpr uint32_t const vt::u32empty</definition>
        <argsstring></argsstring>
        <name>u32empty</name>
        <initializer>= 0xFEEDFEED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="63" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a00838edab3b7f45c92332a0d92a5b490" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t const</type>
        <definition>constexpr int64_t const vt::s64empty</definition>
        <argsstring></argsstring>
        <name>s64empty</name>
        <initializer>= 0xFFFFFFFFFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="64" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a9146832af6230647ae7c1c513f703a00" prot="public" static="yes" mutable="no">
        <type>constexpr int32_t const</type>
        <definition>constexpr int32_t const vt::s32empty</definition>
        <argsstring></argsstring>
        <name>s32empty</name>
        <initializer>= 0xFEEDFEED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="65" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1adc0b97c3f921824e51c3fc899d456dc2" prot="public" static="yes" mutable="no">
        <type>constexpr int const</type>
        <definition>constexpr int const vt::num_check_actions</definition>
        <argsstring></argsstring>
        <name>num_check_actions</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="68" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ab4693ce6a175d7d4cd4f46b4cfea2efa" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const</type>
        <definition>constexpr EpochType const vt::no_epoch</definition>
        <argsstring></argsstring>
        <name>no_epoch</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="69" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ad8d825af58899811e6c4b932a55b6bf4" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const</type>
        <definition>constexpr TagType const vt::no_tag</definition>
        <argsstring></argsstring>
        <name>no_tag</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="70" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a593f4f827f023576af1db10cb2cddff3" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const</type>
        <definition>constexpr EventType const vt::no_event</definition>
        <argsstring></argsstring>
        <name>no_event</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="71" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a70b3cfd380b542d5658f69218b04c58a" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a25e481f0d6bbc7204db23d1c87a62e77" kindref="member">BarrierType</ref> const</type>
        <definition>constexpr BarrierType const vt::no_barrier</definition>
        <argsstring></argsstring>
        <name>no_barrier</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="72" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa13e73894e0f078619fff16f5b79f9ff" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a10442579ec4e7ebef223818e64bcf908" kindref="member">RDMA_HandleType</ref> const</type>
        <definition>constexpr RDMA_HandleType const vt::no_rdma_handle</definition>
        <argsstring></argsstring>
        <name>no_rdma_handle</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="73" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac16bdaa19da6bd47e6eeb59a84abd82c" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref> const</type>
        <definition>constexpr ByteType const vt::no_byte</definition>
        <argsstring></argsstring>
        <name>no_byte</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="74" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a524456500961f2b495e0728790b40662" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref> const</type>
        <definition>constexpr ByteType const vt::no_offset</definition>
        <argsstring></argsstring>
        <name>no_offset</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="75" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aac9a4a978eb03fc99ef559b45a3bf5f5" prot="public" static="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto vt::no_action</definition>
        <argsstring></argsstring>
        <name>no_action</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="76" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a48e3dec74ac03efbccd4c312892c1e04" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a9e2c953286c7616f7c218e9951790776" kindref="member">RDMA_PtrType</ref> const</type>
        <definition>constexpr RDMA_PtrType const vt::no_rdma_ptr</definition>
        <argsstring></argsstring>
        <name>no_rdma_ptr</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="77" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae5bac2fdd7d5da235cd216e63187e137" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const</type>
        <definition>constexpr VirtualProxyType const vt::no_vrt_proxy</definition>
        <argsstring></argsstring>
        <name>no_vrt_proxy</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="78" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1afbf2b6a589c0c760feaa432fdec20a2d" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
        <definition>constexpr HandlerType const vt::uninitialized_handler</definition>
        <argsstring></argsstring>
        <name>uninitialized_handler</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="79" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8dc14a9b0e4c21aa18a015d1027b4a5e" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a9530efb893c0f3846e8ac5f0507e0f49" kindref="member">RDMA_HandlerType</ref> const</type>
        <definition>constexpr RDMA_HandlerType const vt::uninitialized_rdma_handler</definition>
        <argsstring></argsstring>
        <name>uninitialized_rdma_handler</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="80" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aaba40324967ca26ee5c0a9f66d96be84" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a9b39ce9494bb04674d0d5b895a5aa50f" kindref="member">RefType</ref> const</type>
        <definition>constexpr RefType const vt::not_shared_message</definition>
        <argsstring></argsstring>
        <name>not_shared_message</name>
        <initializer>= -1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="81" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae9951bc4623161a8a0ea8ae128646692" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1ae54d2ca8f6bb4d65faf65118c82cd6f7" kindref="member">RDMA_BlockType</ref> const</type>
        <definition>constexpr RDMA_BlockType const vt::no_rdma_block</definition>
        <argsstring></argsstring>
        <name>no_rdma_block</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="82" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a389bf340bd7a9f1cc3ba7761eb1c4d22" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1ae2e13198bdef4d5b8e603d6c1c7f0969" kindref="member">SeedType</ref> const</type>
        <definition>constexpr SeedType const vt::no_seed</definition>
        <argsstring></argsstring>
        <name>no_seed</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="83" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ad34e6534093d6a356f33ce3dcbf24f0b" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1ac115668758184050beff7a9281a2c490" kindref="member">VirtualElmCountType</ref> const</type>
        <definition>constexpr VirtualElmCountType const vt::no_elms</definition>
        <argsstring></argsstring>
        <name>no_elms</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="84" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa09f9b15ef0ecce39f1e76ed39ca9453" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const</type>
        <definition>constexpr TagType const vt::local_rdma_op_tag</definition>
        <argsstring></argsstring>
        <name>local_rdma_op_tag</name>
        <initializer>= s32empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="85" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac59302cc588f70db09396b27399b1a71" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
        <definition>constexpr GroupType const vt::no_group</definition>
        <argsstring></argsstring>
        <name>no_group</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="86" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a5e59996578cecb474adc20ee3c5dad7f" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
        <definition>constexpr GroupType const vt::default_group</definition>
        <argsstring></argsstring>
        <name>default_group</name>
        <initializer>= 0xFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="87" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a0997834c82e3a8fc463cdf499238291a" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref> const</type>
        <definition>constexpr PhaseType const vt::fst_lb_phase</definition>
        <argsstring></argsstring>
        <name>fst_lb_phase</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="88" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a779b59c858a526de056b8f0f0bfc691e" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref> const</type>
        <definition>constexpr PhaseType const vt::no_lb_phase</definition>
        <argsstring></argsstring>
        <name>no_lb_phase</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="89" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a24b0e9b41783c81d673adc9cdf491db3" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const</type>
        <definition>constexpr PipeType const vt::no_pipe</definition>
        <argsstring></argsstring>
        <name>no_pipe</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="90" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1abb7ed3728cb1ecd12fefbf982dcd5c89" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref> const</type>
        <definition>constexpr ObjGroupProxyType const vt::no_obj_group</definition>
        <argsstring></argsstring>
        <name>no_obj_group</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="91" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a3c933b67f3e7c77ab6e365ce97a9af95" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" kindref="member">SequentialIDType</ref> const</type>
        <definition>constexpr SequentialIDType const vt::no_seq_id</definition>
        <argsstring></argsstring>
        <name>no_seq_id</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="92" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a6602100bcbc382a71517c961071dde7b" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" kindref="member">SequentialIDType</ref> const</type>
        <definition>constexpr SequentialIDType const vt::first_seq_id</definition>
        <argsstring></argsstring>
        <name>first_seq_id</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="93" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a85662be2bcf0dffc42e41a2c97d0db28" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref> const</type>
        <definition>constexpr PriorityType const vt::no_priority</definition>
        <argsstring></argsstring>
        <name>no_priority</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="94" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ab840be684092a79e4195e503958724eb" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref> const</type>
        <definition>constexpr PriorityLevelType const vt::no_priority_level</definition>
        <argsstring></argsstring>
        <name>no_priority_level</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="95" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a0323deeb9f9e495a19c0642bebc4330f" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" kindref="member">ThreadIDType</ref> const</type>
        <definition>constexpr ThreadIDType const vt::no_thread_id</definition>
        <argsstring></argsstring>
        <name>no_thread_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_sentinels.h" line="96" column="1" bodyfile="src/vt/configs/types/types_sentinels.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a81771978af55fe793ee0fb1b414e78cd" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::node_num_bits</definition>
        <argsstring></argsstring>
        <name>node_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="53" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a57804c108e743849929f2162cba0a721" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::handler_num_bits</definition>
        <argsstring></argsstring>
        <name>handler_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="55" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa1262cbca667adeb4927523a3de432cd" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::ref_num_bits</definition>
        <argsstring></argsstring>
        <name>ref_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a9b39ce9494bb04674d0d5b895a5aa50f" kindref="member">RefType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="57" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a714c09c8f8c297bf52f447bdcbbd9b37" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::epoch_num_bits</definition>
        <argsstring></argsstring>
        <name>epoch_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="59" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a58a18a70271691b4025ad5ac95b28d61" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::tag_num_bits</definition>
        <argsstring></argsstring>
        <name>tag_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="61" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a2693ff7b6fdc2b778a9b87cacaa8f26d" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::group_num_bits</definition>
        <argsstring></argsstring>
        <name>group_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="63" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a2e0a0d7eb2f0aeaf1be72a5dcb677541" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::priority_num_bits</definition>
        <argsstring></argsstring>
        <name>priority_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="65" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ada316093eb1d18534b43994b4c220a58" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::priority_level_num_bits</definition>
        <argsstring></argsstring>
        <name>priority_level_num_bits</name>
        <initializer>= <ref refid="structvt_1_1utils_1_1_bit_counter" kindref="compound">utils::BitCounter</ref>&lt;<ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref>&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/types/types_size.h" line="67" column="1" bodyfile="src/vt/configs/types/types_size.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a570bc5403031e45a957476ffae6f67c1" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::event_finished_han</definition>
        <argsstring></argsstring>
        <name>event_finished_han</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event_msgs.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a9764c5fa4f463d23a7db5d56cc121881" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::check_event_finished_han</definition>
        <argsstring></argsstring>
        <name>check_event_finished_han</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event_msgs.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a9d574550b4bb013455c5f2ba594de806" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a59ae068fe828d1c33051ff96f3d016b6" kindref="member">HandlerIdentifierType</ref> const</type>
        <definition>constexpr HandlerIdentifierType const vt::first_handle_identifier</definition>
        <argsstring></argsstring>
        <name>first_handle_identifier</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="64" column="1" bodyfile="src/vt/handler/handler.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aefe462e3ecd6b117b0fe319ca9195bb2" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a59ae068fe828d1c33051ff96f3d016b6" kindref="member">HandlerIdentifierType</ref> const</type>
        <definition>constexpr HandlerIdentifierType const vt::uninitialized_handle_identifier</definition>
        <argsstring></argsstring>
        <name>uninitialized_handle_identifier</name>
        <initializer>= u64empty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="65" column="1" bodyfile="src/vt/handler/handler.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aff0f3e9d252db457da53e11493031361" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
        <definition>constexpr HandlerType const vt::blank_handler</definition>
        <argsstring></argsstring>
        <name>blank_handler</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="66" column="1" bodyfile="src/vt/handler/handler.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8f36bb123db7188511b213e1760b6111" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::auto_num_bits</definition>
        <argsstring></argsstring>
        <name>auto_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="68" column="1" bodyfile="src/vt/handler/handler.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a65ad2a8bfd50ab55ec48393db475b2ea" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::functor_num_bits</definition>
        <argsstring></argsstring>
        <name>functor_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="69" column="1" bodyfile="src/vt/handler/handler.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1af0ef42e9e9f3e55d2363ff7313c17db5" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::objgroup_num_bits</definition>
        <argsstring></argsstring>
        <name>objgroup_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="70" column="1" bodyfile="src/vt/handler/handler.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac4ee485c076bd33c7bce1057428cef47" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::trace_num_bits</definition>
        <argsstring></argsstring>
        <name>trace_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="71" column="1" bodyfile="src/vt/handler/handler.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a8feeb992aa8c73a9368de7d9c46e29eb" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::control_num_bits</definition>
        <argsstring></argsstring>
        <name>control_num_bits</name>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="72" column="1" bodyfile="src/vt/handler/handler.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1aa1b4fa8392bbe6ae5d42689a777eb37a" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::member_num_bits</definition>
        <argsstring></argsstring>
        <name>member_num_bits</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="73" column="1" bodyfile="src/vt/handler/handler.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a43c8129c6dbb31c98eaf816b68146e41" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::handler_id_num_bits</definition>
        <argsstring></argsstring>
        <name>handler_id_num_bits</name>
        <initializer>=
 <ref refid="namespacevt_1a34b3eb2eea8db3cf4ae27ced35b19b46" kindref="member">BitCounterType</ref>&lt;<ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>&gt;::value - (
     auto_num_bits
   + functor_num_bits
   + objgroup_num_bits
   + control_num_bits
   + trace_num_bits
   + member_num_bits
 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/handler/handler.h" line="74" column="1" bodyfile="src/vt/handler/handler.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ae446ed1f5bb8bba34af5c747ea1f244d" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1from__s" kindref="compound">from_s</ref></type>
        <definition>from_s vt::rdma_from</definition>
        <argsstring></argsstring>
        <name>rdma_from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.cc" line="49" column="1" bodyfile="src/vt/rdma/rdma_types.cc" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a627aea388cdbf2818bf1393dca90938e" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1to__s" kindref="compound">to_s</ref></type>
        <definition>to_s vt::rdma_to</definition>
        <argsstring></argsstring>
        <name>rdma_to</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma_types.cc" line="50" column="1" bodyfile="src/vt/rdma/rdma_types.cc" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a3b1515c42f89611639963b651dbf9a03" prot="public" static="yes" mutable="no">
        <type><ref refid="structvt_1_1runtime_1_1_runtime" kindref="compound">runtime::Runtime</ref> *</type>
        <definition>runtime::Runtime* vt::no_rt</definition>
        <argsstring></argsstring>
        <name>no_rt</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="93" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1acce65ec10b513659274e722365aaa36d" prot="public" static="no" mutable="no">
        <type>::<ref refid="structvt_1_1runtime_1_1_runtime" kindref="compound">vt::runtime::Runtime</ref> *</type>
        <definition>runtime::Runtime * vt::rt</definition>
        <argsstring></argsstring>
        <name>rt</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_inst.cc" line="55" column="1" bodyfile="src/vt/runtime/runtime_inst.cc" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a156fb1330862ba3946cd001a98adf5b5" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1_1sched_1a2dbd1daff26f79efbff3f418ad9b2a8b" kindref="member">sched::PriorityArrayType</ref></type>
        <definition>constexpr sched::PriorityArrayType vt::breadth_priority</definition>
        <argsstring></argsstring>
        <name>breadth_priority</name>
        <initializer>= <ref refid="namespacevt_1_1sched_1a4a522d8f67561a0ae0446769584c2deb" kindref="member">sched::breadthArray</ref>&lt;&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="229" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a2708bc34cf707128668c95dc18ec277d" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1_1sched_1a2dbd1daff26f79efbff3f418ad9b2a8b" kindref="member">sched::PriorityArrayType</ref></type>
        <definition>constexpr sched::PriorityArrayType vt::medium_priority</definition>
        <argsstring></argsstring>
        <name>medium_priority</name>
        <initializer>= <ref refid="namespacevt_1_1sched_1a05afd033ab9ecc1f0d1dc37b8b9b7827" kindref="member">sched::mediumArray</ref>&lt;&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="230" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a7ca1e4404f33d3aa68555cbe1b6f1a05" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref> const</type>
        <definition>constexpr PriorityType const vt::sys_max_priority</definition>
        <argsstring></argsstring>
        <name>sys_max_priority</name>
        <initializer>= breadth_priority[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="231" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1ac9661b6e6adf226234ca26242dff14d3" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref> const</type>
        <definition>constexpr PriorityType const vt::sys_min_priority</definition>
        <argsstring></argsstring>
        <name>sys_min_priority</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="232" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1abaffd751215d60008522665409b69eb6" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref> const</type>
        <definition>constexpr PriorityType const vt::max_priority</definition>
        <argsstring></argsstring>
        <name>max_priority</name>
        <initializer>= breadth_priority[1]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="233" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a9589d08980131c24ffdb364e669785d1" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref> const</type>
        <definition>constexpr PriorityType const vt::min_priority</definition>
        <argsstring></argsstring>
        <name>min_priority</name>
        <initializer>= medium_priority[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="234" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1a326972dc7b0799e4f069fa3a0f28ce40" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref> const</type>
        <definition>constexpr PriorityType const vt::default_priority</definition>
        <argsstring></argsstring>
        <name>default_priority</name>
        <initializer>= <ref refid="structvt_1_1sched_1_1_default_mask" kindref="compound">sched::DefaultMask</ref>&lt;&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/priority.h" line="235" column="1" bodyfile="src/vt/scheduler/priority.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1ad36ca8eb7e5b9cc794a793b290b9c2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::abort</definition>
        <argsstring>(std::string const str, int32_t const code)</argsstring>
        <name>abort</name>
        <param>
          <type>std::string const</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int32_t const</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/basic.cc" line="53" column="1" bodyfile="src/vt/collective/basic.cc" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad3ca3e8710dd3c8badff897f8de3c858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::output</definition>
        <argsstring>(std::string const str, int32_t const code, bool error, bool formatted, bool decorate, bool abort_out)</argsstring>
        <name>output</name>
        <param>
          <type>std::string const</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int32_t const</type>
          <declname>code</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>formatted</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>decorate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>abort_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/basic.cc" line="59" column="1" bodyfile="src/vt/collective/basic.cc" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aff96ace008dc847d4c0f44cfa5dfb3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vt::rerror</definition>
        <argsstring>(char const *str)</argsstring>
        <name>rerror</name>
        <param>
          <type>char const *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/basic.cc" line="70" column="1" bodyfile="src/vt/collective/basic.cc" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa8e0c0ab253e7ad1acd5d09e36fea769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1_collective_alg" kindref="compound">collective::CollectiveAlg</ref> *</type>
        <definition>collective::CollectiveAlg * vt::theCollective</definition>
        <argsstring>()</argsstring>
        <name>theCollective</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_alg.h" line="170" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aaa266774ea8339c58be0202b00fafa62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, WorkerCountType const num_workers, bool is_interop, MPI_Comm *comm)</argsstring>
        <name>initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const</type>
          <declname>num_workers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_interop</declname>
        </param>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="54" column="1" bodyfile="src/vt/collective/startup.cc" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1adb614f53d39c8e84417ad7aac3265645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, MPI_Comm *comm)</argsstring>
        <name>initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="61" column="1" bodyfile="src/vt/collective/startup.cc" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9e13ed8a04b3395bbff2f035cae656af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::initialize</definition>
        <argsstring>(MPI_Comm *comm)</argsstring>
        <name>initialize</name>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="66" column="1" bodyfile="src/vt/collective/startup.cc" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a540d90dbd6e97b69f1dcbc9ee9314cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::finalize</definition>
        <argsstring>(RuntimePtrType in_rt)</argsstring>
        <name>finalize</name>
        <param>
          <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
          <declname>in_rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="73" column="1" bodyfile="src/vt/collective/startup.cc" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ae8e663109f635cbeca94c39b89b4683c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup.cc" line="81" column="1" bodyfile="src/vt/collective/startup.cc" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> *</type>
        <definition>vt::arguments::AppConfig * vt::theConfig</definition>
        <argsstring>()</argsstring>
        <name>theConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/arguments/app_config.h" line="395" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa6fe252e38e90473ff359bfa7586bc8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt;</type>
        <definition>std::enable_if_t&lt;std::tuple_size&lt;std::tuple&lt;Args...&gt; &gt;::value != 0&gt; vt::warningImpl</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, Args &amp;&amp;... args)</argsstring>
        <name>warningImpl</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="68" column="1" bodyfile="src/vt/configs/error/soft_error.h" bodystart="68" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a118ef4729cf1e1516a3efef8da49efbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value==0 &gt;</type>
        <definition>std::enable_if_t&lt;std::tuple_size&lt;std::tuple&lt;Args...&gt; &gt;::value == 0&gt; vt::warningImpl</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, Args &amp;&amp;... args)</argsstring>
        <name>warningImpl</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="85" column="1" bodyfile="src/vt/configs/error/soft_error.h" bodystart="85" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af998935c41a6f414a373f182156d72e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::warningImplTup</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, Tuple &amp;&amp;tup, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>warningImplTup</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="100" column="1" bodyfile="src/vt/configs/error/soft_error.h" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af11de63df5da8fa58bd668f4e5026a72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::warning</definition>
        <argsstring>(std::string const &amp;str, ErrorCodeType error, bool quit, std::string const &amp;file, int const line, std::string const &amp;func, std::tuple&lt; Args... &gt; &amp;&amp;tup)</argsstring>
        <name>warning</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quit</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/soft_error.h" line="114" column="1" bodyfile="src/vt/configs/error/soft_error.h" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1ctx_1_1_context" kindref="compound">ctx::Context</ref> *</type>
        <definition>ctx::Context * vt::theContext</definition>
        <argsstring>()</argsstring>
        <name>theContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="234" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad246530e523687095c567ccab203556a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1epoch_1_1_epoch_manip" kindref="compound">epoch::EpochManip</ref> *</type>
        <definition>epoch::EpochManip * vt::theEpoch</definition>
        <argsstring>()</argsstring>
        <name>theEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_manip.h" line="264" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa297fcaadc8a330890eb90c5b0081ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1event_1_1_async_event" kindref="compound">event::AsyncEvent</ref> *</type>
        <definition>event::AsyncEvent * vt::theEvent</definition>
        <argsstring>()</argsstring>
        <name>theEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="234" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4548473dce44fb654400009e2b2fe64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1group_1_1_group_manager" kindref="compound">group::GroupManager</ref> *</type>
        <definition>group::GroupManager * vt::theGroup</definition>
        <argsstring>()</argsstring>
        <name>theGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="456" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger" kindref="compound">messaging::ActiveMessenger</ref> *</type>
        <definition>messaging::ActiveMessenger * vt::theMsg</definition>
        <argsstring>()</argsstring>
        <name>theMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1787" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad5495e7900227550b44837e899c5bb13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::envelopeGetEpoch</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetEpoch</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the epoch on an envelope; must be able to hold one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch in the envelope </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="65" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4a0a9928690206b588dbcac2afb71088" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetEpoch</definition>
        <argsstring>(Env &amp;env, EpochType const &amp;epoch)</argsstring>
        <name>envelopeSetEpoch</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Set the epoch on an envelope; must be able to hold one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="74" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af16ad10e40d8a2f2c1128068774c1bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::envelopeGetTag</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetTag</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the tag on an envelope; must be able to hold one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the tag in the envelope </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="84" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a0eb7eef640bbf48bff94e6683be7a3dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetTag</definition>
        <argsstring>(Env &amp;env, TagType const &amp;tag)</argsstring>
        <name>envelopeSetTag</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Set the tag on an envelope; must be able to hold one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="93" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ae56472f58b6582abacae687ead397380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(EpochEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1af71a025689a3da5037785b53a7a8e78c" kindref="member">EpochEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an epoch envelope with default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="100" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2c8d0d4109460ccb89316ca4b3cc3aea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(TagEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1a7b951ab92dca9319e12e3fc406ccb309" kindref="member">TagEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an tag envelope with default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="107" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="106" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a358f72f3e1d5ce12cca7d622ee512302" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(EpochTagEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1af23b58014ced6898422213a0e5e6a27a" kindref="member">EpochTagEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an epoch and tag envelope with default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_extended_util.h" line="114" column="1" bodyfile="src/vt/messaging/envelope/envelope_extended_util.impl.h" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad3c1fff07670b717ba492d97e9eecc48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::envelopeGetHandler</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetHandler</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the handler on an envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the handler in the envelope </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.h" line="66" column="1" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a99cdbbb47f13203e14b01fa43bca99e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::envelopeGetDest</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetDest</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the destination node on an envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the destination node in the envelope </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.h" line="76" column="1" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a3f298caa64a97f60a0772b74cad8b620" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::envelopeGetDeliverBcast</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetDeliverBcast</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Check whether bcast should be delivered to sender. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether to deliver msg to sender </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.h" line="86" column="1" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a76b9bdf05b27d6470bac66186c32d9eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::envelopeGetGroup</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeGetGroup</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the group on an envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group in the envelope </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.h" line="96" column="1" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad664e6e94c1ea309344adad1c3fb291c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9b39ce9494bb04674d0d5b895a5aa50f" kindref="member">RefType</ref></type>
        <definition>RefType vt::envelopeGetRef</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeGetRef</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the reference count on an envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the reference count in the envelope </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_get.h" line="106" column="1" bodyfile="src/vt/messaging/envelope/envelope_get.impl.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a68c41bd1b8addd0f8feea15a61d5c372" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeRef</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeRef</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Increase the reference count on an envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_ref.h" line="64" column="1" bodyfile="src/vt/messaging/envelope/envelope_ref.impl.h" bodystart="54" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a6083c0bb47b5d180acb1f32542833e67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9b39ce9494bb04674d0d5b895a5aa50f" kindref="member">RefType</ref></type>
        <definition>RefType vt::envelopeDeref</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeDeref</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Decrement and get (sub-fetch) reference count on envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new reference count after decrement </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_ref.h" line="74" column="1" bodyfile="src/vt/messaging/envelope/envelope_ref.impl.h" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa76e59d48d53aa1e4c60bd55ff520d6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setNormalType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setNormalType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Clear all type bits make &quot;normal&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="64" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4ecba7a91cd1d5a6b6473cbac2042c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setPipeType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setPipeType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set pipe bit <computeroutput>EnvPipe</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="72" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab25ac0a12270d261c2f5c3c634f6370e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setPutType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setPutType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set put bit <computeroutput>EnvPut</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="80" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa42d7e0adc8b283dd10602ece422699d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setTermType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setTermType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set term bit <computeroutput>EnvTerm</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="88" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af6e10f3d27abb3321ca34830880c0f7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setBroadcastType</definition>
        <argsstring>(Env &amp;env, bool deliver_to_sender=true)</argsstring>
        <name>setBroadcastType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deliver_to_sender</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set broadcast bit (changes how <computeroutput>dest</computeroutput> is interpreted) <computeroutput>EnvBroadcast</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deliver_to_sender</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the message should be delivered to sender </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="97" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1afb12c8cb2f8d47e2f06ffa25574f0dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setEpochType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setEpochType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set epoch bit <computeroutput>EnvEpoch</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Indicates that the envelope is either of type <computeroutput>EpochActiveEnvelope</computeroutput> or <computeroutput>EpochTagActiveEnvelope</computeroutput> depending on whether <computeroutput>EnvTag</computeroutput> is set or not.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="108" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad088db89648b82eef7ca9b4837a907cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setTagType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setTagType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set tag bit <computeroutput>EnvTag</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Indicates that the envelope is either of type <computeroutput>TagActiveEnvelope</computeroutput> or <computeroutput>EpochTagActiveEnvelope</computeroutput> depending on whether <computeroutput>EnvEpoch</computeroutput> is set or not.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="119" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a48ddc3677e112fd6f53d0f918c21300e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetHandler</definition>
        <argsstring>(Env &amp;env, HandlerType const handler)</argsstring>
        <name>envelopeSetHandler</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Set handler field in envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="128" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a78ef1cf108e91a92d83c525fd16fbd4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetDest</definition>
        <argsstring>(Env &amp;env, NodeType const &amp;dest)</argsstring>
        <name>envelopeSetDest</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Set destination <computeroutput>dest</computeroutput> field in envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination if set or root if (non-group) broadcast </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="137" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a43dd08b8f10d3a1c79872a759aa11662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetRef</definition>
        <argsstring>(Env &amp;env, RefType const &amp;ref=0)</argsstring>
        <name>envelopeSetRef</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a9b39ce9494bb04674d0d5b895a5aa50f" kindref="member">RefType</ref> const &amp;</type>
          <declname>ref</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set reference count on envelope. </para>        </briefdescription>
        <detaileddescription>
<para>This overrides the typical mechanism for (de-)referencing May be dangerous to set directly. Typically you should use this in special cases when the current reference count does not apply. For instance, when a message arrives off the network and the count needs to be reset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ref</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference count </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="151" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9f9d4ce6034c0eaaf98bdffd33d0e1c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetGroup</definition>
        <argsstring>(Env &amp;env, GroupType const &amp;group=default_group)</argsstring>
        <name>envelopeSetGroup</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const &amp;</type>
          <declname>group</declname>
          <defval>default_group</defval>
        </param>
        <briefdescription>
<para>Set pipe bit <computeroutput>EnvPipe</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="159" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a32c449c2c4c6e0806cdab6798e275c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetHasBeenSerialized</definition>
        <argsstring>(Env &amp;env, bool has_been_serialized)</argsstring>
        <name>envelopeSetHasBeenSerialized</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_been_serialized</declname>
        </param>
        <briefdescription>
<para>Set whether this message&apos;s base serializer has been called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">has_been_serialized</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicating message is serialized </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="208" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aeda768e2b7668340d73e5254a6b2923f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetIsLocked</definition>
        <argsstring>(Env &amp;env, bool is_locked)</argsstring>
        <name>envelopeSetIsLocked</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_locked</declname>
        </param>
        <briefdescription>
<para>Set whether this message&apos;s envelope is locked. </para>        </briefdescription>
        <detaileddescription>
<para>A locked message will prevent key parts of the envelope from being updated with a guard assert. This is to prevent accidental edge-cases such as sending a message twice.</para><para>A message is locked when it is sent and recieved. Unlocking messages should be reserved for special cases as done in some core code.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_locked</parametername>
</parameternamelist>
<parameterdescription>
<para>value indicating if message is locked </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="224" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af3b1b3751353bac014e08070383062e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeUnlockForForwarding</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeUnlockForForwarding</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Unlock an envelope, denoting the use is a proxy handler. </para>        </briefdescription>
        <detaileddescription>
<para>A received message is normally locked to discourage the re-usage of messages supplied to handlers. However, some proxy/forwarding handlers re-use the original message.</para><para>This is equivalent to calling <computeroutput>envelopeSetIsLocked</computeroutput> with false and should generally be set inside the message handler itself.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_set.h" line="239" column="1" bodyfile="src/vt/messaging/envelope/envelope_set.impl.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a28259c2647b43612398b9355a3e1916c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetup</definition>
        <argsstring>(Env &amp;env, NodeType const &amp;dest, HandlerType const handler)</argsstring>
        <name>envelopeSetup</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Setup an envelope for the first time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.h" line="64" column="1" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a26b669aa49c2c9fa4a0fb88902518adb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeInit</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeInit</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an envelope with default/sentinel values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.h" line="74" column="1" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="63" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2594d3d4a1f40c4db73713a8b62b24df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(Envelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1aa9c8cc094b5361482021d63012987814" kindref="member">Envelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize an envelope without defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.h" line="81" column="1" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a931b61a10a85d44d2355e984e40177ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeInitCopy</definition>
        <argsstring>(Env &amp;env, Env const &amp;src_env)</argsstring>
        <name>envelopeInitCopy</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>Env const &amp;</type>
          <declname>src_env</declname>
        </param>
        <briefdescription>
<para>Initialize an envelope via a copy. </para>        </briefdescription>
        <detaileddescription>
<para>Some properties of the target envelope are preserved. The target envelope is left unlocked.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the target envelope to init </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the original envelope to use as a copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.h" line="93" column="1" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a16caa74ca477155c59de62474b2e1f89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeCopyBcastData</definition>
        <argsstring>(Env &amp;env, Env const &amp;src_env)</argsstring>
        <name>envelopeCopyBcastData</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type>Env const &amp;</type>
          <declname>src_env</declname>
        </param>
        <briefdescription>
<para>Copy broadcast related data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the target envelope to copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the original envelope to use as a copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.h" line="102" column="1" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ace3e4542ae09ecd9728bea6548d71d5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeInitRecv</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeInitRecv</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize/validate an envelope that has been received. </para>        </briefdescription>
        <detaileddescription>
<para>The ref-count is set to zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_setup.h" line="112" column="1" bodyfile="src/vt/messaging/envelope/envelope_setup.impl.h" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab507eac4b5cf7e2712f2c626b379498e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::envelopeInitEmpty</definition>
        <argsstring>(PutShortEnvelope &amp;env)</argsstring>
        <name>envelopeInitEmpty</name>
        <param>
          <type><ref refid="namespacevt_1a8d7a7de9e76bfea1600009a775b7298c" kindref="member">PutShortEnvelope</ref> &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Initialize a <computeroutput><ref refid="structvt_1_1_put_envelope" kindref="compound">PutEnvelope</ref></computeroutput> with extra put-related fields. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="88" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a56ab014300930ba8ffc902793035eca2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a537693bfe0223c71eb52bdbd6ea2c741" kindref="member">PutPtrType</ref></type>
        <definition>PutPtrType vt::envelopeGetPutPtr</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetPutPtr</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the put pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the put pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="106" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1abbd3e4684f30ad052e43a1655f540b6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1aa241444e21c15238e185923792814fe4" kindref="member">PutEnvSizeType</ref></type>
        <definition>PutEnvSizeType vt::envelopeGetPutSize</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetPutSize</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the put payload byte length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the put length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="124" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="124" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aaf50340390d58fe42775ae5b8e413f28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::envelopeGetPutTag</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeGetPutTag</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Get the put tag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the put tag </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="142" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="142" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a17f0a4c162ef2b8337dfeab15f1c3a5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetPutPtr</definition>
        <argsstring>(Env &amp;env, PutPtrConstType ptr, PutEnvSizeType size)</argsstring>
        <name>envelopeSetPutPtr</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a494d6c6dc5cdb9a8d61eaedfa2c4d4f3" kindref="member">PutPtrConstType</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aa241444e21c15238e185923792814fe4" kindref="member">PutEnvSizeType</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the put pointer and byte length for put. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the put pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the put byte length </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="160" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="160" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4e63ee5cc991a0a2052300feaae4bd4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetPutPtrOnly</definition>
        <argsstring>(Env &amp;env, PutPtrConstType ptr)</argsstring>
        <name>envelopeSetPutPtrOnly</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a494d6c6dc5cdb9a8d61eaedfa2c4d4f3" kindref="member">PutPtrConstType</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set the put pointer only. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the put pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="179" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="179" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a43128d4858572c9b60cfc1c420acc882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::envelopeSetPutTag</definition>
        <argsstring>(Env &amp;env, TagType const &amp;in_tag)</argsstring>
        <name>envelopeSetPutTag</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>in_tag</declname>
        </param>
        <briefdescription>
<para>Set the put tag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the put tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="195" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2206947364b94e9c7dba38df257d095b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::setPackedPutType</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>setPackedPutType</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Set the envelope type bit for <computeroutput>EnvPackedPut</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="210" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aba8a23bc60c8177816d94e913aed6107" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::envelopeIsPackedPutType</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsPackedPutType</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if <computeroutput>EnvPackedPut</computeroutput> is set on the envelope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/payload_envelope.h" line="222" column="1" bodyfile="src/vt/messaging/envelope/payload_envelope.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa4a692a62fffd91e7e708d8047897a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messageRef</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>messageRef</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/refs.h" line="55" column="1" bodyfile="src/vt/messaging/message/refs.impl.h" bodystart="55" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a85f2aa61b92eeeedc61654cd4865b2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messageDeref</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>messageDeref</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/refs.h" line="58" column="1" bodyfile="src/vt/messaging/message/refs.impl.h" bodystart="66" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a6c87ed02a655497ee05109f3c50374fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>MsgT *</type>
        <definition>MsgT * vt::makeSharedMessage</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>makeSharedMessage</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new &apos;raw&apos; message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>makeMesssage</computeroutput>. </para></xrefdescription></xrefsect>Create a new message and initialize internal state. The arguments are forwarded down to the underlying message&apos;s constructor.</para><para><simplesect kind="warning"><para>The returned pointer represents a leaked object until &apos;promoted&apos; to a MsgPtr. While <computeroutput>theMsg</computeroutput> send API will automatically perform a promotion, automatic message promotion should generally not be relied upon.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a bare message pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.h" line="73" column="1" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1cad9543b26045826f0fa5d17a2dfd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>MsgT *</type>
        <definition>MsgT * vt::makeSharedMessageSz</definition>
        <argsstring>(std::size_t size, Args &amp;&amp;... args)</argsstring>
        <name>makeSharedMessageSz</name>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new &apos;raw&apos; message, of a given size. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>makeMesssage</computeroutput>. </para></xrefdescription></xrefsect>Create a new message and initialize internal state. The arguments are forwarded down to the underlying message&apos;s constructor.</para><para><simplesect kind="warning"><para>The returned pointer represents a leaked object until &apos;promoted&apos; to a MsgPtr. While <computeroutput>theMsg</computeroutput> send API will automatically perform a promotion, automatic message promotion should generally not be relied upon.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>extra requested size at the end of message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a bare message pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.h" line="94" column="1" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a948c0bbe39c34326b5453065a461ebaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; MsgT &gt;</type>
        <definition>MsgPtr&lt; MsgT &gt; vt::makeMessage</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>makeMessage</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new message. </para>        </briefdescription>
        <detaileddescription>
<para>Create a new message already wrapped in a MsgPtr. The arguments are forwarded down to the underlying message&apos;s constructor.</para><para>The lifetime of the message is controlled by MsgPtr and will be destroyed when the returned MsgPtr (and all copies of such) are destroyed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared message pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.h" line="110" column="1" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a02d4a45f1b229ac6fd5da4bf289d6654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; MsgT &gt;</type>
        <definition>MsgPtr&lt; MsgT &gt; vt::makeMessageSz</definition>
        <argsstring>(std::size_t size, Args &amp;&amp;... args)</argsstring>
        <name>makeMessageSz</name>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a new message, of a size. </para>        </briefdescription>
        <detaileddescription>
<para>Create a new message already wrapped in a MsgPtr. The arguments are forwarded down to the underlying message&apos;s constructor.</para><para>The lifetime of the message is controlled by MsgPtr and will be destroyed when the returned MsgPtr (and all copies of such) are destroyed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>extra requested size at the end of message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>forwarded message arguments for constructor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared message pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/shared_message.h" line="127" column="1" bodyfile="src/vt/messaging/message/shared_message.impl.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a67418c428a6a98bdc05c264ef8517dd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
        <definition>MsgPtr&lt;T&gt; vt::promoteMsgOwner</definition>
        <argsstring>(T *const msg)</argsstring>
        <name>promoteMsgOwner</name>
        <param>
          <type>T *const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obsolete form - do not use. There is no direct replacement; has_owner_ is removed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="371" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af00ebdeb74801e5658cf5726193d5753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
        <definition>MsgPtr&lt;T&gt; vt::promoteMsg</definition>
        <argsstring>(MsgPtr&lt; T &gt; msg)</argsstring>
        <name>promoteMsg</name>
        <param>
          <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obsolete form - do not use. There is no direct replacement; has_owner_ is removed and the semantic operation differed from <ref refid="namespacevt_1a991383de8a150393ef67012fbe689dd0" kindref="member">promoteMsg(T*)</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="380" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="380" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a991383de8a150393ef67012fbe689dd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; T &gt;</type>
        <definition>MsgPtr&lt;T&gt; vt::promoteMsg</definition>
        <argsstring>(T *msg)</argsstring>
        <name>promoteMsg</name>
        <param>
          <type>T *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Wrap a message as a MsgPtr&lt;Msg&gt;, increasing ref-ownership. </para>        </briefdescription>
        <detaileddescription>
<para>This is the same as using MsgPtr&lt;T&gt;{T*} directly. The primary usage is in historic call-sites as new code should prefer using <computeroutput>makeMessage</computeroutput> (and accepting a MsgPtr) instead of creating a raw message first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="393" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="393" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a833f0115b692f578167cbd88e30d39c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1objgroup_1_1_obj_group_manager" kindref="compound">objgroup::ObjGroupManager</ref> *</type>
        <definition>objgroup::ObjGroupManager * vt::theObjGroup</definition>
        <argsstring>()</argsstring>
        <name>theObjGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/objgroup/manager.fwd.h" line="71" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a268431014c9031c0f7c33d32c1b8645c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1param_1_1_param" kindref="compound">param::Param</ref> *</type>
        <definition>param::Param * vt::theParam</definition>
        <argsstring>()</argsstring>
        <name>theParam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="272" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a59494f92a4811ae4f2b5264a50aa78dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">param::DataMsg</ref>&lt; std::tuple&lt; Args... &gt; &gt; &gt;</type>
        <definition>MsgSharedPtr&lt;param::DataMsg&lt;std::tuple&lt;Args...&gt; &gt; &gt; vt::buildData</definition>
        <argsstring>(Args &amp;&amp;... a)</argsstring>
        <name>buildData</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="275" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a3799d6b51fb71d7b6505760aad457e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1phase_1_1_phase_manager" kindref="compound">phase::PhaseManager</ref> *</type>
        <definition>vt::phase::PhaseManager * vt::thePhase</definition>
        <argsstring>()</argsstring>
        <name>thePhase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="220" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a673b109e94c7bca58313504c83e1da94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager" kindref="compound">pipe::PipeManager</ref> *</type>
        <definition>pipe::PipeManager * vt::theCB</definition>
        <argsstring>()</argsstring>
        <name>theCB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager.fwd.h" line="72" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aab3530d89a64e5ea903b0ccf303ecbb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_pool" kindref="compound">pool::Pool</ref> *</type>
        <definition>pool::Pool * vt::thePool</definition>
        <argsstring>()</argsstring>
        <name>thePool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="251" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a68b8410bc2b86d3b5228d7dbb6b40bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_r_d_m_a_manager" kindref="compound">rdma::RDMAManager</ref> *</type>
        <definition>rdma::RDMAManager * vt::theRDMA</definition>
        <argsstring>()</argsstring>
        <name>theRDMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdma/rdma.h" line="950" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aecb87ec2c40b5b7fc57ba4cf8ea838b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_manager" kindref="compound">rdma::Manager</ref> *</type>
        <definition>rdma::Manager * vt::theHandleRDMA</definition>
        <argsstring>()</argsstring>
        <name>theHandleRDMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/manager.fwd.h" line="58" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a8b5994a5aedabc64006ce820db2e938c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1registry_1_1_registry" kindref="compound">registry::Registry</ref> *</type>
        <definition>registry::Registry * vt::theRegistry</definition>
        <argsstring>()</argsstring>
        <name>theRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/registry/registry.h" line="166" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad46b232b74b745991314a4a509c648f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1_virtual_context_manager" kindref="compound">vrt::VirtualContextManager</ref> *</type>
        <definition>vrt::VirtualContextManager * vt::theVirtualManager</definition>
        <argsstring>()</argsstring>
        <name>theVirtualManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="113" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4508b38e6ab664b64f1415aecbb83571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1sched_1_1_scheduler" kindref="compound">sched::Scheduler</ref> *</type>
        <definition>sched::Scheduler * vt::theSched</definition>
        <argsstring>()</argsstring>
        <name>theSched</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="125" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a4a7d07c845b311da59286de486d623c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1seq_1_1_sequencer" kindref="compound">seq::Sequencer</ref> *</type>
        <definition>seq::Sequencer * vt::theSeq</definition>
        <argsstring>()</argsstring>
        <name>theSeq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="126" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1abdbb9ddb0d79b35c89e9d742d3fc9d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1seq_1_1_sequencer_virtual" kindref="compound">seq::SequencerVirtual</ref> *</type>
        <definition>seq::SequencerVirtual * vt::theVirtualSeq</definition>
        <argsstring>()</argsstring>
        <name>theVirtualSeq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="127" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a127580fdfcaba0b4171e5c48c5676733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_termination_detector" kindref="compound">term::TerminationDetector</ref> *</type>
        <definition>term::TerminationDetector * vt::theTerm</definition>
        <argsstring>()</argsstring>
        <name>theTerm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="128" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ace1c9d64e09732e3b7414d02517ecfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1location_1_1_location_manager" kindref="compound">location::LocationManager</ref> *</type>
        <definition>location::LocationManager * vt::theLocMan</definition>
        <argsstring>()</argsstring>
        <name>theLocMan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="129" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1c45ce63bfd2c327ff7d76a319a371d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a290f7e8941f9f411b54cdb15b6cea107" kindref="member">CollectionManagerType</ref> *</type>
        <definition>vrt::collection::CollectionManager * vt::theCollection</definition>
        <argsstring>()</argsstring>
        <name>theCollection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="130" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a38d485d3cf840b9a623e47e7754ef72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage" kindref="compound">util::memory::MemoryUsage</ref> *</type>
        <definition>util::memory::MemoryUsage * vt::theMemUsage</definition>
        <argsstring>()</argsstring>
        <name>theMemUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="135" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ae1526efa346612ad330d9a628e596c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_node_stats" kindref="compound">vrt::collection::balance::NodeStats</ref> *</type>
        <definition>vrt::collection::balance::NodeStats * vt::theNodeStats</definition>
        <argsstring>()</argsstring>
        <name>theNodeStats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="136" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ad73860100c7d2ca1d833eab74942ee73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_stats_restart_reader" kindref="compound">vrt::collection::balance::StatsRestartReader</ref> *</type>
        <definition>vrt::collection::balance::StatsRestartReader * vt::theStatsReader</definition>
        <argsstring>()</argsstring>
        <name>theStatsReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="137" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a05187076eac8c66c9951b062b0955520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_manager" kindref="compound">vrt::collection::balance::LBManager</ref> *</type>
        <definition>vrt::collection::balance::LBManager * vt::theLBManager</definition>
        <argsstring>()</argsstring>
        <name>theLBManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="138" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a1e1a39cdf2a3fc1adefcdfcca4716bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1timetrigger_1_1_time_trigger_manager" kindref="compound">timetrigger::TimeTriggerManager</ref> *</type>
        <definition>timetrigger::TimeTriggerManager * vt::theTimeTrigger</definition>
        <argsstring>()</argsstring>
        <name>theTimeTrigger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="139" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa550774c1c9c668176ce535fd7d58fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runSchedulerThrough</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>runSchedulerThrough</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.cc" line="379" column="1" bodyfile="src/vt/scheduler/scheduler.cc" bodystart="379" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a9f5cbbc484d7f14f2ad0ee46d62dfb6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochRooted</definition>
        <argsstring>(Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochRooted</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.h" line="69" column="1" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1af80867582a504d0f3cf4e2d95596645b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochRooted</definition>
        <argsstring>(std::string const &amp;label, Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochRooted</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.h" line="72" column="1" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1a2fc4ef34f30b49a1781d765804bfadbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochCollective</definition>
        <argsstring>(Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochCollective</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.h" line="75" column="1" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1aa6f98f3a207d6d329cf36cbd6d523626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpochCollective</definition>
        <argsstring>(std::string const &amp;label, Callable &amp;&amp;fn)</argsstring>
        <name>runInEpochCollective</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.h" line="78" column="1" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1ab95230c4145a8f4fb6874188eda37991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runInEpoch</definition>
        <argsstring>(EpochType ep, Callable &amp;&amp;fn)</argsstring>
        <name>runInEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/scheduler/scheduler.impl.h" line="55" column="1" bodyfile="src/vt/scheduler/scheduler.impl.h" bodystart="55" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/activefn/activefn.h" line="52" column="1"/>
  </compounddef>
</doxygen>
