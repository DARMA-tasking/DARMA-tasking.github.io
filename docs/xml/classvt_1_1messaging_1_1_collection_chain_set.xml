<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classvt_1_1messaging_1_1_collection_chain_set" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>vt::messaging::CollectionChainSet</compoundname>
    <includes refid="collection__chain__set_8h" local="no">vt/messaging/collection_chain_set.h</includes>
    <templateparamlist>
      <param>
        <type>class Index</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvt_1_1messaging_1_1_collection_chain_set_1afd05e48d93d231320364149fd538beab" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Index, <ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref> &gt;</type>
        <definition>std::unordered_map&lt;Index, DependentSendChain&gt; vt::messaging::CollectionChainSet&lt; Index &gt;::chains_</definition>
        <argsstring></argsstring>
        <name>chains_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="217" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aeb43ad4a2e46ea059817b639b72ddb3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>()=default</argsstring>
        <name>CollectionChainSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a71328cb5c03210ffdb0bd5dd5f3b6797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>(const CollectionChainSet &amp;)=delete</argsstring>
        <name>CollectionChainSet</name>
        <param>
          <type>const <ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a21be566436c86fa59a02a1bd073a9e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>(CollectionChainSet &amp;&amp;)=delete</argsstring>
        <name>CollectionChainSet</name>
        <param>
          <type><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aefc11c9b011b4916c3b80dfc8f776239" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::addIndex</definition>
        <argsstring>(Index idx)</argsstring>
        <name>addIndex</name>
        <param>
          <type>Index</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Add an index to the set. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a new, empty <computeroutput><ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref></computeroutput> for the given index</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="82" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a299e52c482aba47bcdabe796d236c043" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::removeIndex</definition>
        <argsstring>(Index idx)</argsstring>
        <name>removeIndex</name>
        <param>
          <type>Index</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Remove an index from the set. </para>        </briefdescription>
        <detaileddescription>
<para>The chain for that index being removed must be terminated (at the end of the chain). This may be called during migration or when a collection element&apos;s control sequencing is no longer being tracked (on this node) with this chain set</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="97" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aa6ab934f32d8623872cfcd7ed9e147b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStep</definition>
        <argsstring>(std::string const &amp;label, std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStep</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next step to execute on all the chains resident in this collection chain set. </para>        </briefdescription>
        <detaileddescription>
<para>Goes through every resident chain and enqueues the action at the end of the current chain when the preceding steps terminate. Creates a new rooted epoch for this step to contain/track completion of all the causally related messages.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label for the epoch created for debugging </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to perform as a function that returns a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="118" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="118" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aa4e8a0a24fa7cde6e7f729f4dd002e64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStep</definition>
        <argsstring>(std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStep</name>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next step to execute on all the chains resident in this collection chain set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to perform as a function that returns a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="144" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a095bc4907c3bd60668483de52b79b08e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStepCollective</definition>
        <argsstring>(std::string const &amp;label, std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStepCollective</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next collective step to execute across all resident elements across all nodes. </para>        </briefdescription>
        <detaileddescription>
<para>Should be used for steps with internal recursive communication and global inter-dependence. Creates a global (on the communicator), collective epoch to track all the casually related messages and collectively wait for termination of all of the recursive sends..</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label for the epoch created for debugging </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the next step to execute, returning a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="180" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="180" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a7d226984e696278b9ca7e539c974bab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStepCollective</definition>
        <argsstring>(std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStepCollective</name>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next collective step to execute across all resident elements across all nodes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the next step to execute, returning a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="202" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1afcb749b22063068d060f35fdcd2320b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::phaseDone</definition>
        <argsstring>()</argsstring>
        <name>phaseDone</name>
        <briefdescription>
<para>Indicate that the current phase is complete. Resets the state on each <computeroutput><ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="210" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="210" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A set of chains to maintain a sequence for a set of collection elements that may be local or remote. </para>    </briefdescription>
    <detaileddescription>
<para>Manages a set of chains (sequences) on a set of elements where this is constructed. It may sequence objects that reside on this node or a remote node (either is valid). This enables the user to enqueue sequences of tasks on each object and coordinate data dependencies. </para>    </detaileddescription>
    <location file="src/vt/messaging/collection_chain_set.h" line="69" column="1" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="69" bodyend="218"/>
    <listofallmembers>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aefc11c9b011b4916c3b80dfc8f776239" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>addIndex</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1afd05e48d93d231320364149fd538beab" prot="private" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>chains_</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aeb43ad4a2e46ea059817b639b72ddb3b" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a71328cb5c03210ffdb0bd5dd5f3b6797" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a21be566436c86fa59a02a1bd073a9e48" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aa6ab934f32d8623872cfcd7ed9e147b2" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStep</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aa4e8a0a24fa7cde6e7f729f4dd002e64" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStep</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a095bc4907c3bd60668483de52b79b08e" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStepCollective</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a7d226984e696278b9ca7e539c974bab4" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStepCollective</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1afcb749b22063068d060f35fdcd2320b3" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>phaseDone</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a299e52c482aba47bcdabe796d236c043" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>removeIndex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
