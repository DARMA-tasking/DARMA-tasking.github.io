<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classvt_1_1messaging_1_1_collection_chain_set" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>vt::messaging::CollectionChainSet</compoundname>
    <includes refid="collection__chain__set_8h" local="no">vt/messaging/collection_chain_set.h</includes>
    <innerclass refid="structvt_1_1messaging_1_1_collection_chain_set_1_1_idx_msg" prot="private">vt::messaging::CollectionChainSet::IdxMsg</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Index</declname>
        <defname>Index</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvt_1_1messaging_1_1_collection_chain_set_1afd05e48d93d231320364149fd538beab" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Index, <ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref> &gt;</type>
        <definition>std::unordered_map&lt;Index, DependentSendChain&gt; vt::messaging::CollectionChainSet&lt; Index &gt;::chains_</definition>
        <argsstring></argsstring>
        <name>chains_</name>
        <briefdescription>
<para>Set of <computeroutput><ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref></computeroutput> managed on this node for indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="353" column="22" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvt_1_1messaging_1_1_collection_chain_set_1a0c471bdf6ef26c2ca5c214bdda8eb866" prot="private" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; vt::messaging::CollectionChainSet&lt; Index &gt;::deallocator_</definition>
        <argsstring></argsstring>
        <name>deallocator_</name>
        <briefdescription>
<para>Deallocator that type erases element listener de-registration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="355" column="17" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aeb43ad4a2e46ea059817b639b72ddb3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>()=default</argsstring>
        <name>CollectionChainSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="82" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a71328cb5c03210ffdb0bd5dd5f3b6797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>(const CollectionChainSet &amp;)=delete</argsstring>
        <name>CollectionChainSet</name>
        <param>
          <type>const <ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="83" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a21be566436c86fa59a02a1bd073a9e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>(CollectionChainSet &amp;&amp;)=delete</argsstring>
        <name>CollectionChainSet</name>
        <param>
          <type><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="84" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a307795a4cfc6c794ea3979655a97be91" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ProxyT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ProxyT::IndexType</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::CollectionChainSet</definition>
        <argsstring>(ProxyT proxy, ChainSetLayout layout=Local)</argsstring>
        <name>CollectionChainSet</name>
        <param>
          <type>ProxyT</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1messaging_1af09e66b5a14598baf7e4b56ad6080ec2" kindref="member">ChainSetLayout</ref></type>
          <declname>layout</declname>
          <defval><ref refid="namespacevt_1_1messaging_1af09e66b5a14598baf7e4b56ad6080ec2a010b35e408e991d56531802665998408" kindref="member">Local</ref></defval>
        </param>
        <briefdescription>
<para>Construct with a collection proxy to track indices on each node depending on the layout specified. Tracking dependencies on the local node may be better for performance as it may reduce the number of messages that must be sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This constructor is a collective invocation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">layout</parametername>
</parameternamelist>
<parameterdescription>
<para>the location the chain set tracks each element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="98" column="12" bodyfile="src/vt/messaging/collection_chain_set.impl.h" bodystart="54" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a8ee6333242f51748e17328f185b3b999" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::CollectionChainSet&lt; Index &gt;::~CollectionChainSet</definition>
        <argsstring>()</argsstring>
        <name>~CollectionChainSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="100" column="3" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aefc11c9b011b4916c3b80dfc8f776239" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::addIndex</definition>
        <argsstring>(Index idx)</argsstring>
        <name>addIndex</name>
        <param>
          <type>Index</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Add an index to the set. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, empty <computeroutput><ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref></computeroutput> for the given index</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="143" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a299e52c482aba47bcdabe796d236c043" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::removeIndex</definition>
        <argsstring>(Index idx)</argsstring>
        <name>removeIndex</name>
        <param>
          <type>Index</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Remove an index from the set. </para>
        </briefdescription>
        <detaileddescription>
<para>The chain for that index being removed must be terminated (at the end of the chain). This may be called during migration or when a collection element&apos;s control sequencing is no longer being tracked (on this node) with this chain set</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="160" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="160" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aa6ab934f32d8623872cfcd7ed9e147b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStep</definition>
        <argsstring>(std::string const &amp;label, std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStep</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next step to execute on all the chain indices in this collection chain set. </para>
        </briefdescription>
        <detaileddescription>
<para>Goes through every chain index and enqueues the action at the end of the current chain when the preceding steps terminate. Creates a new rooted epoch for this step to contain/track completion of all the causally related messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label for the epoch created for debugging </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to perform as a function that returns a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="182" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="182" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1aa4e8a0a24fa7cde6e7f729f4dd002e64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStep</definition>
        <argsstring>(std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStep</name>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next step to execute on all the chain indices in this collection chain set. </para>
        </briefdescription>
        <detaileddescription>
<para>Goes through every chain index and enqueues the action at the end of the current chain when the preceding steps terminate. Creates a new rooted epoch for this step to contain/track completion of all the causally related messages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to perform as a function that returns a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="213" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a095bc4907c3bd60668483de52b79b08e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStepCollective</definition>
        <argsstring>(std::string const &amp;label, std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStepCollective</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next collective step to execute for each index that is added to the <ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> on each node. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be used for steps with internal recursive communication and global inter-dependence. Creates a global (on the communicator), collective epoch to track all the casually related messages and collectively wait for termination of all of the recursive sends.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label for the epoch created for debugging </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the next step to execute, returning a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="229" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="229" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a7d226984e696278b9ca7e539c974bab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::nextStepCollective</definition>
        <argsstring>(std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>nextStepCollective</name>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next collective step to execute for each index that is added to the <ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> on each node. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be used for steps with internal recursive communication and global inter-dependence. Creates a global (on the communicator), collective epoch to track all the casually related messages and collectively wait for termination of all of the recursive sends.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the next step to execute, returning a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="255" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1afcb749b22063068d060f35fdcd2320b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::phaseDone</definition>
        <argsstring>()</argsstring>
        <name>phaseDone</name>
        <briefdescription>
<para>Indicate that the current phase is complete. Resets the state on each <computeroutput><ref refid="classvt_1_1messaging_1_1_dependent_send_chain" kindref="compound">DependentSendChain</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="325" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a17bcba0392b2ae7c68a3c3630b71ffa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; Index &gt;</type>
        <definition>std::unordered_set&lt;Index&gt; vt::messaging::CollectionChainSet&lt; Index &gt;::getSet</definition>
        <argsstring>()</argsstring>
        <name>getSet</name>
        <briefdescription>
<para>Get the set of indices registered with this chain set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="334" column="22" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="334" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a5768b5b636799860a63ab182a1e34c9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::foreach</definition>
        <argsstring>(std::function&lt; void(Index)&gt; fn)</argsstring>
        <name>foreach</name>
        <param>
          <type>std::function&lt; void(Index)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Run a lambda immediately on each element in the index set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="345" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="345" bodyend="349"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1af1b3ca58d3d018fa2a81b86d62fec4ff" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::addIndexHan</definition>
        <argsstring>(IdxMsg *msg)</argsstring>
        <name>addIndexHan</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_collection_chain_set_1_1_idx_msg" kindref="compound">IdxMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>brief Add an index remotely</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>index message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="122" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1abbc0c0995c4961fcd07f46303b06d58e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::CollectionChainSet&lt; Index &gt;::removeIndexHan</definition>
        <argsstring>(IdxMsg *msg)</argsstring>
        <name>removeIndexHan</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_collection_chain_set_1_1_idx_msg" kindref="compound">IdxMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Remove an index remotely. </para>
        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>index message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="131" column="8" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="131" bodyend="133"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a982745c451229365b57a15a87dc2999e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void vt::messaging::CollectionChainSet&lt; Index &gt;::mergeStepCollective</definition>
        <argsstring>(CollectionChainSet &amp;a, CollectionChainSet &amp;b, std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>mergeStepCollective</name>
        <param>
          <type><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next collective step of both CollectionChainSets to execute over all shared indices of the CollectionChainSets over all nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ensures that the step is dependent on the previous step of both chainsets a and b. Additionally any additional steps in each chainset will occur after the merged step.</para>
<para><simplesect kind="pre"><para>Each index in CollectionChainset a must exist in CollectionChainset b</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>the first chainset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>the second chainset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the next step to be executed, dependent on the previous step of chainsets a and b </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="275" column="15" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classvt_1_1messaging_1_1_collection_chain_set_1a6560ca64c07967bbd81c57dcd009dd60" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void vt::messaging::CollectionChainSet&lt; Index &gt;::mergeStepCollective</definition>
        <argsstring>(std::string const &amp;label, CollectionChainSet &amp;a, CollectionChainSet &amp;b, std::function&lt; PendingSend(Index)&gt; step_action)</argsstring>
        <name>mergeStepCollective</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref>(Index)&gt;</type>
          <declname>step_action</declname>
        </param>
        <briefdescription>
<para>The next collective step of both CollectionChainSets to execute over all shared indices of the CollectionChainSets over all nodes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ensures that the step is dependent on the previous step of both chainsets a and b. Additionally any additional steps in each chainset will occur after the merged step.</para>
<para><simplesect kind="pre"><para>Each index in CollectionChainset a must exist in CollectionChainset b</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>the label for the step </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>the first chainset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>the second chainset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the next step to be executed, dependent on the previous step of chainsets a and b </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/collection_chain_set.h" line="298" column="15" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="298" bodyend="319"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A set of chains to maintain a sequence for a set of collection elements that may be local or remote. </para>
    </briefdescription>
    <detaileddescription>
<para>Manages a set of chains (sequences) on a set of elements where this is constructed. It may sequence objects that reside on this node or a remote node (either is valid). This enables the user to enqueue sequences of tasks on each object and coordinate data dependencies. </para>
    </detaileddescription>
    <location file="src/vt/messaging/collection_chain_set.h" line="80" column="25" bodyfile="src/vt/messaging/collection_chain_set.h" bodystart="80" bodyend="356"/>
    <listofallmembers>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aefc11c9b011b4916c3b80dfc8f776239" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>addIndex</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1af1b3ca58d3d018fa2a81b86d62fec4ff" prot="private" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>addIndexHan</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1afd05e48d93d231320364149fd538beab" prot="private" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>chains_</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aeb43ad4a2e46ea059817b639b72ddb3b" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a71328cb5c03210ffdb0bd5dd5f3b6797" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a21be566436c86fa59a02a1bd073a9e48" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a307795a4cfc6c794ea3979655a97be91" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>CollectionChainSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a0c471bdf6ef26c2ca5c214bdda8eb866" prot="private" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>deallocator_</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a5768b5b636799860a63ab182a1e34c9a" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>foreach</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a17bcba0392b2ae7c68a3c3630b71ffa3" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>getSet</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a982745c451229365b57a15a87dc2999e" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>mergeStepCollective</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a6560ca64c07967bbd81c57dcd009dd60" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>mergeStepCollective</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aa6ab934f32d8623872cfcd7ed9e147b2" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStep</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1aa4e8a0a24fa7cde6e7f729f4dd002e64" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStep</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a095bc4907c3bd60668483de52b79b08e" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStepCollective</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a7d226984e696278b9ca7e539c974bab4" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>nextStepCollective</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1afcb749b22063068d060f35fdcd2320b3" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>phaseDone</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a299e52c482aba47bcdabe796d236c043" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>removeIndex</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1abbc0c0995c4961fcd07f46303b06d58e" prot="private" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>removeIndexHan</name></member>
      <member refid="classvt_1_1messaging_1_1_collection_chain_set_1a8ee6333242f51748e17328f185b3b999" prot="public" virt="non-virtual"><scope>vt::messaging::CollectionChainSet</scope><name>~CollectionChainSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
