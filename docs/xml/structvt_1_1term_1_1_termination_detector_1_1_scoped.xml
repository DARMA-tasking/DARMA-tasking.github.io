<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1term_1_1_termination_detector_1_1_scoped" kind="struct" language="C++" prot="public">
    <compoundname>vt::term::TerminationDetector::Scoped</compoundname>
    <includes refid="termination_8h" local="no">termination.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1_1_scoped_1a16ee43366fbcdfcdaf801bf46b078380" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::Scoped::rooted</definition>
        <argsstring>(bool use_ds, ActionType closure)</argsstring>
        <name>rooted</name>
        <param>
          <type>bool</type>
          <declname>use_ds</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>closure</declname>
        </param>
        <briefdescription>
<para>Run closure in rooted epoch to detect termination of all its work. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use DS algorithm or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">closure</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to generate the initial work, from which all transitively generated work will be part of the return epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch created for it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="224" column="1" bodyfile="src/vt/termination/term_scope.cc" bodystart="54" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1_1_scoped_1ae74915c3fff83fd890aa2b411e371c19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::Scoped::rooted</definition>
        <argsstring>(bool use_ds, ActionType closure, ActionType action)</argsstring>
        <name>rooted</name>
        <param>
          <type>bool</type>
          <declname>use_ds</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>closure</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Run closure in rooted epoch to detect termination of all its work. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use DS algorithm or not </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">closure</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to generate the initial work, from which all transitively generated work will be part of the return epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute after closure terminates</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch created for it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="236" column="1" bodyfile="src/vt/termination/term_scope.cc" bodystart="74" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1_1_scoped_1a7debccd958f4257512a8640ab1ffb324" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::Scoped::collective</definition>
        <argsstring>(ActionType closure)</argsstring>
        <name>collective</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>closure</declname>
        </param>
        <briefdescription>
<para>Collectively run closure in collective epoch to detect termination of all its work. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">closure</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to generate the initial work, from which all transitively generated work will be part of the return epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch created for it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="247" column="1" bodyfile="src/vt/termination/term_scope.cc" bodystart="88" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1_1_scoped_1a199da03a9c1a2fbce14c15484e71bacc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::Scoped::collective</definition>
        <argsstring>(ActionType closure, ActionType action)</argsstring>
        <name>collective</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>closure</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Collectively run closure in collective epoch to detect termination of all its work. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">closure</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to generate the initial work, from which all transitively generated work will be part of the return epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute after closure terminates</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch created for it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="259" column="1" bodyfile="src/vt/termination/term_scope.cc" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1_1_scoped_1ae7fedaf303fa8a72c8b21a6e9a16783f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Actions</declname>
            <defname>Actions</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::term::TerminationDetector::Scoped::rootedSeq</definition>
        <argsstring>(bool use_ds, Actions... closures)</argsstring>
        <name>rootedSeq</name>
        <param>
          <type>bool</type>
          <declname>use_ds</declname>
        </param>
        <param>
          <type>Actions...</type>
          <declname>closures</declname>
        </param>
        <briefdescription>
<para>Run a rooted sequence of actions with termination in-between them. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use DS </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">closures</parametername>
</parameternamelist>
<parameterdescription>
<para>pack of closures to sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="268" column="1" bodyfile="src/vt/termination/term_scope.impl.h" bodystart="58" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for scoped epochs using C++ lexical scopes to encapsulate epoch regimes. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/termination/termination.h" line="214" column="1" bodyfile="src/vt/termination/termination.h" bodystart="214" bodyend="269"/>
    <listofallmembers>
      <member refid="structvt_1_1term_1_1_termination_detector_1_1_scoped_1a7debccd958f4257512a8640ab1ffb324" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector::Scoped</scope><name>collective</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1_1_scoped_1a199da03a9c1a2fbce14c15484e71bacc" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector::Scoped</scope><name>collective</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1_1_scoped_1a16ee43366fbcdfcdaf801bf46b078380" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector::Scoped</scope><name>rooted</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1_1_scoped_1ae74915c3fff83fd890aa2b411e371c19" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector::Scoped</scope><name>rooted</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1_1_scoped_1ae7fedaf303fa8a72c8b21a6e9a16783f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector::Scoped</scope><name>rootedSeq</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
