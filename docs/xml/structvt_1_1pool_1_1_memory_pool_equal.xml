<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1pool_1_1_memory_pool_equal" kind="struct" language="C++" prot="public">
    <compoundname>vt::pool::MemoryPoolEqual</compoundname>
    <includes refid="memory__pool__equal_8h" local="no">memory_pool_equal.h</includes>
    <templateparamlist>
      <param>
        <type>int64_t</type>
        <declname>num_bytes_t</declname>
        <defname>num_bytes_t</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>use_header</declname>
        <defname>use_header</defname>
        <defval>true</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_memory_pool_equal_1a3f343f1f8f74e333c8fffad7698c85f1" prot="public" static="no">
        <type>std::vector&lt; std::byte * &gt;</type>
        <definition>using vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::ContainerType =  std::vector&lt;std::byte*&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="79" column="3" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::SlotType =  int64_t</definition>
        <argsstring></argsstring>
        <name>SlotType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="80" column="3" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_memory_pool_equal_1a26a1a8d38f35edec102a47d7b177bfb2" prot="public" static="no">
        <type><ref refid="structvt_1_1pool_1_1_header" kindref="compound">Header</ref></type>
        <definition>using vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::HeaderType =  Header</definition>
        <argsstring></argsstring>
        <name>HeaderType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="81" column="3" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_memory_pool_equal_1aede857d1f5e084ce6a25f9a499c74047" prot="public" static="no">
        <type><ref refid="structvt_1_1pool_1_1_header_manager" kindref="compound">HeaderManager</ref></type>
        <definition>using vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::HeaderManagerType =  HeaderManager</definition>
        <argsstring></argsstring>
        <name>HeaderManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="82" column="3" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1a91f914b4d39e5ca644b13f1dfb47a441" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>constexpr const SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::fst_pool_slot</definition>
        <argsstring></argsstring>
        <name>fst_pool_slot</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="84" column="35" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1a88f977cb270fdb438c21084bc9073eca" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const <ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>constexpr const SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::default_pool_size</definition>
        <argsstring></argsstring>
        <name>default_pool_size</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="85" column="35" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1a3d3954a96e9dda6d39567e1693219bf9" prot="private" static="no" mutable="no">
        <type>const <ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>const SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::num_bytes_</definition>
        <argsstring></argsstring>
        <name>num_bytes_</name>
        <initializer>= num_bytes_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="110" column="18" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1a8636bcf336dc26148b4ac3404c2153fd" prot="private" static="no" mutable="no">
        <type>const <ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>const SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::num_full_bytes_</definition>
        <argsstring></argsstring>
        <name>num_full_bytes_</name>
        <initializer>= num_bytes_t + sizeof(<ref refid="structvt_1_1pool_1_1_header" kindref="compound">Header</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="111" column="18" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1a25a2b249ba0983b65ec1e2877dbd4f19" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::pool_size_</definition>
        <argsstring></argsstring>
        <name>pool_size_</name>
        <initializer>= <ref refid="structvt_1_1pool_1_1_memory_pool_equal_1a88f977cb270fdb438c21084bc9073eca" kindref="member">default_pool_size</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="113" column="12" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1aeb14c73621125dc7d9179833bbc780a7" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::cur_slot_</definition>
        <argsstring></argsstring>
        <name>cur_slot_</name>
        <initializer>= <ref refid="structvt_1_1pool_1_1_memory_pool_equal_1a91f914b4d39e5ca644b13f1dfb47a441" kindref="member">fst_pool_slot</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="114" column="12" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_memory_pool_equal_1a901b7dfe76a139d533e80fec478235c8" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1pool_1_1_memory_pool_equal_1a3f343f1f8f74e333c8fffad7698c85f1" kindref="member">ContainerType</ref></type>
        <definition>ContainerType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::holder_</definition>
        <argsstring></argsstring>
        <name>holder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="116" column="17" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1ad1f64e3c3c70d8c037c592f96443d02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::MemoryPoolEqual</definition>
        <argsstring>(SlotType const in_pool_size=default_pool_size)</argsstring>
        <name>MemoryPoolEqual</name>
        <param>
          <type><ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref> const</type>
          <declname>in_pool_size</declname>
          <defval><ref refid="structvt_1_1pool_1_1_memory_pool_equal_1a88f977cb270fdb438c21084bc9073eca" kindref="member">default_pool_size</ref></defval>
        </param>
        <briefdescription>
<para>Construct a memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_pool_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the pool in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="91" column="3" bodyfile="src/vt/pool/static_sized/memory_pool_equal.impl.h" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1aa6f87becb85f4fc575b2d5dcd68d89af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::~MemoryPoolEqual</definition>
        <argsstring>()</argsstring>
        <name>~MemoryPoolEqual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="93" column="11" bodyfile="src/vt/pool/static_sized/memory_pool_equal.impl.h" bodystart="65" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1aa142ba97f3dda1ad1843175579eb1994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::byte *</type>
        <definition>std::byte * vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::alloc</definition>
        <argsstring>(size_t const &amp;sz, size_t const &amp;oversize)</argsstring>
        <name>alloc</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>size_t const &amp;</type>
          <declname>oversize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="95" column="13" bodyfile="src/vt/pool/static_sized/memory_pool_equal.impl.h" bodystart="84" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1afdb11f39c6d8b86c797657092f90b85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::dealloc</definition>
        <argsstring>(std::byte *const t)</argsstring>
        <name>dealloc</name>
        <param>
          <type>std::byte *const</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="96" column="8" bodyfile="src/vt/pool/static_sized/memory_pool_equal.impl.h" bodystart="117" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1a42ba3ac19921517b82c4e6ff4cba6b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::resizePool</definition>
        <argsstring>()</argsstring>
        <name>resizePool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="97" column="8" bodyfile="src/vt/pool/static_sized/memory_pool_equal.impl.h" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1a222efeb2d8fee03b4fb8c275f9cfa1ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" kindref="member">SlotType</ref></type>
        <definition>MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::SlotType vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::getNumBytes</definition>
        <argsstring>()</argsstring>
        <name>getNumBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="98" column="12" bodyfile="src/vt/pool/static_sized/memory_pool_equal.impl.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_memory_pool_equal_1a49e3617769cd0bdcb3957b93466595a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pool::MemoryPoolEqual&lt; num_bytes_t, use_header &gt;::serialize</definition>
        <argsstring>(Serializer &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>Serializer &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="101" column="8" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="101" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory pool based on size and whether to use the header. The header contains additional information about messages that may not always be needed. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/pool/static_sized/memory_pool_equal.h" line="78" column="22" bodyfile="src/vt/pool/static_sized/memory_pool_equal.h" bodystart="78" bodyend="117"/>
    <listofallmembers>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1aa142ba97f3dda1ad1843175579eb1994" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>alloc</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a3f343f1f8f74e333c8fffad7698c85f1" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>ContainerType</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1aeb14c73621125dc7d9179833bbc780a7" prot="private" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>cur_slot_</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1afdb11f39c6d8b86c797657092f90b85e" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>dealloc</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a88f977cb270fdb438c21084bc9073eca" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>default_pool_size</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a91f914b4d39e5ca644b13f1dfb47a441" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>fst_pool_slot</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a222efeb2d8fee03b4fb8c275f9cfa1ac" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>getNumBytes</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1aede857d1f5e084ce6a25f9a499c74047" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>HeaderManagerType</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a26a1a8d38f35edec102a47d7b177bfb2" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>HeaderType</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a901b7dfe76a139d533e80fec478235c8" prot="private" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>holder_</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1ad1f64e3c3c70d8c037c592f96443d02a" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>MemoryPoolEqual</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a3d3954a96e9dda6d39567e1693219bf9" prot="private" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>num_bytes_</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a8636bcf336dc26148b4ac3404c2153fd" prot="private" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>num_full_bytes_</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a25a2b249ba0983b65ec1e2877dbd4f19" prot="private" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>pool_size_</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a42ba3ac19921517b82c4e6ff4cba6b80" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>resizePool</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1a49e3617769cd0bdcb3957b93466595a3" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>serialize</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1af05a2c24c95c666b20e3758745be746b" prot="public" virt="non-virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>SlotType</name></member>
      <member refid="structvt_1_1pool_1_1_memory_pool_equal_1aa6f87becb85f4fc575b2d5dcd68d89af" prot="public" virt="virtual"><scope>vt::pool::MemoryPoolEqual</scope><name>~MemoryPoolEqual</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
