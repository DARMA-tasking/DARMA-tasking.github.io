<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1term_1_1_termination_detector" kind="struct" language="C++" prot="public">
    <compoundname>vt::term::TerminationDetector</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; TerminationDetector &gt;</basecompoundref>
    <basecompoundref refid="structvt_1_1term_1_1_term_action" prot="public" virt="non-virtual">vt::term::TermAction</basecompoundref>
    <basecompoundref refid="structvt_1_1collective_1_1tree_1_1_tree" prot="public" virt="non-virtual">vt::collective::tree::Tree</basecompoundref>
    <basecompoundref refid="structvt_1_1term_1_1ds_1_1_state_d_s" prot="public" virt="non-virtual">vt::term::ds::StateDS</basecompoundref>
    <basecompoundref refid="structvt_1_1term_1_1_term_interface" prot="public" virt="non-virtual">vt::term::TermInterface</basecompoundref>
    <includes refid="termination_8h" local="no">termination.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30" prot="private" static="no">
        <name>CallFromEnum</name>
        <enumvalue id="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30a4beac8e3ddc4064785a61aa7949e3bda" prot="private">
          <name>Root</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30a73c8bf8079c6c90553937f74f98c99fc" prot="private">
          <name>NonRoot</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="408" column="1" bodyfile="src/vt/termination/termination.h" bodystart="408" bodyend="408"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1a69e2615b61e072977463eea5b20b7933" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref>, T &gt;</type>
        <definition>using vt::term::TerminationDetector::EpochContainerType =  std::unordered_map&lt;EpochType, T&gt;</definition>
        <argsstring></argsstring>
        <name>EpochContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="111" column="1" bodyfile="src/vt/termination/termination.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1a0a47413bcb7bf5e10ecb31e7871a9268" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1_term_state" kindref="compound">TermState</ref></type>
        <definition>using vt::term::TerminationDetector::TermStateType =  TermState</definition>
        <argsstring></argsstring>
        <name>TermStateType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="112" column="1" bodyfile="src/vt/termination/termination.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1aa96c37b5c120063060c6418c48e64bd1" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1ds_1_1_state_d_s_1af98cfe31c25f710273ee103026d538e4" kindref="member">term::ds::StateDS::TerminatorType</ref></type>
        <definition>using vt::term::TerminationDetector::TermStateDSType =  term::ds::StateDS::TerminatorType</definition>
        <argsstring></argsstring>
        <name>TermStateDSType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="113" column="1" bodyfile="src/vt/termination/termination.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1ac8df9c8a604ee2073ce195a994aaf252" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1_epoch_dependency_1a3f00b47c33158f3241ebbeb0a0cb7b1d" kindref="member">EpochDependency::SuccessorBagType</ref></type>
        <definition>using vt::term::TerminationDetector::SuccessorBagType =  EpochDependency::SuccessorBagType</definition>
        <argsstring></argsstring>
        <name>SuccessorBagType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="114" column="1" bodyfile="src/vt/termination/termination.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1af67f0ab522e54eb06d8ac541526155e3" prot="public" static="no">
        <type><ref refid="structvt_1_1termination_1_1graph_1_1_epoch_graph" kindref="compound">termination::graph::EpochGraph</ref></type>
        <definition>using vt::term::TerminationDetector::EpochGraph =  termination::graph::EpochGraph</definition>
        <argsstring></argsstring>
        <name>EpochGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="115" column="1" bodyfile="src/vt/termination/termination.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1aec8abc5a3b161ac7df73ff3ba385dace" prot="public" static="no">
        <type><ref refid="structvt_1_1termination_1_1graph_1_1_epoch_graph_msg" kindref="compound">termination::graph::EpochGraphMsg</ref>&lt; <ref refid="structvt_1_1term_1_1_termination_detector_1af67f0ab522e54eb06d8ac541526155e3" kindref="member">EpochGraph</ref> &gt;</type>
        <definition>using vt::term::TerminationDetector::EpochGraphMsg =  termination::graph::EpochGraphMsg&lt;EpochGraph&gt;</definition>
        <argsstring></argsstring>
        <name>EpochGraphMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="116" column="1" bodyfile="src/vt/termination/termination.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1_termination_detector_1ae12368cf9d7866c96deb32b0b61b977f" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1_epoch_stack" kindref="compound">EpochStack</ref></type>
        <definition>using vt::term::TerminationDetector::EpochStackType =  EpochStack</definition>
        <argsstring></argsstring>
        <name>EpochStackType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="117" column="1" bodyfile="src/vt/termination/termination.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1term_1_1_termination_detector_1a9c0b991de134b4bc5bebf051bd067b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct ds::StateDS</definition>
        <argsstring></argsstring>
        <name>ds::StateDS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="182" column="1" bodyfile="src/vt/termination/termination.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1term_1_1_termination_detector_1a628421bb882cfbd05876660b5b7dc150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct TermState</definition>
        <argsstring></argsstring>
        <name>TermState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="183" column="1" bodyfile="src/vt/termination/termination.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1term_1_1_termination_detector_1aee175d34803c93c65e4323ab28f04088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct EpochDependency</definition>
        <argsstring></argsstring>
        <name>EpochDependency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="184" column="1" bodyfile="src/vt/termination/termination.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a49337963d174e5be73fcf467304428a6" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref></type>
        <definition>TermStateType vt::term::TerminationDetector::any_epoch_state_</definition>
        <argsstring></argsstring>
        <name>any_epoch_state_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="813" column="1" bodyfile="src/vt/termination/termination.h" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a5f873fb4a66c8364ec7859bbc608fe55" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref></type>
        <definition>TermStateType vt::term::TerminationDetector::hang_</definition>
        <argsstring></argsstring>
        <name>hang_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="815" column="1" bodyfile="src/vt/termination/termination.h" bodystart="815" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a0c55ef5345253002f9de6e5c4337c53a" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1term_1_1_termination_detector_1a69e2615b61e072977463eea5b20b7933" kindref="member">EpochContainerType</ref>&lt; <ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &gt;</type>
        <definition>EpochContainerType&lt;TermStateType&gt; vt::term::TerminationDetector::epoch_state_</definition>
        <argsstring></argsstring>
        <name>epoch_state_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="818" column="1" bodyfile="src/vt/termination/termination.h" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a22c7c6cc9c6cd48b5570dbae226a56f3" prot="private" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> &gt;</type>
        <definition>std::unordered_set&lt;EpochType&gt; vt::term::TerminationDetector::epoch_ready_</definition>
        <argsstring></argsstring>
        <name>epoch_ready_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="820" column="1" bodyfile="src/vt/termination/termination.h" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a95cdb85a87fcf162725bc6515b43a002" prot="private" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> &gt;</type>
        <definition>std::unordered_set&lt;EpochType&gt; vt::term::TerminationDetector::epoch_wait_status_</definition>
        <argsstring></argsstring>
        <name>epoch_wait_status_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="822" column="1" bodyfile="src/vt/termination/termination.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a68afeac40869ccc50882f717106b382f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::term::TerminationDetector::has_printed_epoch_graph</definition>
        <argsstring></argsstring>
        <name>has_printed_epoch_graph</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="824" column="1" bodyfile="src/vt/termination/termination.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1aac5ac209e1e3f7bf088906b3782e1801" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::term::TerminationDetector::this_node_</definition>
        <argsstring></argsstring>
        <name>this_node_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="825" column="1" bodyfile="src/vt/termination/termination.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1_termination_detector_1a3a50dbf1d18f2157de76b2c5ee9a44d0" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1term_1_1_termination_detector_1ae12368cf9d7866c96deb32b0b61b977f" kindref="member">EpochStackType</ref></type>
        <definition>EpochStackType vt::term::TerminationDetector::epoch_stack_</definition>
        <argsstring></argsstring>
        <name>epoch_stack_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="826" column="1" bodyfile="src/vt/termination/termination.h" bodystart="826" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a9e6bc0a436aa1bb5f6b344ac795b3303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::TerminationDetector::TerminationDetector</definition>
        <argsstring>()</argsstring>
        <name>TerminationDetector</name>
        <briefdescription>
<para>Construct a termination detector. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="122" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="64" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a1a1a29c2374a70427d8173ec31d55421" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual vt::term::TerminationDetector::~TerminationDetector</definition>
        <argsstring>()</argsstring>
        <name>~TerminationDetector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="124" column="1" bodyfile="src/vt/termination/termination.h" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a6cffc7850bc178af04fb542d50f82086" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::term::TerminationDetector::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="138" column="1" bodyfile="src/vt/termination/termination.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a3c31a1c36b5d55e9d28b5b26b2436573" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::produce</definition>
        <argsstring>(EpochType epoch=any_epoch_sentinel, TermCounterType num_units=1, NodeType node=uninitialized_destination)</argsstring>
        <name>produce</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
          <defval>any_epoch_sentinel</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref></type>
          <declname>num_units</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
<para>Produce on an epoch<mdash/>increase the produce counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to produce; if empty, produce on global epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_units</parametername>
</parameternamelist>
<parameterdescription>
<para>number of units to produce </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node where this unit will be consumed (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="154" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a950215186c7303d99316ece6ea31c4cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::consume</definition>
        <argsstring>(EpochType epoch=any_epoch_sentinel, TermCounterType num_units=1, NodeType node=uninitialized_destination)</argsstring>
        <name>consume</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
          <defval>any_epoch_sentinel</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref></type>
          <declname>num_units</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
<para>Consume on an epoch<mdash/>increase the consume counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to consume; if empty, consume on global epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_units</parametername>
</parameternamelist>
<parameterdescription>
<para>number of units to consume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node where this unit was produced (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="166" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad863add6716d920778eef1298016a0ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::hangDetectSend</definition>
        <argsstring>()</argsstring>
        <name>hangDetectSend</name>
        <briefdescription>
<para>Special produce for hang detection. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="174" column="1" bodyfile="src/vt/termination/termination.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad9b79c662481216d0bb70f81b12dfbf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::hangDetectRecv</definition>
        <argsstring>()</argsstring>
        <name>hangDetectRecv</name>
        <briefdescription>
<para>Special consume for hang detection. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="179" column="1" bodyfile="src/vt/termination/termination.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad95b226357b77e29c415627bbca4e798" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::TerminationDetector::isRooted</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>isRooted</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Check if an epoch is rooted. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it is rooted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="193" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a3ab6ba4618093384b6ddd6c0607df543" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::TerminationDetector::isDS</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>isDS</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Check if the algorithm behind an epoch is Dijkstra-Scholten parental responsibility. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether is it DS </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="203" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="75" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a546a48949da827a98dea2cfaffeddb91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_termination_detector_1aa96c37b5c120063060c6418c48e64bd1" kindref="member">TermStateDSType</ref> *</type>
        <definition>TerminationDetector::TermStateDSType * vt::term::TerminationDetector::getDSTerm</definition>
        <argsstring>(EpochType epoch, bool is_root=false)</argsstring>
        <name>getDSTerm</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_root</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get or create the DS terminator for an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_root</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this is the root (relevant when creating)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the DS terminator manager </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="213" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="148" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a756e767b99e869966247c9198403afb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::resetGlobalTerm</definition>
        <argsstring>()</argsstring>
        <name>resetGlobalTerm</name>
        <briefdescription>
<para>Reset global termination to start producing/consuming again. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="218" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a3b1e4a0d87c5af08fc36925ec74504fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::freeEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>freeEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Free an epoch after termination. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="225" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="236" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a232f305124ecd8f4f62e9c8224a74f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpochRooted</definition>
        <argsstring>(UseDS use_ds=UseDS{true}, ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>makeEpochRooted</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref></type>
          <declname>use_ds</declname>
          <defval><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref>{true}</defval>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Create a new rooted epoch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use the Dijkstra-Scholten algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="240" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1006" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aeba62165ec8dfbc445e3631ff295f159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpochCollective</definition>
        <argsstring>(ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>makeEpochCollective</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Create a new collective epoch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="252" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1051" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aa9298125af35069455ca2edfdd2a2426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpochRooted</definition>
        <argsstring>(std::string const &amp;label, UseDS use_ds=UseDS{true}, ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>makeEpochRooted</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref></type>
          <declname>use_ds</declname>
          <defval><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref>{true}</defval>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Create a new rooted epoch with a label. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use the Dijkstra-Scholten algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="265" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1012" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a9da0ae37a148a0f6db83488cd44c19cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpochCollective</definition>
        <argsstring>(std::string const &amp;label, ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>makeEpochCollective</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Create a collective epoch with a label. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="279" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1062" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a48d9022d6bb4ff56e42ebefebe1a0586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpoch</definition>
        <argsstring>(std::string const &amp;label, bool is_coll, UseDS use_ds=UseDS{false}, ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>makeEpoch</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_coll</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref></type>
          <declname>use_ds</declname>
          <defval><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref>{false}</defval>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Create a new rooted or collective epoch with a label. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_coll</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to create a collective or rooted epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use the Dijkstra-Scholten algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="294" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1108" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1af3ca1bd9f84308f910e6c1de4b8735e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::initializeCollectiveEpoch</definition>
        <argsstring>(EpochType const epoch, std::string const &amp;label, ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>initializeCollectiveEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Setup a collective epoch with the epoch already generated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the collective epoch already generated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="308" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1088" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a3148e617fe8edb264c6c709a5abf6199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::initializeRootedEpoch</definition>
        <argsstring>(EpochType const epoch, std::string const &amp;label, UseDS use_ds=UseDS{false}, ParentEpochCapture parent=ParentEpochCapture{})</argsstring>
        <name>initializeRootedEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref></type>
          <declname>use_ds</declname>
          <defval><ref refid="structvt_1_1term_1_1_use_d_s" kindref="compound">UseDS</ref>{false}</defval>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
          <defval><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref>{}</defval>
        </param>
        <briefdescription>
<para>Setup a new rooted epoch with the epoch already generated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the collective epoch already generated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_ds</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use the Dijkstra-Scholten algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="322" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1040" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad54d75c50bd3f34f30247817737bc303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::finishedEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>finishedEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Tell the termination detector that all initial work has been enqueued for a given epoch on this node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the finished epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="335" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="918" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1af9f932ff57f12da573a75adbbaee73df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::activateEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>activateEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Activate an epoch; start detecting on it. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to activate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="342" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1117" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a349739e9ee6dea98a863b4afb1e49c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::finishNoActivateEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>finishNoActivateEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Finish an epoch without activating it (starting the work of detecting its termination) </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch that is finished </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="350" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="910" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1af4e6b3ce62dd3b1f0f0f9f5829e94720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpochRootedWave</definition>
        <argsstring>(ParentEpochCapture parent, std::string const &amp;label=&quot;&quot;)</argsstring>
        <name>makeEpochRootedWave</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new rooted epoch that uses the 4-counter wave algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="365" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="935" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ab415e4ad8be8c61f05005fbf60167fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::makeEpochRootedDS</definition>
        <argsstring>(ParentEpochCapture parent, std::string const &amp;label=&quot;&quot;)</argsstring>
        <name>makeEpochRootedDS</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a new rooted epoch that uses the DS algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="377" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="974" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a46df4c42ff71d25c5a19cf6a21b9263f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::initializeRootedWaveEpoch</definition>
        <argsstring>(EpochType const epoch, ParentEpochCapture parent, std::string const &amp;label=&quot;&quot;)</argsstring>
        <name>initializeRootedWaveEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Setup a new rooted epoch that uses the 4-counter wave algorithm with an epoch already generated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the wave epoch already generated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="389" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="945" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1abde094c3bca75435fb56ef3eb5e6512c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::initializeRootedDSEpoch</definition>
        <argsstring>(EpochType const epoch, ParentEpochCapture parent, std::string const &amp;label=&quot;&quot;)</argsstring>
        <name>initializeRootedDSEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_parent_epoch_capture" kindref="compound">ParentEpochCapture</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Setup a new rooted epoch that uses the DS algorithm with the epoch already generated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the DS epoch already generated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>parent epoch that waits for this new epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch label for debugging purposes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="402" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="983" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a782a54afd99943982ce455416828ea66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::startEpochGraphBuild</definition>
        <argsstring>()</argsstring>
        <name>startEpochGraphBuild</name>
        <briefdescription>
<para>Build the epoch graph. Typically called to output to the user due to a failure. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="489" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="534" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1acb639c048af01c8d67c82db0227888a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::setLocalTerminated</definition>
        <argsstring>(bool const terminated, bool const no_propagate=true)</argsstring>
        <name>setLocalTerminated</name>
        <param>
          <type>bool const</type>
          <declname>terminated</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>no_propagate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set whether the scheduler has locally terminated. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">terminated</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it has terminated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">no_propagate</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to should propagate state remotely </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="522" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a4a54157fff0152b531b26c4a18393049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::maybePropagate</definition>
        <argsstring>()</argsstring>
        <name>maybePropagate</name>
        <briefdescription>
<para>Progress function to move state forward. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="527" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="173" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aa5802cb6f199f3359b1a85058102220c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref></type>
        <definition>TermCounterType vt::term::TerminationDetector::getNumUnits</definition>
        <argsstring>() const</argsstring>
        <name>getNumUnits</name>
        <briefdescription>
<para>Get number of units produced on global epoch. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of produced units </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="534" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1af0b08c4a5dd17d893e677ad280bef84a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::term::TerminationDetector::getNumTerminatedCollectiveEpochs</definition>
        <argsstring>() const</argsstring>
        <name>getNumTerminatedCollectiveEpochs</name>
        <briefdescription>
<para>Get number of collective epochs that have terminated. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of epochs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="541" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1179" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a1d3cebd2600b5a3900dd9954de55cf35" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacevt_1_1term_1ad8ec9b371608fc88e7fdeef219785b27" kindref="member">TermStatusEnum</ref></type>
        <definition>TermStatusEnum vt::term::TerminationDetector::testEpochTerminated</definition>
        <argsstring>(EpochType epoch) override</argsstring>
        <name>testEpochTerminated</name>
        <reimplements refid="structvt_1_1term_1_1_term_terminated_1a9d23b646c13a95738f72f7abfc8774c7">testEpochTerminated</reimplements>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Test if an epoch has terminated or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status enum indicating the known state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="551" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="752" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a2c85d1d5316235e068433f4a3984a67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::TerminationDetector::isEpochTerminated</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>isEpochTerminated</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Check if an epoch has terminated. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Might return (conservatively) false for some time if the epoch is non-local, but will eventually return true</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it is known to be terminated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="563" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="748" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1adb20ee8033c61f520d50592dd33b3080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structvt_1_1term_1_1_termination_detector_1af67f0ab522e54eb06d8ac541526155e3" kindref="member">EpochGraph</ref> &gt;</type>
        <definition>std::shared_ptr&lt; TerminationDetector::EpochGraph &gt; vt::term::TerminationDetector::makeGraph</definition>
        <argsstring>()</argsstring>
        <name>makeGraph</name>
        <briefdescription>
<para>Make the local epoch graph. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>shared pointer to epoch graph </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="571" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="262" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a6624f4c21fd145f5f8d4dc3cb792e5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::addLocalDependency</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>addLocalDependency</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Add a local work dependency on an epoch to stop propagation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="653" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="892" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad00ee5e13c7832e1803238c746ee0fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::releaseLocalDependency</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>releaseLocalDependency</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Release a local work dependency on an epoch to resume propagation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="660" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="901" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ac549ac7dfc98b676fd7bf0abe9858b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::addDependency</definition>
        <argsstring>(EpochType predecessor, EpochType successor)</argsstring>
        <name>addDependency</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>predecessor</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>successor</declname>
        </param>
        <briefdescription>
<para>Make a dependency between two epochs. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predecessor</parametername>
</parameternamelist>
<parameterdescription>
<para>the predecessor epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">successor</parametername>
</parameternamelist>
<parameterdescription>
<para>the successor epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="668" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="835" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a52ccd19418bca09be5cc3f5bf47efba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::disableTD</definition>
        <argsstring>(EpochType in_epoch=any_epoch_sentinel)</argsstring>
        <name>disableTD</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>in_epoch</declname>
          <defval>any_epoch_sentinel</defval>
        </param>
        <briefdescription>
<para>Disable termination detection on an epoch. Local counting is still enabled, but any non-local progress is halted until it is enabled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Does not work with DS epochs. It must be a wave based epoch.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="678" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1184" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a9a278ea17d7a61cad48ff7978cbe8249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::enableTD</definition>
        <argsstring>(EpochType in_epoch=any_epoch_sentinel)</argsstring>
        <name>enableTD</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>in_epoch</declname>
          <defval>any_epoch_sentinel</defval>
        </param>
        <briefdescription>
<para>Enable termination detection on an epoch. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Does not work with DS epochs. It must be a wave based epoch.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="687" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1191" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a185004af9f842c58258128456ef27160" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_termination_detector_1a69e2615b61e072977463eea5b20b7933" kindref="member">EpochContainerType</ref>&lt; <ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &gt; const  &amp;</type>
        <definition>EpochContainerType&lt;TermStateType&gt; const&amp; vt::term::TerminationDetector::getEpochState</definition>
        <argsstring>()</argsstring>
        <name>getEpochState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="691" column="1" bodyfile="src/vt/termination/termination.h" bodystart="691" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a8eb6730fc343957d0a788919b641762e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> &gt; const  &amp;</type>
        <definition>std::unordered_set&lt;EpochType&gt; const&amp; vt::term::TerminationDetector::getEpochReadySet</definition>
        <argsstring>()</argsstring>
        <name>getEpochReadySet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="692" column="1" bodyfile="src/vt/termination/termination.h" bodystart="692" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aed77c0e79a681705e941314e7415df35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unordered_set&lt; <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> &gt; const  &amp;</type>
        <definition>std::unordered_set&lt;EpochType&gt; const&amp; vt::term::TerminationDetector::getEpochWaitSet</definition>
        <argsstring>()</argsstring>
        <name>getEpochWaitSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="693" column="1" bodyfile="src/vt/termination/termination.h" bodystart="693" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a8736b208710ec6f7cfa1dd09a9205cab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::term::TerminationDetector::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="696" column="1" bodyfile="src/vt/termination/termination.h" bodystart="696" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a9d5e018c724d65983ceeff5272b2e154" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::getEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="799" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="138" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a1e93b826e597c203fb220a9dd540bd94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::pushEpoch</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>pushEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="800" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="145" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a81a7f955e09f59a85303bfcb90414882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::term::TerminationDetector::popEpoch</definition>
        <argsstring>(EpochType epoch=no_epoch)</argsstring>
        <name>popEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
          <defval>no_epoch</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="801" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="162" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad00477f6eb98ab78135c6d7298e34e95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::pushEpochFast</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>pushEpochFast</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="803" column="1" bodyfile="src/vt/termination/termination.h" bodystart="803" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a9d9519f83adbcc301db6c3c8af815a9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::popEpochFast</definition>
        <argsstring>()</argsstring>
        <name>popEpochFast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="806" column="1" bodyfile="src/vt/termination/termination.h" bodystart="806" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aa64986f3dd11921064478a7c607a92d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_termination_detector_1ae12368cf9d7866c96deb32b0b61b977f" kindref="member">EpochStackType</ref> &amp;</type>
        <definition>EpochStackType&amp; vt::term::TerminationDetector::getEpochStack</definition>
        <argsstring>()</argsstring>
        <name>getEpochStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="810" column="1" bodyfile="src/vt/termination/termination.h" bodystart="810" bodyend="810"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a7fae7c4264078f157ceb79df1ee5c458" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &amp;</type>
        <definition>TerminationDetector::TermStateType &amp; vt::term::TerminationDetector::findOrCreateState</definition>
        <argsstring>(EpochType const &amp;epoch, bool is_ready)</argsstring>
        <name>findOrCreateState</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_ready</declname>
        </param>
        <briefdescription>
<para>Find or create on demand state for a collective wave-based epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is ready</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>termination state for the epoch </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="419" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="123" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a40a2ebe4e220dace273cc6570dd70b01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::cleanupEpoch</definition>
        <argsstring>(EpochType const &amp;epoch, CallFromEnum from)</argsstring>
        <name>cleanupEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30" kindref="member">CallFromEnum</ref></type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Cleanup an epoch after termination. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the caller </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="427" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="602" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a0a9d042e027cef8a173959d424ca300a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::produceConsumeState</definition>
        <argsstring>(TermStateType &amp;state, TermCounterType const num_units, bool produce)</argsstring>
        <name>produceConsumeState</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref> const</type>
          <declname>num_units</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>produce</declname>
        </param>
        <briefdescription>
<para>Produce/consume on an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_units</parametername>
</parameternamelist>
<parameterdescription>
<para>number of units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">produce</parametername>
</parameternamelist>
<parameterdescription>
<para>whether its a produce or consume </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="436" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="86" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a3e06098a7b54106910ea9000e2571a39" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::produceConsume</definition>
        <argsstring>(EpochType epoch=any_epoch_sentinel, TermCounterType num_units=1, bool produce=true, NodeType node=uninitialized_destination)</argsstring>
        <name>produceConsume</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
          <defval>any_epoch_sentinel</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref></type>
          <declname>num_units</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>produce</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
<para>Produce on an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_units</parametername>
</parameternamelist>
<parameterdescription>
<para>number of units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">produce</parametername>
</parameternamelist>
<parameterdescription>
<para>whether its a produce or consume </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node producing to or consuming from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="448" column="1" bodyfile="src/vt/termination/termination.impl.h" bodystart="105" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a233dc0ec4468f6e8006c959d613c28fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::propagateEpochExternalState</definition>
        <argsstring>(TermStateType &amp;state, TermCounterType const &amp;prod, TermCounterType const &amp;cons)</argsstring>
        <name>propagateEpochExternalState</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref> const &amp;</type>
          <declname>cons</declname>
        </param>
        <briefdescription>
<para>Propagate an epoch with state. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>epoch state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prod</parametername>
</parameternamelist>
<parameterdescription>
<para>num produced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cons</parametername>
</parameternamelist>
<parameterdescription>
<para>num consumed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="460" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="189" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a580b7ba3727a7358125cf217e9dcab19" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::propagateEpochExternal</definition>
        <argsstring>(EpochType const &amp;epoch, TermCounterType const &amp;prod, TermCounterType const &amp;cons)</argsstring>
        <name>propagateEpochExternal</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref> const &amp;</type>
          <declname>prod</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4fd378cdb0c36683afc1b3399d685f7f" kindref="member">TermCounterType</ref> const &amp;</type>
          <declname>cons</declname>
        </param>
        <briefdescription>
<para>Propagate an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prod</parametername>
</parameternamelist>
<parameterdescription>
<para>num produced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cons</parametername>
</parameternamelist>
<parameterdescription>
<para>num consumed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="471" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="209" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a9460b5236e34a5baa344b0ac814ce3c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::countsConstant</definition>
        <argsstring>(TermStateType &amp;state)</argsstring>
        <name>countsConstant</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Check for and perform actions when a epoch&apos;s counts are constant. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch state </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="482" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="464" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a7637035e3f3c0f898d8dc79bbc2d8bf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::updateResolvedEpochs</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>updateResolvedEpochs</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Update resolved epochs. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="497" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="733" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a8a6c9a639b67a774e15c98d4b9d80166" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::inquireTerminated</definition>
        <argsstring>(EpochType const &amp;epoch, NodeType const &amp;from_node)</argsstring>
        <name>inquireTerminated</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>from_node</declname>
        </param>
        <briefdescription>
<para>Inquire if an epoch has terminated. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node inquiring </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="505" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="684" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a4ea359dfd9c7cbd1c8dc96f5dff78ed1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::replyTerminated</definition>
        <argsstring>(EpochType const &amp;epoch, bool const &amp;is_terminated)</argsstring>
        <name>replyTerminated</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_terminated</declname>
        </param>
        <briefdescription>
<para>Reply to a node whether an epoch has terminated. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_terminated</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it has terminated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="513" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="714" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a8f39f31278d42572260d09fb4c72aceb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::TerminationDetector::propagateEpoch</definition>
        <argsstring>(TermStateType &amp;state)</argsstring>
        <name>propagateEpoch</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_action_1ae4c635b69751d887666814700ed64d65" kindref="member">TermStateType</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Propagate a particular epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the state for the epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it made progress </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="603" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="328" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a54a16b81d1c0717a4a7cd1adff5b146e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::epochTerminated</definition>
        <argsstring>(EpochType const &amp;epoch, CallFromEnum from)</argsstring>
        <name>epochTerminated</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30" kindref="member">CallFromEnum</ref></type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Notify that an epoch has terminated. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the caller </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="611" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="645" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aa26ade7d870d21b3ec9f5e97154bb847" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::epochContinue</definition>
        <argsstring>(EpochType const &amp;epoch, TermWaveType const &amp;wave)</argsstring>
        <name>epochContinue</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1term_1a4af17606966b2b5a6cba523bc39095a3" kindref="member">TermWaveType</ref> const &amp;</type>
          <declname>wave</declname>
        </param>
        <briefdescription>
<para>Do another wave for an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wave</parametername>
</parameternamelist>
<parameterdescription>
<para>the wave count so far </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="619" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="801" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a0522eb82931331906a8be4a3571393b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::setupNewEpoch</definition>
        <argsstring>(EpochType const &amp;epoch, std::string const &amp;label)</argsstring>
        <name>setupNewEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Setup state for a new epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>the label for debugging </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="627" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1160" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a93d5fd6eead47198c2ed4daaaf68c7ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::readyNewEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>readyNewEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Ready an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ab8ed0e9dd8e865c318c98013a99cd8a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::makeRootedHan</definition>
        <argsstring>(EpochType const &amp;epoch, bool is_root, std::string const &amp;label=&quot;&quot;)</argsstring>
        <name>makeRootedHan</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_root</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Make an epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_root</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is rooted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>the label for debugging </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="643" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1137" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a34c4a04252832ddca7d6ffba7ffdda28" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::produceOnGlobal</definition>
        <argsstring>(EpochType ep)</argsstring>
        <name>produceOnGlobal</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Produce on the global epoch to inhibit global terminations before receipt of a nested epoch&apos;s completion. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="note"><para>Although the creation of a new epoch also produces on the global epoch, it consumes on both the generated epoch and the global one when the epoch is activated (<computeroutput>finishedEpoch</computeroutput> ). This means that the termination of the global epoch along with associated actions can race with notification of termination on the newly created epoch. If the runtime is destroyed as a result of the global epoch terminating the final notification of the newly created epoch can arrive later causing strange behavior. This has been observed in the code with a full reset of epoch allocation when the runtime globally terminates.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>nested epoch (for debugging) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="722" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1070" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aea24708f1cc8a70f7843061871e7a5b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::consumeOnGlobal</definition>
        <argsstring>(EpochType ep)</argsstring>
        <name>consumeOnGlobal</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Consume on the global epoch to inhibit global terminations before receipt of a nested epoch&apos;s completion. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the nested epoch (for debugging) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="730" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="1079" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a34e823e14dcdd47e32c6eff45c3bf2de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1_epoch_dependency" kindref="compound">EpochDependency</ref> *</type>
        <definition>EpochDependency * vt::term::TerminationDetector::getEpochDep</definition>
        <argsstring>(EpochType epoch)</argsstring>
        <name>getEpochDep</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Get an epoch&apos;s dependency information. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the dependency </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="739" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="824" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1aac9b76ef4345ca2c757f829a17bb7bfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::removeEpochStateDependency</definition>
        <argsstring>(EpochType ep)</argsstring>
        <name>removeEpochStateDependency</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Decrement the join counter on an epoch&apos;s dependency. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="746" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="875" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ac0c59133b2db32f599aa4b5f8f451fe0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::addEpochStateDependency</definition>
        <argsstring>(EpochType ep)</argsstring>
        <name>addEpochStateDependency</name>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Increment the join counter on an epoch&apos;s dependency. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="753" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="885" bodyend="890"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1af9fd292c8d1bcc5eba9ee1fb39c29ea2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::hangCheckHandler</definition>
        <argsstring>(HangCheckMsg *msg)</argsstring>
        <name>hangCheckHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_hang_check_msg" kindref="compound">HangCheckMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler for hang checking. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="579" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="545" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1adb3b87cb03a5991e059bb7930ec5d682" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::buildLocalGraphHandler</definition>
        <argsstring>(BuildGraphMsg *msg)</argsstring>
        <name>buildLocalGraphHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_build_graph_msg" kindref="compound">BuildGraphMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler for building the local epoch graph. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="586" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="552" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a5a8084f2dc7df36da7e78d088ae8cae9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::epochGraphBuiltHandler</definition>
        <argsstring>(EpochGraphMsg *msg)</argsstring>
        <name>epochGraphBuiltHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_termination_detector_1aec8abc5a3b161ac7df73ff3ba385dace" kindref="member">EpochGraphMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler for to call when epoch graph is done building. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="593" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="590" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a3290a7d57d60b0877a39379945303675" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::makeRootedHandler</definition>
        <argsstring>(TermMsg *msg)</argsstring>
        <name>makeRootedHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_msg" kindref="compound">TermMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Make a rooted epoch handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="761" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a77d03435714d4abea092f464c42af1f0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::inquireEpochTerminated</definition>
        <argsstring>(TermTerminatedMsg *msg)</argsstring>
        <name>inquireEpochTerminated</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_terminated_msg" kindref="compound">TermTerminatedMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Inquire if an epoch terminated handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="768" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1ad4e25e7f6a8703bdff30bc2f56ab195f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::replyEpochTerminated</definition>
        <argsstring>(TermTerminatedReplyMsg *msg)</argsstring>
        <name>replyEpochTerminated</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_terminated_reply_msg" kindref="compound">TermTerminatedReplyMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Reply if an epoch terminated handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="775" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a75c8f7279bbd48daec2ddc7ee0f0b7b3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::propagateEpochHandler</definition>
        <argsstring>(TermCounterMsg *msg)</argsstring>
        <name>propagateEpochHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_counter_msg" kindref="compound">TermCounterMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Propagate an epoch handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="782" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1af1429c4e6d684bc0487f1b4a6d6bbf43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::epochTerminatedHandler</definition>
        <argsstring>(TermMsg *msg)</argsstring>
        <name>epochTerminatedHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_msg" kindref="compound">TermMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Notify an epoch terminated handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="789" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_termination_detector_1a5791344ef9d163fa9cb17b136ca68549" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::TerminationDetector::epochContinueHandler</definition>
        <argsstring>(TermMsg *msg)</argsstring>
        <name>epochContinueHandler</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_term_msg" kindref="compound">TermMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Continue doing waves for an epoch handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/termination.h" line="796" column="1" bodyfile="src/vt/termination/termination.cc" bodystart="86" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Detect global termination and of subsets of work. </para>    </briefdescription>
    <detaileddescription>
<para>Implements distributed algorithms to termination detection across the entire VT runtime and for subset of work, encapsulated in an epoch. Ships with two algorithms: 4-counter wave-based termination for large collective epochs; and, Dijkstra-Scholten parental responsibility termination for rooted epochs. Epochs may have other epochs nested within them, forming a graph.</para><para>The termination detector detects termination of the transitive closure of a piece of work<mdash/>either starting collectively with all nodes or starting on a particular node (rooted).</para><para>In order to track work on the distributed system, work is &quot;produced&quot; and &quot;consumed&quot;. Produce and consume are separate counters that are tracked on each node for each epoch. When the global produce and consume counts (sum across all nodes) are equal, termination is reached. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4107">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="4108" relation="public-inheritance">
        </childnode>
        <childnode refid="4111" relation="public-inheritance">
        </childnode>
        <childnode refid="4112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4116">
        <label>DijkstraScholtenTerm</label>
        <link refid="structvt_1_1term_1_1ds_1_1_state_d_s"/>
      </node>
      <node id="4113">
        <label>vt::term::TermAction</label>
        <link refid="structvt_1_1term_1_1_term_action"/>
        <childnode refid="4114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4110">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="4105">
        <label>vt::term::TerminationDetector</label>
        <link refid="structvt_1_1term_1_1_termination_detector"/>
        <childnode refid="4106" relation="public-inheritance">
        </childnode>
        <childnode refid="4113" relation="public-inheritance">
        </childnode>
        <childnode refid="4115" relation="public-inheritance">
        </childnode>
        <childnode refid="4116" relation="public-inheritance">
        </childnode>
        <childnode refid="4117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4108">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="4109" relation="public-inheritance">
        </childnode>
        <childnode refid="4110" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4114">
        <label>vt::term::TermTerminated</label>
        <link refid="structvt_1_1term_1_1_term_terminated"/>
      </node>
      <node id="4109">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="4106">
        <label>vt::runtime::component::Component&lt; TerminationDetector &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="4107" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4111">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="4112">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="4115">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
      <node id="4117">
        <label>vt::term::TermInterface</label>
        <link refid="structvt_1_1term_1_1_term_interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4120">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="4121" relation="public-inheritance">
        </childnode>
        <childnode refid="4124" relation="public-inheritance">
        </childnode>
        <childnode refid="4125" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4136">
        <label>T</label>
      </node>
      <node id="4129">
        <label>DijkstraScholtenTerm</label>
        <link refid="structvt_1_1term_1_1ds_1_1_state_d_s"/>
      </node>
      <node id="4126">
        <label>vt::term::TermAction</label>
        <link refid="structvt_1_1term_1_1_term_action"/>
        <childnode refid="4127" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4134">
        <label>vt::epoch::EpochType</label>
        <link refid="structvt_1_1epoch_1_1_epoch_type"/>
        <childnode refid="4135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4123">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="4118">
        <label>vt::term::TerminationDetector</label>
        <link refid="structvt_1_1term_1_1_termination_detector"/>
        <childnode refid="4119" relation="public-inheritance">
        </childnode>
        <childnode refid="4126" relation="public-inheritance">
        </childnode>
        <childnode refid="4128" relation="public-inheritance">
        </childnode>
        <childnode refid="4129" relation="public-inheritance">
        </childnode>
        <childnode refid="4130" relation="public-inheritance">
        </childnode>
        <childnode refid="4131" relation="usage">
          <edgelabel>epoch_stack_</edgelabel>
        </childnode>
        <childnode refid="4132" relation="usage">
          <edgelabel>hang_</edgelabel>
          <edgelabel>any_epoch_state_</edgelabel>
        </childnode>
      </node>
      <node id="4121">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="4122" relation="public-inheritance">
        </childnode>
        <childnode refid="4123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4127">
        <label>vt::term::TermTerminated</label>
        <link refid="structvt_1_1term_1_1_term_terminated"/>
      </node>
      <node id="4133">
        <label>vt::term::EpochDependency</label>
        <link refid="structvt_1_1term_1_1_epoch_dependency"/>
        <childnode refid="4134" relation="usage">
          <edgelabel>epoch_</edgelabel>
        </childnode>
      </node>
      <node id="4137">
        <label>vt::term::EpochLabel</label>
        <link refid="structvt_1_1term_1_1_epoch_label"/>
      </node>
      <node id="4122">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="4119">
        <label>vt::runtime::component::Component&lt; TerminationDetector &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="4120" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4132">
        <label>vt::term::TermState</label>
        <link refid="structvt_1_1term_1_1_term_state"/>
        <childnode refid="4133" relation="public-inheritance">
        </childnode>
        <childnode refid="4137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4124">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="4125">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="4128">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
      <node id="4130">
        <label>vt::term::TermInterface</label>
        <link refid="structvt_1_1term_1_1_term_interface"/>
      </node>
      <node id="4135">
        <label>Strong&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</label>
        <link refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong"/>
        <childnode refid="4136" relation="usage">
          <edgelabel>v_</edgelabel>
        </childnode>
      </node>
      <node id="4131">
        <label>vt::term::EpochStack</label>
        <link refid="structvt_1_1term_1_1_epoch_stack"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/termination/termination.h" line="109" column="1" bodyfile="src/vt/termination/termination.h" bodystart="106" bodyend="827"/>
    <listofallmembers>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1a60aafca7a5eef1368e55c02508a0f3bf" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>acknowledge</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1aec4a5ca3c0b2d9ae23defb65d27d2984" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>ActionContType</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a76d94f79a48ba8367b68f9188784da88" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>ActionVecType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af9f932ff57f12da573a75adbbaee73df" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>activateEpoch</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a1227042cb4eb38937fb8ed34bcbdf998" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addAction</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a15b79357805676e1ff2f880b02fd4061" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addAction</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a2429a48171da578d25d7672486a24b51" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addActionEpoch</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a3ccd1689f56ab62821cfa6b1e65fc60b" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addActionUnique</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a9e9e174482720b4886ea4e8c38ead0d7" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addDefaultAction</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ac549ac7dfc98b676fd7bf0abe9858b39" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addDependency</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ac0c59133b2db32f599aa4b5f8f451fe0" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addEpochStateDependency</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a6624f4c21fd145f5f8d4dc3cb792e5da" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>addLocalDependency</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a873f01594c4c30233ea9a409b2067150" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>afterAddEpochAction</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a49337963d174e5be73fcf467304428a6" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>any_epoch_state_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1adb3b87cb03a5991e059bb7930ec5d682" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>buildLocalGraphHandler</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1aa4a32326730b20530526e1db6512c017" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>CallableActionType</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a802aaa899ce87dc9f8a53d43b202044c" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>CallableContType</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a22cab5da9e6f6736aef4e20ad1d5356b" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>CallableVecType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>CallFromEnum</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a40a2ebe4e220dace273cc6570dd70b01" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>cleanupEpoch</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>component_id_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a950215186c7303d99316ece6ea31c4cd" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>consume</name></member>
      <member refid="structvt_1_1term_1_1_term_interface_1a6e117a0857540c82133b7a10bfa5d39e" prot="public" virt="non-virtual" ambiguityscope="vt::term::TermInterface::"><scope>vt::term::TerminationDetector</scope><name>consume</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aea24708f1cc8a70f7843061871e7a5b3" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>consumeOnGlobal</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9460b5236e34a5baa344b0ac814ce3c9" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>countsConstant</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a52ccd19418bca09be5cc3f5bf47efba5" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>disableTD</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1a55a5290621f7de06a421793daba374e8" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>disengage</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9c0b991de134b4bc5bebf051bd067b9f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>ds::StateDS</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>dumpState</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9a278ea17d7a61cad48ff7978cbe8249" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>enableTD</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1aba302de614dd639f5d93f4f5b6dd6108" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Endpoint</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1ac552185f8a4f39d516a7caecd5d89d51" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epoch_actions_</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a43bab937874af46a501ccf865336fcb9" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epoch_callable_actions_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a22c7c6cc9c6cd48b5570dbae226a56f3" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epoch_ready_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3a50dbf1d18f2157de76b2c5ee9a44d0" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epoch_stack_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a0c55ef5345253002f9de6e5c4337c53a" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epoch_state_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a95cdb85a87fcf162725bc6515b43a002" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epoch_wait_status_</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1acefe3cb1e2a2bcf0d530082f53a2bada" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochActionContType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a69e2615b61e072977463eea5b20b7933" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochContainerType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aa26ade7d870d21b3ec9f5e97154bb847" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epochContinue</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a5791344ef9d163fa9cb17b136ca68549" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epochContinueHandler</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aee175d34803c93c65e4323ab28f04088" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochDependency</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af67f0ab522e54eb06d8ac541526155e3" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochGraph</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a5a8084f2dc7df36da7e78d088ae8cae9" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epochGraphBuiltHandler</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aec8abc5a3b161ac7df73ff3ba385dace" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochGraphMsg</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ae12368cf9d7866c96deb32b0b61b977f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochStackType</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1afcbc07a9b40ff2b6d53e9522877a745d" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>EpochStateType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a54a16b81d1c0717a4a7cd1adff5b146e" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epochTerminated</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af1429c4e6d684bc0487f1b4a6d6bbf43" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>epochTerminatedHandler</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>fatalError</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>finalize</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a7fae7c4264078f157ceb79df1ee5c458" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>findOrCreateState</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad54d75c50bd3f34f30247817737bc303" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>finishedEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a349739e9ee6dea98a863b4afb1e49c10" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>finishNoActivateEpoch</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad5546485f90dd449a203f174b1374a01" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a8200f03bf19b18b2323d1fcb99d5335f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3b1e4a0d87c5af08fc36925ec74504fd" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>freeEpoch</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a57b3edade6230de16232213b7c4380f5" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a39e27b1538bf00674a5a653dfd7a0e83" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getChildren</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a39d9b950c0a4820a424dc2d4dad4d38a" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getCurrentEpoch</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a546a48949da827a98dea2cfaffeddb91" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getDSTerm</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1ac016de8bc9946fdf5386ff17b0ee3ab6" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getDSTermMap</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9d5e018c724d65983ceeff5272b2e154" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a34e823e14dcdd47e32c6eff45c3bf2de" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getEpochDep</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a8eb6730fc343957d0a788919b641762e" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getEpochReadySet</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aa64986f3dd11921064478a7c607a92d6" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getEpochStack</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a185004af9f842c58258128456ef27160" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getEpochState</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aed77c0e79a681705e941314e7415df35" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getEpochWaitSet</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad68dc6aac90193cc15955d7bd1a5b1fc" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getNumChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5375e6fbda5c36891b21cc17acc204dd" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a26e27c8c2da5db17c5cc26f15c2ebfb8" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af0b08c4a5dd17d893e677ad280bef84a" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getNumTerminatedCollectiveEpochs</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aa5802cb6f199f3359b1a85058102220c" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getNumUnits</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ab509dada696b718152e8ac04edd551af" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>getParent</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a2afe34a3835ba57d79d0d1754bbb321e" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>global_term_actions_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a5f873fb4a66c8364ec7859bbc608fe55" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>hang_</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af9fd292c8d1bcc5eba9ee1fb39c29ea2" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>hangCheckHandler</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad9b79c662481216d0bb70f81b12dfbf8" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>hangDetectRecv</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad863add6716d920778eef1298016a0ea" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>hangDetectSend</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a68afeac40869ccc50882f717106b382f" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>has_printed_epoch_graph</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>initialize</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af3ca1bd9f84308f910e6c1de4b8735e6" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>initializeCollectiveEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1abde094c3bca75435fb56ef3eb5e6512c" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>initializeRootedDSEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3148e617fe8edb264c6c709a5abf6199" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>initializeRootedEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a46df4c42ff71d25c5a19cf6a21b9263f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>initializeRootedWaveEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a77d03435714d4abea092f464c42af1f0" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>inquireEpochTerminated</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a8a6c9a639b67a774e15c98d4b9d80166" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>inquireTerminated</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3ab6ba4618093384b6ddd6c0607df543" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>isDS</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a2c85d1d5316235e068433f4a3984a67e" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>isEpochTerminated</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a88b2add909b0035f4844317481ed559b" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>isRoot</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad95b226357b77e29c415627bbca4e798" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>isRooted</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a48d9022d6bb4ff56e42ebefebe1a0586" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aeba62165ec8dfbc445e3631ff295f159" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpochCollective</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9da0ae37a148a0f6db83488cd44c19cb" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpochCollective</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a232f305124ecd8f4f62e9c8224a74f49" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpochRooted</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aa9298125af35069455ca2edfdd2a2426" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpochRooted</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ab415e4ad8be8c61f05005fbf60167fdf" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpochRootedDS</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1af4e6b3ce62dd3b1f0f0f9f5829e94720" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeEpochRootedWave</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1adb20ee8033c61f520d50592dd33b3080" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeGraph</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ab8ed0e9dd8e865c318c98013a99cd8a1" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeRootedHan</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3290a7d57d60b0877a39379945303675" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>makeRootedHandler</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a4a54157fff0152b531b26c4a18393049" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>maybePropagate</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a6cffc7850bc178af04fb542d50f82086" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>name</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a86dd4c58e43f7dbf6bd67f7a8e6df088" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>needsCurrentTime</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>NodeListType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30a73c8bf8079c6c90553937f74f98c99fc" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>NonRoot</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a56532f6b47b9c71864980b73deee2d5a" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>numLevels</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>NumLevelsType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>OperationType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>pollable</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a81a7f955e09f59a85303bfcb90414882" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>popEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9d9519f83adbcc301db6c3c8af815a9b" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>popEpochFast</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3c31a1c36b5d55e9d28b5b26b2436573" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>produce</name></member>
      <member refid="structvt_1_1term_1_1_term_interface_1a38661883a7d3a721e50c6ab2d9e10edb" prot="public" virt="non-virtual" ambiguityscope="vt::term::TermInterface::"><scope>vt::term::TerminationDetector</scope><name>produce</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a3e06098a7b54106910ea9000e2571a39" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>produceConsume</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a0a9d042e027cef8a173959d424ca300a" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>produceConsumeState</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a7022e4c4db4cffc376f8c228b32deee8" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>produceOn</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a34c4a04252832ddca7d6ffba7ffdda28" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>produceOnGlobal</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1d9147ecabbb0ebc43be3517d9e500c4" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a75f1e623643f2273835fdf047d3d0cd3" prot="public" virt="pure-virtual" ambiguityscope="vt::runtime::component::BaseComponent::"><scope>vt::term::TerminationDetector</scope><name>progress</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a8f39f31278d42572260d09fb4c72aceb" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>propagateEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a580b7ba3727a7358125cf217e9dcab19" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>propagateEpochExternal</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a233dc0ec4468f6e8006c959d613c28fd" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>propagateEpochExternalState</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a75c8f7279bbd48daec2ddc7ee0f0b7b3" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>propagateEpochHandler</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a1e93b826e597c203fb220a9dd540bd94" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>pushEpoch</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad00477f6eb98ab78135c6d7298e34e95" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>pushEpochFast</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a12fe44411dad9ec9564adb12ed82a35f" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>queueActions</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a93d5fd6eead47198c2ed4daaaf68c7ed" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>readyNewEpoch</name></member>
      <member refid="structvt_1_1term_1_1_term_interface_1afffcd1367305830597216a7b48886cb1" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>recv</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad00ee5e13c7832e1803238c746ee0fd4" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>releaseLocalDependency</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aac9b76ef4345ca2c757f829a17bb7bfb" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>removeEpochStateDependency</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ad4e25e7f6a8703bdff30bc2f56ab195f" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>replyEpochTerminated</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a4ea359dfd9c7cbd1c8dc96f5dff78ed1" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>replyTerminated</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1acdf0151492a1e35c6565c65b138e8ac9" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>requestAck</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a756e767b99e869966247c9198403afb6" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>resetGlobalTerm</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a4f3ede9a87f39d86e85f92b36a6c6a30a4beac8e3ddc4064785a61aa7949e3bda" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Root</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1a26ae9b485dbb46e46b48e73a321cfd8b" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>rootTerminated</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a13f4ee69a6e01f65de03320904737c64" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>runActions</name></member>
      <member refid="structvt_1_1term_1_1_term_interface_1a21ef75badf08fea19807204e502ec4fe" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>send</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a8736b208710ec6f7cfa1dd09a9205cab" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9586588232a204f1a8755bc67b65b307" prot="public" virt="non-virtual" ambiguityscope="Component&lt; TerminationDetector &gt;::"><scope>vt::term::TerminationDetector</scope><name>serialize</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1acb639c048af01c8d67c82db0227888a4" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>setLocalTerminated</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a0522eb82931331906a8be4a3571393b5" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>setupNewEpoch</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1aa3120d3bdbb2a308dd6831aa52d0ebb0" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>setupTree</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a782a54afd99943982ce455416828ea66" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>startEpochGraphBuild</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>startup</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1a8b90d70734aebbe6cbea49fa8fc713f2" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>StateDS</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1aa84d97ee4f2f52142bddb1ec2238a722" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>StateDS</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1a83663b5cf3c5cc43eaa8bb0bd5edee31" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>StateDS</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>staticInit</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1ac8df9c8a604ee2073ce195a994aaf252" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>SuccessorBagType</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1a97a12b9645ebe99171d7680baab34b5d" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>term_</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1ac0b0f4271452cfbea674c6a7c4f50a4b" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>TermAction</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a9e6bc0a436aa1bb5f6b344ac795b3303" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>TerminationDetector</name></member>
      <member refid="structvt_1_1term_1_1ds_1_1_state_d_s_1af98cfe31c25f710273ee103026d538e4" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>TerminatorType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a628421bb882cfbd05876660b5b7dc150" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>TermState</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aa96c37b5c120063060c6418c48e64bd1" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>TermStateDSType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a0a47413bcb7bf5e10ecb31e7871a9268" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>TermStateType</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a1d3cebd2600b5a3900dd9954de55cf35" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>testEpochTerminated</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1aac5ac209e1e3f7bf088906b3782e1801" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>this_node_</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ae9570e9a8f303295744e99b527603a51" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad759f716890ce5344a6c6053fcdc7055" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a949f8b592559125bf225bd3828bd6b88" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>Tree</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1a06484cf174bebec361ce93af0f0cdec3" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>triggerAllEpochActions</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a7637035e3f3c0f898d8dc79bbc2d8bf4" prot="private" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>updateResolvedEpochs</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::term::TerminationDetector</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_name_1a3b826c5eee9d015afd67d9b8353aac30" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~ComponentName</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1af8a579aa590d81a18cd9e70854ed7f2f" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~Diagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a6c4025ca0a513de3a011ce214dc5417d" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~Progressable</name></member>
      <member refid="structvt_1_1term_1_1_term_action_1aeada4a2bd60a9b44be986b603ddac4a5" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~TermAction</name></member>
      <member refid="structvt_1_1term_1_1_termination_detector_1a1a1a29c2374a70427d8173ec31d55421" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~TerminationDetector</name></member>
      <member refid="structvt_1_1term_1_1_term_terminated_1a8ad1615d63d994fe339aaf47aa7164c1" prot="public" virt="virtual"><scope>vt::term::TerminationDetector</scope><name>~TermTerminated</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
