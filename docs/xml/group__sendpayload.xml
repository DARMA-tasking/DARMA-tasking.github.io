<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__sendpayload" kind="group">
    <compoundname>sendpayload</compoundname>
    <title>Send Data Message with data payload</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__sendpayload_1ga0b1f1f3e364e7b1358a36a386b2e6537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType const &amp;dest, HandlerType const &amp;han, MessageT *const msg, UserSendFnType send_payload_fn)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>HandlerType const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>UserSendFnType</type>
          <declname>send_payload_fn</declname>
        </param>
        <briefdescription>
<para>Send a message with a byte payload for pre-registered manual handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to send to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_payload_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>send function with payload <computeroutput>UserSendFnType</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="947" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="372" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga887dfedb337701fc731c67ba19cf86c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType const &amp;dest, MessageT *const msg, UserSendFnType send_payload_fn)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>UserSendFnType</type>
          <declname>send_payload_fn</declname>
        </param>
        <briefdescription>
<para>Send a message with a byte payload for typesafe auto handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_payload_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>send function with payload <computeroutput>UserSendFnType</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="962" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="393" bodyend="398"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Send message that includes a payload of data. </para>    </briefdescription>
    <detaileddescription>
<para>Send message that includes a payload that can be arbitrary data that is coordinated by the system</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="namespacevt_1_1rdma_1ae0a0330c647ec5ac5d508750f4cd4a06" kindref="member">PutMessage</ref><sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1_1rdma_1ae0a0330c647ec5ac5d508750f4cd4a06" kindref="member">PutMessage</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">vt::TagType</ref><sp/>mpi_tag_to_recv<sp/>=<sp/>vt::no_tag;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>myHandler(<ref refid="namespacevt_1_1rdma_1ae0a0330c647ec5ac5d508750f4cd4a06" kindref="member">PutMessage</ref>*<sp/>msg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref><sp/>send_node<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-&gt;<ref refid="structvt_1_1messaging_1_1_active_messenger_1a33b2e3e047d0b1f6eb1398691f075b31" kindref="member">recvDataMsg</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;mpi_tag_to_recv,<sp/>send_node,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[=](<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref><sp/>ptr,<sp/><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref><sp/>deleter){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>with<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deleter();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sendCode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref><sp/>put_node<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>user&apos;s<sp/>payload<sp/>function<sp/>that<sp/>invokes<sp/>the<sp/>system<sp/>send<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>passed<sp/>to<sp/>the<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>send_payload<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" kindref="member">Active::SendFnType</ref><sp/><ref refid="namespacevt_1_1objgroup_1aa2e134493c6b8a23d7d5e86bd9df1a70" kindref="member">send</ref>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="namespacevt_1_1objgroup_1aa2e134493c6b8a23d7d5e86bd9df1a70" kindref="member">send</ref>(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">vt::RDMA_GetType</ref>{ptr,<sp/>num_bytes},<sp/>put_node,<sp/>vt::no_tag);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;mpi_tag_to_recv<sp/>=<sp/>std::get&lt;1&gt;(ret);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-&gt;<ref refid="group__preregister_1ga55c6ea91181ae20c681e73a356750916" kindref="member">sendMsg</ref>&lt;<ref refid="namespacevt_1_1rdma_1ae0a0330c647ec5ac5d508750f4cd4a06" kindref="member">PutMessage</ref>,<sp/>myHandler&gt;(1,<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
