<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</compoundname>
    <basecompoundref refid="structvt_1_1messaging_1_1_active_msg" prot="public" virt="non-virtual">vt::messaging::ActiveMsg&lt; EpochTagEnvelope &gt;</basecompoundref>
    <includes refid="param__msg_8h" local="no">param_msg.h</includes>
    <templateparamlist>
      <param>
        <type>typename Tuple</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a1df6cf9b9df170d14173533ead85534d" prot="public" static="no">
        <type><ref refid="namespacevt_1a3a3ddfef40b4c90915fa43cdd5f129ea" kindref="member">vt::Message</ref></type>
        <definition>using vt::messaging::value &gt;&gt;&lt; Tuple &gt;::MessageParentType =  vt::Message</definition>
        <argsstring></argsstring>
        <name>MessageParentType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="182" column="3" bodyfile="src/vt/messaging/param_msg.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a63c0c672da0bf7b284da9647aad497f8" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1messaging_1_1detail_1_1_get_traits_tuple" kindref="compound">detail::GetTraitsTuple</ref>&lt; Tuple &gt;::<ref refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a63c0c672da0bf7b284da9647aad497f8" kindref="member">TupleType</ref></type>
        <definition>using vt::messaging::value &gt;&gt;&lt; Tuple &gt;::TupleType =  typename detail::GetTraitsTuple&lt;Tuple&gt;::TupleType</definition>
        <argsstring></argsstring>
        <name>TupleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="185" column="3" bodyfile="src/vt/messaging/param_msg.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a0bed46ca731b6d0b81abee26ae3f73a0" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a63c0c672da0bf7b284da9647aad497f8" kindref="member">TupleType</ref> &gt;</type>
        <definition>std::unique_ptr&lt;TupleType&gt; vt::messaging::value &gt;&gt;&lt; Tuple &gt;::params</definition>
        <argsstring></argsstring>
        <name>params</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="205" column="19" bodyfile="src/vt/messaging/param_msg.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1af6a20d70b8e4a2fbc8b0de42612dd8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::value &gt;&gt;&lt; Tuple &gt;::vt_msg_serialize_if_needed_by_parent_or_type1</definition>
        <argsstring>(Tuple)</argsstring>
        <name>vt_msg_serialize_if_needed_by_parent_or_type1</name>
        <param>
          <type>Tuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="183" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1ab09a04140f07bf5b72c6f82cbcae8f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::value &gt;&gt;&lt; Tuple &gt;::ParamMsg</definition>
        <argsstring>()=default</argsstring>
        <name>ParamMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="187" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1ac94c24c043d69101319252235d7eafb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::value &gt;&gt;&lt; Tuple &gt;::setParams</definition>
        <argsstring>()</argsstring>
        <name>setParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="189" column="8" bodyfile="src/vt/messaging/param_msg.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1ac874cc2847c71bffec650269e248b45b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Param</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::value &gt;&gt;&lt; Tuple &gt;::setParams</definition>
        <argsstring>(Param &amp;&amp;p, Params &amp;&amp;... in_params)</argsstring>
        <name>setParams</name>
        <param>
          <type>Param &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>in_params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="194" column="8" bodyfile="src/vt/messaging/param_msg.h" bodystart="194" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1acc98e81baad8e288db26a6bdb944a4e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a63c0c672da0bf7b284da9647aad497f8" kindref="member">TupleType</ref> &amp;</type>
        <definition>TupleType&amp; vt::messaging::value &gt;&gt;&lt; Tuple &gt;::getTuple</definition>
        <argsstring>()</argsstring>
        <name>getTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="207" column="13" bodyfile="src/vt/messaging/param_msg.h" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a29827e82e34aa1666e2bb5a70076c40b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::value &gt;&gt;&lt; Tuple &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/param_msg.h" line="210" column="8" bodyfile="src/vt/messaging/param_msg.h" bodystart="210" bodyend="213"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>vt::messaging::value &gt;&gt;&lt; Tuple &gt;</label>
        <link refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vt::Message</label>
        <link refid="structvt_1_1messaging_1_1_active_msg"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>vt::messaging::value &gt;&gt;&lt; Tuple &gt;</label>
        <link refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>vt::Message</label>
        <link refid="structvt_1_1messaging_1_1_active_msg"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/messaging/param_msg.h" line="178" column="1" bodyfile="src/vt/messaging/param_msg.h" bodystart="181" bodyend="214"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_active_msg_1a5fd6a7b78c86b8f1e36198142990a4c4" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>ActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1ae3f8937b2c95f548f1a3c3340b887c09" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>env</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1a6e2b0541c25f7290555bf50d7cc05874" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>EnvelopeType</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1acc98e81baad8e288db26a6bdb944a4e7" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>getTuple</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a1df6cf9b9df170d14173533ead85534d" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>MessageParentType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1a37cd0731f99157266333772f501d390d" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>operator delete</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1ac79d16742251f19ed94f9725ed866f64" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>operator new</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1ac13140f75e5238670c81589a84881ac1" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>operator new</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1a03927a2881ef7e3308765361cb89c606" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>operator new</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1ab09a04140f07bf5b72c6f82cbcae8f9b" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>ParamMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a0bed46ca731b6d0b81abee26ae3f73a0" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>params</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a29827e82e34aa1666e2bb5a70076c40b" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>serialize</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1ac94c24c043d69101319252235d7eafb9" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>setParams</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1ac874cc2847c71bffec650269e248b45b" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>setParams</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1a63c0c672da0bf7b284da9647aad497f8" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>TupleType</name></member>
      <member refid="structvt_1_1messaging_1_1_param_msg_3_01_tuple_00_01std_1_1enable__if__t_3_01not_01is__byte__copae27aaaf2bf1aaed1864cee3aebbc774_1af6a20d70b8e4a2fbc8b0de42612dd8d6" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>vt_msg_serialize_if_needed_by_parent_or_type1</name></member>
      <member refid="structvt_1_1messaging_1_1_active_msg_1a97b214f27e477ea5951a2d697f2256e7" prot="public" virt="non-virtual"><scope>vt::messaging::ParamMsg&lt; Tuple, std::enable_if_t&lt; not is_byte_copyable_t&lt; Tuple &gt;::value &gt;&gt;</scope><name>vt_msg_serialize_mode_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
