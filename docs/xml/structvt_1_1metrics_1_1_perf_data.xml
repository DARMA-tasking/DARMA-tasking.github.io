<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1metrics_1_1_perf_data" kind="struct" language="C++" prot="public">
    <compoundname>vt::metrics::PerfData</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; PerfData &gt;</basecompoundref>
    <includes refid="perf__data_8h" local="no">vt/metrics/perf_data.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1metrics_1_1_perf_data_1a935d0c4d777fdee5aed397eaa62fc919" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::pair&lt; uint64_t, uint64_t &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::pair&lt;uint64_t,uint64_t&gt; &gt; vt::metrics::PerfData::event_map_</definition>
        <argsstring></argsstring>
        <name>event_map_</name>
        <briefdescription>
<para>Map of event names to event type and configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="156" column="22" bodyfile="src/vt/metrics/perf_data.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1metrics_1_1_perf_data_1a29bdd0701ff8a06864ef2a762554748b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; vt::metrics::PerfData::event_names_</definition>
        <argsstring></argsstring>
        <name>event_names_</name>
        <briefdescription>
<para>List of event names being tracked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="161" column="15" bodyfile="src/vt/metrics/perf_data.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1metrics_1_1_perf_data_1aef2376ecc129b5d8c02249327c8f9248" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; vt::metrics::PerfData::event_fds_</definition>
        <argsstring></argsstring>
        <name>event_fds_</name>
        <briefdescription>
<para>List of file descriptors associated with performance counters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="166" column="15" bodyfile="src/vt/metrics/perf_data.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1ac85dd22635b503e3d7ba446541ff0131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::metrics::PerfData::PerfData</definition>
        <argsstring>()</argsstring>
        <name>PerfData</name>
        <briefdescription>
<para>Constructor for <ref refid="structvt_1_1metrics_1_1_perf_data" kindref="compound">PerfData</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes performance counters based on the <computeroutput>VT_EVENTS</computeroutput> environment variable, which is a comma seperated list of events available in the events header (<ref refid="example__events_8h" kindref="compound">example_events.h</ref> by default). For example: <computeroutput>VT_EVENTS=&quot;cache-misses,instructions&quot;</computeroutput>. If <computeroutput>VT_EVENTS</computeroutput> isn&apos;t set, will default to measuring instructions. Ensures only valid events are configured. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="86" column="3" bodyfile="src/vt/metrics/perf_data.cc" bodystart="48" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a8e24902dee849236473c59ac3ba78296" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::metrics::PerfData::~PerfData</definition>
        <argsstring>()</argsstring>
        <name>~PerfData</name>
        <briefdescription>
<para>Destructor for <ref refid="structvt_1_1metrics_1_1_perf_data" kindref="compound">PerfData</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources, closing file descriptors associated with performance counters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="94" column="11" bodyfile="src/vt/metrics/perf_data.cc" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1aa49c7f8b14a01ec2b8785f2847fd5250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::metrics::PerfData::startTaskMeasurement</definition>
        <argsstring>()</argsstring>
        <name>startTaskMeasurement</name>
        <briefdescription>
<para>Start performance measurement for a task. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets and enables the performance counters associated with the tracked events. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="101" column="8" bodyfile="src/vt/metrics/perf_data.cc" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1ad139793f88ea855b955a6da281984445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::metrics::PerfData::stopTaskMeasurement</definition>
        <argsstring>()</argsstring>
        <name>stopTaskMeasurement</name>
        <briefdescription>
<para>Stop performance measurement for a task. </para>
        </briefdescription>
        <detaileddescription>
<para>Disables the performance counters associated with the tracked events. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="108" column="8" bodyfile="src/vt/metrics/perf_data.cc" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a42e4c61d442e27c425a20ac2b2edb367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, uint64_t &gt;</type>
        <definition>std::unordered_map&lt; std::string, uint64_t &gt; vt::metrics::PerfData::getTaskMeasurements</definition>
        <argsstring>()</argsstring>
        <name>getTaskMeasurements</name>
        <briefdescription>
<para>Get the measurements collected during the task execution. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads and retrieves the counter values for all tracked events.</para>
<para><simplesect kind="return"><para>A map of event names to their corresponding measurement values.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>vtAbort</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is a mismatch in data or an error during reading. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="119" column="22" bodyfile="src/vt/metrics/perf_data.cc" bodystart="124" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a76911046a98371fdd153d9f4a4c1dc4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, std::pair&lt; uint64_t, uint64_t &gt; &gt;</type>
        <definition>std::unordered_map&lt; std::string, std::pair&lt; uint64_t, uint64_t &gt; &gt; vt::metrics::PerfData::getEventMap</definition>
        <argsstring>() const</argsstring>
        <name>getEventMap</name>
        <briefdescription>
<para>Retrieve the current event map. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the mapping of event names to their type and configuration values.</para>
<para><simplesect kind="return"><para>A map of event names to pairs of event type and configuration values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="128" column="22" bodyfile="src/vt/metrics/perf_data.cc" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a04c99cc878e634975deffc9a4cef1a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::metrics::PerfData::startup</definition>
        <argsstring>() override</argsstring>
        <name>startup</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2">startup</reimplements>
        <briefdescription>
<para>Component startup method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="133" column="8" bodyfile="src/vt/metrics/perf_data.cc" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a2812909c74a5c410af0bca6227180aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::metrics::PerfData::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the component name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The name of the component as a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="140" column="15" bodyfile="src/vt/metrics/perf_data.cc" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a4ead0387e9151e7bd82dffd39d28435a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::metrics::PerfData::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Serialize the <ref refid="structvt_1_1metrics_1_1_perf_data" kindref="compound">PerfData</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="146" column="8" bodyfile="src/vt/metrics/perf_data.h" bodystart="146" bodyend="150"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a9a0a867740195b1cf5fd16642c4df5ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::metrics::PerfData::cleanupBeforeAbort</definition>
        <argsstring>()</argsstring>
        <name>cleanupBeforeAbort</name>
        <briefdescription>
<para>Cleanup resources before aborting. </para>
        </briefdescription>
        <detaileddescription>
<para>Closes any open file descriptors and clears internal data structures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="173" column="8" bodyfile="src/vt/metrics/perf_data.cc" bodystart="172" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structvt_1_1metrics_1_1_perf_data_1a2f4be8557a029b1aea061ed10915707e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long vt::metrics::PerfData::perfEventOpen</definition>
        <argsstring>(struct perf_event_attr *hw_event, pid_t pid, int cpu, int group_fd, unsigned long flags)</argsstring>
        <name>perfEventOpen</name>
        <param>
          <type>struct perf_event_attr *</type>
          <declname>hw_event</declname>
        </param>
        <param>
          <type>pid_t</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>group_fd</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Open a performance counter event. </para>
        </briefdescription>
        <detaileddescription>
<para>Wrapper around the syscall to open a performance counter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hw_event</parametername>
</parameternamelist>
<parameterdescription>
<para>The performance event attributes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID to measure (-1 for calling process). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPU to measure (-1 for any CPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">group_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>Group file descriptor for event grouping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional flags for the syscall.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The file descriptor for the event, or -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/metrics/perf_data.h" line="188" column="15" bodyfile="src/vt/metrics/perf_data.cc" bodystart="181" bodyend="183"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tracks performance metrics per task. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="structvt_1_1metrics_1_1_perf_data" kindref="compound">PerfData</ref> component is responsible for initializing, tracking, and retrieving performance metrics for specific tasks using Linux performance counters. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="1">
        <label>vt::metrics::PerfData</label>
        <link refid="structvt_1_1metrics_1_1_perf_data"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="7">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="8">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="2">
        <label>vt::runtime::component::Component&lt; PerfData &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="1">
        <label>vt::metrics::PerfData</label>
        <link refid="structvt_1_1metrics_1_1_perf_data"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="7">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="8">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="2">
        <label>vt::runtime::component::Component&lt; PerfData &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/metrics/perf_data.h" line="75" column="1" bodyfile="src/vt/metrics/perf_data.h" bodystart="74" bodyend="189"/>
    <listofallmembers>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a9a0a867740195b1cf5fd16642c4df5ae" prot="private" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>cleanupBeforeAbort</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>component_id_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>dumpState</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1aef2376ecc129b5d8c02249327c8f9248" prot="private" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>event_fds_</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a935d0c4d777fdee5aed397eaa62fc919" prot="private" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>event_map_</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a29bdd0701ff8a06864ef2a762554748b" prot="private" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>event_names_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>fatalError</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a76911046a98371fdd153d9f4a4c1dc4b" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>getEventMap</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a42e4c61d442e27c425a20ac2b2edb367" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>getTaskMeasurements</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>initialize</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a2812909c74a5c410af0bca6227180aa8" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>name</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a86dd4c58e43f7dbf6bd67f7a8e6df088" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>needsCurrentTime</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1ac85dd22635b503e3d7ba446541ff0131" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>PerfData</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a2f4be8557a029b1aea061ed10915707e" prot="private" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>perfEventOpen</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1d9147ecabbb0ebc43be3517d9e500c4" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a75f1e623643f2273835fdf047d3d0cd3" prot="public" virt="pure-virtual" ambiguityscope="vt::runtime::component::BaseComponent::"><scope>vt::metrics::PerfData</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a4ead0387e9151e7bd82dffd39d28435a" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9586588232a204f1a8755bc67b65b307" prot="public" virt="non-virtual" ambiguityscope="Component&lt; PerfData &gt;::"><scope>vt::metrics::PerfData</scope><name>serialize</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1aa49c7f8b14a01ec2b8785f2847fd5250" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>startTaskMeasurement</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a04c99cc878e634975deffc9a4cef1a23" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>staticInit</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1ad139793f88ea855b955a6da281984445" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>stopTaskMeasurement</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab4cb6c67b01b76f91cc806a79169da69" prot="private" virt="non-virtual"><scope>vt::metrics::PerfData</scope><name>values_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_name_1a3b826c5eee9d015afd67d9b8353aac30" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>~ComponentName</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1af8a579aa590d81a18cd9e70854ed7f2f" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>~Diagnostic</name></member>
      <member refid="structvt_1_1metrics_1_1_perf_data_1a8e24902dee849236473c59ac3ba78296" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>~PerfData</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a6c4025ca0a513de3a011ce214dc5417d" prot="public" virt="virtual"><scope>vt::metrics::PerfData</scope><name>~Progressable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
