<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1term_1_1_callable_base" kind="struct" language="C++" prot="public" abstract="yes">
    <compoundname>vt::term::CallableBase</compoundname>
    <derivedcompoundref refid="structvt_1_1term_1_1_callable_holder" prot="public" virt="non-virtual">vt::term::CallableHolder&lt; Callable &gt;</derivedcompoundref>
    <includes refid="term__action_8h" local="no">term_action.h</includes>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_base_1ab92dd683afcc403807330c93a9f5b0b9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::CallableBase::CallableBase</definition>
        <argsstring>()=default</argsstring>
        <name>CallableBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_base_1a640500fd629bfc5187bc9f0a28a27dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::CallableBase::CallableBase</definition>
        <argsstring>(CallableBase const &amp;)=delete</argsstring>
        <name>CallableBase</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_callable_base" kindref="compound">CallableBase</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_base_1aacacdf848cfeaf66aae83124084721c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::CallableBase::CallableBase</definition>
        <argsstring>(CallableBase &amp;&amp;)=default</argsstring>
        <name>CallableBase</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_callable_base" kindref="compound">CallableBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_base_1a436cddd808a4935f2f1c78f85ff1f88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual vt::term::CallableBase::~CallableBase</definition>
        <argsstring>()=default</argsstring>
        <name>~CallableBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_base_1a534f470aaf4dd168faa9adf3c91e6ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void vt::term::CallableBase::invoke</definition>
        <argsstring>()=0</argsstring>
        <name>invoke</name>
        <reimplementedby refid="structvt_1_1term_1_1_callable_holder_1a33bc8b5d543eb4338c257522cc0084f1">invoke</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="66" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="615">
        <label>vt::term::CallableBase</label>
        <link refid="structvt_1_1term_1_1_callable_base"/>
      </node>
      <node id="616">
        <label>vt::term::CallableHolder&lt; Callable &gt;</label>
        <link refid="structvt_1_1term_1_1_callable_holder"/>
        <childnode refid="615" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/vt/termination/term_action.h" line="59" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="59" bodyend="67"/>
    <listofallmembers>
      <member refid="structvt_1_1term_1_1_callable_base_1ab92dd683afcc403807330c93a9f5b0b9" prot="protected" virt="non-virtual"><scope>vt::term::CallableBase</scope><name>CallableBase</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1a640500fd629bfc5187bc9f0a28a27dd1" prot="public" virt="non-virtual"><scope>vt::term::CallableBase</scope><name>CallableBase</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1aacacdf848cfeaf66aae83124084721c7" prot="public" virt="non-virtual"><scope>vt::term::CallableBase</scope><name>CallableBase</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1a534f470aaf4dd168faa9adf3c91e6ca2" prot="public" virt="pure-virtual"><scope>vt::term::CallableBase</scope><name>invoke</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1a436cddd808a4935f2f1c78f85ff1f88b" prot="public" virt="virtual"><scope>vt::term::CallableBase</scope><name>~CallableBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
