<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvt_1_1utils_1_1file__spec_1_1_file_spec" kind="struct" language="C++" prot="public">
    <compoundname>vt::utils::file_spec::FileSpec</compoundname>
    <includes refid="spec_8h" local="no">vt/utils/file_spec/spec.h</includes>
    <innerclass refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1_1_spec_entry" prot="private">vt::utils::file_spec::FileSpec::SpecEntry</innerclass>
    <innerclass refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1_1_spec_msg" prot="private">vt::utils::file_spec::FileSpec::SpecMsg</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac4ad61ed146069ab671ec1bf909ebded" prot="public" static="no">
        <type><ref refid="structvt_1_1objgroup_1_1proxy_1_1_proxy" kindref="compound">vt::objgroup::proxy::Proxy</ref>&lt; <ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec" kindref="compound">FileSpec</ref> &gt;</type>
        <definition>using vt::utils::file_spec::FileSpec::ProxyType =  vt::objgroup::proxy::Proxy&lt;FileSpec&gt;</definition>
        <argsstring></argsstring>
        <name>ProxyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="111" column="3" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::utils::file_spec::FileSpec::SpecIndex =  int64_t</definition>
        <argsstring></argsstring>
        <name>SpecIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="112" column="3" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac8062352203598c411265a478ec1b0c7" prot="public" static="no">
        <type><ref refid="namespacevt_1_1collective_1aa439a90f05078f2bcf918641c951946f" kindref="member">collective::ReduceNoneMsg</ref></type>
        <definition>using vt::utils::file_spec::FileSpec::DoneMsg =  collective::ReduceNoneMsg</definition>
        <argsstring></argsstring>
        <name>DoneMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="113" column="3" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a368a4ab8bf689e0b533abac71ae9393b" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" kindref="member">SpecIndex</ref>, <ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1_1_spec_entry" kindref="compound">SpecEntry</ref> &gt;</type>
        <definition>using vt::utils::file_spec::FileSpec::SpecMapType =  std::unordered_map&lt;SpecIndex,SpecEntry&gt;</definition>
        <argsstring></argsstring>
        <name>SpecMapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="173" column="3" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ad320eea42e6243424117a513217d2706" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac4ad61ed146069ab671ec1bf909ebded" kindref="member">ProxyType</ref></type>
        <definition>ProxyType vt::utils::file_spec::FileSpec::proxy_</definition>
        <argsstring></argsstring>
        <name>proxy_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="284" column="13" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1abfe003275eb54e3406a1334e46c15eea" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a368a4ab8bf689e0b533abac71ae9393b" kindref="member">SpecMapType</ref></type>
        <definition>SpecMapType vt::utils::file_spec::FileSpec::spec_mod_</definition>
        <argsstring></argsstring>
        <name>spec_mod_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="285" column="15" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a4a5c0c4c23187242eedc7d60142adea4" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a368a4ab8bf689e0b533abac71ae9393b" kindref="member">SpecMapType</ref></type>
        <definition>SpecMapType vt::utils::file_spec::FileSpec::spec_exact_</definition>
        <argsstring></argsstring>
        <name>spec_exact_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="286" column="15" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1aa3e8f2e2f3d7cb7b33bdbbab31331cba" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1utils_1_1file__spec_1adc8912eb2949ca15d0f29afc0342f71e" kindref="member">FileSpecType</ref></type>
        <definition>FileSpecType vt::utils::file_spec::FileSpec::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="287" column="16" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a8a9add55a41950f8e283b7ea667ad782" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::utils::file_spec::FileSpec::has_spec_</definition>
        <argsstring></argsstring>
        <name>has_spec_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="288" column="8" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ad807058ebbd7f433273140b1995c4e26" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::utils::file_spec::FileSpec::init</definition>
        <argsstring>(ProxyType in_proxy, FileSpecType in_type)</argsstring>
        <name>init</name>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac4ad61ed146069ab671ec1bf909ebded" kindref="member">ProxyType</ref></type>
          <declname>in_proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1utils_1_1file__spec_1adc8912eb2949ca15d0f29afc0342f71e" kindref="member">FileSpecType</ref></type>
          <declname>in_type</declname>
        </param>
        <briefdescription>
<para>Initialize the <computeroutput><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec" kindref="compound">FileSpec</ref></computeroutput> objgroup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the objgroup proxy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of Spec </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="182" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a2cc6d29fdfe7d69bb6ff93d35065011a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::utils::file_spec::FileSpec::transferSpec</definition>
        <argsstring>(SpecMsg *msg)</argsstring>
        <name>transferSpec</name>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1_1_spec_msg" kindref="compound">SpecMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler to receive parsed specification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the incoming spec msg </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="259" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="223" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ae441bc1398b54dd7acf2f1e34d4ef6ce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::utils::file_spec::FileSpec::insertSpec</definition>
        <argsstring>(SpecIndex phase, SpecIndex neg, SpecIndex pos, bool is_mod, SpecMapType &amp;map)</argsstring>
        <name>insertSpec</name>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" kindref="member">SpecIndex</ref></type>
          <declname>phase</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" kindref="member">SpecIndex</ref></type>
          <declname>neg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" kindref="member">SpecIndex</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_mod</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a368a4ab8bf689e0b533abac71ae9393b" kindref="member">SpecMapType</ref> &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Insert an entry into the specification holders. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the phase mod or specific </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">neg</parametername>
</parameternamelist>
<parameterdescription>
<para>negative offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>positive offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_mod</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it&apos;s a mod-phase </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map</parametername>
</parameternamelist>
<parameterdescription>
<para>the map to add it to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="270" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="233" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a8e57a8e3efd0e8dc640419de684d6490" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vt::utils::file_spec::FileSpec::eatWhitespace</definition>
        <argsstring>(std::ifstream &amp;file)</argsstring>
        <name>eatWhitespace</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Eat whitespace during parsing except for newlines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current character after whitespace is eaten </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="281" column="7" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="254" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a918b12138f66bca9fbc82d02e3c6ef58" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac4ad61ed146069ab671ec1bf909ebded" kindref="member">ProxyType</ref></type>
        <definition>FileSpec::ProxyType vt::utils::file_spec::FileSpec::construct</definition>
        <argsstring>(FileSpecType type)</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="namespacevt_1_1utils_1_1file__spec_1adc8912eb2949ca15d0f29afc0342f71e" kindref="member">FileSpecType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct a new <computeroutput><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec" kindref="compound">FileSpec</ref></computeroutput> objgroup. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the proxy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="190" column="20" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="261" bodyend="265"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ae7850a9915fb65decca92eb68f2293cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::utils::file_spec::FileSpec::checkEnabled</definition>
        <argsstring>(SpecIndex in_phase)</argsstring>
        <name>checkEnabled</name>
        <param>
          <type><ref refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" kindref="member">SpecIndex</ref></type>
          <declname>in_phase</declname>
        </param>
        <briefdescription>
<para>Check entire spec to see if it is enabled on any of the entries. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the phase to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="199" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="57" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a74d53e3d243f0f26ec0be262bb07948c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::utils::file_spec::FileSpec::hasSpec</definition>
        <argsstring>()</argsstring>
        <name>hasSpec</name>
        <briefdescription>
<para>Check if a specification is enabled, file specified, and file exists. Aborts if file specified but the file is not accessible. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether a spec exists </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="207" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="73" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a8d79f9c2f54891fbe1f70c70d88fb983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::utils::file_spec::FileSpec::parse</definition>
        <argsstring>()</argsstring>
        <name>parse</name>
        <briefdescription>
<para>Parse the specification file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="212" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="113" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a87745527c8b2dc16cbeb3dd59219db1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::utils::file_spec::FileSpec::broadcastSpec</definition>
        <argsstring>()</argsstring>
        <name>broadcastSpec</name>
        <briefdescription>
<para>Broadcast parsed specification to all nodes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="217" column="8" bodyfile="src/vt/utils/file_spec/spec.cc" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a0c22690c282b4dc4813de45b530a3adf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::utils::file_spec::FileSpec::specReceived</definition>
        <argsstring>() const</argsstring>
        <name>specReceived</name>
        <briefdescription>
<para>Check if spec has been received. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/file_spec/spec.h" line="222" column="8" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="222" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parses spec file when available and tests when its enabled. A single node parses the specification; all others receive the spec from a broadcast. </para>
    </briefdescription>
    <detaileddescription>
<para>Parses the following format: [%]&lt;phase&gt; &lt;range negative&gt; &lt;range positive&gt; &quot;&quot;" 0 0 10 %100 -3 3 200 -5 5 &quot;&quot;"</para>
<para>This specifies that tracing/lb will be enabled on the following phases: { [0,10], # phase 0 with offsets 0,+10 (subsumes [0,3] from %100 -3 3) [97,103] # any phase % 100 with offset -3,+3 [195,205] # phase 200 with offsets -5,+5 (subsumes [197,203] from %100 -3 3) [297,303] # any phase % 100 with offset -3,+3 [n%100-3,n%100+3] ... # any phase % 100 with offset -3,+3 }</para>
<para>The sets of mod-phase and phase-specific entries must be unique. There may be overlap across the two sets, but not within them. Having two entries that start with &quot;%100&quot; or two entries that start with &quot;100&quot; would be invalid and trigger a parsing error. But having a &quot;%100&quot; and &quot;100&quot; entry is valid.</para>
<para>Whether tracing/lb is enabled is calculated as an OR across all specification entries. Thus, if a given phase is contained in any spec line, it is enabled. Note that 0 % 100 = 0. Therefore, if the above example did not contain the first line, tracing/lb would be enabled as:</para>
<para>{ [0,3], # any phase mod 100 from -3,+3 [97,103], [195,205], [297,303], ... } </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>vt::utils::file_spec::FileSpec</label>
        <link refid="structvt_1_1utils_1_1file__spec_1_1_file_spec"/>
        <childnode refid="2" relation="usage">
          <edgelabel>proxy_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>vt::objgroup::proxy::Proxy&lt; FileSpec &gt;</label>
        <link refid="structvt_1_1objgroup_1_1proxy_1_1_proxy"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/file_spec/spec.h" line="110" column="1" bodyfile="src/vt/utils/file_spec/spec.h" bodystart="110" bodyend="289"/>
    <listofallmembers>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a87745527c8b2dc16cbeb3dd59219db1e" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>broadcastSpec</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ae7850a9915fb65decca92eb68f2293cb" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>checkEnabled</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a918b12138f66bca9fbc82d02e3c6ef58" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>construct</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac8062352203598c411265a478ec1b0c7" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>DoneMsg</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a8e57a8e3efd0e8dc640419de684d6490" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>eatWhitespace</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a8a9add55a41950f8e283b7ea667ad782" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>has_spec_</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a74d53e3d243f0f26ec0be262bb07948c" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>hasSpec</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ad807058ebbd7f433273140b1995c4e26" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>init</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ae441bc1398b54dd7acf2f1e34d4ef6ce" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>insertSpec</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a8d79f9c2f54891fbe1f70c70d88fb983" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>parse</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ad320eea42e6243424117a513217d2706" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>proxy_</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1ac4ad61ed146069ab671ec1bf909ebded" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>ProxyType</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a4a5c0c4c23187242eedc7d60142adea4" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>spec_exact_</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1abfe003275eb54e3406a1334e46c15eea" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>spec_mod_</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a3817fca09dbe932e0f6ba5729f1965ba" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>SpecIndex</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a368a4ab8bf689e0b533abac71ae9393b" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>SpecMapType</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a0c22690c282b4dc4813de45b530a3adf" prot="public" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>specReceived</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1a2cc6d29fdfe7d69bb6ff93d35065011a" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>transferSpec</name></member>
      <member refid="structvt_1_1utils_1_1file__spec_1_1_file_spec_1aa3e8f2e2f3d7cb7b33bdbbab31331cba" prot="private" virt="non-virtual"><scope>vt::utils::file_spec::FileSpec</scope><name>type_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
