<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4" kind="class" language="C++" prot="public">
    <compoundname>std::numeric_limits&lt; vt::TimeTypeWrapper &gt;</compoundname>
    <includes refid="timing__type_8h" local="no">timing_type.h</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1a526c56eceab4b7b9576d3f9d11d3dd38" prot="private" static="no">
        <type>typename <ref refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" kindref="member">vt::TimeTypeWrapper::TimeTypeInternal</ref></type>
        <definition>using std::numeric_limits&lt; vt::TimeTypeWrapper &gt;::Type =  typename vt::TimeTypeWrapper::TimeTypeInternal</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="183" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1acf5aa2aebcce3c80ebb531896b08041a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref></type>
        <definition>static constexpr vt::TimeTypeWrapper std::numeric_limits&lt; vt::TimeTypeWrapper &gt;::max</definition>
        <argsstring>() noexcept</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="186" column="40" bodyfile="src/vt/timing/timing_type.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1a4cd83330ab57b16a325f7615c297cde7" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref></type>
        <definition>static constexpr vt::TimeTypeWrapper std::numeric_limits&lt; vt::TimeTypeWrapper &gt;::lowest</definition>
        <argsstring>() noexcept</argsstring>
        <name>lowest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="190" column="40" bodyfile="src/vt/timing/timing_type.h" bodystart="190" bodyend="192"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1abb4cb38645a9cacc842f030a8f0c9f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref></type>
        <definition>vt::TimeTypeWrapper std::numeric_limits&lt; vt::TimeTypeWrapper &gt;::min</definition>
        <argsstring>(const vt::TimeTypeWrapper &amp;lhs, const vt::TimeTypeWrapper &amp;rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="195" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1a47beb71d1c1bef56c1158486f2e82c74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref></type>
        <definition>vt::TimeTypeWrapper std::numeric_limits&lt; vt::TimeTypeWrapper &gt;::max</definition>
        <argsstring>(const vt::TimeTypeWrapper &amp;lhs, const vt::TimeTypeWrapper &amp;rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">vt::TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="200" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="200" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/timing/timing_type.h" line="182" column="22" bodyfile="src/vt/timing/timing_type.h" bodystart="182" bodyend="203"/>
    <listofallmembers>
      <member refid="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1a4cd83330ab57b16a325f7615c297cde7" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; vt::TimeTypeWrapper &gt;</scope><name>lowest</name></member>
      <member refid="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1acf5aa2aebcce3c80ebb531896b08041a" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; vt::TimeTypeWrapper &gt;</scope><name>max</name></member>
      <member refid="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1a47beb71d1c1bef56c1158486f2e82c74" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; vt::TimeTypeWrapper &gt;</scope><name>max</name></member>
      <member refid="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1abb4cb38645a9cacc842f030a8f0c9f73" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; vt::TimeTypeWrapper &gt;</scope><name>min</name></member>
      <member refid="classstd_1_1numeric__limits_3_01vt_1_1_time_type_wrapper_01_4_1a526c56eceab4b7b9576d3f9d11d3dd38" prot="private" virt="non-virtual"><scope>std::numeric_limits&lt; vt::TimeTypeWrapper &gt;</scope><name>Type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
