<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1callback_1_1_callback_send" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::callback::CallbackSend</compoundname>
    <basecompoundref refid="structvt_1_1pipe_1_1callback_1_1_callback_base" prot="public" virt="non-virtual">vt::pipe::callback::CallbackBase&lt; signal::Signal&lt; MsgT &gt; &gt;</basecompoundref>
    <includes refid="callback__send_8fwd_8h" local="no">callback_send.fwd.h</includes>
    <templateparamlist>
      <param>
        <type>typename MsgT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a2c84bc6c3e3fb18ece98bc3f2983a902" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1signal_1_1_signal" kindref="compound">signal::Signal</ref>&lt; MsgT &gt;</type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::SignalBaseType =  typename signal::Signal&lt;MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>SignalBaseType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="64" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a73748b762ebaaf0f1142aa90ecd9880b" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_base" kindref="compound">CallbackBase</ref>&lt; <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a2c84bc6c3e3fb18ece98bc3f2983a902" kindref="member">SignalBaseType</ref> &gt;::<ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a73748b762ebaaf0f1142aa90ecd9880b" kindref="member">SignalType</ref></type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::SignalType =  typename CallbackBase&lt;SignalBaseType&gt;::SignalType</definition>
        <argsstring></argsstring>
        <name>SignalType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="65" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" prot="public" static="no">
        <type>typename SignalType::DataType</type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::SignalDataType =  typename SignalType::DataType</definition>
        <argsstring></argsstring>
        <name>SignalDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="66" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a51055a9ab026f30ce82771829c6673ed" prot="public" static="no">
        <type>MsgT</type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::MessageType =  MsgT</definition>
        <argsstring></argsstring>
        <name>MessageType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="67" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a4b1101ab77de5862de3b309c5d09b224" prot="public" static="no">
        <type><ref refid="namespacevt_1_1pipe_1_1signal_1acbe257d1ae44f20fa9fd9b6ed3057caf" kindref="member">signal::SigVoidType</ref></type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::VoidSigType =  signal::SigVoidType</definition>
        <argsstring></argsstring>
        <name>VoidSigType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="68" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1afbb9475a84ba4a7b3db3c7493672dbe6" prot="public" static="no">
        <type>std::enable_if_t&lt; std::is_same&lt; T, <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a4b1101ab77de5862de3b309c5d09b224" kindref="member">VoidSigType</ref> &gt;::value, U &gt;</type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::IsVoidType =  std::enable_if_t&lt;std::is_same&lt;T,VoidSigType&gt;::value,U&gt;</definition>
        <argsstring></argsstring>
        <name>IsVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="70" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1adb85e64e67e00aa71a9c173565dfb7dc" prot="public" static="no">
        <type>std::enable_if_t&lt;!std::is_same&lt; T, <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a4b1101ab77de5862de3b309c5d09b224" kindref="member">VoidSigType</ref> &gt;::value, U &gt;</type>
        <definition>using vt::pipe::callback::CallbackSend&lt; MsgT &gt;::IsNotVoidType =  std::enable_if_t&lt;!std::is_same&lt;T,VoidSigType&gt;::value,U&gt;</definition>
        <argsstring></argsstring>
        <name>IsNotVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="72" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1abaa3c5d86123d749248b13f7d3728aae" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::pipe::callback::CallbackSend&lt; MsgT &gt;::send_node_</definition>
        <argsstring></argsstring>
        <name>send_node_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="98" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1adc779eec6db67dce8bedd1b4bb13319a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::pipe::callback::CallbackSend&lt; MsgT &gt;::handler_</definition>
        <argsstring></argsstring>
        <name>handler_</name>
        <initializer>= uninitialized_handler</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="99" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1aad073e948c05410190ba09425772d3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::CallbackSend&lt; MsgT &gt;::CallbackSend</definition>
        <argsstring>()=default</argsstring>
        <name>CallbackSend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1ae45cdb5d7d006708d6bbae455c4a22d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::CallbackSend&lt; MsgT &gt;::CallbackSend</definition>
        <argsstring>(CallbackSend const &amp;)=default</argsstring>
        <name>CallbackSend</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send" kindref="compound">CallbackSend</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1accc854042b241e9e5149f4c48da57ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::CallbackSend&lt; MsgT &gt;::CallbackSend</definition>
        <argsstring>(CallbackSend &amp;&amp;)=default</argsstring>
        <name>CallbackSend</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send" kindref="compound">CallbackSend</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a058cceb367d32fe1235f1f05bf6d387d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::CallbackSend&lt; MsgT &gt;::CallbackSend</definition>
        <argsstring>(HandlerType const &amp;in_handler, NodeType const &amp;in_send_node)</argsstring>
        <name>CallbackSend</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>in_send_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="78" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.impl.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1ad02a9711c4603807d6fe40a5dd3b4859" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::pipe::callback::CallbackSend&lt; MsgT &gt;::getHandler</definition>
        <argsstring>() const</argsstring>
        <name>getHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="82" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1ae3abb8abfeee32b445a4ff13fd591745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::callback::CallbackSend&lt; MsgT &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="85" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.impl.h" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1aa9d0685e0564118a4198640ae8ef640c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send" kindref="compound">CallbackSend</ref>&lt; MsgT &gt;::template <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1afbb9475a84ba4a7b3db3c7493672dbe6" kindref="member">IsVoidType</ref>&lt; T &gt;</type>
        <definition>CallbackSend&lt;MsgT&gt;::template IsVoidType&lt;T&gt; vt::pipe::callback::CallbackSend&lt; MsgT &gt;::triggerDispatch</definition>
        <argsstring>(SignalDataType *data, PipeType const &amp;pid)</argsstring>
        <name>triggerDispatch</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" kindref="member">SignalDataType</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.impl.h" line="84" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.impl.h" bodystart="84" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a26915bf9dac921974b7d4a7cb156083a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send" kindref="compound">CallbackSend</ref>&lt; MsgT &gt;::template <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1adb85e64e67e00aa71a9c173565dfb7dc" kindref="member">IsNotVoidType</ref>&lt; T &gt;</type>
        <definition>CallbackSend&lt;MsgT&gt;::template IsNotVoidType&lt;T&gt; vt::pipe::callback::CallbackSend&lt; MsgT &gt;::triggerDispatch</definition>
        <argsstring>(SignalDataType *data, PipeType const &amp;pid)</argsstring>
        <name>triggerDispatch</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" kindref="member">SignalDataType</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.impl.h" line="102" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.impl.h" bodystart="102" bodyend="115"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1ab3cf6c2a9a160917917b15f62575b499" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1afbb9475a84ba4a7b3db3c7493672dbe6" kindref="member">IsVoidType</ref>&lt; T &gt;</type>
        <definition>IsVoidType&lt;T&gt; vt::pipe::callback::CallbackSend&lt; MsgT &gt;::triggerDispatch</definition>
        <argsstring>(SignalDataType *data, PipeType const &amp;pid)</argsstring>
        <name>triggerDispatch</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" kindref="member">SignalDataType</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a2e088285dc2c8eb392fc69404e9613b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1adb85e64e67e00aa71a9c173565dfb7dc" kindref="member">IsNotVoidType</ref>&lt; T &gt;</type>
        <definition>IsNotVoidType&lt;T&gt; vt::pipe::callback::CallbackSend&lt; MsgT &gt;::triggerDispatch</definition>
        <argsstring>(SignalDataType *data, PipeType const &amp;pid)</argsstring>
        <name>triggerDispatch</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" kindref="member">SignalDataType</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1ae86cee78a79a6a0f0823bcbbb94629d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::callback::CallbackSend&lt; MsgT &gt;::trigger_</definition>
        <argsstring>(SignalDataType *data, PipeType const &amp;pid) override</argsstring>
        <name>trigger_</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" kindref="member">SignalDataType</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="94" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.impl.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1_callback_send_1a262653b7b9260e5bcd3de0e4cafd9c9c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::callback::CallbackSend&lt; MsgT &gt;::trigger_</definition>
        <argsstring>(SignalDataType *data) override</argsstring>
        <name>trigger_</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" kindref="member">SignalDataType</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/handler_send/callback_send.h" line="95" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.impl.h" bodystart="77" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="539">
        <label>vt::pipe::callback::CallbackSend&lt; MsgT &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_send"/>
        <childnode refid="540" relation="public-inheritance">
        </childnode>
      </node>
      <node id="540">
        <label>vt::pipe::callback::CallbackBase&lt; signal::Signal&lt; MsgT &gt; &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="541">
        <label>vt::pipe::callback::CallbackSend&lt; MsgT &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_send"/>
        <childnode refid="542" relation="public-inheritance">
        </childnode>
      </node>
      <node id="542">
        <label>vt::pipe::callback::CallbackBase&lt; signal::Signal&lt; MsgT &gt; &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/pipe/callback/handler_send/callback_send.fwd.h" line="53" column="1" bodyfile="src/vt/pipe/callback/handler_send/callback_send.fwd.h" bodystart="53" bodyend="-1"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1aed02135f19f5d5ca4899d488ce402b64" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1aa90843711601bd1174ba64f69f754eb8" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a683cee48109181768cd44354bc98e3e1" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1ae96d1355aa94b4fd32469bbb9280717c" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a18840ed75fb94811cb34c17da8703588" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a87a0d70f0b3a7c8d94eb62c278ba9e0e" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a182bd31e2c3f804bb61a4b43907061d2" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackBase</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1aad073e948c05410190ba09425772d3a3" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackSend</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1ae45cdb5d7d006708d6bbae455c4a22d1" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackSend</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1accc854042b241e9e5149f4c48da57ed1" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackSend</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a058cceb367d32fe1235f1f05bf6d387d" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>CallbackSend</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a9ef1595197b291a660e6d19aadb0203e" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>expired</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a20ed519d03b62560080ce3bdb8986f03" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>finished</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1ad02a9711c4603807d6fe40a5dd3b4859" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>getHandler</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1adc779eec6db67dce8bedd1b4bb13319a" prot="private" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>handler_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1adb85e64e67e00aa71a9c173565dfb7dc" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>IsNotVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1afbb9475a84ba4a7b3db3c7493672dbe6" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>IsVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a51055a9ab026f30ce82771829c6673ed" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>MessageType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a078375aa25cb0c0e2968804ef3a86a5f" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>operator=</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1abaa3c5d86123d749248b13f7d3728aae" prot="private" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>send_node_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1ae3abb8abfeee32b445a4ff13fd591745" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>serialize</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a2c84bc6c3e3fb18ece98bc3f2983a902" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>SignalBaseType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a5b21820f25b28f980921b1fe24d8a2dc" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>SignalDataType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a73748b762ebaaf0f1142aa90ecd9880b" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>SignalType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1ad54d116447acb7f1d051db946b2e875c" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>trigger</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1ae86cee78a79a6a0f0823bcbbb94629d5" prot="private" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>trigger_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a262653b7b9260e5bcd3de0e4cafd9c9c" prot="private" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>trigger_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1a75a9b0103e0129f536385b10b86400c3" prot="protected" virt="pure-virtual" ambiguityscope="CallbackBase&lt; signal::Signal&lt; MsgT &gt; &gt;::"><scope>vt::pipe::callback::CallbackSend</scope><name>trigger_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1ac14c6c68a45c6f7e18c73daa45b23b83" prot="protected" virt="virtual" ambiguityscope="CallbackBase&lt; signal::Signal&lt; MsgT &gt; &gt;::"><scope>vt::pipe::callback::CallbackSend</scope><name>trigger_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1ab3cf6c2a9a160917917b15f62575b499" prot="private" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>triggerDispatch</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a2e088285dc2c8eb392fc69404e9613b5" prot="private" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>triggerDispatch</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1aa9d0685e0564118a4198640ae8ef640c" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>triggerDispatch</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a26915bf9dac921974b7d4a7cb156083a" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>triggerDispatch</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_send_1a4b1101ab77de5862de3b309c5d09b224" prot="public" virt="non-virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>VoidSigType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1_callback_base_1adc39148be97af3105f9b5765431bdc9a" prot="public" virt="virtual"><scope>vt::pipe::callback::CallbackSend</scope><name>~CallbackBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
