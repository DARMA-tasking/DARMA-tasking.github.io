<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="demangle_8cc" kind="file" language="C++">
    <compoundname>demangle.cc</compoundname>
    <includes refid="demangle_8h" local="yes">vt/utils/demangle/demangle.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">list</includes>
    <includes local="no">cstring</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iterator</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="243515">
        <label>list</label>
      </node>
      <node id="243467">
        <label>vt/configs/features/features_featureswitch.h</label>
        <link refid="features__featureswitch_8h"/>
        <childnode refid="243468" relation="include">
        </childnode>
      </node>
      <node id="243504">
        <label>vt/runtime/component/component_pack.h</label>
        <link refid="component__pack_8h"/>
        <childnode refid="243505" relation="include">
        </childnode>
        <childnode refid="243514" relation="include">
        </childnode>
        <childnode refid="243515" relation="include">
        </childnode>
        <childnode refid="243516" relation="include">
        </childnode>
        <childnode refid="243507" relation="include">
        </childnode>
        <childnode refid="243502" relation="include">
        </childnode>
        <childnode refid="243517" relation="include">
        </childnode>
      </node>
      <node id="243514">
        <label>vt/runtime/component/movable_fn.h</label>
        <link refid="movable__fn_8h"/>
      </node>
      <node id="243478">
        <label>functional</label>
      </node>
      <node id="243508">
        <label>vt/runtime/component/component_dep.h</label>
        <link refid="component__dep_8h"/>
        <childnode refid="243506" relation="include">
        </childnode>
      </node>
      <node id="243486">
        <label>fmt/format.h</label>
      </node>
      <node id="243469">
        <label>vt/configs/features/features_metafeatures.h</label>
        <link refid="features__metafeatures_8h"/>
        <childnode refid="243468" relation="include">
        </childnode>
      </node>
      <node id="243484">
        <label>vt/configs/debug/debug_colorize.h</label>
        <link refid="debug__colorize_8h"/>
        <childnode refid="243473" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
      </node>
      <node id="243473">
        <label>vt/configs/arguments/app_config.h</label>
        <link refid="app__config_8h"/>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
      </node>
      <node id="243529">
        <label>assert.h</label>
      </node>
      <node id="243530">
        <label>iterator</label>
      </node>
      <node id="243466">
        <label>cstdint</label>
      </node>
      <node id="243513">
        <label>vt/runtime/component/progressable.h</label>
        <link refid="progressable_8h"/>
      </node>
      <node id="243512">
        <label>vt/runtime/component/bufferable.h</label>
        <link refid="bufferable_8h"/>
      </node>
      <node id="243524">
        <label>vt/configs/error/assert_out_info.impl.h</label>
        <link refid="assert__out__info_8impl_8h"/>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243497" relation="include">
        </childnode>
        <childnode refid="243523" relation="include">
        </childnode>
        <childnode refid="243525" relation="include">
        </childnode>
        <childnode refid="243484" relation="include">
        </childnode>
        <childnode refid="243522" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243527" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
      <node id="243522">
        <label>cassert</label>
      </node>
      <node id="243498">
        <label>vt/configs/error/assert_out.impl.h</label>
        <link refid="assert__out_8impl_8h"/>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243497" relation="include">
        </childnode>
        <childnode refid="243499" relation="include">
        </childnode>
        <childnode refid="243484" relation="include">
        </childnode>
        <childnode refid="243491" relation="include">
        </childnode>
        <childnode refid="243501" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243522" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
      <node id="243481">
        <label>vt/configs/types/types_size.h</label>
        <link refid="types__size_8h"/>
        <childnode refid="243482" relation="include">
        </childnode>
      </node>
      <node id="243489">
        <label>vt/configs/error/common.h</label>
        <link refid="src_2vt_2configs_2error_2common_8h"/>
        <childnode refid="243476" relation="include">
        </childnode>
        <childnode refid="243490" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
      </node>
      <node id="243482">
        <label>vt/utils/bits/bits_counter.h</label>
        <link refid="bits__counter_8h"/>
      </node>
      <node id="243487">
        <label>vt/configs/error/error_headers.h</label>
        <link refid="error__headers_8h"/>
        <childnode refid="243488" relation="include">
        </childnode>
        <childnode refid="243492" relation="include">
        </childnode>
        <childnode refid="243496" relation="include">
        </childnode>
      </node>
      <node id="243474">
        <label>string</label>
      </node>
      <node id="243510">
        <label>vt/runtime/component/base.h</label>
        <link refid="src_2vt_2runtime_2component_2base_8h"/>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243511" relation="include">
        </childnode>
        <childnode refid="243512" relation="include">
        </childnode>
        <childnode refid="243513" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
      </node>
      <node id="243525">
        <label>vt/configs/error/keyval_printer.h</label>
        <link refid="keyval__printer_8h"/>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243500" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
        <childnode refid="243526" relation="include">
        </childnode>
      </node>
      <node id="243526">
        <label>vt/configs/error/keyval_printer.impl.h</label>
        <link refid="keyval__printer_8impl_8h"/>
        <childnode refid="243525" relation="include">
        </childnode>
        <childnode refid="243484" relation="include">
        </childnode>
        <childnode refid="243500" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
      <node id="243507">
        <label>unordered_set</label>
      </node>
      <node id="243470">
        <label>vt/configs/features/features_enableif.h</label>
        <link refid="features__enableif_8h"/>
        <childnode refid="243467" relation="include">
        </childnode>
        <childnode refid="243468" relation="include">
        </childnode>
      </node>
      <node id="243465">
        <label>vt/configs/debug/debug_config.h</label>
        <link refid="debug__config_8h"/>
        <childnode refid="243466" relation="include">
        </childnode>
        <childnode refid="243467" relation="include">
        </childnode>
        <childnode refid="243468" relation="include">
        </childnode>
        <childnode refid="243469" relation="include">
        </childnode>
        <childnode refid="243470" relation="include">
        </childnode>
        <childnode refid="243471" relation="include">
        </childnode>
      </node>
      <node id="243483">
        <label>vt/configs/types/types_sentinels.h</label>
        <link refid="types__sentinels_8h"/>
        <childnode refid="243463" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243479" relation="include">
        </childnode>
      </node>
      <node id="243509">
        <label>vt/runtime/component/component_traits.h</label>
        <link refid="component__traits_8h"/>
        <childnode refid="243494" relation="include">
        </childnode>
      </node>
      <node id="243506">
        <label>vt/runtime/component/component_registry.h</label>
        <link refid="component__registry_8h"/>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243507" relation="include">
        </childnode>
      </node>
      <node id="243463">
        <label>vt/configs/debug/debug_masterconfig.h</label>
        <link refid="debug__masterconfig_8h"/>
        <childnode refid="243464" relation="include">
        </childnode>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243472" relation="include">
        </childnode>
      </node>
      <node id="243490">
        <label>vt/collective/basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="243474" relation="include">
        </childnode>
      </node>
      <node id="243461">
        <label>vt/utils/demangle/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="243462" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
        <childnode refid="243528" relation="include">
        </childnode>
        <childnode refid="243500" relation="include">
        </childnode>
        <childnode refid="243529" relation="include">
        </childnode>
      </node>
      <node id="243477">
        <label>vt/configs/types/types_type.h</label>
        <link refid="types__type_8h"/>
        <childnode refid="243466" relation="include">
        </childnode>
        <childnode refid="243478" relation="include">
        </childnode>
      </node>
      <node id="243493">
        <label>vt/configs/error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="243476" relation="include">
        </childnode>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243495" relation="include">
        </childnode>
      </node>
      <node id="243485">
        <label>vt/configs/debug/debug_var_unused.h</label>
        <link refid="debug__var__unused_8h"/>
        <childnode refid="243480" relation="include">
        </childnode>
      </node>
      <node id="243488">
        <label>vt/configs/error/soft_error.h</label>
        <link refid="soft__error_8h"/>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243491" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
      <node id="243480">
        <label>tuple</label>
      </node>
      <node id="243521">
        <label>vt/utils/tls/tls.impl.h</label>
        <link refid="tls_8impl_8h"/>
        <childnode refid="243462" relation="include">
        </childnode>
      </node>
      <node id="243472">
        <label>vt/configs/debug/debug_print.h</label>
        <link refid="debug__print_8h"/>
        <childnode refid="243473" relation="include">
        </childnode>
        <childnode refid="243476" relation="include">
        </childnode>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243484" relation="include">
        </childnode>
        <childnode refid="243485" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
      <node id="243475">
        <label>vector</label>
      </node>
      <node id="243501">
        <label>vt/context/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="243502" relation="include">
        </childnode>
        <childnode refid="243503" relation="include">
        </childnode>
        <childnode refid="243462" relation="include">
        </childnode>
        <childnode refid="243504" relation="include">
        </childnode>
        <childnode refid="243518" relation="include">
        </childnode>
        <childnode refid="243519" relation="include">
        </childnode>
      </node>
      <node id="243527">
        <label>sstream</label>
      </node>
      <node id="243464">
        <label>vt/cmake_config.h</label>
      </node>
      <node id="243460">
        <label>src/vt/utils/demangle/demangle.cc</label>
        <link refid="demangle_8cc"/>
        <childnode refid="243461" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243515" relation="include">
        </childnode>
        <childnode refid="243528" relation="include">
        </childnode>
        <childnode refid="243527" relation="include">
        </childnode>
        <childnode refid="243530" relation="include">
        </childnode>
        <childnode refid="243531" relation="include">
        </childnode>
        <childnode refid="243532" relation="include">
        </childnode>
      </node>
      <node id="243499">
        <label>vt/configs/error/stack_out.h</label>
        <link refid="stack__out_8h"/>
        <childnode refid="243500" relation="include">
        </childnode>
        <childnode refid="243475" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
      </node>
      <node id="243468">
        <label>vt/configs/features/features_defines.h</label>
        <link refid="features__defines_8h"/>
      </node>
      <node id="243500">
        <label>cstdlib</label>
      </node>
      <node id="243492">
        <label>vt/configs/error/hard_error.h</label>
        <link refid="hard__error_8h"/>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243493" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
      </node>
      <node id="243532">
        <label>iostream</label>
      </node>
      <node id="243518">
        <label>vt/context/context_attorney_fwd.h</label>
        <link refid="context__attorney__fwd_8h"/>
        <childnode refid="243462" relation="include">
        </childnode>
      </node>
      <node id="243516">
        <label>unordered_map</label>
      </node>
      <node id="243476">
        <label>vt/configs/types/types_headers.h</label>
        <link refid="types__headers_8h"/>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243479" relation="include">
        </childnode>
        <childnode refid="243481" relation="include">
        </childnode>
        <childnode refid="243483" relation="include">
        </childnode>
      </node>
      <node id="243497">
        <label>vt/configs/error/assert_out.h</label>
        <link refid="assert__out_8h"/>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243498" relation="include">
        </childnode>
      </node>
      <node id="243503">
        <label>mpi.h</label>
      </node>
      <node id="243519">
        <label>vt/utils/tls/tls.h</label>
        <link refid="tls_8h"/>
        <childnode refid="243462" relation="include">
        </childnode>
        <childnode refid="243520" relation="include">
        </childnode>
        <childnode refid="243521" relation="include">
        </childnode>
      </node>
      <node id="243517">
        <label>vt/runtime/component/component_pack.impl.h</label>
        <link refid="component__pack_8impl_8h"/>
        <childnode refid="243504" relation="include">
        </childnode>
      </node>
      <node id="243479">
        <label>vt/configs/types/types_rdma.h</label>
        <link refid="types__rdma_8h"/>
        <childnode refid="243463" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243466" relation="include">
        </childnode>
        <childnode refid="243478" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
      </node>
      <node id="243511">
        <label>vt/runtime/component/diagnostic.h</label>
        <link refid="diagnostic_8h"/>
      </node>
      <node id="243494">
        <label>type_traits</label>
      </node>
      <node id="243491">
        <label>vt/configs/error/pretty_print_message.h</label>
        <link refid="pretty__print__message_8h"/>
        <childnode refid="243476" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
      <node id="243520">
        <label>vt/utils/tls/null_tls.h</label>
        <link refid="null__tls_8h"/>
        <childnode refid="243462" relation="include">
        </childnode>
      </node>
      <node id="243462">
        <label>vt/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="243463" relation="include">
        </childnode>
        <childnode refid="243476" relation="include">
        </childnode>
        <childnode refid="243487" relation="include">
        </childnode>
      </node>
      <node id="243531">
        <label>algorithm</label>
      </node>
      <node id="243505">
        <label>vt/runtime/component/component.h</label>
        <link refid="component_8h"/>
        <childnode refid="243492" relation="include">
        </childnode>
        <childnode refid="243506" relation="include">
        </childnode>
        <childnode refid="243508" relation="include">
        </childnode>
        <childnode refid="243509" relation="include">
        </childnode>
        <childnode refid="243510" relation="include">
        </childnode>
        <childnode refid="243502" relation="include">
        </childnode>
      </node>
      <node id="243471">
        <label>vt/configs/debug/debug_printconst.h</label>
        <link refid="debug__printconst_8h"/>
      </node>
      <node id="243528">
        <label>cstring</label>
      </node>
      <node id="243502">
        <label>memory</label>
      </node>
      <node id="243496">
        <label>vt/configs/error/config_assert.h</label>
        <link refid="config__assert_8h"/>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243497" relation="include">
        </childnode>
        <childnode refid="243523" relation="include">
        </childnode>
        <childnode refid="243525" relation="include">
        </childnode>
        <childnode refid="243522" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
      </node>
      <node id="243523">
        <label>vt/configs/error/assert_out_info.h</label>
        <link refid="assert__out__info_8h"/>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243477" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243524" relation="include">
        </childnode>
      </node>
      <node id="243495">
        <label>vt/configs/error/error.impl.h</label>
        <link refid="error_8impl_8h"/>
        <childnode refid="243476" relation="include">
        </childnode>
        <childnode refid="243465" relation="include">
        </childnode>
        <childnode refid="243489" relation="include">
        </childnode>
        <childnode refid="243493" relation="include">
        </childnode>
        <childnode refid="243491" relation="include">
        </childnode>
        <childnode refid="243474" relation="include">
        </childnode>
        <childnode refid="243480" relation="include">
        </childnode>
        <childnode refid="243494" relation="include">
        </childnode>
        <childnode refid="243486" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1util">vt::util</innernamespace>
    <innernamespace refid="namespacevt_1_1util_1_1demangle">vt::util::demangle</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demangle.cc</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA<sp/>Toolkit<sp/>v.<sp/>1.0.0</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt<sp/>=&gt;<sp/>Virtual<sp/>Transport</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="43"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="demangle_8h" kindref="compound">vt/utils/demangle/demangle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="namespacevt_1_1util_1_1demangle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt" kindref="compound">vt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">demangle<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TemplateExtract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a5b76d8ad80e5054d4da8bea682a1752d" kindref="member">TemplateExtract::singlePfType</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pf)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PF<sp/>-&gt;<sp/>..<sp/>[T<sp/>=<sp/>(...)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a8fe842098a300f5b31f5ab1b0a76804b" kindref="member">lastNamedPfType</ref>(pf,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a8fe842098a300f5b31f5ab1b0a76804b" kindref="member">TemplateExtract::lastNamedPfType</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pf,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tparam)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PF<sp/>-&gt;<sp/>..<sp/>[T1<sp/>=<sp/>..,<sp/>T2<sp/>=<sp/>..,<sp/>TPARAM<sp/>=<sp/>(...)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::string<sp/>seek<sp/>=<sp/>tparam<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pf.find(seek);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>i<sp/>+<sp/>seek.length();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pf.substr(i,<sp/>pf.length()<sp/>-<sp/>i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a::b<sp/>or<sp/>a::b&lt;c::d&gt;<sp/>or<sp/>a&lt;&gt;::b&lt;c&gt;,<sp/>eg.<sp/>determines<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>starting<sp/>position<sp/>at<sp/>which<sp/>it<sp/>can<sp/>be<sp/>a<sp/>namespace<sp/>vs<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>That<sp/>is,<sp/>the<sp/>STARTING<sp/>position<sp/>of<sp/>the<sp/>rightmost<sp/>&quot;::&quot;<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>located<sp/>inside<sp/>angle<sp/>brackets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>namespace<sp/>the<sp/>result<sp/>will<sp/>not<sp/>start<sp/>with<sp/>a<sp/>&quot;::&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1util_1_1demangle_1a7ab5035f9fcd5ff991444088ef4d2329" kindref="member">getNameDivide</ref>(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>best,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth</highlight></codeline>
<codeline lineno="91"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>str.find(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>start);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>str.find_first_of(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>start);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o<sp/>&lt;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[o]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1util_1_1demangle_1a7ab5035f9fcd5ff991444088ef4d2329" kindref="member">getNameDivide</ref>(str,<sp/>best,<sp/>o<sp/>+<sp/>1,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>guarantee<sp/>positive<sp/>depth<sp/>on<sp/>&gt;&lt;&gt;<sp/>(fishy)<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1util_1_1demangle_1a7ab5035f9fcd5ff991444088ef4d2329" kindref="member">getNameDivide</ref>(str,<sp/>best,<sp/>o<sp/>+<sp/>1,<sp/>depth<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1util_1_1demangle_1a7ab5035f9fcd5ff991444088ef4d2329" kindref="member">getNameDivide</ref>(str,<sp/>best,<sp/>s<sp/>+<sp/>2,<sp/>depth);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>wee<sp/>bit<sp/>of<sp/>a<sp/>lie..<sp/>eat<sp/>through<sp/>some<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>can<sp/>come<sp/>from<sp/>__PRETTY_PRINT__,<sp/>eg.<sp/>although</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>so<sp/>useful<sp/>to<sp/>include<sp/>in<sp/>this<sp/>use<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1util_1_1demangle_1a3340b0b8740ca544dd263ad3cde28e76" kindref="member">skipTypePrefix</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>str.length()</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>(str[s]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>or<sp/>str[s]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a5e896032f040eedc15e6e6b1397a6bfc" kindref="member">TemplateExtract::getNamespace</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>typestr)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/><ref refid="namespacevt_1_1util_1_1demangle_1a3340b0b8740ca544dd263ad3cde28e76" kindref="member">skipTypePrefix</ref>(typestr);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacevt_1_1util_1_1demangle_1a7ab5035f9fcd5ff991444088ef4d2329" kindref="member">getNameDivide</ref>(typestr,<sp/>s,<sp/>s,<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr.substr(s,<sp/>d<sp/>-<sp/>s);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract_1aa9a0cc82115687324c7e10d0b27f0977" kindref="member">TemplateExtract::getBarename</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>typestr)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/><ref refid="namespacevt_1_1util_1_1demangle_1a3340b0b8740ca544dd263ad3cde28e76" kindref="member">skipTypePrefix</ref>(typestr);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacevt_1_1util_1_1demangle_1a7ab5035f9fcd5ff991444088ef4d2329" kindref="member">getNameDivide</ref>(typestr,<sp/>s,<sp/>s,<sp/>0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr.substr(d,<sp/>2)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>&quot;::&quot;<sp/>divider</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr.substr(d<sp/>+<sp/>2,<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Namespace<sp/>is<sp/>not<sp/>present<sp/>-<sp/>already<sp/>bare.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr.substr(d,<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a7085981a1d4ca05c458affcc2a5ca1cc" kindref="member">TemplateExtract::getVoidFuncStrArgs</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>typestr)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eat<sp/>leading<sp/>&quot;void<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr.find(</highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>typestr.length()<sp/>and<sp/>typestr[s]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>typestr.length()<sp/>and<sp/>typestr[s]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>ending<sp/>&quot;)&quot;;<sp/>length<sp/>&gt;<sp/>0<sp/>due<sp/>to<sp/>find<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr[typestr.length()<sp/>-<sp/>1]<sp/>not_eq<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typestr.substr(s,<sp/>typestr.length()<sp/>-<sp/>s<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DemanglerUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_demangler_utils_1a3c280c288503a3420483e6705cddf5fb" kindref="member">DemanglerUtils::splitString</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delim)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ss.str(str);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>std::string<sp/>item;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>elems;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(ss,<sp/>item,<sp/>delim))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>elems.push_back(item);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elems;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_demangler_utils_1a2e57c8080f9296b2ce137c622718d7bb" kindref="member">DemanglerUtils::removeSpaces</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>std::string<sp/>clean{str};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>clean.erase(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::remove(clean.begin(),<sp/>clean.end(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>clean.end());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clean;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="structvt_1_1util_1_1demangle_1_1_demangler_utils_1a8933d7b4e4995e49e13bb632bec61b50" kindref="member">DemanglerUtils::join</ref>(</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>delim,<sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>strs</highlight></codeline>
<codeline lineno="204"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>strs)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;i<sp/>!=<sp/>&amp;strs[0])<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>delim;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>vt::util::demangle</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/vt/utils/demangle/demangle.cc"/>
  </compounddef>
</doxygen>
