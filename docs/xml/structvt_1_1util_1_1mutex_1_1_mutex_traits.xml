<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1mutex_1_1_mutex_traits" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::mutex::MutexTraits</compoundname>
    <includes refid="mutex__traits_8h" local="no">mutex_traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a820317fa9aa30030a917301d5cd9d58d" prot="public" static="no">
        <type>decltype(U(std::declval&lt; Vs &gt;()...))</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::constructor_t =  decltype(U(std::declval&lt;Vs&gt;()...))</definition>
        <argsstring></argsstring>
        <name>constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="57" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a279a93dab689bf822085a35d3c1f32bc" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a820317fa9aa30030a917301d5cd9d58d" kindref="member">constructor_t</ref>, T &gt;</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::has_constructor =  detection::is_detected&lt;constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="58" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a300c2a638d97f9eb3c63ddd709e422a5" prot="public" static="no">
        <type>decltype(U(std::declval&lt; U const  &amp; &gt;()))</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::copy_constructor_t =  decltype(U(std::declval&lt;U const&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>copy_constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="61" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1abc2f711a1503efeeb8ab0659e5f8a560" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a300c2a638d97f9eb3c63ddd709e422a5" kindref="member">copy_constructor_t</ref>, T &gt;</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::has_copy_constructor =  detection::is_detected&lt;copy_constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_copy_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="62" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1ab7d7468978f0094f267e7f11665fedeb" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().lock())</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::lock_t =  decltype(std::declval&lt;U&gt;().lock())</definition>
        <argsstring></argsstring>
        <name>lock_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="65" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a9fda8e52286ca180edae0c3ba2a0ca5e" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1ab7d7468978f0094f267e7f11665fedeb" kindref="member">lock_t</ref>, T &gt;</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::has_lock =  detection::is_detected&lt;lock_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="66" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a85a0412ba9bfe2c48ee8bd27096050e6" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().unlock())</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::unlock_t =  decltype(std::declval&lt;U&gt;().unlock())</definition>
        <argsstring></argsstring>
        <name>unlock_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="69" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a3713680d5ba4d4c52b5648eb4490abe4" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a85a0412ba9bfe2c48ee8bd27096050e6" kindref="member">unlock_t</ref>, T &gt;</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::has_unlock =  detection::is_detected&lt;unlock_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="70" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a444680f011349740337d02124ac0bdea" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().try_lock())</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::try_lock_t =  decltype(std::declval&lt;U&gt;().try_lock())</definition>
        <argsstring></argsstring>
        <name>try_lock_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="73" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a07dcb11ab208e370364fb650ca014181" prot="public" static="no">
        <type>detection::is_detected_exact&lt; bool, <ref refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a444680f011349740337d02124ac0bdea" kindref="member">try_lock_t</ref>, T &gt;</type>
        <definition>using vt::util::mutex::MutexTraits&lt; T &gt;::has_try_lock =  detection::is_detected_exact&lt;bool, try_lock_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_try_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="74" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1mutex_1_1_mutex_traits_1ac5087e94d2ca61e0cd4049f8c82ff009" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::util::mutex::MutexTraits&lt; T &gt;::is_mutex</definition>
        <argsstring></argsstring>
        <name>is_mutex</name>
        <initializer>=
    
    has_constructor::value and not has_copy_constructor::value and
    
    has_lock::value and has_unlock::value and
    has_try_lock::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/mutex/mutex_traits.h" line="77" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/utils/mutex/mutex_traits.h" line="55" column="1" bodyfile="src/vt/utils/mutex/mutex_traits.h" bodystart="55" bodyend="83"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a820317fa9aa30030a917301d5cd9d58d" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>constructor_t</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a300c2a638d97f9eb3c63ddd709e422a5" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>copy_constructor_t</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a279a93dab689bf822085a35d3c1f32bc" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>has_constructor</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1abc2f711a1503efeeb8ab0659e5f8a560" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>has_copy_constructor</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a9fda8e52286ca180edae0c3ba2a0ca5e" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>has_lock</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a07dcb11ab208e370364fb650ca014181" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>has_try_lock</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a3713680d5ba4d4c52b5648eb4490abe4" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>has_unlock</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1ac5087e94d2ca61e0cd4049f8c82ff009" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>is_mutex</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1ab7d7468978f0094f267e7f11665fedeb" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>lock_t</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a444680f011349740337d02124ac0bdea" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>try_lock_t</name></member>
      <member refid="structvt_1_1util_1_1mutex_1_1_mutex_traits_1a85a0412ba9bfe2c48ee8bd27096050e6" prot="public" virt="non-virtual"><scope>vt::util::mutex::MutexTraits</scope><name>unlock_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
