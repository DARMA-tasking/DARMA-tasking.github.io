<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="scheduler_8md" kind="file" language="Markdown">
    <compoundname>scheduler.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">\page<sp/>scheduler<sp/>Scheduler</highlight></codeline>
<codeline><highlight class="normal">\brief<sp/>General<sp/>scheduling<sp/>of<sp/>work</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>scheduler<sp/>component<sp/>`vt::sched::Scheduler`,<sp/>accessed<sp/>via<sp/>`vt::theSched()`</highlight></codeline>
<codeline><highlight class="normal">holds<sp/>pieces<sp/>of<sp/>work<sp/>to<sp/>execute<sp/>later<sp/>that<sp/>may<sp/>be<sp/>prioritized.<sp/>The<sp/>scheduler</highlight></codeline>
<codeline><highlight class="normal">polls<sp/>the<sp/>\vt<sp/>components<sp/>to<sp/>make<sp/>progress<sp/>and<sp/>collect<sp/>new<sp/>pieces<sp/>of<sp/>work.<sp/>The</highlight></codeline>
<codeline><highlight class="normal">scheduler<sp/>allows<sp/>registration<sp/>of<sp/>callbacks<sp/>when<sp/>the<sp/>system<sp/>is<sp/>idle.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\section<sp/>calls-to-the-scheduler<sp/>Calls<sp/>to<sp/>the<sp/>scheduler</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>advance<sp/>the<sp/>scheduler,<sp/>one<sp/>can<sp/>call<sp/>it<sp/>as<sp/>follows:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal">vt::theSched()-&gt;scheduler();</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>polls<sp/>every<sp/>component<sp/>that<sp/>might<sp/>generate<sp/>or<sp/>complete<sp/>work,<sp/>and<sp/>potentially</highlight></codeline>
<codeline><highlight class="normal">runs<sp/>one<sp/>piece<sp/>of<sp/>available<sp/>work.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\copydoc<sp/>vt::sched::Scheduler::scheduler(bool)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">However,<sp/>if<sp/>the<sp/>scheduler<sp/>needs<sp/>to<sp/>be<sp/>run<sp/>until<sp/>a<sp/>condition<sp/>(or<sp/>set<sp/>of</highlight></codeline>
<codeline><highlight class="normal">conditions)<sp/>is<sp/>met,<sp/>it<sp/>is<sp/>recommended<sp/>that<sp/>`runSchedulerWhile`<sp/>be<sp/>invoked:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\copydoc<sp/>vt::sched::Scheduler::runSchedulerWhile(std::function&lt;bool()&gt;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\section<sp/>higher-level-calls<sp/>Higher-level<sp/>Calls<sp/>to<sp/>Wait<sp/>for<sp/>Completion</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>work<sp/>is<sp/>enclosed<sp/>in<sp/>an<sp/>&quot;epoch&quot;,<sp/>the<sp/>\ref<sp/>term<sp/>can<sp/>be<sp/>used<sp/>to<sp/>track<sp/>its</highlight></codeline>
<codeline><highlight class="normal">distributed<sp/>completion.<sp/>In<sp/>this<sp/>case,<sp/>instead<sp/>of<sp/>calling<sp/>the<sp/>scheduler<sp/>directly,</highlight></codeline>
<codeline><highlight class="normal">built-in<sp/>higher-level<sp/>functions<sp/>can<sp/>be<sp/>used<sp/>to<sp/>advance<sp/>the<sp/>scheduler<sp/>until<sp/>this</highlight></codeline>
<codeline><highlight class="normal">work<sp/>is<sp/>complete/terminated.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>run<sp/>the<sp/>scheduler<sp/>until<sp/>an<sp/>epoch<sp/>terminates,<sp/>call<sp/>the<sp/>following<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal">vt::runSchedulerThrough(my_epoch);</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Or,<sp/>to<sp/>combine<sp/>the<sp/>actual<sp/>enclosed<sp/>work<sp/>with<sp/>the<sp/>call<sp/>to<sp/>wait<sp/>for<sp/>its</highlight></codeline>
<codeline><highlight class="normal">termination,<sp/>use<sp/>the<sp/>following<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal">vt::runInEpochRooted([]{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>work<sp/>to<sp/>do<sp/>on<sp/>a<sp/>single<sp/>node</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>work<sp/>should<sp/>be<sp/>executed<sp/>by<sp/>all<sp/>nodes,<sp/>use<sp/>a<sp/>collective<sp/>epoch::</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal">vt::runInEpochCollective([]{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>work<sp/>to<sp/>do<sp/>on<sp/>all<sp/>nodes</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
    </programlisting>
    <location file="docs/md/scheduler.md"/>
  </compounddef>
</doxygen>
