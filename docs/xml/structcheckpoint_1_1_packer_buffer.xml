<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1_packer_buffer" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::PackerBuffer</compoundname>
    <basecompoundref refid="structcheckpoint_1_1_memory_serializer" prot="public" virt="non-virtual">checkpoint::MemorySerializer</basecompoundref>
    <includes refid="packer_8h" local="no">packer.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>BufferT</declname>
        <defname>BufferT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" prot="public" static="no">
        <type>std::unique_ptr&lt; BufferT &gt;</type>
        <definition>using checkpoint::PackerBuffer&lt; BufferT &gt;::BufferTPtrType =  std::unique_ptr&lt;BufferT&gt;</definition>
        <argsstring></argsstring>
        <name>BufferTPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="59" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_packer_buffer_1ad7b75618e01af437ab75a4099c2cf696" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" kindref="member">BufferTPtrType</ref>, <ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> &gt;</type>
        <definition>using checkpoint::PackerBuffer&lt; BufferT &gt;::PackerReturnType =  std::tuple&lt;BufferTPtrType, SerialSizeType&gt;</definition>
        <argsstring></argsstring>
        <name>PackerReturnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="60" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_packer_buffer_1aac4e52e04c38fd611a6ed75e0d0df0a2" prot="private" static="no" mutable="no">
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const</type>
        <definition>SerialSizeType const checkpoint::PackerBuffer&lt; BufferT &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="73" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_packer_buffer_1ab07bd403ce6f2e644ff92532f9e363cb" prot="private" static="no" mutable="no">
        <type><ref refid="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" kindref="member">BufferTPtrType</ref></type>
        <definition>BufferTPtrType checkpoint::PackerBuffer&lt; BufferT &gt;::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="76" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1abd97aedeba81d8570fa047f3efb4220d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>checkpoint::PackerBuffer&lt; BufferT &gt;::PackerBuffer</definition>
        <argsstring>(SerialSizeType const &amp;in_size)</argsstring>
        <name>PackerBuffer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const &amp;</type>
          <declname>in_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="62" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.impl.h" bodystart="57" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1a4bdbbf8f84eb065c5c0b02d39a480308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>checkpoint::PackerBuffer&lt; BufferT &gt;::PackerBuffer</definition>
        <argsstring>(SerialSizeType const &amp;in_size, BufferTPtrType buf_ptr)</argsstring>
        <name>PackerBuffer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const &amp;</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type><ref refid="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" kindref="member">BufferTPtrType</ref></type>
          <declname>buf_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="63" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.impl.h" bodystart="72" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1aded90d4aacc6376a95579d249751496d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>checkpoint::PackerBuffer&lt; BufferT &gt;::PackerBuffer</definition>
        <argsstring>(SerialSizeType const &amp;in_size, Args &amp;&amp;... args)</argsstring>
        <name>PackerBuffer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const &amp;</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="66" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.impl.h" bodystart="89" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1aa8bf2d721f834a607a48164086aec078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::PackerBuffer&lt; BufferT &gt;::contiguousBytes</definition>
        <argsstring>(void *ptr, SerialSizeType size, SerialSizeType num_elms)</argsstring>
        <name>contiguousBytes</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="68" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.impl.h" bodystart="114" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1abc144f3a5d61a7eb886bd57241e7ed7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" kindref="member">BufferTPtrType</ref></type>
        <definition>PackerBuffer&lt; BufferT &gt;::BufferTPtrType checkpoint::PackerBuffer&lt; BufferT &gt;::extractPackedBuffer</definition>
        <argsstring>()</argsstring>
        <name>extractPackedBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="69" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.impl.h" bodystart="107" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2722">
        <label>checkpoint::Serializer</label>
        <link refid="structcheckpoint_1_1_serializer"/>
      </node>
      <node id="2720">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="2721" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2721">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="2722" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2725">
        <label>checkpoint::Serializer</label>
        <link refid="structcheckpoint_1_1_serializer"/>
      </node>
      <node id="2723">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="2724" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2724">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="2725" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="58" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="58" bodyend="77"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializer_1a52cd27806c3b821605d723900ec7d2e5" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1ab07bd403ce6f2e644ff92532f9e363cb" prot="private" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>buffer_</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>BufferTPtrType</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1aa8bf2d721f834a607a48164086aec078" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>contiguousBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af2f453fc63424918a16ea6024d576a3e" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a805ae9ce395614512dfb6b0bd2c22881" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1ab1f121effff21997447187346bbd8237" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>cur_</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a89a1f207ad5ff75654cb6d48f432be37" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>cur_mode_</name></member>
      <member refid="structcheckpoint_1_1_serializer_1ad8effc5884f1ed37b6b4507422f6d72c" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1abc144f3a5d61a7eb886bd57241e7ed7e" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>extractPackedBuffer</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a075fce46e6d6bcfef43591cf26498d70" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a2b22a87a81fb9ff1b00dd96bbe4debe2" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a1c6b21009223b371ec79d679448f8319" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a449eb24e2136febd621983d26e21a4ed" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>initializeBuffer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a01f395bfaa39a8311925c71537877378" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_serializer_1aee9d2701f508fff94bad836576443cd9" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a27e3304ca8c9de113675b7692e5aa65f" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a3a09ea026ff2c6ddf863f9c1a6463466" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af45e225cdb3a750a06de80a8cd5c6c37" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a9c748be7a41c032f2a33fbdc0dbd3611" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>MemorySerializer</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1ae1532a75ce6849ad1f1ceb7a379e56da" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>MemorySerializer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a4c307e2592dc4224d8a13148109c5764" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1abd97aedeba81d8570fa047f3efb4220d" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1a4bdbbf8f84eb065c5c0b02d39a480308" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1aded90d4aacc6376a95579d249751496d" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1ad7b75618e01af437ab75a4099c2cf696" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerReturnType</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a4007a463384ec96a4c21bd7f049f0be5" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>Serializer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af57d7cd51e94dd44a5be184456c2d59f" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1aac4e52e04c38fd611a6ed75e0d0df0a2" prot="private" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>size_</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a6285e7e9821a996f6da9f2e6e59b00c2" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>start_</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a46ef3c0da77d80853882a7cad641c2af" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>virtual_disabled_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
