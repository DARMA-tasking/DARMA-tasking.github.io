<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1_collection_manager" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::CollectionManager</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; CollectionManager &gt;</basecompoundref>
    <includes refid="vrt_2collection_2manager_8h" local="no">manager.h</includes>
    <innerclass refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1_1_restore_migrate_col_msg" prot="public">vt::vrt::collection::CollectionManager::RestoreMigrateColMsg</innerclass>
    <innerclass refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1_1_restore_migrate_msg" prot="public">vt::vrt::collection::CollectionManager::RestoreMigrateMsg</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47b420577805c257189257eb05516953" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1vrt_1_1collection_1_1_holder" kindref="compound">Holder</ref>&lt; IndexT &gt;::<ref refid="structvt_1_1vrt_1_1collection_1_1_collection" kindref="compound">Collection</ref></type>
        <definition>using vt::vrt::collection::CollectionManager::CollectionType =  typename Holder&lt;IndexT&gt;::Collection</definition>
        <argsstring></argsstring>
        <name>CollectionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="107" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1vrt_1_1collection_1_1_holder" kindref="compound">Holder</ref>&lt; IndexT &gt;::<ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" kindref="member">VirtualPtrType</ref></type>
        <definition>using vt::vrt::collection::CollectionManager::VirtualPtrType =  typename Holder&lt;IndexT&gt;::VirtualPtrType</definition>
        <argsstring></argsstring>
        <name>VirtualPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="109" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a98a759caf144277dcd341cdbd5538f59" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>)&gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::ActionProxyType =  std::function&lt;void(VirtualProxyType)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionProxyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="110" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47a3227ae0195c15187e8dc8762f66c4" prot="public" static="no">
        <type>std::function&lt; bool(IndexT const  &amp;)&gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::ReduceIdxFuncType =  std::function&lt;bool(IndexT const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>ReduceIdxFuncType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="112" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" prot="public" static="no">
        <type><ref refid="namespacevt_1_1collective_1_1reduce_1a7b7cb3021ac5654d92825d9fab0250b2" kindref="member">collective::reduce::ReduceStamp</ref></type>
        <definition>using vt::vrt::collection::CollectionManager::ReduceStamp =  collective::reduce::ReduceStamp</definition>
        <argsstring></argsstring>
        <name>ReduceStamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="113" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a536805fb5c58b557b66e7d7febe87567" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a98a759caf144277dcd341cdbd5538f59" kindref="member">ActionProxyType</ref> &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::ActionContainerType =  std::vector&lt;ActionProxyType&gt;</definition>
        <argsstring></argsstring>
        <name>ActionContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="114" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7b32db0e6ccafa771ddd72f534a1cf8c" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>, <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a536805fb5c58b557b66e7d7febe87567" kindref="member">ActionContainerType</ref> &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::BufferedActionType =  std::unordered_map&lt; VirtualProxyType, ActionContainerType &gt;</definition>
        <argsstring></argsstring>
        <name>BufferedActionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="115" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_proxy" kindref="compound">CollectionProxy</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::CollectionProxyWrapType =  CollectionProxy&lt;ColT,IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionProxyWrapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="119" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a95c122e5b83bc51c306c9367b8e62c07" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::CleanupFnType =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>CleanupFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="120" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a735e54bc5a8646536d07750e2549a156" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>, std::list&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a95c122e5b83bc51c306c9367b8e62c07" kindref="member">CleanupFnType</ref> &gt; &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::CleanupListFnType =  std::unordered_map&lt;VirtualProxyType,std::list&lt;CleanupFnType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>CleanupListFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="121" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0cfe02a0426e95ec9daa2ef7374e07c7" prot="public" static="no">
        <type><ref refid="namespacevt_1_1auto__registry_1ae295e18699146815bb7d7674594d95d7" kindref="member">auto_registry::AutoHandlerType</ref></type>
        <definition>using vt::vrt::collection::CollectionManager::DispatchHandlerType =  auto_registry::AutoHandlerType</definition>
        <argsstring></argsstring>
        <name>DispatchHandlerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="122" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9ef5ab71e344fdee8525c3f18241c305" prot="public" static="no">
        <type>std::function&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" kindref="member">VirtualPtrType</ref>&lt; IndexT &gt;(IndexT idx)&gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::DistribConstructFn =  std::function&lt;VirtualPtrType&lt;IndexT&gt;(IndexT idx)&gt;</definition>
        <argsstring></argsstring>
        <name>DistribConstructFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="125" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" prot="public" static="no">
        <type>std::enable_if_t&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_col_msg_traits" kindref="compound">ColMsgTraits</ref>&lt; T &gt;::is_coll_msg, <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref> &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::IsColMsgType =  std::enable_if_t&lt;ColMsgTraits&lt;T&gt;::is_coll_msg, messaging::PendingSend&gt;</definition>
        <argsstring></argsstring>
        <name>IsColMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="128" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" prot="public" static="no">
        <type>std::enable_if_t&lt;!<ref refid="structvt_1_1vrt_1_1collection_1_1_col_msg_traits" kindref="compound">ColMsgTraits</ref>&lt; T &gt;::is_coll_msg, <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref> &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::IsNotColMsgType =  std::enable_if_t&lt;!ColMsgTraits&lt;T&gt;::is_coll_msg, messaging::PendingSend&gt;</definition>
        <argsstring></argsstring>
        <name>IsNotColMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="130" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af8091fcb8218dad155ea028c9b5d283f" prot="public" static="no">
        <type>std::enable_if_t&lt; std::is_default_constructible&lt; ColT &gt;::value, <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, IndexT &gt; &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::IsDefaultConstructableType =  std::enable_if_t&lt; std::is_default_constructible&lt;ColT&gt;::value, CollectionProxyWrapType&lt;ColT, IndexT&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>IsDefaultConstructableType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="133" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a1f91c97ed52237c3a3576dfbbe87c8f8" prot="public" static="no">
        <type>std::enable_if_t&lt; std::is_same&lt; T, <ref refid="structvt_1_1vrt_1_1collection_1_1_col_msg_wrap" kindref="compound">ColMsgWrap</ref>&lt; ColT, UserMsgT &gt; &gt;::value, U &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::IsWrapType =  std::enable_if_t&lt; std::is_same&lt;T,ColMsgWrap&lt;ColT,UserMsgT&gt; &gt;::value,U &gt;</definition>
        <argsstring></argsstring>
        <name>IsWrapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="138" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a18e3a17d9eb086c6c2f499242b7faa1e" prot="public" static="no">
        <type>std::enable_if_t&lt; !std::is_same&lt; T, <ref refid="structvt_1_1vrt_1_1collection_1_1_col_msg_wrap" kindref="compound">ColMsgWrap</ref>&lt; ColT, UserMsgT &gt; &gt;::value, U &gt;</type>
        <definition>using vt::vrt::collection::CollectionManager::IsNotWrapType =  std::enable_if_t&lt; !std::is_same&lt;T,ColMsgWrap&lt;ColT,UserMsgT&gt; &gt;::value,U &gt;</definition>
        <argsstring></argsstring>
        <name>IsNotWrapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="142" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aafd1972e5767dec26c8872f4aafa6864" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct CollectionElmAttorney</definition>
        <argsstring></argsstring>
        <name>CollectionElmAttorney</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1536" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a4089cdff4218109fffb5884f51244a6e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct CollectionElmDestroyAttorney</definition>
        <argsstring></argsstring>
        <name>CollectionElmDestroyAttorney</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1539" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3327134906c684111aa2604d0b68b2f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct balance::CollectionLBData</definition>
        <argsstring></argsstring>
        <name>balance::CollectionLBData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1541" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad7473f6d171ebb8fb5307d93902ae9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct elm::ElementLBData</definition>
        <argsstring></argsstring>
        <name>elm::ElementLBData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1542" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae36dc42a5f1469dbe9c49bdce96beae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct ctx::LBData</definition>
        <argsstring></argsstring>
        <name>ctx::LBData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1543" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad0b203d69106aa09d916dda269d0604d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct param::ConstructParams</definition>
        <argsstring></argsstring>
        <name>param::ConstructParams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1546" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a5123370561fb8eb70ef7c4979e051706" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a735e54bc5a8646536d07750e2549a156" kindref="member">CleanupListFnType</ref></type>
        <definition>CleanupListFnType vt::vrt::collection::CollectionManager::cleanup_fns_</definition>
        <argsstring></argsstring>
        <name>cleanup_fns_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1863" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a74d57793e49293319bf649cfa2c06bcf" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref> &gt;</type>
        <definition>std::unordered_map&lt;VirtualProxyType,ActionType&gt; vt::vrt::collection::CollectionManager::collect_lb_data_for_lb_</definition>
        <argsstring></argsstring>
        <name>collect_lb_data_for_lb_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1864" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a42ea6d7733a75f09738a877e90db9aa1" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref> &gt;</type>
        <definition>std::unordered_map&lt;VirtualProxyType,ActionType&gt; vt::vrt::collection::CollectionManager::release_lb_</definition>
        <argsstring></argsstring>
        <name>release_lb_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1865" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ace73d30a3cdd56b3c68c81265bf95020" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1vrt_1a84d0891f52f70728c3fc2172cffb464b" kindref="member">VirtualIDType</ref></type>
        <definition>VirtualIDType vt::vrt::collection::CollectionManager::next_collective_id_</definition>
        <argsstring></argsstring>
        <name>next_collective_id_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1866" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a6604b40c9e592d0bf0ff94ccfe156911" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1vrt_1a84d0891f52f70728c3fc2172cffb464b" kindref="member">VirtualIDType</ref></type>
        <definition>VirtualIDType vt::vrt::collection::CollectionManager::next_rooted_id_</definition>
        <argsstring></argsstring>
        <name>next_rooted_id_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1867" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a25a7c464bb729079cc0a33cbe4bc4f15" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_typeless_holder" kindref="compound">TypelessHolder</ref></type>
        <definition>TypelessHolder vt::vrt::collection::CollectionManager::typeless_holder_</definition>
        <argsstring></argsstring>
        <name>typeless_holder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1868" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a482e89c4b14bc1acfab1f23e3dfafbf2" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref>, <ref refid="namespacevt_1a3063d4db3b879d6dd2c7b8d50995c7f6" kindref="member">SequentialIDType</ref> &gt;</type>
        <definition>std::unordered_map&lt;VirtualProxyType, SequentialIDType&gt; vt::vrt::collection::CollectionManager::reduce_stamp_</definition>
        <argsstring></argsstring>
        <name>reduce_stamp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1869" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1869" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad6c6c75f1f54ae5470847311256ae8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vrt::collection::CollectionManager::CollectionManager</definition>
        <argsstring>()</argsstring>
        <name>CollectionManager</name>
        <briefdescription>
<para>System call to construct a collection manager. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="149" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aea0c10371b37041bcc855eef0c767b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::vrt::collection::CollectionManager::~CollectionManager</definition>
        <argsstring>()</argsstring>
        <name>~CollectionManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="151" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac71095016a20dd9607f2f937bf35305e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::startup</definition>
        <argsstring>() override</argsstring>
        <name>startup</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2">startup</reimplements>
        <briefdescription>
<para>Empty default overridden startup method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="153" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="62" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afafcdbf36f42835471218b654252031c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959">finalize</reimplements>
        <briefdescription>
<para>Empty default overridden finalize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="155" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af7cc4c83ae2792595eee99a3206ed633" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::vrt::collection::CollectionManager::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="157" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7d98e5aaa63d70cbabfbcf78a6cf503f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::cleanupAll</definition>
        <argsstring>()</argsstring>
        <name>cleanupAll</name>
        <briefdescription>
<para>Trigger cleanup lambdas<mdash/>triggered when termination occurs. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="164" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="98" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a71865b0508bab58b6d44b44416f11983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::destroyCollections</definition>
        <argsstring>()</argsstring>
        <name>destroyCollections</name>
        <briefdescription>
<para>Destroy all collections. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="170" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac9e0c4bfb1865ebb014ca0dc4b9006f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt; ColT, typename ColT::IndexType &gt; vt::vrt::collection::CollectionManager::constructMap</definition>
        <argsstring>(typename ColT::IndexType range, HandlerType const map, std::string const &amp;label={})</argsstring>
        <name>constructMap</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>map</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new virtual context collection with an explicit, pre-registered map handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map</parametername>
</parameternamelist>
<parameterdescription>
<para>pre-registered map handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="184" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1463" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a779338baed0f13c1e96b498560db9cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1mapping_1ad7c0812428b339edd904a865e0080ecd" kindref="member">mapping::ActiveMapTypedFnType</ref>&lt; typename ColT::IndexType &gt;</type>
            <declname>fn</declname>
            <defname>fn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt; ColT, typename ColT::IndexType &gt; vt::vrt::collection::CollectionManager::construct</definition>
        <argsstring>(typename ColT::IndexType range, std::string const &amp;label={})</argsstring>
        <name>construct</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new virtual context collection with templated map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="201" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1453" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a14e19098a1e676d5229fc00a2f0cc133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt; ColT, typename ColT::IndexType &gt; vt::vrt::collection::CollectionManager::construct</definition>
        <argsstring>(typename ColT::IndexType range, std::string const &amp;label={})</argsstring>
        <name>construct</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new virtual context collection using the default map for the given index. </para>        </briefdescription>
        <detaileddescription>
<para>The default map is found by looking up the <computeroutput>vrt::collection::DefaultMap&lt;...&gt;</computeroutput> specialization on the Index type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="219" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1442" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9df5c1771c8112c60e45d57d5c530ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1mapping_1ad7c0812428b339edd904a865e0080ecd" kindref="member">mapping::ActiveMapTypedFnType</ref>&lt; typename ColT::IndexType &gt;</type>
            <declname>fn</declname>
            <defname>fn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af8091fcb8218dad155ea028c9b5d283f" kindref="member">IsDefaultConstructableType</ref>&lt; ColT &gt;</type>
        <definition>IsDefaultConstructableType&lt;ColT&gt; vt::vrt::collection::CollectionManager::constructCollective</definition>
        <argsstring>(typename ColT::IndexType range, std::string const &amp;label={})</argsstring>
        <name>constructCollective</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Collectively construct a new virtual context collection with templated map. </para>        </briefdescription>
        <detaileddescription>
<para>Construct virtual context collection with an explicit map. This construct method enables distributed SPMD construction of the virtual context collection where each index is mapped with the <computeroutput>MapFnT</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a29a9ac1bd384ac328bb149212676b751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1mapping_1ad7c0812428b339edd904a865e0080ecd" kindref="member">mapping::ActiveMapTypedFnType</ref>&lt; typename ColT::IndexType &gt;</type>
            <declname>fn</declname>
            <defname>fn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
        <definition>CollectionProxyWrapType&lt;ColT&gt; vt::vrt::collection::CollectionManager::constructCollective</definition>
        <argsstring>(typename ColT::IndexType range, DistribConstructFn&lt; ColT &gt; cons_fn, std::string const &amp;label={})</argsstring>
        <name>constructCollective</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9ef5ab71e344fdee8525c3f18241c305" kindref="member">DistribConstructFn</ref>&lt; ColT &gt;</type>
          <declname>cons_fn</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Collectively construct a new virtual context collection with templated map. </para>        </briefdescription>
        <detaileddescription>
<para>Construct virtual context collection with an explicit map. This construct method enables distributed SPMD construction of the virtual context collection using the <computeroutput>DistribConstructFn</computeroutput>. The system will invoke that function for every index in the system based on the where each index is mapped with the <computeroutput>MapFnT</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cons_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>construct function to create an element on each node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2dcf5a95489eee7ec79fc1ffdd528db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af8091fcb8218dad155ea028c9b5d283f" kindref="member">IsDefaultConstructableType</ref>&lt; ColT &gt;</type>
        <definition>CollectionManager::IsDefaultConstructableType&lt; ColT &gt; vt::vrt::collection::CollectionManager::constructCollective</definition>
        <argsstring>(typename ColT::IndexType range, std::string const &amp;label={})</argsstring>
        <name>constructCollective</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Collectively construct a new virtual context collection with the default map. </para>        </briefdescription>
        <detaileddescription>
<para>Construct virtual context collection with the default map. This construct method enables distributed SPMD construction of the virtual context collection where each index is mapped with the default mapping function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="281" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1291" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9888879eab5c8d6d151f91aa4de0aadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt; ColT &gt; vt::vrt::collection::CollectionManager::constructCollective</definition>
        <argsstring>(typename ColT::IndexType range, DistribConstructFn&lt; ColT &gt; cons_fn, std::string const &amp;label={})</argsstring>
        <name>constructCollective</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9ef5ab71e344fdee8525c3f18241c305" kindref="member">DistribConstructFn</ref>&lt; ColT &gt;</type>
          <declname>cons_fn</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Collectively construct a new virtual context collection with the default map. </para>        </briefdescription>
        <detaileddescription>
<para>Construct virtual context collection with the default map. This construct method enables distributed SPMD construction of the virtual context collection using the <computeroutput>DistribConstructFn</computeroutput>. The system will invoke that function for every index in the system based on the where each index is mapped with the default mapping function for this index type selected.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cons_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>construct function to create an element on each node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="302" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1301" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9b78bd325f19c36907e681e83bbd9398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt; ColT &gt; vt::vrt::collection::CollectionManager::constructCollectiveMap</definition>
        <argsstring>(typename ColT::IndexType range, DistribConstructFn&lt; ColT &gt; cons_fn, HandlerType const map_hanm, std::string const &amp;label={})</argsstring>
        <name>constructCollectiveMap</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9ef5ab71e344fdee8525c3f18241c305" kindref="member">DistribConstructFn</ref>&lt; ColT &gt;</type>
          <declname>cons_fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>map_hanm</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Collectively construct a new virtual context collection with a pre-registered map function. </para>        </briefdescription>
        <detaileddescription>
<para>Construct virtual context collection with a pre-registered map function handler. This construct method enables distributed SPMD construction of the virtual context collection using the <computeroutput>DistribConstructFn</computeroutput>. The system will invoke that function for every index in the system based on the where each index is mapped with the registered map function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>index range for the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cons_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>construct function to create an element on each node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map_han</parametername>
</parameternamelist>
<parameterdescription>
<para>the registered map function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>collection label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="325" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1337" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac8c171d221c1c6eafe4efee35775e48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::insertMetaCollection</definition>
        <argsstring>(std::string const &amp;label, VirtualProxyType const proxy, Args &amp;&amp;... inner_holder_args)</argsstring>
        <name>insertMetaCollection</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>inner_holder_args</declname>
        </param>
        <briefdescription>
<para>Insert meta-data for this collection on this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection label </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inner_holder_args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to construct the inner holder </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
<para>Type-erase some lambdas for doing the collective broadcast that collects up the LB data on each node for each collection element</para>        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="354" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1384" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac0682938bc90285eb8c476d6898bf280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
        <definition>VirtualProxyType vt::vrt::collection::CollectionManager::makeCollectionProxy</definition>
        <argsstring>(bool is_collective, bool is_migratable)</argsstring>
        <name>makeCollectionProxy</name>
        <param>
          <type>bool</type>
          <declname>is_collective</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_migratable</declname>
        </param>
        <briefdescription>
<para>Make the next collection proxy. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_collective</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the collection is collective </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_migratable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the collection is migratable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the collection proxy bits </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="366" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="98" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a526e4c6aca18333f508e34a24cabc712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::constructGroup</definition>
        <argsstring>(VirtualProxyType const &amp;proxy)</argsstring>
        <name>constructGroup</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Construct a group for the collection. </para>        </briefdescription>
        <detaileddescription>
<para>must be called for every collection before any reductions can safely complete. If the collection spans all node, this will fire a lambda that tells the system that the <computeroutput>default_group</computeroutput> can be used for broadcasts and reductions. Broadcasts are always valid to run (unless the group expands after LB) because it will just hit extra nodes that may not have elements.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="407" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1420" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a6411b315ab0a4bfa0293db456077d5cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
            <defval>typename MsgT::CollectionType</defval>
          </param>
          <param>
            <type>typename IdxT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::sendMsgUntypedHandler</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler, bool imm_context=true)</argsstring>
        <name>sendMsgUntypedHandler</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>imm_context</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Send a message to a collection element with handler type erased. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to run </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">imm_context</parametername>
</parameternamelist>
<parameterdescription>
<para>whether in an immediate context (running a collection element handler vs. directly in the scheduler)<mdash/> if in a handler, local delivery must be postponed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="427" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1149" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae3ae6f30c8b4aa2c8b50494127cbd77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" kindref="member">IsNotColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsNotColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::sendMsgWithHan</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler)</argsstring>
        <name>sendMsgWithHan</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Send a message to a collection element when not using a collection message. </para>        </briefdescription>
        <detaileddescription>
<para>overload will wrap the message in a <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">CollectionMessage&lt;ColT&gt;</ref> to hold the index meta-data for the collection send.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to run </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="444" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1045" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a6b95df3e94665b5ec8a2c1a186f4ca30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" kindref="member">IsColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::sendMsgWithHan</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler)</argsstring>
        <name>sendMsgWithHan</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Send a message to a collection element when using a collection message. </para>        </briefdescription>
        <detaileddescription>
<para>overload will directly send the message without promotion</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to run </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="460" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1053" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a706ce2445fae153c075d3c20f2063507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::sendNormalMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler)</argsstring>
        <name>sendNormalMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Send a normal message to a collection element with handler type-erased. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to run</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="476" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1062" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3165b258fab15c35985b3f9b8ef0dbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::sendMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send collection element a message from active function handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="492" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1075" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3165b258fab15c35985b3f9b8ef0dbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::sendMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send collection element a message from active member handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a55777b57bfad6c9d87d946ed773a391d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" kindref="member">IsColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::sendMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send collection element a message from active function handler with a proper <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">CollectionMessage&lt;ColT&gt;</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="522" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1095" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a4f87f7f738cde8d48c9c18d16cc06166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" kindref="member">IsNotColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsNotColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::sendMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send collection element a message from active function handler with a non-collection message, doing a promotion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="536" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1103" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3ea2d130487c02b8dbda05b7befda88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" kindref="member">IsColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>IsColMsgType&lt;MsgT&gt; vt::vrt::collection::CollectionManager::sendMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send collection element a message from active member handler with a proper <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">CollectionMessage&lt;ColT&gt;</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a229f96a5075562ee92743d69fc285254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" kindref="member">IsNotColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>IsNotColMsgType&lt;MsgT&gt; vt::vrt::collection::CollectionManager::sendMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send collection element a message from active member handler with a non-collection message, doing a promotion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afc14691c6992cc5d7e51118b1386b67c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::sendMsgImpl</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send a collection element a message with active function handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="586" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1130" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afc14691c6992cc5d7e51118b1386b67c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::sendMsgImpl</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgT *msg)</argsstring>
        <name>sendMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send a collection element a message with active member handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9d331187028f310c694484da63c1a19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>Type</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1util_1ae9a553985cdc8e9bd4e55f55161f2929" kindref="member">util::Copyable</ref>&lt; Type &gt;</type>
        <definition>util::Copyable&lt; Type &gt; vt::vrt::collection::CollectionManager::invoke</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, Args... args)</argsstring>
        <name>invoke</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke function &apos;f&apos; (with copyable return type) inline without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>function params </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="676" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="465" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a59aa10550f9e2fb5f72ba3706cf363df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>Type</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1util_1a0760a3963341a602dfe2dfc42d78c867" kindref="member">util::NotCopyable</ref>&lt; Type &gt;</type>
        <definition>util::NotCopyable&lt; Type &gt; vt::vrt::collection::CollectionManager::invoke</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, Args... args)</argsstring>
        <name>invoke</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke function &apos;f&apos; (with non-copyable return type) inline without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>function params </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="687" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="485" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a8337be1c3c829e429f9758664ac284c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>Type</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1util_1a97df3e28837417537b3bc035c74f064d" kindref="member">util::IsVoidReturn</ref>&lt; Type &gt;</type>
        <definition>util::IsVoidReturn&lt; Type &gt; vt::vrt::collection::CollectionManager::invoke</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, Args... args)</argsstring>
        <name>invoke</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke function &apos;f&apos; (with void return type) inline without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>function params </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="698" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="506" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aecbe91648c89bff4635fbd782ccd458a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::invokeCollectiveMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, messaging::MsgPtrThief&lt; MsgT &gt; msg)</argsstring>
        <name>invokeCollectiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">messaging::MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Invoke message action function handler without going through scheduler for all elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the whole collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the msg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="710" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="422" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aecbe91648c89bff4635fbd782ccd458a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::invokeCollectiveMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, messaging::MsgPtrThief&lt; MsgT &gt; msg)</argsstring>
        <name>invokeCollectiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">messaging::MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Invoke message action function handler without going through scheduler for all elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the whole collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the msg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1accc84ffa2eb3851892143aad927dd799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::invokeMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, messaging::MsgPtrThief&lt; MsgT &gt; msg, bool instrument=true)</argsstring>
        <name>invokeMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">messaging::MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Invoke message action function handler without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="742" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="525" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1accc84ffa2eb3851892143aad927dd799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::invokeMsg</definition>
        <argsstring>(VirtualElmProxyType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, messaging::MsgPtrThief&lt; MsgT &gt; msg, bool instrument=true)</argsstring>
        <name>invokeMsg</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">messaging::MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Invoke message action member handler without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1abaf663e12552109d1af87d8c9a82ce25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::invokeMsgImpl</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy, MsgSharedPtr&lt; MsgT &gt; msg, bool instrument)</argsstring>
        <name>invokeMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
        </param>
        <briefdescription>
<para>Invoke message handler without going through scheduler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message with the virtual handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="773" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="560" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2ac056928e39edf125420e1113cde2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::reduceMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *const msg, ReduceStamp stamp=ReduceStamp{}, NodeType root_node=uninitialized_destination)</argsstring>
        <name>reduceMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" kindref="member">ReduceStamp</ref></type>
          <declname>stamp</declname>
          <defval><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" kindref="member">ReduceStamp</ref>{}</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>root_node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
<para>Reduce over a collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stamp</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce stamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root_node</parametername>
</parameternamelist>
<parameterdescription>
<para>node to receive the ultimately reduced message and run the associated handler (if a callback is specified on a particular node, the root will run the handler that triggers the callback at the appropriate location)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a PendingSend corresponding to the reduce </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="792" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1019" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47fe848e9c16d55bcefcbfeefa6b5597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::reduceMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *const msg, ReduceStamp stamp, typename ColT::IndexType const &amp;idx)</argsstring>
        <name>reduceMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" kindref="member">ReduceStamp</ref></type>
          <declname>stamp</declname>
        </param>
        <param>
          <type>typename ColT::IndexType const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Reduce over a collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stamp</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce stamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of collection element being reduced</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a PendingSend corresponding to the reduce </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="809" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1027" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a784c4fa10de6571dacfb587af3c90cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::reduceMsgExpr</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *const msg, ReduceIdxFuncType&lt; typename ColT::IndexType &gt; expr_fn, ReduceStamp stamp=ReduceStamp{}, NodeType root_node=uninitialized_destination)</argsstring>
        <name>reduceMsgExpr</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47a3227ae0195c15187e8dc8762f66c4" kindref="member">ReduceIdxFuncType</ref>&lt; typename ColT::IndexType &gt;</type>
          <declname>expr_fn</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" kindref="member">ReduceStamp</ref></type>
          <declname>stamp</declname>
          <defval><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" kindref="member">ReduceStamp</ref>{}</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>root_node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
<para>Reduce over the whole collection or a subset of a collection, based on their indices matching an expression. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">expr_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>expression function to pick indices </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stamp</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce stamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root_node</parametername>
</parameternamelist>
<parameterdescription>
<para>node to receive the ultimately reduced message and run the associated handler (if a callback is specified on a particular node, the root will run the handler that triggers the callback at the appropriate location)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a PendingSend corresponding to the reduce </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="830" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="945" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae05bc119a4986a39e957c1f8e93eb079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::reduceMsgExpr</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *const msg, ReduceIdxFuncType&lt; typename ColT::IndexType &gt; expr_fn, ReduceStamp stamp, typename ColT::IndexType const &amp;idx)</argsstring>
        <name>reduceMsgExpr</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47a3227ae0195c15187e8dc8762f66c4" kindref="member">ReduceIdxFuncType</ref>&lt; typename ColT::IndexType &gt;</type>
          <declname>expr_fn</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" kindref="member">ReduceStamp</ref></type>
          <declname>stamp</declname>
        </param>
        <param>
          <type>typename ColT::IndexType const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Reduce over the whole collection or a subset of a collection, based on their indices matching an expression. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">expr_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>expression function to pick indices </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stamp</parametername>
</parameternamelist>
<parameterdescription>
<para>the reduce stamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of collection element being reduced</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a PendingSend corresponding to the reduce </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="850" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1035" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3b84dab30f231cc9a266ff323340f17e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" kindref="member">IsNotColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsNotColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::broadcastMsgWithHan</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler, bool instrument=true)</argsstring>
        <name>broadcastMsgWithHan</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast to collection with a promoted message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="866" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="848" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a17e6a23d781779e9d0e4fe068f73ac90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" kindref="member">IsColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::broadcastMsgWithHan</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler, bool instrument=true)</argsstring>
        <name>broadcastMsgWithHan</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast to collection with a collection message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="881" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="839" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aa10f6bc4c1b886b78b22e0c9ca3805ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastNormalMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler, bool instrument=true)</argsstring>
        <name>broadcastNormalMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a normal message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="898" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="856" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3a0ce58242fe4a9f18ca105ba9d9e8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IdxT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastMsgUntypedHandler</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT, IdxT &gt; const &amp;proxy, MsgT *msg, HandlerType const handler, bool instrument)</argsstring>
        <name>broadcastMsgUntypedHandler</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, IdxT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
        </param>
        <briefdescription>
<para>Broadcast a message with type-erased handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="915" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="867" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae119b6f5097f722c4e965c9c1203943c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastCollectiveMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, messaging::MsgPtrThief&lt; MsgT &gt; msg, bool instrument=true)</argsstring>
        <name>broadcastCollectiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">messaging::MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast collective a message with action function handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="935" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="693" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae119b6f5097f722c4e965c9c1203943c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastCollectiveMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, messaging::MsgPtrThief&lt; MsgT &gt; msg, bool instrument=true)</argsstring>
        <name>broadcastCollectiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">messaging::MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast collective a message with action member handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="954" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aae2f8d1ebc378183074c3572894c7ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastCollectiveMsgImpl</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgPtr&lt; MsgT &gt; &amp;msg, bool instrument)</argsstring>
        <name>broadcastCollectiveMsgImpl</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
        </param>
        <briefdescription>
<para>Broadcast collective a message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="969" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="724" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9cadcebd1d7c26512091f9624a23a02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with action function handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="987" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="758" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9cadcebd1d7c26512091f9624a23a02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, typename MsgT::CollectionType &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; typename MsgT::CollectionType &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; typename MsgT::CollectionType &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with action member handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1006" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2ea2ea93c25a438f0b9b6af390ef0881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" kindref="member">IsColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::broadcastMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with action function handler with collection message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1023" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="780" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0aa73c7acf95f668330d9c31ce12b581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" kindref="member">IsNotColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>CollectionManager::IsNotColMsgType&lt; MsgT &gt; vt::vrt::collection::CollectionManager::broadcastMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with action function handler with normal message promoted automatically to <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">CollectionMessage&lt;ColT&gt;</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1040" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="788" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a5ec1684e67f1e5aec6b94cdcf17e5777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" kindref="member">IsColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>IsColMsgType&lt;MsgT&gt; vt::vrt::collection::CollectionManager::broadcastMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with action member handler with collection message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1061" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a42cfab20eec557ba82f70d90afa3e7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" kindref="member">IsNotColMsgType</ref>&lt; MsgT &gt;</type>
        <definition>IsNotColMsgType&lt;MsgT&gt; vt::vrt::collection::CollectionManager::broadcastMsg</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with action member handler with normal message promoted automatically to <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">CollectionMessage&lt;ColT&gt;</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac7a9c72784d76ddf0346926bbb147e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastMsgImpl</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsgImpl</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with active function handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1098" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="821" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac7a9c72784d76ddf0346926bbb147e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastMsgImpl</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, MsgT *msg, bool instrument=true)</argsstring>
        <name>broadcastMsgImpl</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>instrument</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with active member handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instrument</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to instrument the broadcast for load balancing (some system calls use this to disable instrumentation)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a53567bdf285983b92dd4094721f8a4fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::broadcastFromRoot</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>broadcastFromRoot</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Bounce broadcast off of the root node to stamp them to avoid multiple delivery during migrations. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1132" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="640" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ab672ad6c3bc9fdc5a9577a9ae0677d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0cfe02a0426e95ec9daa2ef7374e07c7" kindref="member">DispatchHandlerType</ref></type>
        <definition>CollectionManager::DispatchHandlerType vt::vrt::collection::CollectionManager::getDispatchHandler</definition>
        <argsstring>()</argsstring>
        <name>getDispatchHandler</name>
        <briefdescription>
<para>Get the type-erased dispatcher handler for sending/broadcasting without the collection type. </para>        </briefdescription>
        <detaileddescription>
<para>for type-free sends/broadcast, like a callback that erases the type but still needs to reach a typed endpoint</para><para><simplesect kind="return"><para>the type-erased dispatch handler </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1148" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2099" bodyend="2102"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af183a018e0d2d8b3ed024244d8f83f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1vrt_1_1collection_1aa3b9731ae16d60fac43d68840f3606a5" kindref="member">DispatchBasePtrType</ref></type>
        <definition>DispatchBasePtrType vt::vrt::collection::CollectionManager::getDispatcher</definition>
        <argsstring>(DispatchHandlerType const &amp;han)</argsstring>
        <name>getDispatcher</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0cfe02a0426e95ec9daa2ef7374e07c7" kindref="member">DispatchHandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <briefdescription>
<para>Get pointer to the dispatcher base class in a type-erased setting to operate on the collection. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the registered dispatch handler</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the base dispatcher </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1159" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2106" bodyend="2108"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a79fb70bedfb02bc57ae4280345dd9427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t vt::vrt::collection::CollectionManager::groupElementCount</definition>
        <argsstring>(VirtualProxyType const &amp;proxy)</argsstring>
        <name>groupElementCount</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Count the number of elements for a collection on this node. </para>        </briefdescription>
        <detaileddescription>
<para>for automatic group creation for each collection instance for broadcasts (optimization) and reduce (correctness).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of local elmeents </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1220" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="138" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7ac57a8d33e619cbb036c02f15b2b3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::vrt::collection::CollectionManager::createGroupCollection</definition>
        <argsstring>(VirtualProxyType const &amp;proxy, bool const in_group)</argsstring>
        <name>createGroupCollection</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>in_group</declname>
        </param>
        <briefdescription>
<para>Create the group. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this node is in the group</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new group ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1231" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="152" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a86abf996b403b4e6325e26cf577440ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::vrt::collection::CollectionManager::insertCollectionElement</definition>
        <argsstring>(VirtualPtrType&lt; IndexT &gt; vc, VirtualProxyType const proxy, IndexT const &amp;idx, NodeType const home_node, bool const is_migrated_in=false, NodeType const migrated_from=uninitialized_destination)</argsstring>
        <name>insertCollectionElement</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" kindref="member">VirtualPtrType</ref>&lt; IndexT &gt;</type>
          <declname>vc</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>home_node</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_migrated_in</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>migrated_from</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
<para>Insert a new collection element. </para>        </briefdescription>
        <detaileddescription>
<para>call to insert a new collection element on this node. Called either during construction/staged insertion or when an element migrates into this node. Before this is called, one must construct the element. Then, one must use the <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_type_attorney" kindref="compound">CollectionTypeAttorney</ref></computeroutput> to do the setup for the element<mdash/>which sets the index and other properties on the element. Once that is done, this call will register the element with the location manager and add it to the collection holders.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vc</parametername>
</parameternamelist>
<parameterdescription>
<para>unique pointer to the new, constructed collection element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>collection proxy bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>element index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">home_node</parametername>
</parameternamelist>
<parameterdescription>
<para>the home node for this element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_migrated_in</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it just migrated in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">migrated_from</parametername>
</parameternamelist>
<parameterdescription>
<para>where it migrated in from</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it successfully inserted the element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1268" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1219" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae6e458293d04d8b29697fa0584c84c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::destroy</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT, IndexT &gt; const &amp;proxy)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, IndexT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Destroy a collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1324" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2010" bodyend="2019"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ab92af61f5466dd4a1210bd6f2f1bb153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::CollectionManager::getMappedNode</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, typename ColT::IndexType const &amp;idx)</argsstring>
        <name>getMappedNode</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>typename ColT::IndexType const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get the default mapped node for an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mapped node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1389" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1541" bodyend="1547"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2356c42f2ca0effeca67b6bc2813fc29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IdxT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::CollectionManager::getMappedNode</definition>
        <argsstring>(VirtualProxyType proxy, IdxT const &amp;idx)</argsstring>
        <name>getMappedNode</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>IdxT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get the default mapped node for an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mapped node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1403" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1530" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aa78b0230c093abfbfc42629f36047c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1vrt_1_1collection_1ad221ad8aea9e586689b4335f5bcd9804" kindref="member">MigrateStatus</ref></type>
        <definition>MigrateStatus vt::vrt::collection::CollectionManager::migrate</definition>
        <argsstring>(VrtElmProxy&lt; ColT, typename ColT::IndexType &gt; proxy, NodeType const &amp;dest)</argsstring>
        <name>migrate</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_vrt_elm_proxy" kindref="compound">VrtElmProxy</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Migrate element to a new node. </para>        </briefdescription>
        <detaileddescription>
<para>Element must exist on this node to call this method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the element proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status of migration operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1416" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1834" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac390149ecceb5a5b183086e509c3bfaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_modifier_token" kindref="compound">ModifierToken</ref></type>
        <definition>ModifierToken vt::vrt::collection::CollectionManager::beginModification</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, std::string const &amp;label)</argsstring>
        <name>beginModification</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Begin a modification epoch collectively for a collection with dynamic membership. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">label</parametername>
</parameternamelist>
<parameterdescription>
<para>label for the insertion epoch</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the modifier token </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1446" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1577" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a249d475d576758006ba112af9907d271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::finishModification</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, ModifierToken &amp;&amp;token)</argsstring>
        <name>finishModification</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_modifier_token" kindref="compound">ModifierToken</ref> &amp;&amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Finish an modification epoch collectively for a collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">token</parametername>
</parameternamelist>
<parameterdescription>
<para>the insertion token </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1457" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1592" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a57a03bda72fb30e3fc886111ff032819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::insert</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, typename ColT::IndexType idx, NodeType const node, ModifierToken &amp;token, MsgSharedPtr&lt; MsgT &gt; msg=nullptr, bool pinged_home_already=false)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_modifier_token" kindref="compound">ModifierToken</ref> &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>pinged_home_already</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Dynamically insert an element or send a message to mapped node to insert. If the <computeroutput>node</computeroutput> parameter is set, ignore the mapped node and insert wherever specified by the user. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node to insert on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">token</parametername>
</parameternamelist>
<parameterdescription>
<para>the inserter token with the insertion epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pinged_home_already</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the home node has been contacted to ensure an insertion has not occurred already </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1482" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1694" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a85a108cba84e45371d2c29d3072adcbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::destroyElm</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; const &amp;proxy, typename ColT::IndexType idx, ModifierToken &amp;token)</argsstring>
        <name>destroyElm</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_modifier_token" kindref="compound">ModifierToken</ref> &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Dynamically delete a collection element. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">token</parametername>
</parameternamelist>
<parameterdescription>
<para>the inserter token with the insertion epoch </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1496" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1780" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a09bd0e2b03bd5f638bdc44f7ffeef715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>ColT *</type>
        <definition>ColT * vt::vrt::collection::CollectionManager::tryGetLocalPtr</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT, IndexT &gt; const &amp;proxy, IndexT idx)</argsstring>
        <name>tryGetLocalPtr</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, IndexT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>IndexT</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Try to get a pointer to a collection element. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Migration may invalidate this pointer. It is not recommended to hold the pointer obtained.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>raw pointer to element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1522" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1550" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3ef00b90a3a2d066a7f83b9c32b301d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::addCleanupFn</definition>
        <argsstring>(VirtualProxyType proxy)</argsstring>
        <name>addCleanupFn</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Add a cleanup function for a collection after destruction. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1532" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac6a8ac3b0b5583f426932e95012f8332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_typeless_holder" kindref="compound">TypelessHolder</ref> &amp;</type>
        <definition>TypelessHolder&amp; vt::vrt::collection::CollectionManager::getTypelessHolder</definition>
        <argsstring>()</argsstring>
        <name>getTypelessHolder</name>
        <briefdescription>
<para>Get the typeless holder data about the collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the typeless holder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1584" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1584" bodyend="1584"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a790738e12739058e7a09b4a3246169e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int vt::vrt::collection::CollectionManager::registerElementListener</definition>
        <argsstring>(VirtualProxyType proxy, listener::ListenFnType&lt; IndexT &gt; fn)</argsstring>
        <name>registerElementListener</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a0f35a1b6c7c88d9543939a204f418d7a" kindref="member">listener::ListenFnType</ref>&lt; IndexT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Register listener function for a given collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the proxy of the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the listener function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1593" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2111" bodyend="2116"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aecfd5c34b6d0b6781d3bb089ba1ae547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::unregisterElementListener</definition>
        <argsstring>(VirtualProxyType proxy, int element)</argsstring>
        <name>unregisterElementListener</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Unregister listener function for a given collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the proxy of the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">element</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the registered listener function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1604" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2119" bodyend="2124"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9259954aca1df3a68ad1d0a730687612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>IndexT</type>
        <definition>IndexT vt::vrt::collection::CollectionManager::getRange</definition>
        <argsstring>(VirtualProxyType proxy)</argsstring>
        <name>getRange</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get the range that a collection was constructed with. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the proxy of the collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the range of the collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1614" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2127" bodyend="2130"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0708d6144e7beea89e4f07fae88e16fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>std::set&lt; IndexT &gt;</type>
        <definition>std::set&lt; IndexT &gt; vt::vrt::collection::CollectionManager::getLocalIndices</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; proxy)</argsstring>
        <name>getLocalIndices</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get the local indices that are currently on this node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the proxy of the collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the set of indices on this node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1624" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2133" bodyend="2142"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8d3db4274a1239fa0097dae11e93bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string vt::vrt::collection::CollectionManager::makeFilename</definition>
        <argsstring>(IndexT range, IndexT idx, std::string file_base, bool make_sub_dirs, int files_per_directory)</argsstring>
        <name>makeFilename</name>
        <param>
          <type>IndexT</type>
          <declname>range</declname>
        </param>
        <param>
          <type>IndexT</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file_base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_sub_dirs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>files_per_directory</declname>
        </param>
        <briefdescription>
<para>Make the filename for checkpoint/restore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>range for collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file_base</parametername>
</parameternamelist>
<parameterdescription>
<para>base file name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">make_sub_dirs</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to make sub-directories for elements: useful when the number of collection elements are large </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">files_per_directory</parametername>
</parameternamelist>
<parameterdescription>
<para>number of files to output for each sub-dir</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>full path of a file for the element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1639" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2171" bodyend="2201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1abe41e7e9c9dec081a79b222b4c5dc199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string vt::vrt::collection::CollectionManager::makeMetaFilename</definition>
        <argsstring>(std::string file_base, bool make_sub_dirs)</argsstring>
        <name>makeMetaFilename</name>
        <param>
          <type>std::string</type>
          <declname>file_base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_sub_dirs</declname>
        </param>
        <briefdescription>
<para>Make the filename for meta-data related to checkpoint/restore. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file_base</parametername>
</parameternamelist>
<parameterdescription>
<para>base file name</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>meta-data file name for the node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1652" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2145" bodyend="2168"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af3771d408c2ef15e65b9ba8219aa830a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::checkpointToFile</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; proxy, std::string const &amp;file_base, bool make_sub_dirs=true, int files_per_directory=4)</argsstring>
        <name>checkpointToFile</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file_base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_sub_dirs</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>files_per_directory</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
<para>Checkpoint the collection (collective). Must wait for termination (consistent snapshot) of work on the collection before invoking. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the proxy of the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the base file name of the files write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">make_sub_dirs</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to make sub-directories for elements: useful when the number of collection elements are large </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">files_per_directory</parametername>
</parameternamelist>
<parameterdescription>
<para>number of files to output for each sub-dir</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the range of the collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1667" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2204" bodyend="2240"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a315a74b9299f31ebc5e3e4becdd9f79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt; ColT &gt; vt::vrt::collection::CollectionManager::restoreFromFile</definition>
        <argsstring>(typename ColT::IndexType range, std::string const &amp;file_base)</argsstring>
        <name>restoreFromFile</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file_base</declname>
        </param>
        <briefdescription>
<para>Restore the collection (collective) from file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Resets the phase to 0 for every element.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of the collection to restart </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the base file name for the files to read</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proxy to the new collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1683" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2338" bodyend="2384"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a401419597474752d8554a6f96a972a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::restoreFromFileInPlace</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT &gt; proxy, typename ColT::IndexType range, std::string const &amp;file_base)</argsstring>
        <name>restoreFromFileInPlace</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT &gt;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file_base</declname>
        </param>
        <briefdescription>
<para>Restore the collection (collective) from file on top of an existing collection. Migrates collection elements to the rank saved from the checkpoint. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of the collection to restore </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the base file name for the files to read </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1747" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2271" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a87b3cd902f7124eb9acd92dbc5895121" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::vrt::collection::CollectionManager::getLabel</definition>
        <argsstring>(VirtualProxyType const proxy) const</argsstring>
        <name>getLabel</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get collection label. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structvt_1_1vrt_1_1collection_1_1_collection" kindref="compound">Collection</ref> proxy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>collection lable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1758" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1758" bodyend="1760"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af9101933d9e9ca9aa0b6b1f39edbb9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1763" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="1763" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1acc57a9d8e4c2354a50075e1a68ffc796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1mapping_1ad7c0812428b339edd904a865e0080ecd" kindref="member">mapping::ActiveMapTypedFnType</ref>&lt; typename ColT::IndexType &gt;</type>
            <declname>fn</declname>
            <defname>fn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af8091fcb8218dad155ea028c9b5d283f" kindref="member">CollectionManager::IsDefaultConstructableType</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
        <definition>CollectionManager::IsDefaultConstructableType&lt;ColT, typename ColT::IndexType&gt; vt::vrt::collection::CollectionManager::constructCollective</definition>
        <argsstring>(typename ColT::IndexType range, std::string const &amp;label)</argsstring>
        <name>constructCollective</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.impl.h" line="1313" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1313" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a382237a66371d8d228a04d92e068810c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1mapping_1ad7c0812428b339edd904a865e0080ecd" kindref="member">mapping::ActiveMapTypedFnType</ref>&lt; typename ColT::IndexType &gt;</type>
            <declname>fn</declname>
            <defname>fn</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionManager::CollectionProxyWrapType</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
        <definition>CollectionManager::CollectionProxyWrapType&lt;ColT, typename ColT::IndexType&gt; vt::vrt::collection::CollectionManager::constructCollective</definition>
        <argsstring>(typename ColT::IndexType range, DistribConstructFn&lt; ColT &gt; cons_fn, std::string const &amp;label)</argsstring>
        <name>constructCollective</name>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9ef5ab71e344fdee8525c3f18241c305" kindref="member">DistribConstructFn</ref>&lt; ColT &gt;</type>
          <declname>cons_fn</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.impl.h" line="1326" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1326" bodyend="1333"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aa371f1cdd4eafa9f75b7eb40a6f151e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::vrt::collection::CollectionManager::getDefaultMap</definition>
        <argsstring>()</argsstring>
        <name>getDefaultMap</name>
        <briefdescription>
<para>Get the default map registered handler for a collection. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the registered map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="336" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1352" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae92ad81b99b380b0b87b85f7dbda767a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename ParamT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::vrt::collection::CollectionManager::getDefaultMapImpl</definition>
        <argsstring>(std::tuple&lt; Args... &gt;)</argsstring>
        <name>getDefaultMapImpl</name>
        <param>
          <type>std::tuple&lt; Args... &gt;</type>
        </param>
        <briefdescription>
<para>Register a map functor for arguments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the registered map </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="344" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1358" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af192090e361f6239d6de2a3c80807421" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>IndexT const  *</type>
        <definition>IndexT const  * vt::vrt::collection::CollectionManager::queryIndexContext</definition>
        <argsstring>()</argsstring>
        <name>queryIndexContext</name>
        <briefdescription>
<para>Query the current index context of the running handler. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be called legally during the constructor of a virtual collection element and when a handler for it is running.</para><para><simplesect kind="return"><para>the running index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="377" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1366" bodyend="1369"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a77d8832834659c44badf499c4770777b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
        <definition>VirtualProxyType vt::vrt::collection::CollectionManager::queryProxyContext</definition>
        <argsstring>()</argsstring>
        <name>queryProxyContext</name>
        <briefdescription>
<para>Query the current proxy context of the running handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the running proxy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="385" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1372" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad94808d98e429e50376a9d1b35de57ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::vrt::collection::CollectionManager::hasContext</definition>
        <argsstring>()</argsstring>
        <name>hasContext</name>
        <briefdescription>
<para>Check if a collection is running in the current context. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether a collection handler is running </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="393" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1378" bodyend="1381"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aeefbfe1468c9583c4ffb730b6fbdd263" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename UserMsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a1f91c97ed52237c3a3576dfbbe87c8f8" kindref="member">IsWrapType</ref>&lt; ColT, UserMsgT, MsgT &gt;</type>
        <definition>static IsWrapType&lt;ColT, UserMsgT, MsgT&gt; vt::vrt::collection::CollectionManager::collectionMsgDeliver</definition>
        <argsstring>(MsgT *msg, CollectionBase&lt; ColT, IndexT &gt; *col, HandlerType han, NodeType from)</argsstring>
        <name>collectionMsgDeliver</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_base" kindref="compound">CollectionBase</ref>&lt; ColT, IndexT &gt; *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Deliver a message to a collection element with a promoted collection message that wrapped the user&apos;s non-collection message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">col</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to collection element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>node that sent the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2c5223b9c6bf628b8e00e8f95fc6d0bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename UserMsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a18e3a17d9eb086c6c2f499242b7faa1e" kindref="member">IsNotWrapType</ref>&lt; ColT, UserMsgT, MsgT &gt;</type>
        <definition>static IsNotWrapType&lt;ColT, UserMsgT, MsgT&gt; vt::vrt::collection::CollectionManager::collectionMsgDeliver</definition>
        <argsstring>(MsgT *msg, CollectionBase&lt; ColT, IndexT &gt; *col, HandlerType han, NodeType from)</argsstring>
        <name>collectionMsgDeliver</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_base" kindref="compound">CollectionBase</ref>&lt; ColT, IndexT &gt; *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Deliver a message to a collection element with a normal collection message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">col</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to collection element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>node that sent the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9b2bfe1f74298f0e9b7fdc4888f73e3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CoLT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::collectionMsgHandler</definition>
        <argsstring>(BaseMessage *msg)</argsstring>
        <name>collectionMsgHandler</name>
        <param>
          <type><ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">BaseMessage</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Base collection message handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="644" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="627" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7bb443544c8c4b94a7a10a0ec8126018" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::collectionMsgTypedHandler</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>collectionMsgTypedHandler</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Typed collection message handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="652" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="316" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a530e4c24e204a0a97317e1245a09d54c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::recordLBData</definition>
        <argsstring>(ColT *col_ptr, MsgT *msg)</argsstring>
        <name>recordLBData</name>
        <param>
          <type>ColT *</type>
          <declname>col_ptr</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Record LB data for collection message handler when a message arrives for the element. </para>        </briefdescription>
        <detaileddescription>
<para>where the message came from, size of message, and type of communication (e.g., broadcast or send)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">col_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection element pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to deliver </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="665" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="365" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad669125b8bb004b69497d296f10c8a56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename UserMsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a1f91c97ed52237c3a3576dfbbe87c8f8" kindref="member">IsWrapType</ref>&lt; ColT, UserMsgT, MsgT &gt;</type>
        <definition>CollectionManager::IsWrapType&lt; ColT, UserMsgT, MsgT &gt; vt::vrt::collection::CollectionManager::collectionAutoMsgDeliver</definition>
        <argsstring>(MsgT *msg, Indexable&lt; IndexT &gt; *col, HandlerType han, NodeType from, trace::TraceEventIDType event, bool immediate)</argsstring>
        <name>collectionAutoMsgDeliver</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_indexable" kindref="compound">Indexable</ref>&lt; IndexT &gt; *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">trace::TraceEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate</declname>
        </param>
        <briefdescription>
<para>Deliver a promoted/wrapped message to a collection element. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">col</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection element pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that sent it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the associated trace event </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1172" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="208" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a74ddc2d783760a0716167291bac6d7f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename UserMsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a18e3a17d9eb086c6c2f499242b7faa1e" kindref="member">IsNotWrapType</ref>&lt; ColT, UserMsgT, MsgT &gt;</type>
        <definition>CollectionManager::IsNotWrapType&lt; ColT, UserMsgT, MsgT &gt; vt::vrt::collection::CollectionManager::collectionAutoMsgDeliver</definition>
        <argsstring>(MsgT *msg, Indexable&lt; IndexT &gt; *col, HandlerType han, NodeType from, trace::TraceEventIDType event, bool immediate)</argsstring>
        <name>collectionAutoMsgDeliver</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_indexable" kindref="compound">Indexable</ref>&lt; IndexT &gt; *</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">trace::TraceEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>immediate</declname>
        </param>
        <briefdescription>
<para>Deliver a regular collection message to a collection element. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">col</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection element pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that sent it </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the associated trace event </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1188" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="236" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2a9fcbafc83d78d80c8d5f758e880b47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::collectionBcastHandler</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>collectionBcastHandler</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Receive a broadcast to a collection. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>collection message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1199" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="262" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9859d8346c9aac1fb0b65e6db82969db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::broadcastRootHandler</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>broadcastRootHandler</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Receive a broadcast at the root for stamping. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1207" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="634" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad9a0b889d763dd4eae462b9ca6d07cc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" kindref="member">VirtualPtrType</ref>&lt; IndexT &gt;</type>
        <definition>CollectionManager::VirtualPtrType&lt; IndexT &gt; vt::vrt::collection::CollectionManager::runConstructor</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>runConstructor</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Run the collection element&apos;s constructor. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elms</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index for this element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>the constructor args</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique pointer to the new element </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1245" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a1c16b833c74649b4cc0e30d622ddaf61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::insertHandler</definition>
        <argsstring>(InsertMsg&lt; ColT, MsgT &gt; *msg)</argsstring>
        <name>insertHandler</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_insert_msg" kindref="compound">InsertMsg</ref>&lt; ColT, MsgT &gt; *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler to insert an element on this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>insert message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1426" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1486" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af5d0c9d39e7d86dc7a2afb7b294e5fe1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::pingHomeHandler</definition>
        <argsstring>(InsertMsg&lt; ColT, MsgT &gt; *msg)</argsstring>
        <name>pingHomeHandler</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_insert_msg" kindref="compound">InsertMsg</ref>&lt; ColT, MsgT &gt; *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler to query home before inserting on this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>insert message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1434" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1496" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aee32428b23705756658c5e27f336725e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::computeReduceStamp</definition>
        <argsstring>(CollectionStampMsg *msg)</argsstring>
        <name>computeReduceStamp</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_stamp_msg" kindref="compound">CollectionStampMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler that receives the reduce stamp after insertions are complete. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the stamp message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1467" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aabc9f2bc0f977a84a1795700fe889ba6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::destroyElmHandler</definition>
        <argsstring>(DestroyElmMsg&lt; ColT &gt; *msg, ColT *)</argsstring>
        <name>destroyElmHandler</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_destroy_elm_msg" kindref="compound">DestroyElmMsg</ref>&lt; ColT &gt; *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>ColT *</type>
        </param>
        <briefdescription>
<para>Send message to element to delete it during a modification epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the destroy message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1508" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1821" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a77f6fb6d9440338fd9a7d610828e5f5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::migrateToRestoreLocation</definition>
        <argsstring>(RestoreMigrateMsg&lt; ColT &gt; *msg)</argsstring>
        <name>migrateToRestoreLocation</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1_1_restore_migrate_msg" kindref="compound">RestoreMigrateMsg</ref>&lt; ColT &gt; *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Migrate element to restore location from checkpoint. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the migrate message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1735" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2255" bodyend="2268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a4f8a7ea0fd5e1a67a7d0d7a1987fcfa1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ColT::IndexType</defval>
          </param>
        </templateparamlist>
        <type>ColT *</type>
        <definition>ColT * vt::vrt::collection::CollectionManager::getCollectionPtrForInvoke</definition>
        <argsstring>(VirtualElmProxyType&lt; ColT &gt; const &amp;proxy)</argsstring>
        <name>getCollectionPtrForInvoke</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1a620a5c8c59d13e513f690c74b4af516f" kindref="member">VirtualElmProxyType</ref>&lt; ColT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get the collection element pointer for given proxy. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the collection element pointer </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1285" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="400" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad27604b811c2e8e5734c8dcfb772f1cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_holder" kindref="compound">CollectionHolder</ref>&lt; IndexT &gt; *</type>
        <definition>CollectionHolder&lt; IndexT &gt; * vt::vrt::collection::CollectionManager::findColHolder</definition>
        <argsstring>(VirtualProxyType const &amp;proxy)</argsstring>
        <name>findColHolder</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get the entire collection system holder. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the collection holder </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1295" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2067" bodyend="2078"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a68b1f940a90a063268c1de9b2d16a02c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder" kindref="compound">Holder</ref>&lt; IndexT &gt; *</type>
        <definition>Holder&lt; IndexT &gt; * vt::vrt::collection::CollectionManager::findElmHolder</definition>
        <argsstring>(VirtualProxyType const &amp;proxy)</argsstring>
        <name>findElmHolder</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get the collection element holder. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the element collection holder </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1305" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2081" bodyend="2090"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9358387d86de8983cdbf3db982da7041" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ProxyT</type>
          </param>
          <param>
            <type>typename IndexT</type>
            <defval>typename ProxyT::IndexType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder" kindref="compound">Holder</ref>&lt; IndexT &gt; *</type>
        <definition>Holder&lt; IndexT &gt; * vt::vrt::collection::CollectionManager::findElmHolder</definition>
        <argsstring>(ProxyT proxy)</argsstring>
        <name>findElmHolder</name>
        <param>
          <type>ProxyT</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Get the collection element holder. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the element collection holder </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1315" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2093" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a79d8ce89b21670fe0d482646aca4a2a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::incomingDestroy</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT, IndexT &gt; const &amp;proxy)</argsstring>
        <name>incomingDestroy</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, IndexT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Incoming message to run all cleanup functions. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1333" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2022" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afac7551ce2ddeeff21631fa9e6987784" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::destroyMatching</definition>
        <argsstring>(CollectionProxyWrapType&lt; ColT, IndexT &gt; const &amp;proxy)</argsstring>
        <name>destroyMatching</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" kindref="member">CollectionProxyWrapType</ref>&lt; ColT, IndexT &gt; const &amp;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
<para>Destroy all elements and related meta-data for a proxy across all system data structures. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1342" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2036" bodyend="2064"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7199e829343abd7700dcdcd0a02cd477" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::schedule</definition>
        <argsstring>(ActionType action)</argsstring>
        <name>schedule</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Schedule an action for later. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to schedule </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1361" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aaa19d241c982123103147b568f97b842" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">messaging::PendingSend</ref></type>
        <definition>messaging::PendingSend vt::vrt::collection::CollectionManager::schedule</definition>
        <argsstring>(MsgT msg, bool execute_now, EpochType cur_epoch, ActionType action)</argsstring>
        <name>schedule</name>
        <param>
          <type>MsgT</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>execute_now</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref></type>
          <declname>cur_epoch</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Schedule an action with an associated message for delivery later unless <computeroutput>execute_now</computeroutput> is set; in that case, run it right away. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">execute_now</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to execute now </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cur_epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the message epoch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>associated action</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pending send </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1375" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="2387" bodyend="2404"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a480360a498a18520cbe2405ebbe7e9b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1vrt_1_1collection_1ad221ad8aea9e586689b4335f5bcd9804" kindref="member">MigrateStatus</ref></type>
        <definition>MigrateStatus vt::vrt::collection::CollectionManager::migrateOut</definition>
        <argsstring>(VirtualProxyType const &amp;proxy, IndexT const &amp;idx, NodeType const &amp;dest)</argsstring>
        <name>migrateOut</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Migrate an element out of this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>migration status </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1558" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1855" bodyend="1968"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a57458749baaff4b2d76a17e68ffcf912" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename IndexT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1vrt_1_1collection_1ad221ad8aea9e586689b4335f5bcd9804" kindref="member">MigrateStatus</ref></type>
        <definition>MigrateStatus vt::vrt::collection::CollectionManager::migrateIn</definition>
        <argsstring>(VirtualProxyType const &amp;proxy, IndexT const &amp;idx, NodeType const &amp;from, VirtualPtrType&lt; IndexT &gt; vrt_elm_ptr)</argsstring>
        <name>migrateIn</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" kindref="member">VirtualPtrType</ref>&lt; IndexT &gt;</type>
          <declname>vrt_elm_ptr</declname>
        </param>
        <briefdescription>
<para>Migrate an element into this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>node it migrated out of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vrt_elm_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>unique pointer to the element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>migration status </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1573" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1971" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aeb9f3e6a1411d77d0a9d87df97fc9e37" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1elm_1_1_element_i_d_struct" kindref="compound">elm::ElementIDStruct</ref></type>
        <definition>elm::ElementIDStruct vt::vrt::collection::CollectionManager::getCurrentContext</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentContext</name>
        <briefdescription>
<para>Get the current LB element ID struct based on handler context. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the element ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1781" column="1" bodyfile="src/vt/vrt/collection/manager.cc" bodystart="82" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a221921efd4421cb304ca99ebdfdf3117" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="namespacevt_1a81d11b28122d43bf9834577e4a06440f" kindref="member">EpochType</ref>, <ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> &gt;</type>
        <definition>std::tuple&lt; EpochType, VirtualProxyType &gt; vt::vrt::collection::CollectionManager::makeCollection</definition>
        <argsstring>(param::ConstructParams&lt; ColT &gt; &amp;po)</argsstring>
        <name>makeCollection</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1param_1_1_construct_params" kindref="compound">param::ConstructParams</ref>&lt; ColT &gt; &amp;</type>
          <declname>po</declname>
        </param>
        <briefdescription>
<para>Make a new collection from a user configuration. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">po</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple including epoch (to wait on) and proxy </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1793" column="1" bodyfile="src/vt/vrt/collection/collection_builder.impl.h" bodystart="54" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a900349a13b2e0382b6731215b4324161" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::makeCollectionImpl</definition>
        <argsstring>(param::ConstructParams&lt; ColT &gt; &amp;po)</argsstring>
        <name>makeCollectionImpl</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1param_1_1_construct_params" kindref="compound">param::ConstructParams</ref>&lt; ColT &gt; &amp;</type>
          <declname>po</declname>
        </param>
        <briefdescription>
<para>System function to actually constructing the collection. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">po</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1812" column="1" bodyfile="src/vt/vrt/collection/collection_builder.impl.h" bodystart="105" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a22caeaf37970241107ac2981126ee6df" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::makeCollectionElement</definition>
        <argsstring>(VirtualProxyType const proxy, typename ColT::IndexType idx, NodeType const mapped_node, Callable &amp;&amp;cons_fn, bool zero_reduce_stamp=false)</argsstring>
        <name>makeCollectionElement</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>typename ColT::IndexType</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>mapped_node</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>cons_fn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_reduce_stamp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a new collection element. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual proxy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mapped_node</parametername>
</parameternamelist>
<parameterdescription>
<para>the home node for the element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cons_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the construct function/functor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">zero_reduce_stamp</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to zero the reduce stamp for insertion </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1824" column="1" bodyfile="src/vt/vrt/collection/collection_builder.impl.h" bodystart="201" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0af41830e89efe84a071d3dcb1296b1b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IdxT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::vrt::collection::CollectionManager::elementMappedHere</definition>
        <argsstring>(HandlerType map_han, ObjGroupProxyType map_object, IdxT idx, IdxT bounds)</argsstring>
        <name>elementMappedHere</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>map_han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
          <declname>map_object</declname>
        </param>
        <param>
          <type>IdxT</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>IdxT</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
<para>Check if an element is mapped here (to this node) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">map_han</parametername>
</parameternamelist>
<parameterdescription>
<para>The map handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map_object</parametername>
</parameternamelist>
<parameterdescription>
<para>The map object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional bounds of the collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it is mapped here </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1841" column="1" bodyfile="src/vt/vrt/collection/collection_builder.impl.h" bodystart="240" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a899158015e2abd7d39eda2c7715e2632" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IdxT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::CollectionManager::getElementMapping</definition>
        <argsstring>(HandlerType map_han, ObjGroupProxyType map_object, IdxT idx, IdxT bounds)</argsstring>
        <name>getElementMapping</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>map_han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
          <declname>map_object</declname>
        </param>
        <param>
          <type>IdxT</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>IdxT</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
<para>Check where an element is mapped. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">map_han</parametername>
</parameternamelist>
<parameterdescription>
<para>The map handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map_object</parametername>
</parameternamelist>
<parameterdescription>
<para>The map object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional bounds of the collection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node where it is mapped </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1856" column="1" bodyfile="src/vt/vrt/collection/collection_builder.impl.h" bodystart="249" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0fec20114761687630f2a90fce374bc2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::insertCollectionInfo</definition>
        <argsstring>(VirtualProxyType const &amp;proxy, HandlerType const map_han)</argsstring>
        <name>insertCollectionInfo</name>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>map_han</declname>
        </param>
        <briefdescription>
<para>Insert collection into <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1_typeless_holder" kindref="compound">TypelessHolder</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the collection proxy bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map_han</parametername>
</parameternamelist>
<parameterdescription>
<para>the map function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1351" column="1" bodyfile="src/vt/vrt/collection/manager.impl.h" bodystart="1475" bodyend="1479"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ab3dfa8b7bac9f519538d4ce97bb99695" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::vrt::collection::CollectionManager::makeCollectionHandler</definition>
        <argsstring>(param::ConstructParamMsg&lt; ColT &gt; *msg)</argsstring>
        <name>makeCollectionHandler</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1param_1_1_construct_param_msg" kindref="compound">param::ConstructParamMsg</ref>&lt; ColT &gt; *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler for receiving a new collection configuration to construct on this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the configuration message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/manager.h" line="1804" column="1" bodyfile="src/vt/vrt/collection/collection_builder.impl.h" bodystart="86" bodyend="90"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A core VT component managing collections of tasks across the system. </para>    </briefdescription>
    <detaileddescription>
<para>The collection manager enables the creation, execution, message routing, and destruction of multi-dimensional collections of virtual contexts that are mapped to hardware resources. Dense, sparse, on-demand collection types are all supported. The location of these virtual contexts is managed by the location manager as they migrate or the load balancer is invoked, which moves them around the system based on instrumentation. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="893">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="894" relation="public-inheritance">
        </childnode>
        <childnode refid="897" relation="public-inheritance">
        </childnode>
        <childnode refid="898" relation="public-inheritance">
        </childnode>
      </node>
      <node id="896">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="892">
        <label>vt::runtime::component::Component&lt; CollectionManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="893" relation="public-inheritance">
        </childnode>
      </node>
      <node id="894">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
        <childnode refid="896" relation="public-inheritance">
        </childnode>
      </node>
      <node id="895">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="897">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="898">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="891">
        <label>vt::vrt::collection::CollectionManager</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1_collection_manager"/>
        <childnode refid="892" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="901">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="902" relation="public-inheritance">
        </childnode>
        <childnode refid="905" relation="public-inheritance">
        </childnode>
        <childnode refid="906" relation="public-inheritance">
        </childnode>
      </node>
      <node id="904">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="907">
        <label>vt::vrt::collection::TypelessHolder</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1_typeless_holder"/>
      </node>
      <node id="900">
        <label>vt::runtime::component::Component&lt; CollectionManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="901" relation="public-inheritance">
        </childnode>
      </node>
      <node id="902">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="903" relation="public-inheritance">
        </childnode>
        <childnode refid="904" relation="public-inheritance">
        </childnode>
      </node>
      <node id="903">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="905">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="906">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="899">
        <label>vt::vrt::collection::CollectionManager</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1_collection_manager"/>
        <childnode refid="900" relation="public-inheritance">
        </childnode>
        <childnode refid="907" relation="usage">
          <edgelabel>typeless_holder_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/vrt/collection/manager.h" line="105" column="1" bodyfile="src/vt/vrt/collection/manager.h" bodystart="103" bodyend="1870"/>
    <listofallmembers>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a536805fb5c58b557b66e7d7febe87567" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>ActionContainerType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a98a759caf144277dcd341cdbd5538f59" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>ActionProxyType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3ef00b90a3a2d066a7f83b9c32b301d2" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>addCleanupFn</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3327134906c684111aa2604d0b68b2f0" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>balance::CollectionLBData</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac390149ecceb5a5b183086e509c3bfaa" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>beginModification</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae119b6f5097f722c4e965c9c1203943c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastCollectiveMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae119b6f5097f722c4e965c9c1203943c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastCollectiveMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aae2f8d1ebc378183074c3572894c7ffc" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastCollectiveMsgImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a53567bdf285983b92dd4094721f8a4fd" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastFromRoot</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9cadcebd1d7c26512091f9624a23a02c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9cadcebd1d7c26512091f9624a23a02c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2ea2ea93c25a438f0b9b6af390ef0881" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0aa73c7acf95f668330d9c31ce12b581" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a5ec1684e67f1e5aec6b94cdcf17e5777" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a42cfab20eec557ba82f70d90afa3e7a1" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac7a9c72784d76ddf0346926bbb147e8c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsgImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac7a9c72784d76ddf0346926bbb147e8c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsgImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3a0ce58242fe4a9f18ca105ba9d9e8ea" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsgUntypedHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3b84dab30f231cc9a266ff323340f17e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsgWithHan</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a17e6a23d781779e9d0e4fe068f73ac90" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastMsgWithHan</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aa10f6bc4c1b886b78b22e0c9ca3805ef" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastNormalMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9859d8346c9aac1fb0b65e6db82969db" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>broadcastRootHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7b32db0e6ccafa771ddd72f534a1cf8c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>BufferedActionType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af3771d408c2ef15e65b9ba8219aa830a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>checkpointToFile</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a5123370561fb8eb70ef7c4979e051706" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>cleanup_fns_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7d98e5aaa63d70cbabfbcf78a6cf503f" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>cleanupAll</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a95c122e5b83bc51c306c9367b8e62c07" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CleanupFnType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a735e54bc5a8646536d07750e2549a156" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CleanupListFnType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a74d57793e49293319bf649cfa2c06bcf" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collect_lb_data_for_lb_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad669125b8bb004b69497d296f10c8a56" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionAutoMsgDeliver</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a74ddc2d783760a0716167291bac6d7f4" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionAutoMsgDeliver</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2a9fcbafc83d78d80c8d5f758e880b47" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionBcastHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aafd1972e5767dec26c8872f4aafa6864" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CollectionElmAttorney</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a4089cdff4218109fffb5884f51244a6e" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CollectionElmDestroyAttorney</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad6c6c75f1f54ae5470847311256ae8c3" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CollectionManager</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aeefbfe1468c9583c4ffb730b6fbdd263" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionMsgDeliver</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2c5223b9c6bf628b8e00e8f95fc6d0bc" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionMsgDeliver</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9b2bfe1f74298f0e9b7fdc4888f73e3d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionMsgHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7bb443544c8c4b94a7a10a0ec8126018" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>collectionMsgTypedHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a56458ed7f9bb22b631b9b3a745f42f94" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CollectionProxyWrapType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47b420577805c257189257eb05516953" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>CollectionType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>component_id_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aee32428b23705756658c5e27f336725e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>computeReduceStamp</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a779338baed0f13c1e96b498560db9cbc" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>construct</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a14e19098a1e676d5229fc00a2f0cc133" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>construct</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9df5c1771c8112c60e45d57d5c530ba8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollective</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a29a9ac1bd384ac328bb149212676b751" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollective</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2dcf5a95489eee7ec79fc1ffdd528db2" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollective</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9888879eab5c8d6d151f91aa4de0aadb" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollective</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1acc57a9d8e4c2354a50075e1a68ffc796" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollective</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a382237a66371d8d228a04d92e068810c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollective</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9b78bd325f19c36907e681e83bbd9398" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructCollectiveMap</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a526e4c6aca18333f508e34a24cabc712" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac9e0c4bfb1865ebb014ca0dc4b9006f8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>constructMap</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7ac57a8d33e619cbb036c02f15b2b3db" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>createGroupCollection</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae36dc42a5f1469dbe9c49bdce96beae3" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>ctx::LBData</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae6e458293d04d8b29697fa0584c84c67" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>destroy</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a71865b0508bab58b6d44b44416f11983" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>destroyCollections</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a85a108cba84e45371d2c29d3072adcbe" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>destroyElm</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aabc9f2bc0f977a84a1795700fe889ba6" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>destroyElmHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afac7551ce2ddeeff21631fa9e6987784" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>destroyMatching</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0cfe02a0426e95ec9daa2ef7374e07c7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>DispatchHandlerType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9ef5ab71e344fdee8525c3f18241c305" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>DistribConstructFn</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>dumpState</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0af41830e89efe84a071d3dcb1296b1b" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>elementMappedHere</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad7473f6d171ebb8fb5307d93902ae9ae" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>elm::ElementLBData</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>fatalError</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afafcdbf36f42835471218b654252031c" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>finalize</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad27604b811c2e8e5734c8dcfb772f1cb" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>findColHolder</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a68b1f940a90a063268c1de9b2d16a02c" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>findElmHolder</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9358387d86de8983cdbf3db982da7041" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>findElmHolder</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a249d475d576758006ba112af9907d271" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>finishModification</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a4f8a7ea0fd5e1a67a7d0d7a1987fcfa1" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getCollectionPtrForInvoke</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aeb9f3e6a1411d77d0a9d87df97fc9e37" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getCurrentContext</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aa371f1cdd4eafa9f75b7eb40a6f151e0" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getDefaultMap</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae92ad81b99b380b0b87b85f7dbda767a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getDefaultMapImpl</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af183a018e0d2d8b3ed024244d8f83f45" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getDispatcher</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ab672ad6c3bc9fdc5a9577a9ae0677d1f" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getDispatchHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a899158015e2abd7d39eda2c7715e2632" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getElementMapping</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a87b3cd902f7124eb9acd92dbc5895121" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getLabel</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0708d6144e7beea89e4f07fae88e16fc" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getLocalIndices</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ab92af61f5466dd4a1210bd6f2f1bb153" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getMappedNode</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2356c42f2ca0effeca67b6bc2813fc29" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getMappedNode</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9259954aca1df3a68ad1d0a730687612" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getRange</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac6a8ac3b0b5583f426932e95012f8332" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>getTypelessHolder</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a79fb70bedfb02bc57ae4280345dd9427" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>groupElementCount</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad94808d98e429e50376a9d1b35de57ee" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>hasContext</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a79d8ce89b21670fe0d482646aca4a2a4" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>incomingDestroy</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>initialize</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a57a03bda72fb30e3fc886111ff032819" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>insert</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a86abf996b403b4e6325e26cf577440ee" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>insertCollectionElement</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a0fec20114761687630f2a90fce374bc2" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>insertCollectionInfo</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a1c16b833c74649b4cc0e30d622ddaf61" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>insertHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac8c171d221c1c6eafe4efee35775e48b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>insertMetaCollection</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a9d331187028f310c694484da63c1a19d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invoke</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a59aa10550f9e2fb5f72ba3706cf363df" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invoke</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a8337be1c3c829e429f9758664ac284c5" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invoke</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aecbe91648c89bff4635fbd782ccd458a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invokeCollectiveMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aecbe91648c89bff4635fbd782ccd458a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invokeCollectiveMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1accc84ffa2eb3851892143aad927dd799" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invokeMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1accc84ffa2eb3851892143aad927dd799" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invokeMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1abaf663e12552109d1af87d8c9a82ce25" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>invokeMsgImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a21c21612c806016788057aeab142af20" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>IsColMsgType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af8091fcb8218dad155ea028c9b5d283f" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>IsDefaultConstructableType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae376deeefd4f89a0b1c93849977715d9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>IsNotColMsgType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a18e3a17d9eb086c6c2f499242b7faa1e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>IsNotWrapType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a1f91c97ed52237c3a3576dfbbe87c8f8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>IsWrapType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a221921efd4421cb304ca99ebdfdf3117" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeCollection</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a22caeaf37970241107ac2981126ee6df" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeCollectionElement</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ab3dfa8b7bac9f519538d4ce97bb99695" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeCollectionHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a900349a13b2e0382b6731215b4324161" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeCollectionImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac0682938bc90285eb8c476d6898bf280" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeCollectionProxy</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8d3db4274a1239fa0097dae11e93bb9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeFilename</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1abe41e7e9c9dec081a79b222b4c5dc199" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>makeMetaFilename</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aa78b0230c093abfbfc42629f36047c52" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>migrate</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a57458749baaff4b2d76a17e68ffcf912" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>migrateIn</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a480360a498a18520cbe2405ebbe7e9b6" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>migrateOut</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a77f6fb6d9440338fd9a7d610828e5f5c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>migrateToRestoreLocation</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af7cc4c83ae2792595eee99a3206ed633" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>name</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ace73d30a3cdd56b3c68c81265bf95020" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>next_collective_id_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a6604b40c9e592d0bf0ff94ccfe156911" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>next_rooted_id_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad0b203d69106aa09d916dda269d0604d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>param::ConstructParams</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af5d0c9d39e7d86dc7a2afb7b294e5fe1" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>pingHomeHandler</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a45e3c09608c2d8d1a7de12e1c3347f1e" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>progress</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af192090e361f6239d6de2a3c80807421" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>queryIndexContext</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a77d8832834659c44badf499c4770777b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>queryProxyContext</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a530e4c24e204a0a97317e1245a09d54c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>recordLBData</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a482e89c4b14bc1acfab1f23e3dfafbf2" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>reduce_stamp_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47a3227ae0195c15187e8dc8762f66c4" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>ReduceIdxFuncType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a2ac056928e39edf125420e1113cde2bf" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>reduceMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a47fe848e9c16d55bcefcbfeefa6b5597" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>reduceMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a784c4fa10de6571dacfb587af3c90cb1" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>reduceMsgExpr</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae05bc119a4986a39e957c1f8e93eb079" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>reduceMsgExpr</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>reducer</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae8aac19e0ae07e9225142e5880eac830" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>ReduceStamp</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a790738e12739058e7a09b4a3246169e8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerElementListener</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a42ea6d7733a75f09738a877e90db9aa1" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>release_lb_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a315a74b9299f31ebc5e3e4becdd9f79e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>restoreFromFile</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a401419597474752d8554a6f96a972a6b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>restoreFromFileInPlace</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ad9a0b889d763dd4eae462b9ca6d07cc9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>runConstructor</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a7199e829343abd7700dcdcd0a02cd477" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>schedule</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aaa19d241c982123103147b568f97b842" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>schedule</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3165b258fab15c35985b3f9b8ef0dbe7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3165b258fab15c35985b3f9b8ef0dbe7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a55777b57bfad6c9d87d946ed773a391d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a4f87f7f738cde8d48c9c18d16cc06166" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a3ea2d130487c02b8dbda05b7befda88d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a229f96a5075562ee92743d69fc285254" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afc14691c6992cc5d7e51118b1386b67c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsgImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1afc14691c6992cc5d7e51118b1386b67c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsgImpl</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a6411b315ab0a4bfa0293db456077d5cc" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsgUntypedHandler</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ae3ae6f30c8b4aa2c8b50494127cbd77b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsgWithHan</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a6b95df3e94665b5ec8a2c1a186f4ca30" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendMsgWithHan</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a706ce2445fae153c075d3c20f2063507" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>sendNormalMsg</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1af9101933d9e9ca9aa0b6b1f39edbb9f0" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1abe85836f57c42a695fdc292cd78b10cb" prot="public" virt="non-virtual" ambiguityscope="Component&lt; CollectionManager &gt;::"><scope>vt::vrt::collection::CollectionManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1ac71095016a20dd9607f2f937bf35305e" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>staticInit</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a09bd0e2b03bd5f638bdc44f7ffeef715" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>tryGetLocalPtr</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a25a7c464bb729079cc0a33cbe4bc4f15" prot="private" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>typeless_holder_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>UnitType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aecfd5c34b6d0b6781d3bb089ba1ae547" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>unregisterElementListener</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1a086cab4af6af4f869fbf8814c3a9a6a4" prot="public" virt="non-virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>VirtualPtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_collection_manager_1aea0c10371b37041bcc855eef0c767b85" prot="public" virt="virtual"><scope>vt::vrt::collection::CollectionManager</scope><name>~CollectionManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
