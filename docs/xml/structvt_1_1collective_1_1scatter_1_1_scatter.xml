<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1collective_1_1scatter_1_1_scatter" kind="struct" language="C++" prot="public">
    <compoundname>vt::collective::scatter::Scatter</compoundname>
    <basecompoundref refid="structvt_1_1collective_1_1tree_1_1_tree" prot="public" virt="virtual">vt::collective::tree::Tree</basecompoundref>
    <derivedcompoundref refid="structvt_1_1collective_1_1_collective_alg" prot="public" virt="virtual">vt::collective::CollectiveAlg</derivedcompoundref>
    <includes refid="scatter_8h" local="no">scatter.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1collective_1_1scatter_1_1_scatter_1a977d895e42999a4078c6705ac851f447" prot="public" static="no">
        <type>std::function&lt; std::size_t(<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>)&gt;</type>
        <definition>using vt::collective::scatter::Scatter::FuncSizeType =  std::function&lt;std::size_t(NodeType)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="68" column="1" bodyfile="src/vt/collective/scatter/scatter.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1collective_1_1scatter_1_1_scatter_1a4040244e8ed36afd5d408c27efceea1b" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>, void *)&gt;</type>
        <definition>using vt::collective::scatter::Scatter::FuncDataType =  std::function&lt;void(NodeType, void*)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="69" column="1" bodyfile="src/vt/collective/scatter/scatter.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1scatter_1_1_scatter_1a33ea9a78c5d43dcea4ec2cb69d8b00b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::scatter::Scatter::Scatter</definition>
        <argsstring>()</argsstring>
        <name>Scatter</name>
        <briefdescription>
<para>Construct a scatter manager. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="74" column="1" bodyfile="src/vt/collective/scatter/scatter.cc" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1scatter_1_1_scatter_1a0873f5fd4b890ad95e6ed6c097efe8bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::collective::scatter::Scatter::scatter</definition>
        <argsstring>(std::size_t const &amp;total_size, std::size_t const &amp;max_proc_size, FuncSizeType size_fn, FuncDataType data_fn)</argsstring>
        <name>scatter</name>
        <param>
          <type>std::size_t const &amp;</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type>std::size_t const &amp;</type>
          <declname>max_proc_size</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a977d895e42999a4078c6705ac851f447" kindref="member">FuncSizeType</ref></type>
          <declname>size_fn</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a4040244e8ed36afd5d408c27efceea1b" kindref="member">FuncDataType</ref></type>
          <declname>data_fn</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter" kindref="compound">Scatter</ref> data to all nodes. </para>        </briefdescription>
        <detaileddescription>
<para>The functions passed to scatter through the arguments <computeroutput>size_fn</computeroutput> and <computeroutput>data_fn</computeroutput> will not be retained after this call returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">total_size</parametername>
</parameternamelist>
<parameterdescription>
<para>total size of data to scatter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_proc_size</parametername>
</parameternamelist>
<parameterdescription>
<para>max data to be scattered to any node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to get size for each node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to get data for each node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="88" column="1" bodyfile="src/vt/collective/scatter/scatter.impl.h" bodystart="58" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1scatter_1_1_scatter_1ab1993f3a5db651302eeca07d8aa739aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::collective::scatter::Scatter::scatter</definition>
        <argsstring>(std::size_t const &amp;total_size, std::size_t const &amp;max_proc_size, FuncSizeType size_fn, FuncDataType data_fn)</argsstring>
        <name>scatter</name>
        <param>
          <type>std::size_t const &amp;</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type>std::size_t const &amp;</type>
          <declname>max_proc_size</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a977d895e42999a4078c6705ac851f447" kindref="member">FuncSizeType</ref></type>
          <declname>size_fn</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a4040244e8ed36afd5d408c27efceea1b" kindref="member">FuncDataType</ref></type>
          <declname>data_fn</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter" kindref="compound">Scatter</ref> data to all nodes. </para>        </briefdescription>
        <detaileddescription>
<para>The functions passed to scatter through the arguments <computeroutput>size_fn</computeroutput> and <computeroutput>data_fn</computeroutput> will not be retained after this call returns.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">total_size</parametername>
</parameternamelist>
<parameterdescription>
<para>total size of data to scatter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_proc_size</parametername>
</parameternamelist>
<parameterdescription>
<para>max data to be scattered to any node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to get size for each node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to get data for each node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="105" column="1" bodyfile="src/vt/collective/scatter/scatter.h" bodystart="105" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1scatter_1_1_scatter_1aa80a957377cce3126058f3d7d30d2fed" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::scatter::Scatter::scatterIn</definition>
        <argsstring>(ScatterMsg *msg)</argsstring>
        <name>scatterIn</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_msg" kindref="compound">ScatterMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Receive scattered data down the spanning tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the scatter message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="119" column="1" bodyfile="src/vt/collective/scatter/scatter.cc" bodystart="79" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1scatter_1_1_scatter_1a0e838718a3f3ad28aef779c4ea4a985f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vt::collective::scatter::Scatter::applyScatterRecur</definition>
        <argsstring>(NodeType node, char *ptr, std::size_t elm_size, FuncSizeType size_fn, FuncDataType data_fn)</argsstring>
        <name>applyScatterRecur</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>elm_size</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a977d895e42999a4078c6705ac851f447" kindref="member">FuncSizeType</ref></type>
          <declname>size_fn</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a4040244e8ed36afd5d408c27efceea1b" kindref="member">FuncDataType</ref></type>
          <declname>data_fn</declname>
        </param>
        <briefdescription>
<para>Helper function to scatter data. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the current code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to raw data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">elm_size</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes per element of raw data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to get size for each node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to get data for each node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>incremented point after scatter is complete </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="133" column="1" bodyfile="src/vt/collective/scatter/scatter.cc" bodystart="55" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1scatter_1_1_scatter_1a96466ab88d5f8e69613c69e0e644e10c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::scatter::Scatter::scatterHandler</definition>
        <argsstring>(ScatterMsg *msg)</argsstring>
        <name>scatterHandler</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter_msg" kindref="compound">ScatterMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Active function to receive scattered data. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the scatter message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/scatter/scatter.h" line="143" column="1" bodyfile="src/vt/collective/scatter/scatter.cc" bodystart="124" bodyend="126"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structvt_1_1collective_1_1scatter_1_1_scatter" kindref="compound">Scatter</ref> data across all nodes from a single origin. </para>    </briefdescription>
    <detaileddescription>
<para>Performs an asynchronous scatter over all the nodes in the communicator/runtime. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3674">
        <label>vt::collective::scatter::Scatter</label>
        <link refid="structvt_1_1collective_1_1scatter_1_1_scatter"/>
        <childnode refid="3675" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3676">
        <label>vt::collective::CollectiveAlg</label>
        <link refid="structvt_1_1collective_1_1_collective_alg"/>
        <childnode refid="3674" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3675">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3677">
        <label>vt::collective::scatter::Scatter</label>
        <link refid="structvt_1_1collective_1_1scatter_1_1_scatter"/>
        <childnode refid="3678" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3678">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/collective/scatter/scatter.h" line="67" column="1" bodyfile="src/vt/collective/scatter/scatter.h" bodystart="67" bodyend="144"/>
    <listofallmembers>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a0e838718a3f3ad28aef779c4ea4a985f" prot="private" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>applyScatterRecur</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad5546485f90dd449a203f174b1374a01" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a8200f03bf19b18b2323d1fcb99d5335f" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a4040244e8ed36afd5d408c27efceea1b" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>FuncDataType</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a977d895e42999a4078c6705ac851f447" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>FuncSizeType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a57b3edade6230de16232213b7c4380f5" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a39e27b1538bf00674a5a653dfd7a0e83" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad68dc6aac90193cc15955d7bd1a5b1fc" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>getNumChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5375e6fbda5c36891b21cc17acc204dd" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a26e27c8c2da5db17c5cc26f15c2ebfb8" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ab509dada696b718152e8ac04edd551af" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>getParent</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a88b2add909b0035f4844317481ed559b" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>isRoot</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>NodeListType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a56532f6b47b9c71864980b73deee2d5a" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>numLevels</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>NumLevelsType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>OperationType</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a0873f5fd4b890ad95e6ed6c097efe8bd" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>scatter</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1ab1993f3a5db651302eeca07d8aa739aa" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>scatter</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a33ea9a78c5d43dcea4ec2cb69d8b00b4" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>Scatter</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1a96466ab88d5f8e69613c69e0e644e10c" prot="private" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>scatterHandler</name></member>
      <member refid="structvt_1_1collective_1_1scatter_1_1_scatter_1aa80a957377cce3126058f3d7d30d2fed" prot="protected" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>scatterIn</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1aa3120d3bdbb2a308dd6831aa52d0ebb0" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>setupTree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ae9570e9a8f303295744e99b527603a51" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad759f716890ce5344a6c6053fcdc7055" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a949f8b592559125bf225bd3828bd6b88" prot="public" virt="non-virtual"><scope>vt::collective::scatter::Scatter</scope><name>Tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
