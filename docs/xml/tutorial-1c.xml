<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tutorial-1c" kind="page">
    <compoundname>tutorial-1c</compoundname>
    <title>Learning about serialization</title>
    <detaileddescription>
<para><programlisting><codeline><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/>Some<sp/>user<sp/>defined<sp/>data<sp/>structures</highlight></codeline>
<codeline><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Particle<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Particle()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Particle(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in_x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in_y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in_z)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>x(in_x),<sp/>y(in_y),<sp/>z(in_z)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-message<sp/>types<sp/>can<sp/>use<sp/>serializers<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(SerializerT&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>x<sp/>|<sp/>y<sp/>|<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>z;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Data<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(SerializerT&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>show<sp/>data<sp/>with<sp/>non-intrusive<sp/>serialization</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>show<sp/>data<sp/>that<sp/>does<sp/>not<sp/>need<sp/>serialization</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VT<sp/>Base<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\----------------/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ParticleMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">::vt::Message</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>MessageParentType<sp/>=<sp/><ref refid="namespacevt_1a3a3ddfef40b4c90915fa43cdd5f129ea" kindref="member">::vt::Message</ref>;<sp/></highlight><highlight class="comment">//<sp/>base<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="message__serialize_8h_1a54128d5338aaa9c918179826085e13d1" kindref="member">vt_msg_serialize_required</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>serialization<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ParticleMsg()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ParticleMsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_z)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>x(in_x),<sp/>y(in_y),<sp/>z(in_z)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*<sp/>Implement<sp/>a<sp/>serialize<sp/>method<sp/>so<sp/>the<sp/>std::vector<sp/>and<sp/>pointer<sp/>are<sp/>properly</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*<sp/>serialization<sp/>on<sp/>the<sp/>send.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(SerializerT&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">MessageParentType::serialize</ref>(s);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>parent<sp/>is<sp/>serialized<sp/>consistently</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>particles;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>x<sp/>|<sp/>y<sp/>|<sp/>z;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serialize<sp/>a<sp/>pointer<sp/>by<sp/>first<sp/>serializing<sp/>whether<sp/>it<sp/>is<sp/>non-null<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>actual<sp/>value<sp/>if<sp/>it&apos;s<sp/>not<sp/>non-null</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_a<sp/>=<sp/>a<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>has_a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_a)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>|<sp/>*a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Particle&gt;<sp/>particles;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0,<sp/>y<sp/>=<sp/>0,<sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Data*<sp/>a<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration<sp/>for<sp/>the<sp/>active<sp/>message<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgSerialA(ParticleMsg*<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tutorial<sp/>code<sp/>to<sp/>demonstrate<sp/>serialization<sp/>in<sp/>active<sp/>message<sp/>sends</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>activeMessageSerialization()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>this_node<sp/>=<sp/><ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">::vt::theContext</ref>()-&gt;<ref refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" kindref="member">getNode</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>num_nodes<sp/>=<sp/><ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">::vt::theContext</ref>()-&gt;<ref refid="structvt_1_1ctx_1_1_context_1a7f41071aadf6d5fa9e1b6c703c5ff19d" kindref="member">getNumNodes</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(void)num_nodes;<sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>warn<sp/>about<sp/>unused<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>theMsg()-&gt;sendMsg(..)<sp/>will<sp/>serialize<sp/>the<sp/>message<sp/>sent<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*<sp/>destination<sp/>node<sp/>if<sp/>it<sp/>has<sp/>a<sp/>serialize<sp/>method.<sp/>If<sp/>not,<sp/>it<sp/>will<sp/>send<sp/>the</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*<sp/>message<sp/>as<sp/>if<sp/>it<sp/>is<sp/>sent<sp/>directly<sp/>the<sp/>sendMsg.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this_node<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>to_node<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>::vt::makeMessage&lt;ParticleMsg&gt;(1,2,3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;particles.push_back(Particle{10,11,12});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;particles.push_back(Particle{13,14,15});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">::vt::theMsg</ref>()-&gt;<ref refid="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" kindref="member">sendMsg</ref>&lt;ParticleMsg,msgSerialA&gt;(to_node,<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Message<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>msgSerialA(ParticleMsg*<sp/>msg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(msg-&gt;particles.size()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>two<sp/>particles&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(msg-&gt;x<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>msg-&gt;y<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>msg-&gt;z<sp/>==<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;Values<sp/>x,y,z<sp/>incorrect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cur_node<sp/>=<sp/><ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">::vt::theContext</ref>()-&gt;<ref refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" kindref="member">getNode</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Node<sp/>0<sp/>sends<sp/>MyMsg<sp/>to<sp/>node<sp/>1<sp/>in<sp/>the<sp/>above<sp/>code<sp/>so<sp/>this<sp/>should<sp/>execute<sp/>on</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>*<sp/>node<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(cur_node<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>handler<sp/>should<sp/>execute<sp/>on<sp/>node<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::fmt::print(</highlight><highlight class="stringliteral">&quot;msgSerialA:<sp/>triggered<sp/>on<sp/>node={}\n&quot;</highlight><highlight class="normal">,<sp/>cur_node);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>    </detaileddescription>
  </compounddef>
</doxygen>
