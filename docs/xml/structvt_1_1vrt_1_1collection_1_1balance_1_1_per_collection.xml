<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::balance::PerCollection</compoundname>
    <basecompoundref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model" prot="public" virt="non-virtual">vt::vrt::collection::balance::ComposedModel</basecompoundref>
    <includes refid="per__collection_8h" local="no">per_collection.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1ade08a6857f727a0a9d1ef63b25fc5b71" prot="public" static="no">
        <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref></type>
        <definition>using vt::vrt::collection::balance::PerCollection::CollectionID =  VirtualProxyType</definition>
        <argsstring></argsstring>
        <name>CollectionID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="59" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1aec76660b4a44fe451a9546b4f4c50d3d" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1ade08a6857f727a0a9d1ef63b25fc5b71" kindref="member">CollectionID</ref>, std::shared_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model" kindref="compound">LoadModel</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;CollectionID, std::shared_ptr&lt;LoadModel&gt; &gt; vt::vrt::collection::balance::PerCollection::models_</definition>
        <argsstring></argsstring>
        <name>models_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="87" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1aa149a252fec1619bd947e53e3a66b854" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vrt::collection::balance::PerCollection::PerCollection</definition>
        <argsstring>(std::shared_ptr&lt; LoadModel &gt; base)</argsstring>
        <name>PerCollection</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model" kindref="compound">LoadModel</ref> &gt;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying default model. Used to give loads for objects in unspecified collections, and for object and subphase enumeration </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="66" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a79ecd769664dcaabe413a5d77033b81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::balance::PerCollection::addModel</definition>
        <argsstring>(CollectionID proxy, std::shared_ptr&lt; LoadModel &gt; model)</argsstring>
        <name>addModel</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1ade08a6857f727a0a9d1ef63b25fc5b71" kindref="member">CollectionID</ref></type>
          <declname>proxy</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model" kindref="compound">LoadModel</ref> &gt;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Add a model for objects in a specific collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual proxy of the collection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>the associated model for the particular collection </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="74" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1aba8f472fbe40c44c9f0f9028afe29cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::balance::PerCollection::setLoads</definition>
        <argsstring>(std::unordered_map&lt; PhaseType, LoadMapType &gt; const *proc_load, std::unordered_map&lt; PhaseType, CommMapType &gt; const *proc_comm) override</argsstring>
        <name>setLoads</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a3a7da5e81a933ea88f87a1226fd3b401">setLoads</reimplements>
        <param>
          <type>std::unordered_map&lt; <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref>, <ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a5339303db2e1ce964d783a53fd74e6b1" kindref="member">LoadMapType</ref> &gt; const *</type>
          <declname>proc_load</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref>, <ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a01ee1fb0ae2da1d2ab7fdca3be9ae351" kindref="member">CommMapType</ref> &gt; const *</type>
          <declname>proc_comm</declname>
        </param>
        <briefdescription>
<para>Initialize the model instance with pointers to the measured load data. </para>        </briefdescription>
        <detaileddescription>
<para>This would typically be called by <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_manager" kindref="compound">LBManager</ref> when the user has passed a new model instance for a collection </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="76" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a2b41fbbe2b684654f8dbfd9207b77501" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::balance::PerCollection::updateLoads</definition>
        <argsstring>(PhaseType last_completed_phase) override</argsstring>
        <name>updateLoads</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1ad8108b4392d63b7f09e443920a64933a">updateLoads</reimplements>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>last_completed_phase</declname>
        </param>
        <briefdescription>
<para>Signals that load data for a new phase is available. </para>        </briefdescription>
        <detaileddescription>
<para>For models that want to do pre-computation based on measured loads before being asked to provide predictions from them</para><para>This would typically be called by <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_manager" kindref="compound">LBManager</ref> collectively inside an epoch that can be used for global communication in advance of any calls to <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a465b8f14dead0affdaeb0cf24373565f" kindref="member">getModeledLoad()</ref></para><para>The <computeroutput>setLoads</computeroutput> method must have been called before any call to this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="79" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a465b8f14dead0affdaeb0cf24373565f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacevt_1a876a9d0cd5a952859c72de8a46881442" kindref="member">TimeType</ref></type>
        <definition>TimeType vt::vrt::collection::balance::PerCollection::getModeledLoad</definition>
        <argsstring>(ElementIDStruct object, PhaseOffset when) const override</argsstring>
        <name>getModeledLoad</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a1dc491d5661d7690a8014d7a5833d788">getModeledLoad</reimplements>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a9f5b53fafb270212279a4757d2c4cd28" kindref="member">ElementIDStruct</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_phase_offset" kindref="compound">PhaseOffset</ref></type>
          <declname>when</declname>
        </param>
        <briefdescription>
<para>Provide an estimate of the given object&apos;s load during a specified interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object whose load is desired </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">when</parametername>
</parameternamelist>
<parameterdescription>
<para>The interval in which the estimated load is desired</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>How much computation time the object is estimated to require</para></simplesect>
The <computeroutput>updateLoads</computeroutput> method must have been called before any call to this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="81" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a82a94bbf8764a3c6bd346e4a686e1efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::balance::PerCollection::hasRawLoad</definition>
        <argsstring>() const override</argsstring>
        <name>hasRawLoad</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1ad6e2a1c572a80e35acad0fcf1a0e8071">hasRawLoad</reimplements>
        <briefdescription>
<para>Whether or not the model is based on the <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_raw_data" kindref="compound">RawData</ref> model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="82" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="82" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1af5e29141a1527b165767596336f0d7a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacevt_1a876a9d0cd5a952859c72de8a46881442" kindref="member">TimeType</ref></type>
        <definition>TimeType vt::vrt::collection::balance::PerCollection::getRawLoad</definition>
        <argsstring>(ElementIDStruct object, PhaseOffset when) const override</argsstring>
        <name>getRawLoad</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a970a2b3b5bda75934fb186d5fe8b9f00">getRawLoad</reimplements>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a9f5b53fafb270212279a4757d2c4cd28" kindref="member">ElementIDStruct</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_phase_offset" kindref="compound">PhaseOffset</ref></type>
          <declname>when</declname>
        </param>
        <briefdescription>
<para>Provide the given object&apos;s raw load during a specified interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object whose raw load is desired </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">when</parametername>
</parameternamelist>
<parameterdescription>
<para>The interval in which the raw load is desired</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>How much computation time the object required </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="83" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1ad71f5405a169c5fe2a25668df96c3a7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>unsigned int</type>
        <definition>unsigned int vt::vrt::collection::balance::PerCollection::getNumPastPhasesNeeded</definition>
        <argsstring>(unsigned int look_back) const override</argsstring>
        <name>getNumPastPhasesNeeded</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a20bb994d1b3b27eb2a82729d7d5c30f3">getNumPastPhasesNeeded</reimplements>
        <param>
          <type>unsigned int</type>
          <declname>look_back</declname>
        </param>
        <briefdescription>
<para>Compute how many phases of past load statistics need to be kept available for the model to use. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">look_back</parametername>
</parameternamelist>
<parameterdescription>
<para>How many phases into the past the caller intends to query</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>How many phases of past load statistics will be needed to satisfy the requested history </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="84" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.cc" bodystart="103" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Selects an underlying model to call corresponding to the collection containing the queried object. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3114">
        <label>vt::vrt::collection::balance::ComposedModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model"/>
        <childnode refid="3115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3113">
        <label>vt::vrt::collection::balance::PerCollection</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection"/>
        <childnode refid="3114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3115">
        <label>vt::vrt::collection::balance::LoadModel</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3117">
        <label>vt::vrt::collection::balance::ComposedModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model"/>
        <childnode refid="3118" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3116">
        <label>vt::vrt::collection::balance::PerCollection</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection"/>
        <childnode refid="3117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3118">
        <label>vt::vrt::collection::balance::LoadModel</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/vrt/collection/balance/model/per_collection.h" line="58" column="1" bodyfile="src/vt/vrt/collection/balance/model/per_collection.h" bodystart="57" bodyend="88"/>
    <listofallmembers>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a79ecd769664dcaabe413a5d77033b81b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>addModel</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a7d32b6f8a0ca5970674238325df11783" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>begin</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1ade08a6857f727a0a9d1ef63b25fc5b71" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>CollectionID</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a84b77c1fceb9e07a0706b896a4d9e9c9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>ComposedModel</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a2b3212a8438a4b58a73c41db841f15b7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>end</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a3db01f9ec9440bc5b77fae390581c874" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getModeledComm</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a465b8f14dead0affdaeb0cf24373565f" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getModeledLoad</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a85bd890eb6e94c85cbfeb9ef321139dc" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getNumCompletedPhases</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1abd58ffd308443021356aff2595c6980f" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getNumObjects</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1ad71f5405a169c5fe2a25668df96c3a7c" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getNumPastPhasesNeeded</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a744a16572614d11e554b1bf53b7c57f6" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getNumSubphases</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1af5e29141a1527b165767596336f0d7a6" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>getRawLoad</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a82a94bbf8764a3c6bd346e4a686e1efb" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>hasRawLoad</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a90f345e752441d66b2893027f2626226" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>LoadModel</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1aec76660b4a44fe451a9546b4f4c50d3d" prot="private" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>models_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1aa149a252fec1619bd947e53e3a66b854" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>PerCollection</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a52e2210225947697a235b75c385eb104" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>serialize</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1aba8f472fbe40c44c9f0f9028afe29cfc" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>setLoads</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection_1a2b41fbbe2b684654f8dbfd9207b77501" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>updateLoads</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a6478a387f285b322a48ee1d8a80fc6f7" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::PerCollection</scope><name>~LoadModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
