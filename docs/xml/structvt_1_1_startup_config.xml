<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1_startup_config" kind="struct" language="C++" prot="public">
    <compoundname>vt::StartupConfig</compoundname>
    <includes refid="startup__config_8h" local="no">startup_config.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1_startup_config_1a0eee5c8250b89f252fd9c475bc547805" prot="public" static="no">
        <type><ref refid="structvt_1_1arguments_1_1_parse_input_holder" kindref="compound">arguments::ParseInputHolder</ref></type>
        <definition>using vt::StartupConfig::ParseInputHolder =  arguments::ParseInputHolder</definition>
        <argsstring></argsstring>
        <name>ParseInputHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="81" column="3" bodyfile="src/vt/collective/startup_config.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1_startup_config_1a935a9cf16e5acb0208f7e2fe55366418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct vt::runtime::Runtime</definition>
        <argsstring></argsstring>
        <name>vt::runtime::Runtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="79" column="3" bodyfile="src/vt/collective/startup_config.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_startup_config_1ac04d234fa0495d672da9d3f18ab65b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::unique_ptr&lt; <ref refid="structvt_1_1_startup_config" kindref="compound">StartupConfig</ref> &gt;</type>
        <definition>std::unique_ptr&lt;StartupConfig&gt; preconfigure</definition>
        <argsstring>(int &amp;argc, char **&amp;argv)</argsstring>
        <name>preconfigure</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Preconfigure VT with argc/argv. This will remove all VT arguments and create a <computeroutput><ref refid="structvt_1_1_startup_config" kindref="compound">StartupConfig</ref></computeroutput> for VT that should be passed to <computeroutput>initializePreconfigured</computeroutput>. Optionally, one may specify an MPI communicator to use (otherwise, it defaults to <computeroutput>MPI_COMM_WORLD</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>MPI must be initialized to call this function because if an error occurs it uses MPI rank to limit how many times the error text gets printed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">argc</parametername>
</parameternamelist>
<parameterdescription>
<para>argc (modifies it to remove VT arguments) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argv (modifies it to remove VT arguments)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1_startup_config" kindref="compound">StartupConfig</ref></computeroutput> to pass to VT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="75" column="26" bodyfile="src/vt/collective/startup.cc" bodystart="53" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1_startup_config_1a86a14d66f83b71cdbf2681101e1cf4a8" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1arguments_1_1_arg_config" kindref="compound">arguments::ArgConfig</ref> &gt;</type>
        <definition>std::unique_ptr&lt;arguments::ArgConfig&gt; vt::StartupConfig::arg_config_</definition>
        <argsstring></argsstring>
        <name>arg_config_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="94" column="19" bodyfile="src/vt/collective/startup_config.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1_startup_config_1afa81ec21bd8473f3d102b15cda3c2130" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1_startup_config_1a0eee5c8250b89f252fd9c475bc547805" kindref="member">ParseInputHolder</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ParseInputHolder&gt; vt::StartupConfig::parse_input_holder_</definition>
        <argsstring></argsstring>
        <name>parse_input_holder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="95" column="19" bodyfile="src/vt/collective/startup_config.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1_startup_config_1abbc546376cbfeddb6cd5d866e5258a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::StartupConfig::StartupConfig</definition>
        <argsstring>(std::unique_ptr&lt; arguments::ArgConfig &gt; in_arg_config, std::unique_ptr&lt; ParseInputHolder &gt; in_parse_input_holder)</argsstring>
        <name>StartupConfig</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structvt_1_1arguments_1_1_arg_config" kindref="compound">arguments::ArgConfig</ref> &gt;</type>
          <declname>in_arg_config</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structvt_1_1_startup_config_1a0eee5c8250b89f252fd9c475bc547805" kindref="member">ParseInputHolder</ref> &gt;</type>
          <declname>in_parse_input_holder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>Construct a <computeroutput><ref refid="structvt_1_1_startup_config" kindref="compound">StartupConfig</ref></computeroutput> </para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="86" column="3" bodyfile="src/vt/collective/startup_config.cc" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_startup_config_1ad4fee1c710ae649104e9e6032064348f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::StartupConfig::~StartupConfig</definition>
        <argsstring>()</argsstring>
        <name>~StartupConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/startup_config.h" line="91" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structvt_1_1_startup_config" kindref="compound">StartupConfig</ref> for preconfiguring VT before starting up the runtime. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/collective/startup_config.h" line="74" column="20" bodyfile="src/vt/collective/startup_config.h" bodystart="74" bodyend="96"/>
    <listofallmembers>
      <member refid="structvt_1_1_startup_config_1a86a14d66f83b71cdbf2681101e1cf4a8" prot="private" virt="non-virtual"><scope>vt::StartupConfig</scope><name>arg_config_</name></member>
      <member refid="structvt_1_1_startup_config_1afa81ec21bd8473f3d102b15cda3c2130" prot="private" virt="non-virtual"><scope>vt::StartupConfig</scope><name>parse_input_holder_</name></member>
      <member refid="structvt_1_1_startup_config_1a0eee5c8250b89f252fd9c475bc547805" prot="public" virt="non-virtual"><scope>vt::StartupConfig</scope><name>ParseInputHolder</name></member>
      <member refid="structvt_1_1_startup_config_1ac04d234fa0495d672da9d3f18ab65b07" prot="public" virt="non-virtual"><scope>vt::StartupConfig</scope><name>preconfigure</name></member>
      <member refid="structvt_1_1_startup_config_1abbc546376cbfeddb6cd5d866e5258a88" prot="public" virt="non-virtual"><scope>vt::StartupConfig</scope><name>StartupConfig</name></member>
      <member refid="structvt_1_1_startup_config_1a935a9cf16e5acb0208f7e2fe55366418" prot="public" virt="non-virtual"><scope>vt::StartupConfig</scope><name>vt::runtime::Runtime</name></member>
      <member refid="structvt_1_1_startup_config_1ad4fee1c710ae649104e9e6032064348f" prot="public" virt="non-virtual"><scope>vt::StartupConfig</scope><name>~StartupConfig</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
