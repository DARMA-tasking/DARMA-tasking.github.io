<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1_time_type_wrapper" kind="struct" language="C++" prot="public">
    <compoundname>vt::TimeTypeWrapper</compoundname>
    <includes refid="timing__type_8h" local="no">timing_type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" prot="public" static="no">
        <type>double</type>
        <definition>using vt::TimeTypeWrapper::TimeTypeInternal =  double</definition>
        <argsstring></argsstring>
        <name>TimeTypeInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="54" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1_time_type_wrapper_1ac00551d2803c7cb163ca08e70cbe7916" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" kindref="member">TimeTypeInternal</ref></type>
        <definition>TimeTypeInternal vt::TimeTypeWrapper::time_</definition>
        <argsstring></argsstring>
        <name>time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="164" column="20" bodyfile="src/vt/timing/timing_type.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1a9f7351384425b9fcf83bd1316dfe7d66" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr vt::TimeTypeWrapper::TimeTypeWrapper</definition>
        <argsstring>(const TimeTypeInternal time=0.0)</argsstring>
        <name>TimeTypeWrapper</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" kindref="member">TimeTypeInternal</ref></type>
          <declname>time</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="55" column="22" bodyfile="src/vt/timing/timing_type.h" bodystart="55" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1a85dfb0b89e53e8b06325cc4ab4cd5972" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::TimeTypeWrapper::operator double</definition>
        <argsstring>() const</argsstring>
        <name>operator double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="58" column="12" bodyfile="src/vt/timing/timing_type.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1aa76022003bb022bb14ed92e59e12559d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
        <definition>TimeTypeWrapper&amp; vt::TimeTypeWrapper::operator+=</definition>
        <argsstring>(const TimeTypeWrapper &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="60" column="19" bodyfile="src/vt/timing/timing_type.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1a46d946edc6cf56409f20901c7cb62efc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
        <definition>TimeTypeWrapper&amp; vt::TimeTypeWrapper::operator-=</definition>
        <argsstring>(const TimeTypeWrapper &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="65" column="19" bodyfile="src/vt/timing/timing_type.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1a2a3dea4fda14272b8b25ebdf7fb4f4eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
        <definition>TimeTypeWrapper&amp; vt::TimeTypeWrapper::operator*=</definition>
        <argsstring>(const double scalar)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="70" column="19" bodyfile="src/vt/timing/timing_type.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1ad036b5d8434bd1771cd191fdc438396f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
        <definition>TimeTypeWrapper&amp; vt::TimeTypeWrapper::operator/=</definition>
        <argsstring>(const double scalar)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="75" column="19" bodyfile="src/vt/timing/timing_type.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1ae2979e22f260de5316d96b999a4cc4c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" kindref="member">TimeTypeInternal</ref></type>
        <definition>TimeTypeInternal vt::TimeTypeWrapper::seconds</definition>
        <argsstring>() const</argsstring>
        <name>seconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="154" column="20" bodyfile="src/vt/timing/timing_type.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1a471abf813f0c77b6e15006da22e842f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" kindref="member">TimeTypeInternal</ref></type>
        <definition>TimeTypeInternal vt::TimeTypeWrapper::milliseconds</definition>
        <argsstring>() const</argsstring>
        <name>milliseconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="155" column="20" bodyfile="src/vt/timing/timing_type.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1a319e11ba15bb76cd2e8abe2574ad093e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" kindref="member">TimeTypeInternal</ref></type>
        <definition>TimeTypeInternal vt::TimeTypeWrapper::microseconds</definition>
        <argsstring>() const</argsstring>
        <name>microseconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="156" column="20" bodyfile="src/vt/timing/timing_type.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_time_type_wrapper_1aa5c7311e8b108c65a4af7118163f18c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::TimeTypeWrapper::serialize</definition>
        <argsstring>(Serializer &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>Serializer &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="159" column="8" bodyfile="src/vt/timing/timing_type.h" bodystart="159" bodyend="161"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1ac539ef13d4f25ad2e1245134b4502e35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator+</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="81" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1a15d79ec6de5debc18a0f4c91ab04b1f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator-</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="86" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1ac8858e68561056ede6fe89732125f11f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator*</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="91" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1ab7cc197fd53b7a7a5b8fd78d9f4f5a25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator*</definition>
        <argsstring>(const TimeTypeWrapper &amp;time, const double scalar)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="96" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1a33285e8caada86dd610c4acd27471287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator*</definition>
        <argsstring>(const double scalar, const TimeTypeWrapper &amp;time)</argsstring>
        <name>operator*</name>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="101" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1af0b641c1b9ea4c66e9056f20086c15d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator/</definition>
        <argsstring>(const double scalar, const TimeTypeWrapper &amp;time)</argsstring>
        <name>operator/</name>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="106" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1adf78cb5a565bd8defd464de0dadba748" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator/</definition>
        <argsstring>(const TimeTypeWrapper &amp;time, const double scalar)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="111" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1a6ae72117fbbbd813cb147f18196f9874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper operator/</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="116" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1adbf090742dcb35298a559f6108e1f373" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="120" column="10" bodyfile="src/vt/timing/timing_type.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1a273632f126348cb63cf02b3d050bf5e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="125" column="10" bodyfile="src/vt/timing/timing_type.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1aa0a3862c4cc029a4c083865b96ca0fcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="131" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1af28b3f7a4c7802a8eb7f76943712fa15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="136" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1a83ec275efb1d17d07c5cf560809694ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="141" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1af262df7ce230a03a6d8834cda01ffce2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TimeTypeWrapper &amp;lhs, const TimeTypeWrapper &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="146" column="3" bodyfile="src/vt/timing/timing_type.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1_time_type_wrapper_1af65b2073afd3948afa486affcaedeb11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref></type>
        <definition>TimeTypeWrapper sqrt</definition>
        <argsstring>(const TimeTypeWrapper &amp;time)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="structvt_1_1_time_type_wrapper" kindref="compound">TimeTypeWrapper</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/timing/timing_type.h" line="150" column="26" bodyfile="src/vt/timing/timing_type.h" bodystart="150" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/timing/timing_type.h" line="53" column="22" bodyfile="src/vt/timing/timing_type.h" bodystart="53" bodyend="165"/>
    <listofallmembers>
      <member refid="structvt_1_1_time_type_wrapper_1a319e11ba15bb76cd2e8abe2574ad093e" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>microseconds</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a471abf813f0c77b6e15006da22e842f6" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>milliseconds</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a85dfb0b89e53e8b06325cc4ab4cd5972" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator double</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1af262df7ce230a03a6d8834cda01ffce2" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator!=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1ac8858e68561056ede6fe89732125f11f" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator*</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1ab7cc197fd53b7a7a5b8fd78d9f4f5a25" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator*</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a33285e8caada86dd610c4acd27471287" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator*</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a2a3dea4fda14272b8b25ebdf7fb4f4eb" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator*=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1ac539ef13d4f25ad2e1245134b4502e35" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator+</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1aa76022003bb022bb14ed92e59e12559d" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator+=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a15d79ec6de5debc18a0f4c91ab04b1f0" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator-</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a46d946edc6cf56409f20901c7cb62efc" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator-=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1af0b641c1b9ea4c66e9056f20086c15d6" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator/</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1adf78cb5a565bd8defd464de0dadba748" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator/</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a6ae72117fbbbd813cb147f18196f9874" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator/</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1ad036b5d8434bd1771cd191fdc438396f" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator/=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1adbf090742dcb35298a559f6108e1f373" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator&lt;</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a273632f126348cb63cf02b3d050bf5e8" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator&lt;=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a83ec275efb1d17d07c5cf560809694ea" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator==</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1aa0a3862c4cc029a4c083865b96ca0fcc" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator&gt;</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1af28b3f7a4c7802a8eb7f76943712fa15" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>operator&gt;=</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1ae2979e22f260de5316d96b999a4cc4c2" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>seconds</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1aa5c7311e8b108c65a4af7118163f18c8" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>serialize</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1af65b2073afd3948afa486affcaedeb11" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>sqrt</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1ac00551d2803c7cb163ca08e70cbe7916" prot="private" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>time_</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a932f8d925e6c43e898fb8761ea667ef1" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>TimeTypeInternal</name></member>
      <member refid="structvt_1_1_time_type_wrapper_1a9f7351384425b9fcf83bd1316dfe7d66" prot="public" virt="non-virtual"><scope>vt::TimeTypeWrapper</scope><name>TimeTypeWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
