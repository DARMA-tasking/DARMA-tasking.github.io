<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1messaging" kind="namespace" language="C++">
    <compoundname>vt::messaging</compoundname>
    <innerclass refid="structvt_1_1messaging_1_1_active_envelope" prot="public">vt::messaging::ActiveEnvelope</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_active_messenger" prot="public">vt::messaging::ActiveMessenger</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_active_msg" prot="public">vt::messaging::ActiveMsg</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_base_msg" prot="public">vt::messaging::BaseMsg</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_buffered_active_msg" prot="public">vt::messaging::BufferedActiveMsg</innerclass>
    <innerclass refid="classvt_1_1messaging_1_1_collection_chain_set" prot="public">vt::messaging::CollectionChainSet</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1cxx14__conjunction" prot="public">vt::messaging::cxx14_conjunction</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1cxx14__conjunction_3_01_b1_01_4" prot="public">vt::messaging::cxx14_conjunction&lt; B1 &gt;</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1cxx14__conjunction_3_01_b1_00_01_bn_8_8_8_01_4" prot="public">vt::messaging::cxx14_conjunction&lt; B1, Bn... &gt;</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1cxx14__make__void" prot="public">vt::messaging::cxx14_make_void</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_defines_serialization_mode" prot="public">vt::messaging::DefinesSerializationMode</innerclass>
    <innerclass refid="classvt_1_1messaging_1_1_dependent_send_chain" prot="public">vt::messaging::DependentSendChain</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_epoch_active_envelope" prot="public">vt::messaging::EpochActiveEnvelope</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_epoch_tag_active_envelope" prot="public">vt::messaging::EpochTagActiveEnvelope</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1has__any__serialize__member__t" prot="public">vt::messaging::has_any_serialize_member_t</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1has__own__serialize__member__t" prot="public">vt::messaging::has_own_serialize_member_t</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1has__own__serialize__member__t_3_01_u_00_01std_1_1enable__if__t_3_01std8741339fbc39701010cb527cee7ae844" prot="public">vt::messaging::has_own_serialize_member_t&lt; U, std::enable_if_t&lt; std::is_same&lt; void(U::*)(::checkpoint::Sizer &amp;), decltype(&amp;U::template serialize&lt; SerializeSizerType &gt;) &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_in_progress_data_i_recv" prot="public">vt::messaging::InProgressDataIRecv</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_in_progress_i_recv" prot="public">vt::messaging::InProgressIRecv</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_i_recv_holder" prot="public">vt::messaging::IRecvHolder</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1is__byte__copyable__t" prot="public">vt::messaging::is_byte_copyable_t</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_listener" prot="public">vt::messaging::Listener</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_merged_closure" prot="public">vt::messaging::MergedClosure</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1msg__defines__serialize__mode" prot="public">vt::messaging::msg_defines_serialize_mode</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1msg__defines__serialize__mode_3_01_u_00_01std_1_1enable__if__t_3_01std_8698c5f7a65cc513c46123d196b4add1" prot="public">vt::messaging::msg_defines_serialize_mode&lt; U, std::enable_if_t&lt; std::is_base_of&lt; DefinesSerializationMode&lt; U &gt;, U &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1msg__defines__serialize__mode_3_01_u_00_01std_1_1enable__if__t_3_01std_9ff39ec7a2238fd9d7cc614da26fbe04" prot="public">vt::messaging::msg_defines_serialize_mode&lt; U, std::enable_if_t&lt; std::is_same&lt; void(U::*)(), decltype(&amp;U::vt_serialize_defined_on_type)&gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1msg__serialization__mode" prot="public">vt::messaging::msg_serialization_mode</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_msg_ptr_impl_base" prot="public">vt::messaging::MsgPtrImplBase</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_msg_ptr_impl_typed" prot="public">vt::messaging::MsgPtrImplTyped</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_msg_ptr_thief" prot="public">vt::messaging::MsgPtrThief</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_msg_shared_ptr" prot="public">vt::messaging::MsgSharedPtr</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_non_serialized_msg" prot="public">vt::messaging::NonSerializedMsg</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_pending_closure" prot="public">vt::messaging::PendingClosure</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_pending_recv" prot="public">vt::messaging::PendingRecv</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_pending_send" prot="public">vt::messaging::PendingSend</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_put_message_component" prot="public">vt::messaging::PutMessageComponent</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_serialize_if_needed_msg" prot="public">vt::messaging::SerializeIfNeededMsg</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_serialize_required_msg" prot="public">vt::messaging::SerializeRequiredMsg</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_serialize_supported_msg" prot="public">vt::messaging::SerializeSupportedMsg</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1_tag_active_envelope" prot="public">vt::messaging::TagActiveEnvelope</innerclass>
    <innerclass refid="structvt_1_1messaging_1_1msg__serialization__mode_3_01_message_t_00_01cxx14__void__t_3_01decltyp859af933e7cec0c00885df897a55208a" prot="public">vt::messaging::msg_serialization_mode&lt; MessageT, cxx14_void_t&lt; decltype(MessageT::vt_serialize_mode)&gt;&gt;</innerclass>
    <innernamespace refid="namespacevt_1_1messaging_1_1statics">vt::messaging::statics</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacevt_1_1messaging_1a1e0d9a8b346c8536b25544c725adcf55" prot="public" static="no">
        <name>MPITag</name>
        <enumvalue id="namespacevt_1_1messaging_1a1e0d9a8b346c8536b25544c725adcf55ab1ee9044bcae54b74056a088a0d57ac1" prot="public">
          <name>ActiveMsgTag</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a1e0d9a8b346c8536b25544c725adcf55a9bee0499791527abc5fcf1099c3cc188" prot="public">
          <name>DataMsgTag</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="86" column="1" bodyfile="src/vt/messaging/active.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6c" prot="public" static="no">
        <name>eEnvelopeType</name>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6ca3f3cc808029e09ae1e1727fcc0185853" prot="public">
          <name>EnvPipe</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether to interpret group field as pipe </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6ca336c26710ea637c75ac958d2d9ccab44" prot="public">
          <name>EnvPut</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether the envelope has a PUT payload </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6cab8e8cf33ab704f4caddd2d7bcc9268e8" prot="public">
          <name>EnvTerm</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether the message is a term control msg </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6caf1308b12de83b1b69acb484c507effb4" prot="public">
          <name>EnvBroadcast</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether the message is being broadcast </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6caf3d587b9226f61f46fb0916af17120b7" prot="public">
          <name>EnvEpochType</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether the envelope can hold an epoch </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6ca26b9cbbc5e12dbc64f8906b505e7c37e" prot="public">
          <name>EnvTagType</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether the envelope can hold a tag </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a6508ef3a4701a2e6fd0bfe3edcc63a6ca2b7cfe3194094b03d3b7bccb05241824" prot="public">
          <name>EnvPackedPut</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Whether the message is packed with data </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for envelope type bits, used to cast to sub-types and interpret bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_type.h" line="63" column="1" bodyfile="src/vt/messaging/envelope/envelope_type.h" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="enum" id="namespacevt_1_1messaging_1a436c5b9fc7f591e5978a136999cb9ef8" prot="public" static="no">
        <name>SerializationMode</name>
        <enumvalue id="namespacevt_1_1messaging_1a436c5b9fc7f591e5978a136999cb9ef8a434990c8a25d2be94863561ae98bd682" prot="public">
          <name>support</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a436c5b9fc7f591e5978a136999cb9ef8af0ffd3b7c2574ac324603ed00488c850" prot="public">
          <name>require</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacevt_1_1messaging_1a436c5b9fc7f591e5978a136999cb9ef8abc56ee21f7c9d61984fde885e8ce116f" prot="public">
          <name>prohibit</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="237" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="236" bodyend="241"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacevt_1_1messaging_1af700cb74b7b97c1a305267a9eb3ba91a" prot="public" static="no">
        <type>int</type>
        <definition>using vt::messaging::MPI_TagType = typedef int</definition>
        <argsstring></argsstring>
        <name>MPI_TagType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="81" column="1" bodyfile="src/vt/messaging/active.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1_1messaging_1a9724e719b301289eb8b3afbf9c44cf46" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1messaging_1_1cxx14__make__void" kindref="compound">cxx14_make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using vt::messaging::cxx14_void_t = typedef typename cxx14_make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>cxx14_void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="67" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1_1messaging_1ad46de1ccda6ed95e8bb11e85c28be878" prot="public" static="no">
        <type>::checkpoint::Sizer</type>
        <definition>using vt::messaging::SerializeSizerType = typedef ::checkpoint::Sizer</definition>
        <argsstring></argsstring>
        <name>SerializeSizerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="74" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacevt_1_1messaging_1a51d67eb30677a83c198f6ca94367a1a1" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const</type>
        <definition>constexpr TagType const vt::messaging::PutPackedTag</definition>
        <argsstring></argsstring>
        <name>PutPackedTag</name>
        <initializer>=
  std::numeric_limits&lt;<ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>&gt;::max()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="83" column="1" bodyfile="src/vt/messaging/active.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1messaging_1a5b3bf35529a2eb151caeb18150f7249e" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const</type>
        <definition>constexpr TagType const vt::messaging::starting_direct_buffer_tag</definition>
        <argsstring></argsstring>
        <name>starting_direct_buffer_tag</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="91" column="1" bodyfile="src/vt/messaging/active.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1messaging_1afee268351c47fa58ed38a57a94dfb69e" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const</type>
        <definition>constexpr MsgSizeType const vt::messaging::max_pack_direct_size</definition>
        <argsstring></argsstring>
        <name>max_pack_direct_size</name>
        <initializer>= 512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="92" column="1" bodyfile="src/vt/messaging/active.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1messaging_1adefd943a6421b1b7120526f969bee20f" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
        <definition>constexpr ByteType vt::messaging::msgsize_not_specified</definition>
        <argsstring></argsstring>
        <name>msgsize_not_specified</name>
        <initializer>= static_cast&lt;<ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref>&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.impl.h" line="58" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1messaging_1a11d2b356f56486f2e60f0255cb6b05ff" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>constexpr NodeType vt::messaging::broadcast_dest</definition>
        <argsstring></argsstring>
        <name>broadcast_dest</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.impl.h" line="59" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1messaging_1a54fecd52f3eecfc108fb98d7fe1affcb" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1acaf7da00eb37dfb0c3479a6a982c30ef" kindref="member">BitCountType</ref> const</type>
        <definition>constexpr BitCountType const vt::messaging::envelope_num_bits</definition>
        <argsstring></argsstring>
        <name>envelope_num_bits</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>Number of bits allocated for <computeroutput>eEnvelopeType</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_type.h" line="74" column="1" bodyfile="src/vt/messaging/envelope/envelope_type.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1messaging_1a179f504c0f3208cd28f9b9f94c4f0abf" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::messaging::has_own_serialize</definition>
        <argsstring></argsstring>
        <name>has_own_serialize</name>
        <initializer>=
  ::checkpoint::SerializableTraits&lt;T&gt;::has_serialize_noninstrusive
  
  
  
  
  or <ref refid="structvt_1_1messaging_1_1cxx14__conjunction" kindref="compound">cxx14_conjunction</ref>&lt;
    <ref refid="structvt_1_1messaging_1_1has__any__serialize__member__t" kindref="compound">has_any_serialize_member_t</ref>&lt;T&gt;,
    <ref refid="structvt_1_1messaging_1_1has__own__serialize__member__t" kindref="compound">has_own_serialize_member_t</ref>&lt;T&gt;
  &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_serialize.h" line="105" column="1" bodyfile="src/vt/messaging/message/message_serialize.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1_1messaging_1ad1743de9163dc74a43e6a95e28f49462" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsTerm</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsTerm</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if envelope type is term <computeroutput>EnvTerm</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="66" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1af97867f7e468ce73a69cd228404c47b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsPipe</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsPipe</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if envelope type is pipe <computeroutput>EnvPipe</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This designation if enabled changes how the group bits are interpreted<mdash/>either as the <computeroutput>GroupType</computeroutput> or <computeroutput>PipeType</computeroutput>. Note that this works because its impossible for a message to be sent both as a group and pipe simultaneously.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="81" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a0a46a75d45e4f2ad55df0f8b2c2a5f2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsPut</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsPut</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if envelope type is put <computeroutput>EnvPut</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="91" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a54db7616bc28f0aec1a4830acc2105f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsBcast</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsBcast</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if envelope type is broadcast <computeroutput>EnvBroadcast</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="101" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a35972fd8b7d620e41e94e883e8e0cca4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsEpochType</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsEpochType</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if envelope type is epoch <computeroutput>EnvEpoch</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="111" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a210f23c991eaf84274b744ac109ba72d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsTagType</definition>
        <argsstring>(Env const &amp;env)</argsstring>
        <name>envelopeIsTagType</name>
        <param>
          <type>Env const &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if envelope type is tag <computeroutput>EnvTag</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the bit is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="121" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1af984147f8c3e5bc9a34eb354ed2808d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeHasBeenSerialized</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeHasBeenSerialized</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if the message&apos;s base serializer has been called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="129" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a6129f4cbd5fd124f342d1235694f664d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Env</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::envelopeIsLocked</definition>
        <argsstring>(Env &amp;env)</argsstring>
        <name>envelopeIsLocked</name>
        <param>
          <type>Env &amp;</type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Test if the message&apos;s envelope has been locked. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">env</parametername>
</parameternamelist>
<parameterdescription>
<para>the envelope </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/envelope/envelope_test.h" line="137" column="1" bodyfile="src/vt/messaging/envelope/envelope_test.impl.h" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a5cca7f3fb7db0bfe14b3426ef9132090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::msgSetPriorityLevel</definition>
        <argsstring>(MsgT ptr, PriorityLevelType level)</argsstring>
        <name>msgSetPriorityLevel</name>
        <param>
          <type>MsgT</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="56" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1aae494e42c66a7b35346fd31d0100ebeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::msgSetPriorityAllLevels</definition>
        <argsstring>(MsgT ptr, PriorityType priority)</argsstring>
        <name>msgSetPriorityAllLevels</name>
        <param>
          <type>MsgT</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="59" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a6ee5ed1aac4e553185dc3fe80544ac2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename MsgU</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::msgIncPriorityLevel</definition>
        <argsstring>(MsgT old_msg, MsgU new_msg)</argsstring>
        <name>msgIncPriorityLevel</name>
        <param>
          <type>MsgT</type>
          <declname>old_msg</declname>
        </param>
        <param>
          <type>MsgU</type>
          <declname>new_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="62" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="67" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1ab8115ae64f9c390e7a92f3f02aea8454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgU</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::msgSetPriority</definition>
        <argsstring>(MsgU new_msg, PriorityType priority, bool increment_level=false)</argsstring>
        <name>msgSetPriority</name>
        <param>
          <type>MsgU</type>
          <declname>new_msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>increment_level</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="65" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1ad71afa970305de275db8e91a5041d8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgU</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::msgSetPriorityImpl</definition>
        <argsstring>(MsgU new_msg, PriorityType new_priority, PriorityType old_priority, PriorityLevelType level)</argsstring>
        <name>msgSetPriorityImpl</name>
        <param>
          <type>MsgU</type>
          <declname>new_msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>new_priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>old_priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="68" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="89" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1a9cbb4989b799eaba6ab9b8dde9e3cf14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename MsgU</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::msgSetPriorityFrom</definition>
        <argsstring>(MsgT old_msg, MsgU new_msg, PriorityType priority, bool increment_level=false)</argsstring>
        <name>msgSetPriorityFrom</name>
        <param>
          <type>MsgT</type>
          <declname>old_msg</declname>
        </param>
        <param>
          <type>MsgU</type>
          <declname>new_msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>increment_level</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="74" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="116" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1messaging_1ab609ea1ed68952c30bc8f9bba8d796b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::msgSystemSetPriority</definition>
        <argsstring>(MsgT ptr, PriorityType priority)</argsstring>
        <name>msgSystemSetPriority</name>
        <param>
          <type>MsgT</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/message_priority.h" line="79" column="1" bodyfile="src/vt/messaging/message/message_priority.impl.h" bodystart="132" bodyend="139"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/messaging/active.cc" line="60" column="1"/>
  </compounddef>
</doxygen>
