<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1epoch_1_1_epoch_type" kind="struct" language="C++" prot="public">
    <compoundname>vt::epoch::EpochType</compoundname>
    <basecompoundref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong" prot="public" virt="non-virtual">vt::util::strong::detail::Strong&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</basecompoundref>
    <includes refid="epoch__type_8h" local="no">epoch_type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1epoch_1_1_epoch_type_1ae46db92b0cf02c6416ac26e8959947bf" prot="public" static="no">
        <type><ref refid="namespacevt_1adbd3338278905742eb2de6db590fd2f1" kindref="member">Strong</ref>&lt; <ref refid="namespacevt_1_1epoch_1_1detail_1a9adc5df96a521e516dc20511eb553075" kindref="member">detail::EpochImplType</ref>, detail::no_epoch_impl, <ref refid="structvt_1_1epoch_1_1detail_1_1_epoch_impl_tag" kindref="compound">detail::EpochImplTag</ref> &gt;</type>
        <definition>using vt::epoch::EpochType::BaseType =  Strong&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <briefdescription>
<para>Base class for strong type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="56" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1epoch_1_1_epoch_type_1a6cf10baa6f0c733aded770d31d0c09a0" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using vt::epoch::EpochType::isByteCopyable =  std::true_type</definition>
        <argsstring></argsstring>
        <name>isByteCopyable</name>
        <briefdescription>
<para><computeroutput><ref refid="structvt_1_1epoch_1_1_epoch_type" kindref="compound">EpochType</ref></computeroutput> is always byte-copyable </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="61" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1epoch_1_1_epoch_type_1aef70d29ac80a421e67bc15ffbe9b9e70" prot="public" static="no">
        <type><ref refid="namespacevt_1_1epoch_1_1detail_1a9adc5df96a521e516dc20511eb553075" kindref="member">detail::EpochImplType</ref></type>
        <definition>using vt::epoch::EpochType::ImplType =  detail::EpochImplType</definition>
        <argsstring></argsstring>
        <name>ImplType</name>
        <briefdescription>
<para>The underlying type for an epoch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="64" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1epoch_1_1_epoch_type_1af81c3687330f393102a6a19d6e2e9068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::epoch::EpochType::EpochType</definition>
        <argsstring>()=default</argsstring>
        <name>EpochType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1epoch_1_1_epoch_type_1a5ea58f0e2482e379caad92069601a835" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr vt::epoch::EpochType::EpochType</definition>
        <argsstring>(detail::EpochImplType in)</argsstring>
        <name>EpochType</name>
        <param>
          <type><ref refid="namespacevt_1_1epoch_1_1detail_1a9adc5df96a521e516dc20511eb553075" kindref="member">detail::EpochImplType</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Construct with a particular underlying value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="73" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1epoch_1_1_epoch_type_1a4f3880228864dd1abcd9d3ff16eb048d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::epoch::EpochType::EpochType</definition>
        <argsstring>(BaseType const &amp;in)</argsstring>
        <name>EpochType</name>
        <param>
          <type><ref refid="structvt_1_1epoch_1_1_epoch_type_1ae46db92b0cf02c6416ac26e8959947bf" kindref="member">BaseType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Constructor from base class for operator up-conversion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying strong value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/epoch/epoch_type.h" line="82" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="82" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1734">
        <label>vt::epoch::EpochType</label>
        <link refid="structvt_1_1epoch_1_1_epoch_type"/>
        <childnode refid="1735" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1735">
        <label>Strong&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</label>
        <link refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1738">
        <label>T</label>
      </node>
      <node id="1736">
        <label>vt::epoch::EpochType</label>
        <link refid="structvt_1_1epoch_1_1_epoch_type"/>
        <childnode refid="1737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1737">
        <label>Strong&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</label>
        <link refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong"/>
        <childnode refid="1738" relation="usage">
          <edgelabel>v_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/epoch/epoch_type.h" line="54" column="1" bodyfile="src/vt/epoch/epoch_type.h" bodystart="52" bodyend="85"/>
    <listofallmembers>
      <member refid="structvt_1_1epoch_1_1_epoch_type_1ae46db92b0cf02c6416ac26e8959947bf" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>BaseType</name></member>
      <member refid="structvt_1_1epoch_1_1_epoch_type_1af81c3687330f393102a6a19d6e2e9068" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>EpochType</name></member>
      <member refid="structvt_1_1epoch_1_1_epoch_type_1a5ea58f0e2482e379caad92069601a835" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>EpochType</name></member>
      <member refid="structvt_1_1epoch_1_1_epoch_type_1a4f3880228864dd1abcd9d3ff16eb048d" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>EpochType</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a111bcf44f59fcedcecf4eb59fcb11460" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aa84e50fbeaefbb74fb8843a3fb1368a7" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>get</name></member>
      <member refid="structvt_1_1epoch_1_1_epoch_type_1aef70d29ac80a421e67bc15ffbe9b9e70" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>ImplType</name></member>
      <member refid="structvt_1_1epoch_1_1_epoch_type_1a6cf10baa6f0c733aded770d31d0c09a0" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>isByteCopyable</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aa6dd594219a084feae812a5975240963" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator!=</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ab0423a5f73f3d080e84bab4db2bd10f8" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator*</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a41a0ccceade5b4d7e2a3b67549ab142a" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator*</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a8f82e9a4d971a1b80b84234661a6ca58" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator&lt;</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a5f36a542fc6a5716037c606ea090d635" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator&lt;=</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ac32855789c8e77843e7b6a5b63698f67" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator==</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a56fd64561dfd96f87d9d46a6df44ed04" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator&gt;</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a849dd3f84fc0c448715fcda4216a626a" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>operator&gt;=</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aacc46aaa7ec00051d3056b7cbd850586" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>Strong</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a25fead6e8aff403d57fa5a4718e3a0ef" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>Strong</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>ThisType</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ab47d63a1c618b3aafd0b30f022fedba7" prot="public" virt="non-virtual"><scope>vt::epoch::EpochType</scope><name>Type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
