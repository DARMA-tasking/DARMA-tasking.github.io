<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</compoundname>
    <basecompoundref refid="structvt_1_1util_1_1adt_1_1_union_destroy" prot="public" virt="non-virtual">vt::util::adt::UnionDestroy&lt; T, void, Ts... &gt;</basecompoundref>
    <includes refid="union_8h" local="no">union.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1a36e9a042f05e3223888bdef88a1f34f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionCopy</definition>
        <argsstring>()=default</argsstring>
        <name>UnionCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1af836820473372c7be6b7c61f65de4cc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionCopy</definition>
        <argsstring>(UnionCopy &amp;&amp;other)</argsstring>
        <name>UnionCopy</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_union_copy" kindref="compound">UnionCopy</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="480" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="480" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1aa60780280af609ec00f6c3d2745022c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionCopy</definition>
        <argsstring>(UnionCopy const &amp;other)</argsstring>
        <name>UnionCopy</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_union_copy" kindref="compound">UnionCopy</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="487" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="487" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1a66e91d23c8b88fe0d906b9a6d671f22c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_union_copy" kindref="compound">UnionCopy</ref> &amp;</type>
        <definition>UnionCopy&amp; vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::operator=</definition>
        <argsstring>(UnionCopy const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_union_copy" kindref="compound">UnionCopy</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="494" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="494" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1ad4928f9b7f9d4ff0420320e1cc934909" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_union_copy" kindref="compound">UnionCopy</ref> &amp;</type>
        <definition>UnionCopy&amp; vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::operator=</definition>
        <argsstring>(UnionCopy &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_union_copy" kindref="compound">UnionCopy</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="503" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="503" bodyend="510"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3942">
        <label>vt::util::adt::UnionDestroy&lt; T, void, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_destroy"/>
      </node>
      <node id="3941">
        <label>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b"/>
        <childnode refid="3942" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3944">
        <label>vt::util::adt::UnionDestroy&lt; T, void, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_destroy"/>
      </node>
      <node id="3943">
        <label>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b"/>
        <childnode refid="3944" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/adt/union.h" line="476" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="472" bodyend="511"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1a66e91d23c8b88fe0d906b9a6d671f22c" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>operator=</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1ad4928f9b7f9d4ff0420320e1cc934909" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>operator=</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1a36e9a042f05e3223888bdef88a1f34f6" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionCopy</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1af836820473372c7be6b7c61f65de4cc8" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionCopy</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_copy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_01det4a1e3b5522a7a77cb5d4fb8991a6197b_1aa60780280af609ec00f6c3d2745022c5" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionCopy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyCopyable&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionCopy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
