<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;</compoundname>
    <includes refid="fntraits_8h" local="no">fntraits.h</includes>
    <templateparamlist>
      <param>
        <type>typename Return</type>
      </param>
      <param>
        <type>typename Arg</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a2c8420778da985fde9ecbcc610fac156" prot="public" static="no">
        <type><ref refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_no_msg" kindref="compound">NoMsg</ref></type>
        <definition>using vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;::MsgT =  NoMsg</definition>
        <argsstring></argsstring>
        <name>MsgT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/fntraits/fntraits.h" line="192" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a69f65a6edbf46974391f9f689992d6f4" prot="public" static="no">
        <type>Arg</type>
        <definition>using vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;::Arg1 =  Arg</definition>
        <argsstring></argsstring>
        <name>Arg1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/fntraits/fntraits.h" line="193" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1aff63cb59848ab7b280d359b08b3e280e" prot="public" static="no">
        <type>std::tuple&lt; std::decay_t&lt; Arg &gt;, std::decay_t&lt; Args &gt;... &gt;</type>
        <definition>using vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;::TupleType =  std::tuple&lt;std::decay_t&lt;Arg&gt;, std::decay_t&lt;Args&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>TupleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/fntraits/fntraits.h" line="194" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a585043c274d89488f8092a8a8ab27d0a" prot="public" static="no">
        <type>Return</type>
        <definition>using vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;::ReturnT =  Return</definition>
        <argsstring></argsstring>
        <name>ReturnT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/fntraits/fntraits.h" line="195" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a92e9ba7d083b7dd9f2a1a000e5b1e9cb" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;::is_member</definition>
        <argsstring></argsstring>
        <name>is_member</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/fntraits/fntraits.h" line="191" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/utils/fntraits/fntraits.h" line="190" column="1" bodyfile="src/vt/utils/fntraits/fntraits.h" bodystart="180" bodyend="196"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a69f65a6edbf46974391f9f689992d6f4" prot="public" virt="non-virtual"><scope>vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;</scope><name>Arg1</name></member>
      <member refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a92e9ba7d083b7dd9f2a1a000e5b1e9cb" prot="public" virt="non-virtual"><scope>vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;</scope><name>is_member</name></member>
      <member refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a2c8420778da985fde9ecbcc610fac156" prot="public" virt="non-virtual"><scope>vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;</scope><name>MsgT</name></member>
      <member refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1a585043c274d89488f8092a8a8ab27d0a" prot="public" virt="non-virtual"><scope>vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;</scope><name>ReturnT</name></member>
      <member refid="structvt_1_1util_1_1fntraits_1_1detail_1_1_func_traits_impl_3_01std_1_1enable__if__t_3_01not_07s3fd5866f31025a6fa1e7500192630846_1aff63cb59848ab7b280d359b08b3e280e" prot="public" virt="non-virtual"><scope>vt::util::fntraits::detail::FuncTraitsImpl&lt; std::enable_if_t&lt; not(std::is_convertible&lt; Arg, vt::Message * &gt;::value or std::is_convertible&lt; Arg, vt::ShortMessage * &gt;::value or std::is_convertible&lt; Arg, vt::EpochMessage * &gt;::value or std::is_convertible&lt; Arg, vt::PayloadMessage * &gt;::value) &gt;, Return(*)(Arg, Args...)&gt;</scope><name>TupleType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
