<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter" kind="struct" language="C++" prot="public">
    <compoundname>vt::runtime::component::meter::Counter</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_meter" prot="public" virt="non-virtual">vt::runtime::component::meter::DiagnosticMeter</basecompoundref>
    <includes refid="counter_8h" local="no">counter.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a48f263de9dbf26c1fc7736031cca9613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct component::Diagnostic</definition>
        <argsstring></argsstring>
        <name>component::Diagnostic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="72" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a2e2b0b2a78c95c3017a571bd76310eba" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value" kindref="compound">detail::DiagnosticValue</ref>&lt; T &gt; *</type>
        <definition>detail::DiagnosticValue&lt;T&gt;* vt::runtime::component::meter::Counter&lt; T &gt;::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The actual underlying value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="107" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1afbe8191f66fc515812ee5bf1b5d857a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::runtime::component::meter::Counter&lt; T &gt;::Counter</definition>
        <argsstring>()=default</argsstring>
        <name>Counter</name>
        <briefdescription>
<para>Default constructor available for ease of putting this type in a class. But, all valid ways to construction involve the factory methods in the <computeroutput><ref refid="structvt_1_1runtime_1_1component_1_1_diagnostic" kindref="compound">Diagnostic</ref></computeroutput> base class for component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a5bd034dd4cc31c824242ac92e6cdeaee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runtime::component::meter::Counter&lt; T &gt;::increment</definition>
        <argsstring>(T val=1)</argsstring>
        <name>increment</name>
        <param>
          <type>T</type>
          <declname>val</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Increment the counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>amount to increment </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="80" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a020d52d2540855c661003bb50265e7db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runtime::component::meter::Counter&lt; T &gt;::decrement</definition>
        <argsstring>(T val=1)</argsstring>
        <name>decrement</name>
        <param>
          <type>T</type>
          <declname>val</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Decrement the counter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>amount to decrement </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="93" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="93" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a4eddbf849464269e14c11baaea206df2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runtime::component::meter::Counter&lt; T &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="102" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a649a29b69ce8db44fa9643820cd75080" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::runtime::component::meter::Counter&lt; T &gt;::Counter</definition>
        <argsstring>(detail::DiagnosticValue&lt; T &gt; *in_impl)</argsstring>
        <name>Counter</name>
        <param>
          <type><ref refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value" kindref="compound">detail::DiagnosticValue</ref>&lt; T &gt; *</type>
          <declname>in_impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/component/meter/counter.h" line="68" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="68" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structvt_1_1runtime_1_1component_1_1_diagnostic" kindref="compound">Diagnostic</ref> that counts some quantity over time. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1383">
        <label>vt::runtime::component::meter::DiagnosticMeter</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_meter"/>
      </node>
      <node id="1382">
        <label>vt::runtime::component::meter::Counter&lt; T &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter"/>
        <childnode refid="1383" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1385">
        <label>vt::runtime::component::meter::DiagnosticMeter</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_meter"/>
      </node>
      <node id="1384">
        <label>vt::runtime::component::meter::Counter&lt; T &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter"/>
        <childnode refid="1385" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/runtime/component/meter/counter.h" line="58" column="1" bodyfile="src/vt/runtime/component/meter/counter.h" bodystart="58" bodyend="108"/>
    <listofallmembers>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a48f263de9dbf26c1fc7736031cca9613" prot="public" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>component::Diagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1afbe8191f66fc515812ee5bf1b5d857a8" prot="public" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>Counter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a649a29b69ce8db44fa9643820cd75080" prot="private" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>Counter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a020d52d2540855c661003bb50265e7db" prot="public" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>decrement</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a2e2b0b2a78c95c3017a571bd76310eba" prot="private" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>impl_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a5bd034dd4cc31c824242ac92e6cdeaee" prot="public" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>increment</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_1a4eddbf849464269e14c11baaea206df2" prot="public" virt="non-virtual"><scope>vt::runtime::component::meter::Counter</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
