<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1_collective_any_ops" kind="struct" language="C++" prot="public">
    <compoundname>vt::CollectiveAnyOps</compoundname>
    <includes refid="collective__ops_8h" local="no">collective_ops.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespacevt_1_1runtime_1afca910c1b38b3975f7c1da8001a77d58" kindref="member">runtime::RuntimeInstType</ref></type>
        <declname>instance</declname>
        <defname>instance</defname>
        <defval>collective_default_inst</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1ae0b57c10a49875db49abc536a2a5c19c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
        <definition>RuntimePtrType vt::CollectiveAnyOps&lt; instance &gt;::initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, WorkerCountType const num_workers=no_workers, bool is_interop=false, MPI_Comm *comm=nullptr, arguments::AppConfig const *appConfig=nullptr)</argsstring>
        <name>initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const</type>
          <declname>num_workers</declname>
          <defval>no_workers</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_interop</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> const *</type>
          <declname>appConfig</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="64" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="218" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1ae2260154e455458fc26f02f0bce6702d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::CollectiveAnyOps&lt; instance &gt;::finalize</definition>
        <argsstring>(RuntimePtrType in_rt=nullptr)</argsstring>
        <name>finalize</name>
        <param>
          <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
          <declname>in_rt</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="69" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="282" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1a10be760566e5c50ce6d35ab93d7736ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::CollectiveAnyOps&lt; instance &gt;::scheduleThenFinalize</definition>
        <argsstring>(RuntimePtrType in_rt=nullptr, WorkerCountType const workers=no_workers)</argsstring>
        <name>scheduleThenFinalize</name>
        <param>
          <type><ref refid="namespacevt_1a0ce60e0299d8fa32223b3b9ffa0af466" kindref="member">RuntimePtrType</ref></type>
          <declname>in_rt</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const</type>
          <declname>workers</declname>
          <defval>no_workers</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="70" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="258" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1aa86dfdc9c8ac6f25033948b5dd26fb5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::CollectiveAnyOps&lt; instance &gt;::setCurrentRuntimeTLS</definition>
        <argsstring>(RuntimeUnsafePtrType in_rt=nullptr)</argsstring>
        <name>setCurrentRuntimeTLS</name>
        <param>
          <type><ref refid="namespacevt_1a8019b70cc4b9b0833c38559c85dfd53b" kindref="member">RuntimeUnsafePtrType</ref></type>
          <declname>in_rt</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="73" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="251" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1a31a089ab739c612171e581ead8922e8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::CollectiveAnyOps&lt; instance &gt;::abort</definition>
        <argsstring>(std::string const str=&quot;&quot;, ErrorCodeType const code=0)</argsstring>
        <name>abort</name>
        <param>
          <type>std::string const</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref> const</type>
          <declname>code</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="74" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="301" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1a5ae4676659166ab1e1ac7334776d58c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::CollectiveAnyOps&lt; instance &gt;::output</definition>
        <argsstring>(std::string const str=&quot;&quot;, ErrorCodeType const code=1, bool error=false, bool decorate=true, bool formatted=false, bool abort_out=false)</argsstring>
        <name>output</name>
        <param>
          <type>std::string const</type>
          <declname>str</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref> const</type>
          <declname>code</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>error</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>decorate</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>formatted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>abort_out</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="75" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="322" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1_collective_any_ops_1a7e8425c141657c1b8286c5b56c5fd43d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::CollectiveAnyOps&lt; instance &gt;::registerHandler</definition>
        <argsstring>(ActiveClosureFnType fn)</argsstring>
        <name>registerHandler</name>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_ops.h" line="81" column="1" bodyfile="src/vt/collective/collective_ops.cc" bodystart="339" bodyend="341"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/collective/collective_ops.h" line="62" column="1" bodyfile="src/vt/collective/collective_ops.h" bodystart="62" bodyend="82"/>
    <listofallmembers>
      <member refid="structvt_1_1_collective_any_ops_1a31a089ab739c612171e581ead8922e8b" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>abort</name></member>
      <member refid="structvt_1_1_collective_any_ops_1ae2260154e455458fc26f02f0bce6702d" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>finalize</name></member>
      <member refid="structvt_1_1_collective_any_ops_1ae0b57c10a49875db49abc536a2a5c19c" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>initialize</name></member>
      <member refid="structvt_1_1_collective_any_ops_1a5ae4676659166ab1e1ac7334776d58c3" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>output</name></member>
      <member refid="structvt_1_1_collective_any_ops_1a7e8425c141657c1b8286c5b56c5fd43d" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>registerHandler</name></member>
      <member refid="structvt_1_1_collective_any_ops_1a10be760566e5c50ce6d35ab93d7736ce" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>scheduleThenFinalize</name></member>
      <member refid="structvt_1_1_collective_any_ops_1aa86dfdc9c8ac6f25033948b5dd26fb5b" prot="public" virt="non-virtual"><scope>vt::CollectiveAnyOps</scope><name>setCurrentRuntimeTLS</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
