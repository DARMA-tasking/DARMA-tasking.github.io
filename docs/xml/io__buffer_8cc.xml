<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="io__buffer_8cc" kind="file" language="C++">
    <compoundname>io_buffer.cc</compoundname>
    <includes refid="lib_2checkpoint_2src_2checkpoint_2common_8h" local="yes">checkpoint/common.h</includes>
    <includes refid="io__buffer_8h" local="yes">checkpoint/buffer/io_buffer.h</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="724">
        <label>sys/stat.h</label>
      </node>
      <node id="709">
        <label>checkpoint/common.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2common_8h"/>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="711" relation="include">
        </childnode>
        <childnode refid="712" relation="include">
        </childnode>
        <childnode refid="713" relation="include">
        </childnode>
        <childnode refid="714" relation="include">
        </childnode>
        <childnode refid="715" relation="include">
        </childnode>
      </node>
      <node id="719">
        <label>functional</label>
      </node>
      <node id="710">
        <label>checkpoint/cmake_config.h</label>
      </node>
      <node id="712">
        <label>cstdint</label>
      </node>
      <node id="727">
        <label>sys/mman.h</label>
      </node>
      <node id="728">
        <label>errno.h</label>
      </node>
      <node id="715">
        <label>cassert</label>
      </node>
      <node id="722">
        <label>stdexcept</label>
      </node>
      <node id="725">
        <label>fcntl.h</label>
      </node>
      <node id="721">
        <label>string</label>
      </node>
      <node id="717">
        <label>checkpoint/buffer/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
        <childnode refid="720" relation="include">
        </childnode>
      </node>
      <node id="708">
        <label>lib/checkpoint/src/checkpoint/buffer/io_buffer.cc</label>
        <link refid="io__buffer_8cc"/>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="716" relation="include">
        </childnode>
        <childnode refid="721" relation="include">
        </childnode>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="723" relation="include">
        </childnode>
        <childnode refid="724" relation="include">
        </childnode>
        <childnode refid="725" relation="include">
        </childnode>
        <childnode refid="726" relation="include">
        </childnode>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
      </node>
      <node id="718">
        <label>checkpoint/checkpoint_api.h</label>
        <link refid="checkpoint__api_8h"/>
        <childnode refid="711" relation="include">
        </childnode>
        <childnode refid="719" relation="include">
        </childnode>
        <childnode refid="720" relation="include">
        </childnode>
      </node>
      <node id="723">
        <label>sys/types.h</label>
      </node>
      <node id="729">
        <label>string.h</label>
      </node>
      <node id="713">
        <label>cstdio</label>
      </node>
      <node id="726">
        <label>unistd.h</label>
      </node>
      <node id="714">
        <label>utility</label>
      </node>
      <node id="711">
        <label>cstdlib</label>
      </node>
      <node id="716">
        <label>checkpoint/buffer/io_buffer.h</label>
        <link refid="io__buffer_8h"/>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="721" relation="include">
        </childnode>
      </node>
      <node id="720">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecheckpoint">checkpoint</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1buffer">checkpoint::buffer</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="io__buffer_8cc_1adc2d576313f5e95113cdf99e8005c257" prot="public" static="no">
        <name>INCLUDED_CHECKPOINT_BUFFER_IO_BUFFER_CC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/buffer/io_buffer.cc" line="45" column="9" bodyfile="lib/checkpoint/src/checkpoint/buffer/io_buffer.cc" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io_buffer.cc</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/checkpoint<sp/>=&gt;<sp/>Serialization<sp/>Library</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_CHECKPOINT_BUFFER_IO_BUFFER_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_CHECKPOINT_BUFFER_IO_BUFFER_CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h" kindref="compound">checkpoint/common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="io__buffer_8h" kindref="compound">checkpoint/buffer/io_buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecheckpoint" kindref="compound">checkpoint</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">buffer<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1ab5de5a8bdf95ad3d98438b109c220436" kindref="member">IOBuffer::setupForRead</ref>()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>opening<sp/>file<sp/>for<sp/>read:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref>.c_str());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Start<sp/>by<sp/>opening<sp/>the<sp/>file,<sp/>read-only<sp/>mode</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1aaae9d622f010fb34e3644ae7ffc355d7" kindref="member">fd_</ref><sp/>=<sp/>open(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref>.c_str(),<sp/>O_RDONLY,<sp/>(mode_t)0600);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1aaae9d622f010fb34e3644ae7ffc355d7" kindref="member">fd_</ref><sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file=&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>errno=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>fstat<sp/>for<sp/>file<sp/>size\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Obtain<sp/>the<sp/>file<sp/>size<sp/>with<sp/>fstat<sp/>to<sp/>do<sp/>the<sp/>proper<sp/>mmap</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>sb;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>fstat(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1aaae9d622f010fb34e3644ae7ffc355d7" kindref="member">fd_</ref>,<sp/>&amp;sb);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;fstat<sp/>failed<sp/>for<sp/>reading<sp/>file<sp/>size:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref><sp/>=<sp/>sb.st_size;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>got<sp/>file<sp/>size=%lu\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>*<sp/>mmap<sp/>or<sp/>mmap64<sp/>the<sp/>file<sp/>descriptor<sp/>in<sp/>READ<sp/>mode</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(checkpoint_has_mmap64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>addr<sp/>=<sp/>mmap64(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>,<sp/>PROT_READ,<sp/>MAP_SHARED,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1aaae9d622f010fb34e3644ae7ffc355d7" kindref="member">fd_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>==<sp/>MAP_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;mmap64<sp/>failed<sp/>for<sp/>writing<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>addr<sp/>=<sp/>mmap(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>,<sp/>PROT_READ,<sp/>MAP_SHARED,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1aaae9d622f010fb34e3644ae7ffc355d7" kindref="member">fd_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>==<sp/>MAP_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;mmap<sp/>failed<sp/>for<sp/>writing<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Return<sp/>out<sp/>the<sp/>mapped<sp/>file<sp/>as<sp/>a<sp/>char*<sp/>pointer<sp/>so<sp/>the<sp/>serializer<sp/>writes<sp/>to</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a2417e2231e491d55411ea0128275b855" kindref="member">buffer_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addr);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a254d81d8ca0ffce817768d5dd88eb996" kindref="member">IOBuffer::setupForWrite</ref>()<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>opening<sp/>file<sp/>for<sp/>write:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref>.c_str());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Start<sp/>by<sp/>opening<sp/>the<sp/>file,<sp/>create/read-write/truncate<sp/>mode</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1aaae9d622f010fb34e3644ae7ffc355d7" kindref="member">fd_</ref><sp/>=<sp/>open(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref>.c_str(),<sp/>O_CREAT<sp/>|<sp/>O_RDWR<sp/>|<sp/>O_TRUNC,<sp/>(mode_t)0600);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd_<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file=&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>errno=&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>CMake<sp/>detected<sp/>fallocate,<sp/>invoke<sp/>on<sp/>size_.<sp/>We<sp/>might<sp/>want<sp/>to<sp/>change<sp/>this</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>posix_fallocate,<sp/>but<sp/>from<sp/>what<sp/>I<sp/>read<sp/>it<sp/>might<sp/>be<sp/>slower.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(checkpoint_has_fallocate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>fallocate<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>fallocate(fd_,<sp/>0,<sp/>0,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0<sp/>and<sp/>errno<sp/>==<sp/>ENOSPC)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;fallocate<sp/>failed<sp/>on<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Truncate<sp/>the<sp/>file<sp/>to<sp/>the<sp/>appropriate<sp/>size</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>truncating<sp/>file:<sp/>size=%lu\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>ftruncate(fd_,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;ftruncate<sp/>failed<sp/>on<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Sync<sp/>the<sp/>file<sp/>with<sp/>the<sp/>new<sp/>size<sp/>to<sp/>the<sp/>file<sp/>system</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>syncing<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>fsync(fd_);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;fsync<sp/>failed<sp/>on<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>mmap<sp/>file:<sp/>len=%lu\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/>*<sp/>mmap<sp/>or<sp/>mmap64<sp/>the<sp/>file<sp/>descriptor<sp/>in<sp/>WRITE<sp/>mode</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(checkpoint_has_mmap64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>addr<sp/>=<sp/>mmap64(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>,<sp/>PROT_WRITE,<sp/>MAP_SHARED,<sp/>fd_,<sp/>0);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>==<sp/>MAP_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;mmap64<sp/>failed<sp/>for<sp/>writing<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>addr<sp/>=<sp/>mmap(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>,<sp/>PROT_WRITE,<sp/>MAP_SHARED,<sp/>fd_,<sp/>0);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>==<sp/>MAP_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;mmap<sp/>failed<sp/>for<sp/>writing<sp/>file:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Return<sp/>out<sp/>the<sp/>mapped<sp/>file<sp/>as<sp/>a<sp/>char*<sp/>pointer<sp/>so<sp/>the<sp/>serializer<sp/>writes<sp/>to</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/>*<sp/>this</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a2417e2231e491d55411ea0128275b855" kindref="member">buffer_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addr);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a0da2b3a73fbd75c1837a6ef8c9506d76" kindref="member">IOBuffer::setupFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;IOBuffer:<sp/>opening<sp/>file:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref>.c_str());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1af8900a31606fe8f7bc03d61a7ce3d4e1" kindref="member">mode_</ref><sp/>==<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a17af037ab505e902bc6133309a92ded2abe9348ae77ec17acd67aa1ff39a18d83" kindref="member">ModeEnum::ReadFromFile</ref>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1ab5de5a8bdf95ad3d98438b109c220436" kindref="member">setupForRead</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1af8900a31606fe8f7bc03d61a7ce3d4e1" kindref="member">mode_</ref><sp/>==<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a17af037ab505e902bc6133309a92ded2aa91ea5238090273cea8d2e0b0bed7540" kindref="member">ModeEnum::WriteToFile</ref>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a254d81d8ca0ffce817768d5dd88eb996" kindref="member">setupForWrite</ref>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>IOBuffer<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a959990ab99e72d5a7df854582ecd83b2" kindref="member">IOBuffer::closeFile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>fd_<sp/>is<sp/>not<sp/>set,<sp/>then<sp/>we<sp/>should<sp/>not<sp/>have<sp/>anything<sp/>open<sp/>or<sp/>mapped</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd_<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a2417e2231e491d55411ea0128275b855" kindref="member">buffer_</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/>*<sp/>msync/msync64<sp/>the<sp/>mapped<sp/>file<sp/>causing<sp/>the<sp/>file<sp/>to<sp/>be<sp/>written<sp/>out</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1af8900a31606fe8f7bc03d61a7ce3d4e1" kindref="member">mode_</ref><sp/>==<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a17af037ab505e902bc6133309a92ded2aa91ea5238090273cea8d2e0b0bed7540" kindref="member">ModeEnum::WriteToFile</ref>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;~IOBuffer:<sp/>msync:<sp/>file=%s,<sp/>len=%lu\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a3032074c49298bf2d87aeb5f7aa5f37d" kindref="member">file_</ref>.c_str(),<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>defined(checkpoint_has_msync64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>msync64(addr,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>,<sp/>MS_SYNC);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;msync64<sp/>failed<sp/>on<sp/>file<sp/>after<sp/>write:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>msync(addr,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>,<sp/>MS_SYNC);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;msync<sp/>failed<sp/>on<sp/>file<sp/>after<sp/>write:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Unmap<sp/>the<sp/>file<sp/>via<sp/>munmap/munmap64</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;~IOBuffer:<sp/>munmap\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(checkpoint_has_munmap64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>munmap64(addr,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;munmap64<sp/>failed<sp/>on<sp/>after<sp/>write:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>munmap(addr,<sp/><ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer_1a33fee533bb344b3525bfffae726cb0d0" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;munmap<sp/>failed<sp/>on<sp/>file<sp/>after<sp/>write:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Finally,<sp/>close<sp/>the<sp/>file.<sp/>We<sp/>are<sp/>done.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h_1a7c3e2df5c024d2137e920504aa8741f2" kindref="member">debug_checkpoint</ref>(</highlight><highlight class="stringliteral">&quot;~IOBuffer:<sp/>closing<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>ret<sp/>=<sp/>close(fd_);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;close<sp/>on<sp/>file<sp/>descriptor<sp/>failed:<sp/>errno=&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(errno)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(err);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>fd_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>checkpoint::buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_CHECKPOINT_BUFFER_IO_BUFFER_CC*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="lib/checkpoint/src/checkpoint/buffer/io_buffer.cc"/>
  </compounddef>
</doxygen>
