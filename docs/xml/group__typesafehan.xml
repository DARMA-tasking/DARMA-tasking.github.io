<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__typesafehan" kind="group">
    <compoundname>typesafehan</compoundname>
    <title>Send Message Active Function (type-safe handler)</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__typesafehan_1ga469bf046ea32e6942ae2b00b7c14680d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsgSz</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, ByteType msg_size, bool deliver_to_sender=true, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgSz</name>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>ByteType</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deliver_to_sender</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with an explicit size. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this variant to broadcast a message when <computeroutput>sizeof(Message)</computeroutput> != the actual size you want to send (e.g., extra bytes on the end)</para>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deliver_to_sender</parametername>
</parameternamelist>
<parameterdescription>
<para>whether msg should be delivered to sender </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="672" column="19"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga1a347aac6b6b8d47c9b1c8cc11b7f33e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, bool deliver_to_sender=true, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deliver_to_sender</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deliver_to_sender</parametername>
</parameternamelist>
<parameterdescription>
<para>whether msg should be delivered to sender </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="691" column="19" bodyfile="src/vt/messaging/active.impl.h" bodystart="244" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1gae1504d8a205fc51f9771f6e76271905d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MsgPtrThief&lt; typename FuncTraits&lt; decltype(f)&gt;::MsgT &gt; msg, bool deliver_to_sender=true, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MsgPtrThief&lt; typename FuncTraits&lt; decltype(f)&gt;::MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deliver_to_sender</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message (message type not required). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deliver_to_sender</parametername>
</parameternamelist>
<parameterdescription>
<para>whether msg should be delivered to sender </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="709" column="19" bodyfile="src/vt/messaging/active.h" bodystart="709" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga29a784965d1a87bc4abc44f225f40e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="730" column="19" bodyfile="src/vt/messaging/active.impl.h" bodystart="260" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga3302f205ea51bff679d76cb059dbdce7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; typename FuncTraits&lt; decltype(f)&gt;::MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; typename FuncTraits&lt; decltype(f)&gt;::MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message (message type not required). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="748" column="19" bodyfile="src/vt/messaging/active.h" bodystart="748" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga4557b5ce74c8c5df0013cf49738517bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::send</definition>
        <argsstring>(Node dest, Params &amp;&amp;... params)</argsstring>
        <name>send</name>
        <param>
          <type>Node</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Send parameters to a handler in a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="766" column="19" bodyfile="src/vt/messaging/active.h" bodystart="766" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga058d20ece0e732645bc62d6a448abe76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcast</definition>
        <argsstring>(Params &amp;&amp;... params)</argsstring>
        <name>broadcast</name>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Broadcast parameters to a handler in a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="783" column="19" bodyfile="src/vt/messaging/active.h" bodystart="783" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1gaf93d1ac24a1d7a7aa820e67a89551bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsgSz</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>sendMsgSz</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>ByteType</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with explicit size. </para>
        </briefdescription>
        <detaileddescription>
<para>Invoke this send variant if you know the size or the <computeroutput>sizeof(Message)</computeroutput> is different than the number of bytes you actually want to send (e.g., extra bytes on the end of the message)</para>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message being sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="811" column="19"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga7a5d96676fde771a9ce5af119796fb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <bold>broadcastMsg</bold> instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="831" column="19" bodyfile="src/vt/messaging/active.impl.h" bodystart="294" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga9e67738f189123c256172ce9e22a8b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MsgPtrThief&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <bold>sendMsg</bold> instead.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="850" column="19" bodyfile="src/vt/messaging/active.impl.h" bodystart="283" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Send a message to a auto-registered type-safe active message handler. This is the predominant way that the messenger is expected to be used. </para>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyMsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_a)<sp/>:<sp/>a_(in_a)<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>myHandler(MyMsg*<sp/>msg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>work<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sendCode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>myHandler<sp/>is<sp/>automatically<sp/>registered<sp/>with<sp/>the<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-&gt;<ref refid="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" kindref="member">sendMsg</ref>&lt;MyMsg,<sp/>myHandler&gt;(1,<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
