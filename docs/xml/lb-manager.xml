<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lb-manager" kind="page">
    <compoundname>lb-manager</compoundname>
    <title>LB Manager</title>
    <detaileddescription>
<para>Manage load balancers</para><para>The LB manager component <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_manager" kindref="compound">vt::vrt::collection::balance::LBManager</ref></computeroutput>, accessed via <computeroutput><ref refid="namespacevt_1a05187076eac8c66c9951b062b0955520" kindref="member">vt::theLBManager()</ref></computeroutput> manages and coordinates instances of load balancers. It will potentially start load balancing after a &quot;phase&quot; is completed; refer to <ref refid="phase" kindref="compound">Phase Manager</ref> for details about how to delineate phases in an application. The LB manager reads command-line arguments or an LB specification file to determine which load balancer to run at a given phase.</para><para>To enable load balancing, the cmake flag<programlisting><codeline><highlight class="normal">-Dvt_lb_enabled=1</highlight></codeline>
</programlisting> should be passed during building. This also enables automatic instrumentation of work and communication performed by collection elements.</para><para>To run a load balancer at runtime:<itemizedlist>
<listitem><para>Pass <computeroutput>--vt_lb --vt_lb_name=&lt;LB&gt;</computeroutput> as a command line argument</para></listitem><listitem><para>Write a LB specification file <computeroutput>--vt_lb --vt_lb_file_name=&lt;FILE&gt;</computeroutput></para></listitem></itemizedlist>
</para><sect1 id="lb-manager_1lb-specification-file">
<title>LB Specification File</title>
<para>The LB specification file allows users to specify which load balancer along with which LB-specific configuration parameters are passed to the load balancer instance for any given phase. The order of the LB phase specification lines in the file disambiguates lines<mdash/>higher precedence for earlier lines.</para><para>The format of the LB specification file is:</para><para><programlisting><codeline><highlight class="normal">[%]<sp/>&lt;$phase&gt;<sp/>&lt;$lbname&gt;<sp/>[$LB-specific-arg-1]<sp/>...<sp/>[$LB-specific-arg-N]</highlight></codeline>
</programlisting></para><para>If a <computeroutput>%</computeroutput> is present, the line matches phases where: <computeroutput>current phase % $phase == 0</computeroutput>. Phase-specific lines (ones that specify a load balancer without a <computeroutput>%</computeroutput>) always always have precedence over <computeroutput>%</computeroutput> lines. The next token after the optional <computeroutput>%</computeroutput> and <computeroutput>$phase</computeroutput> is the name of the load balancer to invoke on that phase. After the load balancer name, <computeroutput>N</computeroutput> arguments to the load balancer are allowed to customize how the load balancer is run with the format of <computeroutput>key=value</computeroutput>. These arguments are the equivalent of passing <computeroutput>--vt_lb_args=&quot;A=test B=test2&quot;</computeroutput> on the command line.</para><para>The following is an example LB specification:</para><para><programlisting><codeline><highlight class="normal">%10<sp/>TemperedLB<sp/>c=1<sp/>k=5<sp/>f=2<sp/>i=10</highlight></codeline>
<codeline><highlight class="normal">0<sp/>HierarchicalLB<sp/>min=0.9<sp/>max=1.1<sp/>auto=false</highlight></codeline>
<codeline><highlight class="normal">%<sp/>5<sp/>GreedyLB<sp/>min=1.0</highlight></codeline>
<codeline><highlight class="normal">120<sp/>GreedyLB<sp/>c=0<sp/>k=2<sp/>f=3<sp/>i=3</highlight></codeline>
</programlisting></para><para>To print LB specification during startup, use <computeroutput>--vt_lb_show_spec</computeroutput> command line flag.</para></sect1>
<sect1 id="lb-manager_1load-balancers">
<title>Load balancers</title>
<para><table rows="8" cols="4"><row>
<entry thead="yes"><para>Load Balancer </para></entry><entry thead="yes"><para>Type </para></entry><entry thead="yes"><para>Description </para></entry><entry thead="yes"><para>Reference  </para></entry></row>
<row>
<entry thead="no"><para>RotateLB </para></entry><entry thead="no"><para>Testing </para></entry><entry thead="no"><para>Rotate objects in a ring </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_rotate_l_b" kindref="compound">vt::vrt::collection::lb::RotateLB</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>RandomLB </para></entry><entry thead="no"><para>Testing </para></entry><entry thead="no"><para>Randomly migrate object with seed </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_random_l_b" kindref="compound">vt::vrt::collection::lb::RandomLB</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>GreedyLB </para></entry><entry thead="no"><para>Centralized </para></entry><entry thead="no"><para>Gather to central node apply min/max heap </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_greedy_l_b" kindref="compound">vt::vrt::collection::lb::GreedyLB</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>TemperedLB </para></entry><entry thead="no"><para>Distributed </para></entry><entry thead="no"><para>Inspired by epidemic algorithms </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_tempered_l_b" kindref="compound">vt::vrt::collection::lb::TemperedLB</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>HierarchicalLB </para></entry><entry thead="no"><para>Hierarchical </para></entry><entry thead="no"><para>Build tree to move objects nodes </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_hierarchical_l_b" kindref="compound">vt::vrt::collection::lb::HierarchicalLB</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>ZoltanLB </para></entry><entry thead="no"><para>Hyper-graph Partitioner </para></entry><entry thead="no"><para>Run Zoltan in hyper-graph mode to LB </para></entry><entry thead="no"><para><computeroutput>vt::vrt::collection::lb::ZoltanLB</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>StatsMapLB </para></entry><entry thead="no"><para>User-specified </para></entry><entry thead="no"><para>Read file to determine mapping </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_stats_map_l_b" kindref="compound">vt::vrt::collection::lb::StatsMapLB</ref></computeroutput> </para></entry></row>
</table>
</para></sect1>
<sect1 id="lb-manager_1load-models">
<title>Object Load Models</title>
<para>The performance-oriented load balancers described in the preceding section require a prediction of the loads each object will represent during the phases between one load balancing invocation and the next. These predictions are provided by load models, which are implementations of the <computeroutput>vt::vrt:collection::balance::LoadModel</computeroutput> interface. There are a number of general-purpose load model implementations provided by <bold><emphasis>vt</emphasis></bold>.</para><para>By default, <bold><emphasis>vt</emphasis></bold> uses a load model that predicts each object&apos;s work load for all future phases will match its workload in the most recent past phase. The system also provides an interface for applications and users to arrange use of a non-default load model where that may be desirable for reasons such as performance experimentation, specialization to application details, or execution environment considerations. To install a custom load model, application code should call <computeroutput><ref refid="namespacevt_1a05187076eac8c66c9951b062b0955520" kindref="member">vt::theLBManager()</ref>-&gt;setLoadModel(user_model)</computeroutput>. To simplify implementation of custom load models, and allow them to benefit from future system-level improvements, we recommend that custom load models be composed atop the default model, which can be obtained by calling <computeroutput><ref refid="namespacevt_1a05187076eac8c66c9951b062b0955520" kindref="member">vt::theLBManager()</ref>-&gt;getBaseLoadModel()</computeroutput>.</para><para>Most provided load models are designed as composable filters inherited from the <computeroutput>vt::vrt:collection::balance::ComposedModel</computeroutput> class. This allows them to form a &apos;model stack&apos; in which each class makes a particular adjustment to the predictions generated, and relies on others above and below to refine them further. One exception is the <computeroutput>vt::vrt:collection::balance::RawData</computeroutput> model, which directly returns past values recorded in the instrumented statistics structures that <computeroutput>LBManager</computeroutput> provides.</para><para>To illustrate the design concept, the default model is implemented as a stack of two other components. At the base of the stack is a <computeroutput>RawData</computeroutput> model that will refer to the instrumented object load timings recorded by the system during preceding execution. Layered on that is a <computeroutput>vt::vrt:collection::balance::NaivePersistence</computeroutput> model that queries the underlying <computeroutput>RawData</computeroutput> model for the times taken in the most recent phase, and returns those same times as its prediction of the times those objects will take in all future phases.</para><para>The full set of load model classes provided with <bold><emphasis>vt</emphasis></bold> is as follows</para><para><table rows="15" cols="3"><row>
<entry thead="yes"><para>Load Model </para></entry><entry thead="yes"><para>Description </para></entry><entry thead="yes"><para>Reference  </para></entry></row>
<row>
<entry thead="no"><para><bold>Utilities</bold> </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>LoadModel </para></entry><entry thead="no"><para>Pure virtual interface class, which the following implement </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model" kindref="compound">vt::vrt::collection::balance::LoadModel</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>ComposedModel </para></entry><entry thead="no"><para>A convenience class for most implementations to inherit from, that passes unmodified calls through to an underlying model instance </para></entry><entry thead="no"><para><computeroutput><ref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model" kindref="compound">vt::vrt::collection::balance::ComposedModel</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>RawData </para></entry><entry thead="no"><para>Returns historical data only, from the measured times </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_raw_data" kindref="compound">vt::vrt::collection::balance::RawData</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><bold>Transformers</bold> </para></entry><entry thead="no"><para>Transforms the values computed by the composed model(s), agnostic to whether a query refers to a past or future phase </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>Norm </para></entry><entry thead="no"><para>When asked for a <computeroutput>WHOLE_PHASE</computeroutput> value, computes a specified l-norm over all subphases </para></entry><entry thead="no"><para><computeroutput><ref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_norm" kindref="compound">vt::vrt::collection::balance::Norm</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>SelectSubphases </para></entry><entry thead="no"><para>Filters and remaps the subphases with data present in the underlying model </para></entry><entry thead="no"><para><computeroutput><ref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_select_subphases" kindref="compound">vt::vrt::collection::balance::SelectSubphases</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>CommOverhead </para></entry><entry thead="no"><para>Adds a specified amount of imputed &apos;system overhead&apos; time to each object&apos;s work based on the number of messages received </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead" kindref="compound">vt::vrt::collection::balance::CommOverhead</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>PerCollection </para></entry><entry thead="no"><para>Maintains a set of load models associated with different collection instances, and passes queries for an object through to the model corresponding to its collection </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_per_collection" kindref="compound">vt::vrt::collection::balance::PerCollection</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><bold>Predictors</bold> </para></entry><entry thead="no"><para>Computes values for future phase queries, and passes through past phase queries </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>NaivePersistence </para></entry><entry thead="no"><para>Passes through historical queries, and maps all future queries to the most recent past phase </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_naive_persistence" kindref="compound">vt::vrt::collection::balance::NaivePersistence</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>PersistenceMedianLastN </para></entry><entry thead="no"><para>Similar to NaivePersistence, except that it predicts based on a median over the N most recent phases </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_persistence_median_last_n" kindref="compound">vt::vrt::collection::balance::PersistenceMedianLastN</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>LinearModel </para></entry><entry thead="no"><para>Computes a linear regression over on object&apos;s loads from a number of recent phases </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_linear_model" kindref="compound">vt::vrt::collection::balance::LinearModel</ref></computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>MultiplePhases </para></entry><entry thead="no"><para>Computes values for future phases based on sums of the underlying model&apos;s predictions for N corresponding future phases </para></entry><entry thead="no"><para><computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases" kindref="compound">vt::vrt::collection::balance::MultiplePhases</ref></computeroutput> </para></entry></row>
</table>
All of the provided load balancers described in the previous section require that the installed load model provide responses to future phase queries for at least <computeroutput>PhaseOffset::NEXT_PHASE</computeroutput> (i.e. <computeroutput>0</computeroutput>), as the <bold>Predictors</bold> described above do. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
