<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1util_1_1adt_1_1detail" kind="namespace" language="C++">
    <compoundname>vt::util::adt::detail</compoundname>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_aligner" prot="public">vt::util::adt::detail::Aligner</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_aligner_3_01_t_01_4" prot="public">vt::util::adt::detail::Aligner&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_all_unique" prot="public">vt::util::adt::detail::AllUnique</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_all_unique_3_01_u_00_01_t_01_4" prot="public">vt::util::adt::detail::AllUnique&lt; U, T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_all_unique_3_01_u_00_01_t_00_01_ts_8_8_8_01_4" prot="public">vt::util::adt::detail::AllUnique&lt; U, T, Ts... &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_compare" prot="public">vt::util::adt::detail::Compare</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_compare_3_01_t_01_4" prot="public">vt::util::adt::detail::Compare&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_copy" prot="public">vt::util::adt::detail::Copy</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_copy_3_01_t_01_4" prot="public">vt::util::adt::detail::Copy&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_deallocate" prot="public">vt::util::adt::detail::Deallocate</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_deallocate_3_01_t_01_4" prot="public">vt::util::adt::detail::Deallocate&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_get_place" prot="public">vt::util::adt::detail::GetPlace</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_hash" prot="public">vt::util::adt::detail::Hash</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_hash_3_01_t_01_4" prot="public">vt::util::adt::detail::Hash&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_is_trivially_copyable" prot="public">vt::util::adt::detail::IsTriviallyCopyable</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_is_trivially_copyable_3_01_t_01_4" prot="public">vt::util::adt::detail::IsTriviallyCopyable&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_is_trivially_destructible" prot="public">vt::util::adt::detail::IsTriviallyDestructible</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_is_trivially_destructible_3_01_t_01_4" prot="public">vt::util::adt::detail::IsTriviallyDestructible&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_move" prot="public">vt::util::adt::detail::Move</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_move_3_01_t_01_4" prot="public">vt::util::adt::detail::Move&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_must_be" prot="public">vt::util::adt::detail::MustBe</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_must_be_3_01_t_01_4" prot="public">vt::util::adt::detail::MustBe&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_must_be_3_01_t_00_01_u_00_01_us_8_8_8_01_4" prot="public">vt::util::adt::detail::MustBe&lt; T, U, Us... &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_serialize" prot="public">vt::util::adt::detail::Serialize</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_serialize_3_01_t_01_4" prot="public">vt::util::adt::detail::Serialize&lt; T &gt;</innerclass>
    <innerclass refid="unionvt_1_1util_1_1adt_1_1detail_1_1_sizer" prot="public">vt::util::adt::detail::Sizer</innerclass>
    <innerclass refid="unionvt_1_1util_1_1adt_1_1detail_1_1_sizer_3_01_t_01_4" prot="public">vt::util::adt::detail::Sizer&lt; T &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_which" prot="public">vt::util::adt::detail::Which</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_which_impl" prot="public">vt::util::adt::detail::WhichImpl</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_which_impl_3_01_t_00_01_u_00_01typename_01std_1_1enable__i4d9447de0f2954cce0452213fa3ad5db" prot="public">vt::util::adt::detail::WhichImpl&lt; T, U, typename std::enable_if_t&lt; not std::is_same&lt; T, U &gt;::value &gt;, Us... &gt;</innerclass>
    <innerclass refid="structvt_1_1util_1_1adt_1_1detail_1_1_which_impl_3_01_t_00_01_u_00_01typename_01std_1_1enable__i0f067a3d2e31ed39b40aceedb711df3e" prot="public">vt::util::adt::detail::WhichImpl&lt; T, U, typename std::enable_if_t&lt; std::is_same&lt; T, U &gt;::value &gt;, Us... &gt;</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/utils/adt/union.h" line="51" column="1"/>
  </compounddef>
</doxygen>
