<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1_pipe_manager_t_l" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::PipeManagerTL</compoundname>
    <basecompoundref refid="structvt_1_1pipe_1_1_pipe_manager_base" prot="public" virt="virtual">vt::pipe::PipeManagerBase</basecompoundref>
    <derivedcompoundref refid="structvt_1_1pipe_1_1_pipe_manager" prot="public" virt="non-virtual">vt::pipe::PipeManager</derivedcompoundref>
    <includes refid="pipe__manager__tl_8h" local="no">pipe_manager_tl.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0bf4e2e805b3ce2be9f499e0e39aadfa" prot="public" static="no">
        <type><ref refid="namespacevt_1_1vrt_1_1collection_1a939327f58a5838cf9d7dcc7f14d1670c" kindref="member">vrt::collection::ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::ColHanType =  vrt::collection::ActiveColTypedFnType&lt;MsgT,ColT&gt;</definition>
        <argsstring></argsstring>
        <name>ColHanType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="63" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1abf7ad21be4f3d0db51d643aa8ea959cc" prot="public" static="no">
        <type><ref refid="namespacevt_1_1vrt_1_1collection_1a87925616c03cf4ccc548d33b2fe172ee" kindref="member">vrt::collection::ActiveColMemberTypedFnType</ref>&lt; MsgT, ColT &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::ColMemType =  vrt::collection::ActiveColMemberTypedFnType&lt;MsgT,ColT&gt;</definition>
        <argsstring></argsstring>
        <name>ColMemType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="66" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1a8a2e05fd84f8ac7b7dda4b64e5abe5" prot="public" static="no">
        <type><ref refid="namespacevt_1_1objgroup_1a979bd9dc714fdacafc4b83f98271bc23" kindref="member">objgroup::ActiveObjType</ref>&lt; MsgT, ObjT &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::ObjMemType =  objgroup::ActiveObjType&lt;MsgT,ObjT&gt;</definition>
        <argsstring></argsstring>
        <name>ObjMemType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="69" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1af56c58cad882496e35f01227d4da3898" prot="public" static="no">
        <type><ref refid="namespacevt_1a0d58a693bfb96e0ce5d145692a1a1f98" kindref="member">CollectionProxy</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::ColProxyType =  CollectionProxy&lt;ColT,typename ColT::IndexType&gt;</definition>
        <argsstring></argsstring>
        <name>ColProxyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="72" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1cc1d0f1c80a36488f9b5d282e9755d2" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" kindref="compound">callback::cbunion::CallbackRawBaseSingle</ref></type>
        <definition>using vt::pipe::PipeManagerTL::CallbackType =  callback::cbunion::CallbackRawBaseSingle</definition>
        <argsstring></argsstring>
        <name>CallbackType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="74" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1af6fc2c17f1729fa06450441b0ee81cb1" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">callback::cbunion::CallbackTyped</ref>&lt; MsgT &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::CallbackMsgType =  callback::cbunion::CallbackTyped&lt;MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>CallbackMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="77" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a456fdd18da932171fe8abab8bb213aa9" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">callback::cbunion::CallbackTyped</ref>&lt; Args... &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::CallbackRetType =  callback::cbunion::CallbackTyped&lt;Args...&gt;</definition>
        <argsstring></argsstring>
        <name>CallbackRetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="80" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac2c474a68a93bbc8e1d86eb99dabf1dc" prot="public" static="no">
        <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::FnType =  ActiveTypedFnType&lt;MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>FnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="83" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af6fc2c17f1729fa06450441b0ee81cb1" kindref="member">CallbackMsgType</ref>&lt; MsgT &gt;</type>
        <definition>using vt::pipe::PipeManagerTL::DefType =  CallbackMsgType&lt;MsgT&gt;</definition>
        <argsstring></argsstring>
        <name>DefType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="86" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8d394521df58abfd90c1d81c998f22e3" prot="public" static="no">
        <type><ref refid="namespacevt_1_1pipe_1_1signal_1acbe257d1ae44f20fa9fd9b6ed3057caf" kindref="member">signal::SigVoidType</ref></type>
        <definition>using vt::pipe::PipeManagerTL::V =  signal::SigVoidType</definition>
        <argsstring></argsstring>
        <name>V</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="88" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2c6022b17f4e9181e3f214242756cd2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>is_bcast</declname>
            <defname>is_bcast</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingle</definition>
        <argsstring>(NodeType node=uninitialized_destination)</argsstring>
        <name>makeCallbackSingle</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="95" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="231" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a72ef2f5094f971722a6e8aa1422f7869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>bool</type>
            <declname>is_bcast</declname>
            <defname>is_bcast</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackFunctor</definition>
        <argsstring>(NodeType node=uninitialized_destination)</argsstring>
        <name>makeCallbackFunctor</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="98" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="257" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac22b018279b274ddc9a46b3abfc69a64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnonVoid</definition>
        <argsstring>(LifetimeEnum life, FuncVoidType fn)</argsstring>
        <name>makeCallbackSingleAnonVoid</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" kindref="member">FuncVoidType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="101" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="282" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2eac310604186b69abfd9d55a9b77c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnon</definition>
        <argsstring>(LifetimeEnum life, FuncMsgType&lt; T &gt; fn)</argsstring>
        <name>makeCallbackSingleAnon</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" kindref="member">FuncMsgType</ref>&lt; T &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a99c60d656fee4e528ff61cacc2f89392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnon</definition>
        <argsstring>(LifetimeEnum life, U *u, FuncMsgCtxType&lt; T, U &gt; fn)</argsstring>
        <name>makeCallbackSingleAnon</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" kindref="member">FuncMsgCtxType</ref>&lt; T, U &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a07b4b67231348cb486b6c796152c27f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnon</definition>
        <argsstring>(LifetimeEnum life, U *u, FuncCtxType&lt; U &gt; fn)</argsstring>
        <name>makeCallbackSingleAnon</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" kindref="member">FuncCtxType</ref>&lt; U &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a342691748229aa8765834fe3dcec04b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>auto</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>is_bcast</declname>
            <defname>is_bcast</defname>
          </param>
          <param>
            <type>typename ProxyT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackProxy</definition>
        <argsstring>(ProxyT proxy)</argsstring>
        <name>makeCallbackProxy</name>
        <param>
          <type>ProxyT</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="114" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="145" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff965bd75d398d45ad11d33feeb7a7c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1cc1d0f1c80a36488f9b5d282e9755d2" kindref="member">CallbackType</ref></type>
        <definition>PipeManagerTL::CallbackType vt::pipe::PipeManagerTL::makeCallback</definition>
        <argsstring>()</argsstring>
        <name>makeCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="118" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a9644742f82b43a851e8a20755302a2e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af6fc2c17f1729fa06450441b0ee81cb1" kindref="member">CallbackMsgType</ref>&lt; T &gt;</type>
        <definition>PipeManagerTL::CallbackMsgType&lt; T &gt; vt::pipe::PipeManagerTL::makeCallbackTyped</definition>
        <argsstring>()</argsstring>
        <name>makeCallbackTyped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="121" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a379d983dfbf654ed01281d96148175f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; T &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename CbkT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" kindref="member">DefType</ref>&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListener</definition>
        <argsstring>(CbkT const &amp;cb, NodeType const &amp;node)</argsstring>
        <name>addListener</name>
        <param>
          <type>CbkT const &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a137d7271f189aa000427a3cb39bd7f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; T &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename CbkT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" kindref="member">DefType</ref>&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerBcast</definition>
        <argsstring>(CbkT const &amp;cb)</argsstring>
        <name>addListenerBcast</name>
        <param>
          <type>CbkT const &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1abc9236c8ff7a657b1b04fd7604d616b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename T</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::MessageType</defval>
          </param>
          <param>
            <type>typename CbkT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" kindref="member">DefType</ref>&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerFunctor</definition>
        <argsstring>(CbkT const &amp;cb, NodeType const &amp;node)</argsstring>
        <name>addListenerFunctor</name>
        <param>
          <type>CbkT const &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a12cd5abf9d9a082369419a5cc5b7b0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename CbkT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" kindref="member">DefType</ref>&lt;<ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8d394521df58abfd90c1d81c998f22e3" kindref="member">V</ref>&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerFunctorVoid</definition>
        <argsstring>(CbkT const &amp;cb, NodeType const &amp;node)</argsstring>
        <name>addListenerFunctorVoid</name>
        <param>
          <type>CbkT const &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a3bbcc3d70bb6840ede74747011f18ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename T</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::MessageType</defval>
          </param>
          <param>
            <type>typename CbkT</type>
            <defval><ref refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" kindref="member">DefType</ref>&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerFunctorBcast</definition>
        <argsstring>(CbkT const &amp;cb)</argsstring>
        <name>addListenerFunctorBcast</name>
        <param>
          <type>CbkT const &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1ae1aee468ba813cc359e3d3602722b161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListener</definition>
        <argsstring>(CallbackT const &amp;cb, NodeType const &amp;node)</argsstring>
        <name>addListener</name>
        <param>
          <type>CallbackT const &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="92" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1af50d2867536e0b9db56560126c3da066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerBcast</definition>
        <argsstring>(CallbackT const &amp;cb)</argsstring>
        <name>addListenerBcast</name>
        <param>
          <type>CallbackT const &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="100" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="100" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1aca69c630748b177c01af61b39ffad0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerFunctor</definition>
        <argsstring>(CallbackT const &amp;cb, NodeType const &amp;node)</argsstring>
        <name>addListenerFunctor</name>
        <param>
          <type>CallbackT const &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="108" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="108" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a12039964ec1deb173f0ee83ad4c8a543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerFunctorVoid</definition>
        <argsstring>(CallbackT const &amp;cb, NodeType const &amp;node)</argsstring>
        <name>addListenerFunctorVoid</name>
        <param>
          <type>CallbackT const &amp;</type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="119" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="119" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a7f59d9749248fb963a7c279a053fe220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerTL::addListenerFunctorBcast</definition>
        <argsstring>(CallbackT const &amp;cb)</argsstring>
        <name>addListenerFunctorBcast</name>
        <param>
          <type>CallbackT const &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="131" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1a974ab3bbfc8a972f5d016ebf70c5a6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnon</definition>
        <argsstring>(LifetimeEnum life, C *ctx, FuncCtxType&lt; C &gt; fn)</argsstring>
        <name>makeCallbackSingleAnon</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>C *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" kindref="member">FuncCtxType</ref>&lt; C &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="301" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="301" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1ad0dca13f93e697e5c6329919ae77378f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnon</definition>
        <argsstring>(LifetimeEnum life, C *ctx, FuncMsgCtxType&lt; MsgT, C &gt; fn)</argsstring>
        <name>makeCallbackSingleAnon</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type>C *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" kindref="member">FuncMsgCtxType</ref>&lt; MsgT, C &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="315" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="315" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_t_l_1aea9bdf9ea02e21ebd98393907ff432ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTL::makeCallbackSingleAnon</definition>
        <argsstring>(LifetimeEnum life, FuncMsgType&lt; MsgT &gt; fn)</argsstring>
        <name>makeCallbackSingleAnon</name>
        <param>
          <type><ref refid="namespacevt_1_1pipe_1acb42b284378c0fdac1d7c6335dc26f58" kindref="member">LifetimeEnum</ref></type>
          <declname>life</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" kindref="member">FuncMsgType</ref>&lt; MsgT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_tl.impl.h" line="329" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.impl.h" bodystart="329" bodyend="346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3132">
        <label>vt::pipe::PipeManager</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager"/>
        <childnode refid="3130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3130">
        <label>vt::pipe::PipeManagerTL</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_t_l"/>
        <childnode refid="3131" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3131">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3133">
        <label>vt::pipe::PipeManagerTL</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_t_l"/>
        <childnode refid="3134" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3134">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/pipe/pipe_manager_tl.h" line="61" column="1" bodyfile="src/vt/pipe/pipe_manager_tl.h" bodystart="61" bodyend="145"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a379d983dfbf654ed01281d96148175f3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ae1aee468ba813cc359e3d3602722b161" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa878aef84540ec6c2ca89096683d407e" prot="public" virt="non-virtual" ambiguityscope="vt::pipe::PipeManagerBase::"><scope>vt::pipe::PipeManagerTL</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aee28bc7a33e3a0b796aa8fcdd6f72bd9" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a137d7271f189aa000427a3cb39bd7f52" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af50d2867536e0b9db56560126c3da066" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1abc9236c8ff7a657b1b04fd7604d616b9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerFunctor</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aca69c630748b177c01af61b39ffad0ec" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerFunctor</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a3bbcc3d70bb6840ede74747011f18ea8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerFunctorBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a7f59d9749248fb963a7c279a053fe220" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerFunctorBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a12cd5abf9d9a082369419a5cc5b7b0f8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerFunctorVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a12039964ec1deb173f0ee83ad4c8a543" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerFunctorVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ae486f94f76733fd3d97ff393c35d0e5e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>addListenerVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af6fc2c17f1729fa06450441b0ee81cb1" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>CallbackMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a456fdd18da932171fe8abab8bb213aa9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>CallbackRetType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1cc1d0f1c80a36488f9b5d282e9755d2" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>CallbackType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a0bf4e2e805b3ce2be9f499e0e39aadfa" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>ColHanType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1abf7ad21be4f3d0db51d643aa8ea959cc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>ColMemType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1af56c58cad882496e35f01227d4da3898" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>ColProxyType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a5f78dde989930cf645a8bd67301740a7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>DefType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a983e301505317c5ba2041461e7dec84a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>DispatchFuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac2c474a68a93bbc8e1d86eb99dabf1dc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>FnType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>FuncCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>FuncMsgCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>FuncMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>FuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>FuncVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27d24548529db938aeeb6fe11af985a1" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>generalSignalTrigger</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aff965bd75d398d45ad11d33feeb7a7c5" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a465621a26a764f147228e8f814ac5d31" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a57a1c95c5256aabd25c8a3e0bf58f5cc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a72ef2f5094f971722a6e8aa1422f7869" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackFunctor</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a06e2f38ea4dc340ccc63b0c695df3951" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackFuncVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a342691748229aa8765834fe3dcec04b3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackProxy</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2c6022b17f4e9181e3f214242756cd2a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingle</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a2eac310604186b69abfd9d55a9b77c0f" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a99c60d656fee4e528ff61cacc2f89392" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a07b4b67231348cb486b6c796152c27f2" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a974ab3bbfc8a972f5d016ebf70c5a6d7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ad0dca13f93e697e5c6329919ae77378f" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1aea9bdf9ea02e21ebd98393907ff432ea" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1ac22b018279b274ddc9a46b3abfc69a64" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackSingleAnonVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a9644742f82b43a851e8a20755302a2e0" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makeCallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af1ba11407837cb69b4d205dd7ba880b0" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>makePipeID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a835a8b819cfe7100b723b6d9b22cca57" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>newPipeState</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a1a8a2e05fd84f8ac7b7dda4b64e5abe5" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>ObjMemType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a6b3b1e6d6bfe21308090d2dc62743961" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>PipeManagerBase</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a1364798bda487c9fb04879599f96c507" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>PipeStateType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27f1aea903f8e05655eb84ae1474c729" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>registerCallback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acae150f3cb2f27a84f39186ad4dd1a37" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>triggerCallbackHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a56855a2a2c55decbb79971f51fb9dcce" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>triggerCallbackMsgHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a32f82a02196fe42e98ae3b628b73ae6d" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>triggerPipe</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a34492ef027a92525ca5acc4e86b360ce" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>triggerPipeTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad21185d07e9c3a0206d3d5a791f668a3" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>triggerPipeUnknown</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_t_l_1a8d394521df58abfd90c1d81c998f22e3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTL</scope><name>V</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af7b66141f69a485c6fce5e02bbbd3f89" prot="public" virt="virtual"><scope>vt::pipe::PipeManagerTL</scope><name>~PipeManagerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
