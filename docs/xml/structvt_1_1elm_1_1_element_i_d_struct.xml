<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvt_1_1elm_1_1_element_i_d_struct" kind="struct" language="C++" prot="public">
    <compoundname>vt::elm::ElementIDStruct</compoundname>
    <includes refid="elm__id_8h" local="no">elm_id.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1elm_1_1_element_i_d_struct_1a1d5b611a29416aee3eb588a723851f8b" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using vt::elm::ElementIDStruct::isByteCopyable =  std::true_type</definition>
        <argsstring></argsstring>
        <name>isByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="65" column="3" bodyfile="src/vt/elm/elm_id.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvt_1_1elm_1_1_element_i_d_struct_1aa4dc0aed0581098508f2d2b3f8475d10" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1elm_1a63afb64985b41b7b6dcf2f01336391f8" kindref="member">ElementIDType</ref></type>
        <definition>ElementIDType vt::elm::ElementIDStruct::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= no_element_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>id must be unique across nodes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="75" column="17" bodyfile="src/vt/elm/elm_id.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1elm_1_1_element_i_d_struct_1af0916244e9dbfe1c746e68b5fb1b5421" prot="public" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::elm::ElementIDStruct::curr_node</definition>
        <argsstring></argsstring>
        <name>curr_node</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the current node </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="76" column="12" bodyfile="src/vt/elm/elm_id.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1elm_1_1_element_i_d_struct_1a98ec58a85fd3e6e809417e17b915b9f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::elm::ElementIDStruct::operator==</definition>
        <argsstring>(const ElementIDStruct &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structvt_1_1elm_1_1_element_i_d_struct" kindref="compound">ElementIDStruct</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="67" column="8" bodyfile="src/vt/elm/elm_id.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1elm_1_1_element_i_d_struct_1ac369b3ac1a37cf6958e9373f3f0c89f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::elm::ElementIDStruct::operator&lt;</definition>
        <argsstring>(const ElementIDStruct &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structvt_1_1elm_1_1_element_i_d_struct" kindref="compound">ElementIDStruct</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="71" column="3" bodyfile="src/vt/elm/elm_id.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1elm_1_1_element_i_d_struct_1a1d01309528dfb6921e3a89feed8132c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::elm::ElementIDStruct::isMigratable</definition>
        <argsstring>() const</argsstring>
        <name>isMigratable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="78" column="8" bodyfile="src/vt/elm/elm_id.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1elm_1_1_element_i_d_struct_1a853a49294bc9fe48af9081597e017d39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::elm::ElementIDStruct::getHomeNode</definition>
        <argsstring>() const</argsstring>
        <name>getHomeNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="79" column="12" bodyfile="src/vt/elm/elm_id.cc" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1elm_1_1_element_i_d_struct_1afa66d3704b485043da7ba93f05d04737" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::elm::ElementIDStruct::getCurrNode</definition>
        <argsstring>() const</argsstring>
        <name>getCurrNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="80" column="12" bodyfile="src/vt/elm/elm_id.cc" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1elm_1_1_element_i_d_struct_1af8e7d84fe9355e54a18c18d10f4d4f63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::elm::ElementIDStruct::isLocatedOnThisNode</definition>
        <argsstring>() const</argsstring>
        <name>isLocatedOnThisNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/elm/elm_id.h" line="81" column="8" bodyfile="src/vt/elm/elm_id.cc" bodystart="62" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A general identifier for a task context. The <computeroutput>id</computeroutput> is unique in the system. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/elm/elm_id.h" line="64" column="1" bodyfile="src/vt/elm/elm_id.h" bodystart="64" bodyend="82"/>
    <listofallmembers>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1af0916244e9dbfe1c746e68b5fb1b5421" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>curr_node</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1afa66d3704b485043da7ba93f05d04737" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>getCurrNode</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1a853a49294bc9fe48af9081597e017d39" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>getHomeNode</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1aa4dc0aed0581098508f2d2b3f8475d10" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>id</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1a1d5b611a29416aee3eb588a723851f8b" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>isByteCopyable</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1af8e7d84fe9355e54a18c18d10f4d4f63" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>isLocatedOnThisNode</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1a1d01309528dfb6921e3a89feed8132c2" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>isMigratable</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1ac369b3ac1a37cf6958e9373f3f0c89f5" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>operator&lt;</name></member>
      <member refid="structvt_1_1elm_1_1_element_i_d_struct_1a98ec58a85fd3e6e809417e17b915b9f5" prot="public" virt="non-virtual"><scope>vt::elm::ElementIDStruct</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
