<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_pending_closure" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::PendingClosure</compoundname>
    <includes refid="dependent__send__chain_8h" local="no">vt/messaging/dependent_send_chain.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_pending_closure_1a8a7aa220e450d45f9a7ebec04d563bdd" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></type>
        <definition>PendingSend vt::messaging::PendingClosure::pending_</definition>
        <argsstring></argsstring>
        <name>pending_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> to be released </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/dependent_send_chain.h" line="83" column="1" bodyfile="src/vt/messaging/dependent_send_chain.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_closure_1aabf555d7b42f5d663b1ad499f09db9d4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingClosure::PendingClosure</definition>
        <argsstring>(PendingSend &amp;&amp;in_pending)</argsstring>
        <name>PendingClosure</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;&amp;</type>
          <declname>in_pending</declname>
        </param>
        <briefdescription>
<para>Construct from a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> waiting to be released </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/dependent_send_chain.h" line="69" column="1" bodyfile="src/vt/messaging/dependent_send_chain.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_closure_1a3e703c1f2ff98d8e1a04ad4306a1f011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingClosure::PendingClosure</definition>
        <argsstring>(PendingClosure const &amp;)=delete</argsstring>
        <name>PendingClosure</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_closure" kindref="compound">PendingClosure</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/dependent_send_chain.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_closure_1aa0e2748116e95dd60b31ebfc6a5334c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingClosure::PendingClosure</definition>
        <argsstring>(PendingClosure &amp;&amp;in)=default</argsstring>
        <name>PendingClosure</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_closure" kindref="compound">PendingClosure</ref> &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/dependent_send_chain.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_closure_1a484d65eb7d32fde14253976927e37fd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::PendingClosure::operator()</definition>
        <argsstring>()</argsstring>
        <name>operator()</name>
        <briefdescription>
<para>Release the pending send. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/dependent_send_chain.h" line="78" column="1" bodyfile="src/vt/messaging/dependent_send_chain.h" bodystart="78" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A move-only closure that holds a <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> that is typically waiting for termination of another epoch before being released. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3011">
        <label>T</label>
      </node>
      <node id="3009">
        <label>vt::epoch::EpochType</label>
        <link refid="structvt_1_1epoch_1_1_epoch_type"/>
        <childnode refid="3010" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3008">
        <label>vt::messaging::MsgPtrImplBase</label>
        <link refid="structvt_1_1messaging_1_1_msg_ptr_impl_base"/>
      </node>
      <node id="3007">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
      <node id="3005">
        <label>vt::messaging::PendingSend</label>
        <link refid="structvt_1_1messaging_1_1_pending_send"/>
        <childnode refid="3006" relation="usage">
          <edgelabel>msg_</edgelabel>
        </childnode>
        <childnode refid="3009" relation="usage">
          <edgelabel>epoch_produced_</edgelabel>
        </childnode>
      </node>
      <node id="3004">
        <label>vt::messaging::PendingClosure</label>
        <link refid="structvt_1_1messaging_1_1_pending_closure"/>
        <childnode refid="3005" relation="usage">
          <edgelabel>pending_</edgelabel>
        </childnode>
      </node>
      <node id="3006">
        <label>vt::messaging::MsgSharedPtr&lt; vt::messaging::ActiveMsg &gt;</label>
        <link refid="structvt_1_1messaging_1_1_msg_shared_ptr"/>
        <childnode refid="3007" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
        <childnode refid="3008" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
      <node id="3010">
        <label>Strong&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</label>
        <link refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong"/>
        <childnode refid="3011" relation="usage">
          <edgelabel>v_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/messaging/dependent_send_chain.h" line="63" column="1" bodyfile="src/vt/messaging/dependent_send_chain.h" bodystart="63" bodyend="84"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_pending_closure_1a484d65eb7d32fde14253976927e37fd9" prot="public" virt="non-virtual"><scope>vt::messaging::PendingClosure</scope><name>operator()</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_closure_1a8a7aa220e450d45f9a7ebec04d563bdd" prot="private" virt="non-virtual"><scope>vt::messaging::PendingClosure</scope><name>pending_</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_closure_1aabf555d7b42f5d663b1ad499f09db9d4" prot="public" virt="non-virtual"><scope>vt::messaging::PendingClosure</scope><name>PendingClosure</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_closure_1a3e703c1f2ff98d8e1a04ad4306a1f011" prot="public" virt="non-virtual"><scope>vt::messaging::PendingClosure</scope><name>PendingClosure</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_closure_1aa0e2748116e95dd60b31ebfc6a5334c3" prot="public" virt="non-virtual"><scope>vt::messaging::PendingClosure</scope><name>PendingClosure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
