<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="pool" kind="page">
    <compoundname>pool</compoundname>
    <title>Memory Pool</title>
    <briefdescription>
<para>Memory pool for efficient allocation. </para>
    </briefdescription>
    <detaileddescription>
<para>Memory pool for efficient allocation</para>
<para>The memory pool component <computeroutput><ref refid="structvt_1_1pool_1_1_pool" kindref="compound">vt::pool::Pool</ref></computeroutput>, accessed via <computeroutput><ref refid="namespacevt_1aab3530d89a64e5ea903b0ccf303ecbb7" kindref="member">vt::thePool()</ref></computeroutput> provides a highly efficient memory pool for fixed sized allocations in three sizes: small (<computeroutput>vt::pool::memory_size_small</computeroutput>), medium (<computeroutput>vt::pool::memory_size_medium</computeroutput>), and large (currently unimplemented).</para>
<para>All message allocation (on the send and receive side) is overloaded with new/delete overloads to allocate message memory through the <bold><emphasis>vt</emphasis></bold> memory pool. The pool implementation uses a non-thread-safe allocation policy (must be allocated/deallocated on the same thread) with fixed sized buckets. If the size exceeds the largest bucket, the memory pool will fall back on the standard allocator. </para>
    </detaileddescription>
    <location file="docs/md/pool.md"/>
  </compounddef>
</doxygen>
