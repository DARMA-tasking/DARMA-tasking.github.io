<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pool_1_1_pool" kind="struct" language="C++" prot="public">
    <compoundname>vt::pool::Pool</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; Pool &gt;</basecompoundref>
    <includes refid="pool_8h" local="no">pool.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28" prot="public" static="no">
        <name>ePoolSize</name>
        <enumvalue id="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28a2660064e68655415da2628c2ae2f7592" prot="public">
          <name>Small</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Small bucket </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28a87f8a6ab85c9ced3702b4ea641ad4bb5" prot="public">
          <name>Medium</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Medium bucket </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28a3a69b34ce86dacb205936a8094f6c743" prot="public">
          <name>Large</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Large bucket </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28a1131a914388fac73e5f07b0ba0aad523" prot="public">
          <name>Malloc</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Backup malloc allocation </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different pool sizes: small, medium, large, and the backup malloc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="81" column="1" bodyfile="src/vt/pool/pool.h" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1a4030898e09d0160c24743a7b949c0d46" prot="public" static="no">
        <type>size_t</type>
        <definition>using vt::pool::Pool::SizeType =  size_t</definition>
        <argsstring></argsstring>
        <name>SizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="70" column="1" bodyfile="src/vt/pool/pool.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1a887de970f8d8fbec63df120348c31404" prot="public" static="no">
        <type><ref refid="structvt_1_1pool_1_1_header" kindref="compound">Header</ref></type>
        <definition>using vt::pool::Pool::HeaderType =  Header</definition>
        <argsstring></argsstring>
        <name>HeaderType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="71" column="1" bodyfile="src/vt/pool/pool.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1acc5ad2d64bf6ff58fead958a69c12d74" prot="public" static="no">
        <type><ref refid="structvt_1_1pool_1_1_header_manager" kindref="compound">HeaderManager</ref></type>
        <definition>using vt::pool::Pool::HeaderManagerType =  HeaderManager</definition>
        <argsstring></argsstring>
        <name>HeaderManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="72" column="1" bodyfile="src/vt/pool/pool.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1a06673914350d933ad5205155eca14a3b" prot="public" static="no">
        <type><ref refid="structvt_1_1pool_1_1_memory_pool_equal" kindref="compound">MemoryPoolEqual</ref>&lt; num_bytes_t &gt;</type>
        <definition>using vt::pool::Pool::MemoryPoolType =  MemoryPoolEqual&lt;num_bytes_t&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryPoolType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="74" column="1" bodyfile="src/vt/pool/pool.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1a21e20f5b56c3bae4f0d0cc36ed9c5eee" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1pool_1_1_pool_1a06673914350d933ad5205155eca14a3b" kindref="member">MemoryPoolType</ref>&lt; num_bytes_t &gt; &gt;</type>
        <definition>using vt::pool::Pool::MemoryPoolPtrType =  std::unique_ptr&lt;MemoryPoolType&lt;num_bytes_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>MemoryPoolPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="76" column="1" bodyfile="src/vt/pool/pool.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1a9f94985824d12c43357cfe50eaaefd38" prot="private" static="no">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a21e20f5b56c3bae4f0d0cc36ed9c5eee" kindref="member">MemoryPoolPtrType</ref>&lt; memory_size_small &gt;</type>
        <definition>using vt::pool::Pool::MemPoolSType =  MemoryPoolPtrType&lt;memory_size_small&gt;</definition>
        <argsstring></argsstring>
        <name>MemPoolSType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="225" column="1" bodyfile="src/vt/pool/pool.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pool_1_1_pool_1a8a201b9a843e47cd4e7b568a8e4483da" prot="private" static="no">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a21e20f5b56c3bae4f0d0cc36ed9c5eee" kindref="member">MemoryPoolPtrType</ref>&lt; memory_size_medium &gt;</type>
        <definition>using vt::pool::Pool::MemPoolMType =  MemoryPoolPtrType&lt;memory_size_medium&gt;</definition>
        <argsstring></argsstring>
        <name>MemPoolMType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="226" column="1" bodyfile="src/vt/pool/pool.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1pool_1_1_pool_1a8f14f2f9b344882cf727200eb8d41845" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a9f94985824d12c43357cfe50eaaefd38" kindref="member">MemPoolSType</ref></type>
        <definition>MemPoolSType vt::pool::Pool::small_msg</definition>
        <argsstring></argsstring>
        <name>small_msg</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="232" column="1" bodyfile="src/vt/pool/pool.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_pool_1a268cb9b30cde3272c49e67e781f0345e" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a8a201b9a843e47cd4e7b568a8e4483da" kindref="member">MemPoolMType</ref></type>
        <definition>MemPoolMType vt::pool::Pool::medium_msg</definition>
        <argsstring></argsstring>
        <name>medium_msg</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="233" column="1" bodyfile="src/vt/pool/pool.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_pool_1a9551faed42cf337990287481e158b01e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1pool_1_1_pool_1a9f94985824d12c43357cfe50eaaefd38" kindref="member">MemPoolSType</ref> &gt;</type>
        <definition>std::vector&lt;MemPoolSType&gt; vt::pool::Pool::s_msg_worker_</definition>
        <argsstring></argsstring>
        <name>s_msg_worker_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="235" column="1" bodyfile="src/vt/pool/pool.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pool_1_1_pool_1a86b8d7208cd3e42c821e23f0ab654d26" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1pool_1_1_pool_1a8a201b9a843e47cd4e7b568a8e4483da" kindref="member">MemPoolMType</ref> &gt;</type>
        <definition>std::vector&lt;MemPoolMType&gt; vt::pool::Pool::m_msg_worker_</definition>
        <argsstring></argsstring>
        <name>m_msg_worker_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="236" column="1" bodyfile="src/vt/pool/pool.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a55a236c42c331940884370c85fb18e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pool::Pool::Pool</definition>
        <argsstring>()</argsstring>
        <name>Pool</name>
        <briefdescription>
<para>System construction of the pool component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="91" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a02fa54fc3cca0d388f25f397dfd997ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::pool::Pool::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_base_component_1a7701485f3539f78d42e6bad47fc7eb78">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="93" column="1" bodyfile="src/vt/pool/pool.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a0bf20e8b4ad1b85fb8952d81d433da55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * vt::pool::Pool::alloc</definition>
        <argsstring>(size_t const &amp;num_bytes, size_t oversize=0)</argsstring>
        <name>alloc</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oversize</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Allocate some number of bytes plus extra size at the end. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>main payload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversize</parametername>
</parameternamelist>
<parameterdescription>
<para>extra bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to new allocation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="103" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="167" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a73ef123aa04b44ae875716e2c7b95cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pool::Pool::dealloc</definition>
        <argsstring>(void *const buf)</argsstring>
        <name>dealloc</name>
        <param>
          <type>void *const</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>De-allocate a pool-allocated buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to deallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="110" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="197" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a9aa5afbbea5a61265746c4d461502d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28" kindref="member">ePoolSize</ref></type>
        <definition>Pool::ePoolSize vt::pool::Pool::getPoolType</definition>
        <argsstring>(size_t const &amp;num_bytes, size_t const &amp;oversize)</argsstring>
        <name>getPoolType</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>size_t const &amp;</type>
          <declname>oversize</declname>
        </param>
        <briefdescription>
<para>Decided which pool bucket to target based on size. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>main payload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversize</parametername>
</parameternamelist>
<parameterdescription>
<para>extra bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>enum <computeroutput>ePoolSize</computeroutput> of which pool to target </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="120" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="68" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a7d6742d6abc615255e25363a1be067be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a4030898e09d0160c24743a7b949c0d46" kindref="member">SizeType</ref></type>
        <definition>Pool::SizeType vt::pool::Pool::remainingSize</definition>
        <argsstring>(void *const buf)</argsstring>
        <name>remainingSize</name>
        <param>
          <type>void *const</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get remaining bytes for a pool allocation. </para>        </briefdescription>
        <detaileddescription>
<para>using the memory pool, often extra bytes are at the end of the allocation because the user did not request the whole block assigned. Some components use this extra memory to pack in extra meta-data (or send serialized data) when sending a message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer allocated from the pool</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of extra bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="134" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="232" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a3f34112821d767815d5049dc83503033" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pool::Pool::active</definition>
        <argsstring>() const</argsstring>
        <name>active</name>
        <briefdescription>
<para>Whether the pool is enabled at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether its enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="141" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1aa11bdd76d9f6491ac412d5abc5c63274" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pool::Pool::active_env</definition>
        <argsstring>() const</argsstring>
        <name>active_env</name>
        <briefdescription>
<para>Whether the pool is enabled at compile-time and used as the default allocator for messages. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether its enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="149" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1aeb8ad6a3ac3cf168dc4f2d2be2714edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pool::Pool::initWorkerPools</definition>
        <argsstring>(WorkerCountType const &amp;num_workers)</argsstring>
        <name>initWorkerPools</name>
        <param>
          <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const &amp;</type>
          <declname>num_workers</declname>
        </param>
        <briefdescription>
<para>Initialize worker-specific pools due to the lack of thread-safety of the memory allocator. This will create distinct memory pool instances for each worker thread to access. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_workers</parametername>
</parameternamelist>
<parameterdescription>
<para>number of workers on this node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="158" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a45a2880809625a77bb93c3dfcd9c7603" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::pool::Pool::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959">finalize</reimplements>
        <briefdescription>
<para>Cleanup/free the memory pools. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="163" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="261" bodyend="266"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1abd5f079910c28493ad3b0d5a9469f00a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * vt::pool::Pool::tryPooledAlloc</definition>
        <argsstring>(size_t const &amp;num_bytes, size_t const &amp;oversize)</argsstring>
        <name>tryPooledAlloc</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>size_t const &amp;</type>
          <declname>oversize</declname>
        </param>
        <briefdescription>
<para>Attempt allocation via pooled allocator and fall back to standard allocation if it fails. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>main payload size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversize</parametername>
</parameternamelist>
<parameterdescription>
<para>extra size requested</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to memory if succeeds </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="175" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1adf32f4660575880101522e5d6b640edd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pool::Pool::tryPooledDealloc</definition>
        <argsstring>(void *const buf)</argsstring>
        <name>tryPooledDealloc</name>
        <param>
          <type>void *const</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Attempt to de-allocate a buffer. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to deallocate</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it succeeded or wasn&apos;t allocated by the pool </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="184" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="91" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a8a6ff684a26b2229cbf263e99a1bc2ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * vt::pool::Pool::pooledAlloc</definition>
        <argsstring>(size_t const &amp;num_bytes, size_t const &amp;oversize, ePoolSize const pool_type)</argsstring>
        <name>pooledAlloc</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>size_t const &amp;</type>
          <declname>oversize</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28" kindref="member">ePoolSize</ref> const</type>
          <declname>pool_type</declname>
        </param>
        <briefdescription>
<para>Allocate memory from a specific pool. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>main payload size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversize</parametername>
</parameternamelist>
<parameterdescription>
<para>extra size requested </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to target of sufficient size</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buffer allocated </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="195" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="105" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1aa9ae08727c21035461d6f60b93ea19ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pool::Pool::poolDealloc</definition>
        <argsstring>(void *const buf, ePoolSize const pool_type)</argsstring>
        <name>poolDealloc</name>
        <param>
          <type>void *const</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28" kindref="member">ePoolSize</ref> const</type>
          <declname>pool_type</declname>
        </param>
        <briefdescription>
<para>De-allocate memory from pool. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool_type</parametername>
</parameternamelist>
<parameterdescription>
<para>which pool to target </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="205" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="140" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1ad9eb4c0efa76dc46487e23e265554943" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * vt::pool::Pool::defaultAlloc</definition>
        <argsstring>(size_t const &amp;num_bytes, size_t const &amp;oversize)</argsstring>
        <name>defaultAlloc</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>size_t const &amp;</type>
          <declname>oversize</declname>
        </param>
        <briefdescription>
<para>Allocate from standard allocator. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>main payload size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversize</parametername>
</parameternamelist>
<parameterdescription>
<para>extra size requested</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the allocated buffer </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="215" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="156" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a8d8654019bf80cd274bea1797645db37" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pool::Pool::defaultDealloc</definition>
        <argsstring>(void *const ptr)</argsstring>
        <name>defaultDealloc</name>
        <param>
          <type>void *const</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>De-allocate from standard allocator. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to deallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="222" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="163" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1a833da3cd4d410ba607b6e7b000810882" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a9f94985824d12c43357cfe50eaaefd38" kindref="member">MemPoolSType</ref></type>
        <definition>Pool::MemPoolSType vt::pool::Pool::initSPool</definition>
        <argsstring>()</argsstring>
        <name>initSPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="228" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pool_1_1_pool_1ab768c364b348107112f960ce0704565d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pool_1_1_pool_1a8a201b9a843e47cd4e7b568a8e4483da" kindref="member">MemPoolMType</ref></type>
        <definition>Pool::MemPoolMType vt::pool::Pool::initMPool</definition>
        <argsstring>()</argsstring>
        <name>initMPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pool/pool.h" line="229" column="1" bodyfile="src/vt/pool/pool.cc" bodystart="64" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A core VT component that manages efficient pools of memory for quick allocation/deallocation. </para>    </briefdescription>
    <detaileddescription>
<para>Highly efficient memory pool that is not thread-safe. Utilizes fixed-size buckets with free-list to quickly allocate and de-allocate. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2417">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="2418" relation="public-inheritance">
        </childnode>
        <childnode refid="2419" relation="public-inheritance">
        </childnode>
        <childnode refid="2420" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2418">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
      </node>
      <node id="2415">
        <label>vt::pool::Pool</label>
        <link refid="structvt_1_1pool_1_1_pool"/>
        <childnode refid="2416" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2416">
        <label>vt::runtime::component::Component&lt; Pool &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="2417" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2419">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="2420">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2423">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="2424" relation="public-inheritance">
        </childnode>
        <childnode refid="2425" relation="public-inheritance">
        </childnode>
        <childnode refid="2426" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2424">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
      </node>
      <node id="2421">
        <label>vt::pool::Pool</label>
        <link refid="structvt_1_1pool_1_1_pool"/>
        <childnode refid="2422" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2422">
        <label>vt::runtime::component::Component&lt; Pool &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="2423" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2425">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="2426">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/pool/pool.h" line="69" column="1" bodyfile="src/vt/pool/pool.h" bodystart="69" bodyend="237"/>
    <listofallmembers>
      <member refid="structvt_1_1pool_1_1_pool_1a3f34112821d767815d5049dc83503033" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>active</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1aa11bdd76d9f6491ac412d5abc5c63274" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>active_env</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a0bf20e8b4ad1b85fb8952d81d433da55" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>alloc</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a7b791c5956fad1774db36bd457d6158a" prot="protected" virt="non-virtual"><scope>vt::pool::Pool</scope><name>component_id_</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a73ef123aa04b44ae875716e2c7b95cab" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>dealloc</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1ad9eb4c0efa76dc46487e23e265554943" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>defaultAlloc</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a8d8654019bf80cd274bea1797645db37" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>defaultDealloc</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>dumpState</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1ace8d36439e5e599a8ee68b2f1a6a6b28" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>ePoolSize</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a45a2880809625a77bb93c3dfcd9c7603" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1aa5b0980785f4de36affd4d10d255634b" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a9aa5afbbea5a61265746c4d461502d62" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>getPoolType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1acc5ad2d64bf6ff58fead958a69c12d74" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>HeaderManagerType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a887de970f8d8fbec63df120348c31404" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>HeaderType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>initialize</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1ab768c364b348107112f960ce0704565d" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>initMPool</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a833da3cd4d410ba607b6e7b000810882" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>initSPool</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1aeb8ad6a3ac3cf168dc4f2d2be2714edc" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>initWorkerPools</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a86b8d7208cd3e42c821e23f0ab654d26" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>m_msg_worker_</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a268cb9b30cde3272c49e67e781f0345e" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>medium_msg</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a21e20f5b56c3bae4f0d0cc36ed9c5eee" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>MemoryPoolPtrType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a06673914350d933ad5205155eca14a3b" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>MemoryPoolType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a8a201b9a843e47cd4e7b568a8e4483da" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>MemPoolMType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a9f94985824d12c43357cfe50eaaefd38" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>MemPoolSType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a02fa54fc3cca0d388f25f397dfd997ab" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>name</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>pollable</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a55a236c42c331940884370c85fb18e36" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>Pool</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1aa9ae08727c21035461d6f60b93ea19ab" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>poolDealloc</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a8a6ff684a26b2229cbf263e99a1bc2ee" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>pooledAlloc</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a69c53ea9651f96565e23307667c8eaef" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>reducer</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a7d6742d6abc615255e25363a1be067be" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>remainingSize</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a9551faed42cf337990287481e158b01e" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>s_msg_worker_</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a4030898e09d0160c24743a7b949c0d46" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>SizeType</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1a8f14f2f9b344882cf727200eb8d41845" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>small_msg</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::pool::Pool</scope><name>staticInit</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1abd5f079910c28493ad3b0d5a9469f00a" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>tryPooledAlloc</name></member>
      <member refid="structvt_1_1pool_1_1_pool_1adf32f4660575880101522e5d6b640edd" prot="private" virt="non-virtual"><scope>vt::pool::Pool</scope><name>tryPooledDealloc</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::pool::Pool</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
