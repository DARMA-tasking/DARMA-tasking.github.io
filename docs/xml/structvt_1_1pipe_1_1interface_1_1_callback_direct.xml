<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1interface_1_1_callback_direct" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::interface::CallbackDirect</compoundname>
    <basecompoundref refid="structvt_1_1pipe_1_1interface_1_1_remote_container" prot="public" virt="non-virtual">vt::pipe::interface::RemoteContainer&lt; MsgT, std::tuple&lt; CallbackT &gt; &gt;</basecompoundref>
    <includes refid="callback__direct_8h" local="no">callback_direct.h</includes>
    <templateparamlist>
      <param>
        <type>typename MsgT</type>
      </param>
      <param>
        <type>typename CallbackT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1aa69955f3321f6aa14a80a9b8d876025d" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1interface_1_1_remote_container" kindref="compound">RemoteContainer</ref>&lt; MsgT, std::tuple&lt; CallbackT &gt; &gt;</type>
        <definition>using vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::BaseType =  RemoteContainer&lt;MsgT,std::tuple&lt;CallbackT&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="63" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1ae35dd09260d13dbdd8444a208e552070" prot="public" static="no">
        <type><ref refid="namespacevt_1_1pipe_1_1signal_1acbe257d1ae44f20fa9fd9b6ed3057caf" kindref="member">signal::SigVoidType</ref></type>
        <definition>using vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::VoidSigType =  signal::SigVoidType</definition>
        <argsstring></argsstring>
        <name>VoidSigType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="64" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a404a37ff25faa985a51a410ec70b4900" prot="public" static="no">
        <type>std::enable_if_t&lt; std::is_same&lt; T, <ref refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1ae35dd09260d13dbdd8444a208e552070" kindref="member">VoidSigType</ref> &gt;::value, U &gt;</type>
        <definition>using vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::IsVoidType =  std::enable_if_t&lt;std::is_same&lt;T,VoidSigType&gt;::value,U&gt;</definition>
        <argsstring></argsstring>
        <name>IsVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="66" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a619c2c4c96ec2573b87b992344c48826" prot="public" static="no">
        <type>std::enable_if_t&lt;!std::is_same&lt; T, <ref refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1ae35dd09260d13dbdd8444a208e552070" kindref="member">VoidSigType</ref> &gt;::value, U &gt;</type>
        <definition>using vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::IsNotVoidType =  std::enable_if_t&lt;!std::is_same&lt;T,VoidSigType&gt;::value,U&gt;</definition>
        <argsstring></argsstring>
        <name>IsNotVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="68" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1acb59da0daedf51b2556d603b8910325e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::CallbackDirect</definition>
        <argsstring>(PipeType const &amp;in_pipe, Args... args)</argsstring>
        <name>CallbackDirect</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="71" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a7379f2e63c757627089825c23e10475e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgU</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a619c2c4c96ec2573b87b992344c48826" kindref="member">IsNotVoidType</ref>&lt; MsgU &gt;</type>
        <definition>IsNotVoidType&lt;MsgU&gt; vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::send</definition>
        <argsstring>(MsgU *m)</argsstring>
        <name>send</name>
        <param>
          <type>MsgU *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="76" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a2bda5c90901cc0acc3c406c968f9b43b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a404a37ff25faa985a51a410ec70b4900" kindref="member">IsVoidType</ref>&lt;MsgT,T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::send</definition>
        <argsstring>()</argsstring>
        <name>send</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="82" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1interface_1_1_callback_direct_1aeced2f2397fdb5bf3778f16036843eda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/interface/callback_direct.h" line="87" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="87" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="646">
        <label>vt::pipe::interface::RemoteContainer&lt; MsgT, std::tuple&lt; CallbackT &gt; &gt;</label>
        <link refid="structvt_1_1pipe_1_1interface_1_1_remote_container"/>
        <childnode refid="647" relation="public-inheritance">
        </childnode>
      </node>
      <node id="647">
        <label>vt::pipe::interface::BaseContainer&lt; MsgT &gt;</label>
        <link refid="structvt_1_1pipe_1_1interface_1_1_base_container"/>
      </node>
      <node id="645">
        <label>vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;</label>
        <link refid="structvt_1_1pipe_1_1interface_1_1_callback_direct"/>
        <childnode refid="646" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="649">
        <label>vt::pipe::interface::RemoteContainer&lt; MsgT, std::tuple&lt; CallbackT &gt; &gt;</label>
        <link refid="structvt_1_1pipe_1_1interface_1_1_remote_container"/>
        <childnode refid="650" relation="public-inheritance">
        </childnode>
      </node>
      <node id="650">
        <label>vt::pipe::interface::BaseContainer&lt; MsgT &gt;</label>
        <link refid="structvt_1_1pipe_1_1interface_1_1_base_container"/>
      </node>
      <node id="648">
        <label>vt::pipe::interface::CallbackDirect&lt; MsgT, CallbackT &gt;</label>
        <link refid="structvt_1_1pipe_1_1interface_1_1_callback_direct"/>
        <childnode refid="649" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/pipe/interface/callback_direct.h" line="62" column="1" bodyfile="src/vt/pipe/interface/callback_direct.h" bodystart="62" bodyend="91"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1interface_1_1_base_container_1a096a87229f8c5b3b3bd0cca47cc7f45a" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>BaseContainer</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1aa69955f3321f6aa14a80a9b8d876025d" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>BaseType</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1acb59da0daedf51b2556d603b8910325e" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>CallbackDirect</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_base_container_1a5301aebfd709a96a3de5e03218c9300f" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>getPipe</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a619c2c4c96ec2573b87b992344c48826" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>IsNotVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a404a37ff25faa985a51a410ec70b4900" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>IsVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_remote_container_1a5bb09812f8bb6778051d9cc6b4662dc5" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>RemoteContainer</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_remote_container_1afcd73686512c7d7d25beeb8a9f9d1c73" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>RemoteContainer</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a7379f2e63c757627089825c23e10475e" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>send</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1a2bda5c90901cc0acc3c406c968f9b43b" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>send</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1aeced2f2397fdb5bf3778f16036843eda" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>serialize</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_remote_container_1a1c52032c6536ca384aa0769846b01424" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>trigger</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_remote_container_1ac109c549822ea32fe268e09d37e21822" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>triggerDirect</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_remote_container_1a50eb531253f7ef5a31fcf43861c4b39a" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>triggerDirect</name></member>
      <member refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_1ae35dd09260d13dbdd8444a208e552070" prot="public" virt="non-virtual"><scope>vt::pipe::interface::CallbackDirect</scope><name>VoidSigType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
