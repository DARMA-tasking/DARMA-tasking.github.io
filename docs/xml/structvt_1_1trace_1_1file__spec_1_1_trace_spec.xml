<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1trace_1_1file__spec_1_1_trace_spec" kind="struct" language="C++" prot="public">
    <compoundname>vt::trace::file_spec::TraceSpec</compoundname>
    <includes refid="spec_8h" local="no">vt/trace/file_spec/spec.h</includes>
    <innerclass refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1_1_spec_entry" prot="private">vt::trace::file_spec::TraceSpec::SpecEntry</innerclass>
    <innerclass refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1_1_spec_msg" prot="private">vt::trace::file_spec::TraceSpec::SpecMsg</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a26160cff9bb5115866943ed823405f1f" prot="public" static="no">
        <type><ref refid="structvt_1_1objgroup_1_1proxy_1_1_proxy" kindref="compound">vt::objgroup::proxy::Proxy</ref>&lt; <ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec" kindref="compound">TraceSpec</ref> &gt;</type>
        <definition>using vt::trace::file_spec::TraceSpec::ProxyType =  vt::objgroup::proxy::Proxy&lt;TraceSpec&gt;</definition>
        <argsstring></argsstring>
        <name>ProxyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="98" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" prot="public" static="no">
        <type>int64_t</type>
        <definition>using vt::trace::file_spec::TraceSpec::SpecIndex =  int64_t</definition>
        <argsstring></argsstring>
        <name>SpecIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="99" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a31fc42c00ddc382be9c198459793e1e9" prot="public" static="no">
        <type><ref refid="namespacevt_1_1collective_1aa439a90f05078f2bcf918641c951946f" kindref="member">collective::ReduceNoneMsg</ref></type>
        <definition>using vt::trace::file_spec::TraceSpec::DoneMsg =  collective::ReduceNoneMsg</definition>
        <argsstring></argsstring>
        <name>DoneMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="100" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a155d6b881e8d69a4644823789788ce5c" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" kindref="member">SpecIndex</ref>, <ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1_1_spec_entry" kindref="compound">SpecEntry</ref> &gt;</type>
        <definition>using vt::trace::file_spec::TraceSpec::SpecMapType =  std::unordered_map&lt;SpecIndex,SpecEntry&gt;</definition>
        <argsstring></argsstring>
        <name>SpecMapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="160" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a8557ed1c4a94021812b8fbe27e472571" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a26160cff9bb5115866943ed823405f1f" kindref="member">ProxyType</ref></type>
        <definition>ProxyType vt::trace::file_spec::TraceSpec::proxy_</definition>
        <argsstring></argsstring>
        <name>proxy_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="270" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1aae4873bc7f4d6ae6c33098670c8a550e" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a155d6b881e8d69a4644823789788ce5c" kindref="member">SpecMapType</ref></type>
        <definition>SpecMapType vt::trace::file_spec::TraceSpec::spec_mod_</definition>
        <argsstring></argsstring>
        <name>spec_mod_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="271" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a70c434aefee7f80b6cccd7a1c561c35a" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a155d6b881e8d69a4644823789788ce5c" kindref="member">SpecMapType</ref></type>
        <definition>SpecMapType vt::trace::file_spec::TraceSpec::spec_exact_</definition>
        <argsstring></argsstring>
        <name>spec_exact_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="272" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a06ed36af6eaec1aeef63f81746e162a7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::trace::file_spec::TraceSpec::has_spec_</definition>
        <argsstring></argsstring>
        <name>has_spec_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="273" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1aa919658e5981872e86e4aa2ed1186f46" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::file_spec::TraceSpec::init</definition>
        <argsstring>(ProxyType in_proxy)</argsstring>
        <name>init</name>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a26160cff9bb5115866943ed823405f1f" kindref="member">ProxyType</ref></type>
          <declname>in_proxy</declname>
        </param>
        <briefdescription>
<para>Initialize the <computeroutput><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec" kindref="compound">TraceSpec</ref></computeroutput> objgroup. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the objgroup proxy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="168" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4b3dca3408cbcc932fa55b87f086a42b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::file_spec::TraceSpec::transferSpec</definition>
        <argsstring>(SpecMsg *msg)</argsstring>
        <name>transferSpec</name>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1_1_spec_msg" kindref="compound">SpecMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Handler to receive parsed specification. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the incoming spec msg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="245" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="206" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1af9bbdd67b14a25bee5ffa43024c9768c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::file_spec::TraceSpec::insertSpec</definition>
        <argsstring>(SpecIndex phase, SpecIndex neg, SpecIndex pos, bool is_mod, SpecMapType &amp;map)</argsstring>
        <name>insertSpec</name>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" kindref="member">SpecIndex</ref></type>
          <declname>phase</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" kindref="member">SpecIndex</ref></type>
          <declname>neg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" kindref="member">SpecIndex</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_mod</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a155d6b881e8d69a4644823789788ce5c" kindref="member">SpecMapType</ref> &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Insert an entry into the specification holders. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the phase mod or specific </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">neg</parametername>
</parameternamelist>
<parameterdescription>
<para>negative offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>positive offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_mod</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it&apos;s a mod-phase </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">map</parametername>
</parameternamelist>
<parameterdescription>
<para>the map to add it to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="256" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="216" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a372568633fa39959d508984e5eb2ff96" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vt::trace::file_spec::TraceSpec::eatWhitespace</definition>
        <argsstring>(std::ifstream &amp;file)</argsstring>
        <name>eatWhitespace</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Eat whitespace during parsing except for newlines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to read</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current character after whitespace is eaten </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="267" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="237" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a66e362b05b4af9a4e4ef514a4e272599" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a26160cff9bb5115866943ed823405f1f" kindref="member">ProxyType</ref></type>
        <definition>TraceSpec::ProxyType vt::trace::file_spec::TraceSpec::construct</definition>
        <argsstring>()</argsstring>
        <name>construct</name>
        <briefdescription>
<para>Construct a new <computeroutput><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec" kindref="compound">TraceSpec</ref></computeroutput> objgroup. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the proxy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="176" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="244" bodyend="248"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1adf331a01f94b57cb9229c89311f1bcda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::trace::file_spec::TraceSpec::checkTraceEnabled</definition>
        <argsstring>(SpecIndex in_phase)</argsstring>
        <name>checkTraceEnabled</name>
        <param>
          <type><ref refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" kindref="member">SpecIndex</ref></type>
          <declname>in_phase</declname>
        </param>
        <briefdescription>
<para>Check entire spec to see if tracing is enabled on any of the entries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the phase to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether tracing is enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="185" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="57" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1ad83e3bc71e3ebcd794fc38e7c2b7a74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::trace::file_spec::TraceSpec::hasSpec</definition>
        <argsstring>()</argsstring>
        <name>hasSpec</name>
        <briefdescription>
<para>Check if a specification is enabled, file specified, and file exists. Aborts if file specified but the file is not accessible. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether a spec exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="193" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="73" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1ac336bccc75406f56c2888b07e73e9355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::file_spec::TraceSpec::parse</definition>
        <argsstring>()</argsstring>
        <name>parse</name>
        <briefdescription>
<para>Parse the specification file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="198" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="99" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a3a5ececf49f827a057a7bea8ac7e7584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::file_spec::TraceSpec::broadcastSpec</definition>
        <argsstring>()</argsstring>
        <name>broadcastSpec</name>
        <briefdescription>
<para>Broadcast parsed specification to all nodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="203" column="1" bodyfile="src/vt/trace/file_spec/spec.cc" bodystart="200" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1aba7577d831109f8459e5378db392e717" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::trace::file_spec::TraceSpec::specReceived</definition>
        <argsstring>() const</argsstring>
        <name>specReceived</name>
        <briefdescription>
<para>Check if spec has been received. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/file_spec/spec.h" line="208" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="208" bodyend="208"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parses trace spec file when available and tests when its enabled. A single node parses the specification; all others receive the spec from a broadcast. </para>    </briefdescription>
    <detaileddescription>
<para>Parses the following format: [%]&lt;phase&gt; &lt;range negative&gt;=&quot;&quot;&gt; &lt;range positive&gt;=&quot;&quot;&gt; &quot;&quot;" 0 0 10 %100 -3 3 200 -5 5 &quot;&quot;"</para><para>This specifies that tracing will be enabled on the following phases: { [0,10], # phase 0 with offsets 0,+10 (subsumes [0,3] from %100 -3 3) [97,103] # any phase % 100 with offset -3,+3 [195,205] # phase 200 with offsets -5,+5 (subsumes [197,203] from %100 -3 3) [297,303] # any phase % 100 with offset -3,+3 [n%100-3,n%100+3] ... # any phase % 100 with offset -3,+3 }</para><para>The sets of mod-phase and phase-specific entries must be unique. There may be overlap across the two sets, but not within them. Having two entries that start with &quot;%100&quot; or two entries that start with &quot;100&quot; would be invalid and trigger a parsing error. But having a &quot;%100&quot; and &quot;100&quot; entry is valid.</para><para>Whether tracing is enabled is calculated as an OR across all specification entries. Thus, if a given phase is contained in any spec line, it is enabled. Note that 0 % 100 = 0. Therefore, if the above example did not contain the first line, tracing would be enabled as:</para><para>{ [0,3], # any phase mod 100 from -3,+3 [97,103], [195,205], [297,303], ... } </para>    </detaileddescription>
    <collaborationgraph>
      <node id="3499">
        <label>vt::objgroup::proxy::Proxy&lt; TraceSpec &gt;</label>
        <link refid="structvt_1_1objgroup_1_1proxy_1_1_proxy"/>
      </node>
      <node id="3498">
        <label>vt::trace::file_spec::TraceSpec</label>
        <link refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec"/>
        <childnode refid="3499" relation="usage">
          <edgelabel>proxy_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/trace/file_spec/spec.h" line="97" column="1" bodyfile="src/vt/trace/file_spec/spec.h" bodystart="97" bodyend="274"/>
    <listofallmembers>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a3a5ececf49f827a057a7bea8ac7e7584" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>broadcastSpec</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1adf331a01f94b57cb9229c89311f1bcda" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>checkTraceEnabled</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a66e362b05b4af9a4e4ef514a4e272599" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>construct</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a31fc42c00ddc382be9c198459793e1e9" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>DoneMsg</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a372568633fa39959d508984e5eb2ff96" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>eatWhitespace</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a06ed36af6eaec1aeef63f81746e162a7" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>has_spec_</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1ad83e3bc71e3ebcd794fc38e7c2b7a74c" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>hasSpec</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1aa919658e5981872e86e4aa2ed1186f46" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>init</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1af9bbdd67b14a25bee5ffa43024c9768c" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>insertSpec</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1ac336bccc75406f56c2888b07e73e9355" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>parse</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a8557ed1c4a94021812b8fbe27e472571" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>proxy_</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a26160cff9bb5115866943ed823405f1f" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>ProxyType</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a70c434aefee7f80b6cccd7a1c561c35a" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>spec_exact_</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1aae4873bc7f4d6ae6c33098670c8a550e" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>spec_mod_</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4dd2e8fb971930351812d0f286baece2" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>SpecIndex</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a155d6b881e8d69a4644823789788ce5c" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>SpecMapType</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1aba7577d831109f8459e5378db392e717" prot="public" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>specReceived</name></member>
      <member refid="structvt_1_1trace_1_1file__spec_1_1_trace_spec_1a4b3dca3408cbcc932fa55b87f086a42b" prot="private" virt="non-virtual"><scope>vt::trace::file_spec::TraceSpec</scope><name>transferSpec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
