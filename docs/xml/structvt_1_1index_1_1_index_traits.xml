<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1index_1_1_index_traits" kind="struct" language="C++" prot="public">
    <compoundname>vt::index::IndexTraits</compoundname>
    <includes refid="traits_8h" local="no">traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a583a777d70fc52ccfe1083acabc9640f" prot="public" static="no">
        <type>typename U::IndexSizeType</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::IndexSizeType_t =  typename U::IndexSizeType</definition>
        <argsstring></argsstring>
        <name>IndexSizeType_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="61" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ad4433ee81a5b60b9d300efcec8b97181" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a583a777d70fc52ccfe1083acabc9640f" kindref="member">IndexSizeType_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_IndexSizeType =  detection::is_detected&lt;IndexSizeType_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_IndexSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="62" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a752bed91b021dff94a5b2863442e07c9" prot="public" static="no">
        <type>decltype(U(std::declval&lt; Vs &gt;()...))</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::constructor_t =  decltype(U(std::declval&lt;Vs&gt;()...))</definition>
        <argsstring></argsstring>
        <name>constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="65" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a583c6d370e78ca2c8b9fc67bd2d1d942" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a752bed91b021dff94a5b2863442e07c9" kindref="member">constructor_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_default_constructor =  detection::is_detected&lt;constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_default_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="66" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ad99299628a662db3cfa5021b810e8846" prot="public" static="no">
        <type>decltype(U(std::declval&lt; U const  &amp; &gt;()))</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::copy_constructor_t =  decltype(U(std::declval&lt;U const&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>copy_constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="69" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a7440b1a34592c08fcd93fd9a39ffbfa7" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1ad99299628a662db3cfa5021b810e8846" kindref="member">copy_constructor_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_copy_constructor =  detection::is_detected&lt;copy_constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_copy_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="70" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ad8fed19c85f6bf6fb280a492c4bf04c5" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().operator=(std::declval&lt; U const  &amp; &gt;()))</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::copy_assignment_t =  decltype( std::declval&lt;U&gt;().operator=(std::declval&lt;U const&amp;&gt;()) )</definition>
        <argsstring></argsstring>
        <name>copy_assignment_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="73" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a2ff2ef964f69ad35d99697ad657da0c3" prot="public" static="no">
        <type>detection::is_detected_convertible&lt; T, <ref refid="structvt_1_1index_1_1_index_traits_1ad8fed19c85f6bf6fb280a492c4bf04c5" kindref="member">copy_assignment_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_copy_assignment =  detection::is_detected_convertible&lt; T, copy_assignment_t, T &gt;</definition>
        <argsstring></argsstring>
        <name>has_copy_assignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="76" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a23832f22385d2d20bb1fc9885aef6146" prot="public" static="no">
        <type>decltype(U(std::declval&lt; U &gt;().operator=(std::declval&lt; U const  &amp; &gt;())))</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::operator_eq_t =  decltype( U(std::declval&lt;U&gt;().operator=(std::declval&lt;U const&amp;&gt;())) )</definition>
        <argsstring></argsstring>
        <name>operator_eq_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="81" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a93695cc99aee3cbdc63a3e2ab9b3f6be" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a23832f22385d2d20bb1fc9885aef6146" kindref="member">operator_eq_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_operator_eq =  detection::is_detected&lt;operator_eq_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_operator_eq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="84" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a87c63bbffab452de516eb2dbc93c07e3" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().operator==(std::declval&lt; U const  &amp; &gt;()))</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::equality_t =  decltype( std::declval&lt;U&gt;().operator==(std::declval&lt;U const&amp;&gt;()) )</definition>
        <argsstring></argsstring>
        <name>equality_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="87" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1abd8f9e796291242c027dd33d9a21acab" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a87c63bbffab452de516eb2dbc93c07e3" kindref="member">equality_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_equality =  detection::is_detected&lt;equality_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_equality</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="90" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a6d511f10a88cd9fb5b4d832127ce5044" prot="public" static="no">
        <type>decltype(std::declval&lt; U const  &amp; &gt;().packedSize())</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::packedSize_t =  decltype(std::declval&lt;U const&amp;&gt;().packedSize())</definition>
        <argsstring></argsstring>
        <name>packedSize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="93" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a257797ee702aa2108e9950f9aba373a4" prot="public" static="no">
        <type>detection::is_detected_convertible&lt; size_t, <ref refid="structvt_1_1index_1_1_index_traits_1a6d511f10a88cd9fb5b4d832127ce5044" kindref="member">packedSize_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_packedSize =  detection::is_detected_convertible&lt; size_t, packedSize_t, T &gt;</definition>
        <argsstring></argsstring>
        <name>has_packedSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="94" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a67b716eec3bb224751d83b4f1e4d61fc" prot="public" static="no">
        <type>decltype(std::declval&lt; U const  &amp; &gt;().indexIsByteCopyable())</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::indexIsByteCopyable_t =  decltype( std::declval&lt;U const&amp;&gt;().indexIsByteCopyable() )</definition>
        <argsstring></argsstring>
        <name>indexIsByteCopyable_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="99" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ab2daf95703112e971bfc12704a1fa141" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a67b716eec3bb224751d83b4f1e4d61fc" kindref="member">indexIsByteCopyable_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_indexIsByteCopyable =  detection::is_detected&lt; indexIsByteCopyable_t, T &gt;</definition>
        <argsstring></argsstring>
        <name>has_indexIsByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="102" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ac56a2e3919488b64e42a60e1684623aa" prot="public" static="no">
        <type>decltype(std::declval&lt; U const  &amp; &gt;().uniqueBits())</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::uniqueBits_t =  decltype(std::declval&lt;U const&amp;&gt;().uniqueBits())</definition>
        <argsstring></argsstring>
        <name>uniqueBits_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="107" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a6862d0422947a4835262b170637b462d" prot="public" static="no">
        <type>detection::is_detected_convertible&lt; <ref refid="namespacevt_1a913e1f07b5228dd8bb64040dc6dcea14" kindref="member">UniqueIndexBitType</ref>, <ref refid="structvt_1_1index_1_1_index_traits_1ac56a2e3919488b64e42a60e1684623aa" kindref="member">uniqueBits_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_uniqueBits =  detection::is_detected_convertible&lt; UniqueIndexBitType, uniqueBits_t, T &gt;</definition>
        <argsstring></argsstring>
        <name>has_uniqueBits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="108" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ab13467c0c40bb0f17103d108cd08437f" prot="public" static="no">
        <type>std::function&lt; void(U)&gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::ApplyType =  std::function&lt;void(U)&gt;</definition>
        <argsstring></argsstring>
        <name>ApplyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="113" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a132ed4a131bbc5f9e410e203cf2e08ae" prot="public" static="no">
        <type>decltype(std::declval&lt; U const  &amp; &gt;().foreach(std::declval&lt; U const  &amp; &gt;(), std::declval&lt; <ref refid="structvt_1_1index_1_1_index_traits_1ab13467c0c40bb0f17103d108cd08437f" kindref="member">ApplyType</ref>&lt; U &gt; &gt;()))</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::foreach_t =  decltype( std::declval&lt;U const&amp;&gt;().foreach( std::declval&lt;U const&amp;&gt;(), std::declval&lt;ApplyType&lt;U&gt; &gt;() ))</definition>
        <argsstring></argsstring>
        <name>foreach_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="115" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ae82fe931c4bbe8201d4dc72f07ceb42d" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a132ed4a131bbc5f9e410e203cf2e08ae" kindref="member">foreach_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_foreach =  detection::is_detected&lt;foreach_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_foreach</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="119" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a6869472628098b68d1ce678422814734" prot="public" static="no">
        <type>typename U::IsByteCopyable</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::IsByteCopyable_t =  typename U::IsByteCopyable</definition>
        <argsstring></argsstring>
        <name>IsByteCopyable_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="122" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ab35645966fbb207e0e70982a610f1eb2" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a6869472628098b68d1ce678422814734" kindref="member">IsByteCopyable_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_IsByteCopyable =  detection::is_detected&lt;IsByteCopyable_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_IsByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="123" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1afd3d724feb07329acc70afc067320558" prot="public" static="no">
        <type>decltype(std::declval&lt; U const  &amp; &gt;().toString())</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::toString_t =  decltype(std::declval&lt;U const&amp;&gt;().toString())</definition>
        <argsstring></argsstring>
        <name>toString_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="126" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1ae91e2c26896622d9eab9416b4141042f" prot="public" static="no">
        <type>detection::is_detected_convertible&lt; std::string, <ref refid="structvt_1_1index_1_1_index_traits_1afd3d724feb07329acc70afc067320558" kindref="member">toString_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_toString =  detection::is_detected_convertible&lt; std::string, toString_t, T &gt;</definition>
        <argsstring></argsstring>
        <name>has_toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="127" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a9c055598424a66789ec9a5986c2ace3a" prot="public" static="no">
        <type>decltype(std::declval&lt; U const  &amp; &gt;().ndims())</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::numDims_t =  decltype(std::declval&lt;U const&amp;&gt;().ndims())</definition>
        <argsstring></argsstring>
        <name>numDims_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="132" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1aa063bfa4f5eec4fea36c7ee151519ceb" prot="public" static="no">
        <type>detection::is_detected_convertible&lt; int8_t, <ref refid="structvt_1_1index_1_1_index_traits_1a9c055598424a66789ec9a5986c2ace3a" kindref="member">numDims_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_numDims =  detection::is_detected_convertible&lt; int8_t, numDims_t, T &gt;</definition>
        <argsstring></argsstring>
        <name>has_numDims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="133" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a8a367bc83d2a3bd52bd5007efd6ff110" prot="public" static="no">
        <type>typename U::BuildIndexType</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::build_index_t =  typename U::BuildIndexType</definition>
        <argsstring></argsstring>
        <name>build_index_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="139" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_index_traits_1a9507b2186fbda410df0f7c685504e314" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structvt_1_1index_1_1_index_traits_1a8a367bc83d2a3bd52bd5007efd6ff110" kindref="member">build_index_t</ref>, T &gt;</type>
        <definition>using vt::index::IndexTraits&lt; T &gt;::has_build_index =  detection::is_detected&lt;build_index_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_build_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="140" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structvt_1_1index_1_1_index_traits_1a254b0c96b3b6a75e56e3d7ddd3787621" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::index::IndexTraits&lt; T &gt;::is_index</definition>
        <argsstring></argsstring>
        <name>is_index</name>
        <initializer>=
    
    has_copy_constructor::value    and
    has_default_constructor::value and
    has_copy_assignment::value     and
    
    has_equality::value            and
    has_operator_eq::value         and
    
    has_IndexSizeType::value       and
    has_IsByteCopyable::value      and
    has_build_index::value         and
    
    has_packedSize::value          and
    has_indexIsByteCopyable::value and
    has_uniqueBits::value          and
    has_foreach::value             and
    has_toString::value            and
    has_numDims::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/traits/traits.h" line="145" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/topos/index/traits/traits.h" line="59" column="1" bodyfile="src/vt/topos/index/traits/traits.h" bodystart="59" bodyend="175"/>
    <listofallmembers>
      <member refid="structvt_1_1index_1_1_index_traits_1ab13467c0c40bb0f17103d108cd08437f" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>ApplyType</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a8a367bc83d2a3bd52bd5007efd6ff110" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>build_index_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a752bed91b021dff94a5b2863442e07c9" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>constructor_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ad8fed19c85f6bf6fb280a492c4bf04c5" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>copy_assignment_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ad99299628a662db3cfa5021b810e8846" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>copy_constructor_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a87c63bbffab452de516eb2dbc93c07e3" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>equality_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a132ed4a131bbc5f9e410e203cf2e08ae" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>foreach_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a9507b2186fbda410df0f7c685504e314" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_build_index</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a2ff2ef964f69ad35d99697ad657da0c3" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_copy_assignment</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a7440b1a34592c08fcd93fd9a39ffbfa7" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_copy_constructor</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a583c6d370e78ca2c8b9fc67bd2d1d942" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_default_constructor</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1abd8f9e796291242c027dd33d9a21acab" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_equality</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ae82fe931c4bbe8201d4dc72f07ceb42d" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_foreach</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ab2daf95703112e971bfc12704a1fa141" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_indexIsByteCopyable</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ad4433ee81a5b60b9d300efcec8b97181" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_IndexSizeType</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ab35645966fbb207e0e70982a610f1eb2" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_IsByteCopyable</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1aa063bfa4f5eec4fea36c7ee151519ceb" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_numDims</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a93695cc99aee3cbdc63a3e2ab9b3f6be" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_operator_eq</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a257797ee702aa2108e9950f9aba373a4" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_packedSize</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ae91e2c26896622d9eab9416b4141042f" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_toString</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a6862d0422947a4835262b170637b462d" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>has_uniqueBits</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a67b716eec3bb224751d83b4f1e4d61fc" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>indexIsByteCopyable_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a583a777d70fc52ccfe1083acabc9640f" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>IndexSizeType_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a254b0c96b3b6a75e56e3d7ddd3787621" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>is_index</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a6869472628098b68d1ce678422814734" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>IsByteCopyable_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a9c055598424a66789ec9a5986c2ace3a" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>numDims_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a23832f22385d2d20bb1fc9885aef6146" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>operator_eq_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1a6d511f10a88cd9fb5b4d832127ce5044" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>packedSize_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1afd3d724feb07329acc70afc067320558" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>toString_t</name></member>
      <member refid="structvt_1_1index_1_1_index_traits_1ac56a2e3919488b64e42a60e1684623aa" prot="public" virt="non-virtual"><scope>vt::index::IndexTraits</scope><name>uniqueBits_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
