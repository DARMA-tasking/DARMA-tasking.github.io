<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1collective_1_1_collective_scope" kind="struct" language="C++" prot="public">
    <compoundname>vt::collective::CollectiveScope</compoundname>
    <includes refid="collective__scope_8h" local="no">collective_scope.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1collective_1_1_collective_scope_1aa2494f91f09e2ba6a5baae9ee9de430e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct CollectiveAlg</definition>
        <argsstring></argsstring>
        <name>CollectiveAlg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="126" column="3" bodyfile="src/vt/collective/collective_scope.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1collective_1_1_collective_scope_1a2a291ca3421aab53d63088bd84fd7091" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::collective::CollectiveScope::is_user_tag_</definition>
        <argsstring></argsstring>
        <name>is_user_tag_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="224" column="8" bodyfile="src/vt/collective/collective_scope.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1_collective_scope_1a6a1b0fe51f68913bd2aeaed363a5eab9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::collective::CollectiveScope::scope_</definition>
        <argsstring></argsstring>
        <name>scope_</name>
        <initializer>= no_tag</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="225" column="11" bodyfile="src/vt/collective/collective_scope.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a2b51fd570c218fc089caaded29fd17c9" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::collective::CollectiveScope::CollectiveScope</definition>
        <argsstring>(bool in_is_user_tag, TagType in_scope)</argsstring>
        <name>CollectiveScope</name>
        <param>
          <type>bool</type>
          <declname>in_is_user_tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>in_scope</declname>
        </param>
        <briefdescription>
<para>Construct a collective scope for MPI operations. </para>
        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_scope</parametername>
</parameternamelist>
<parameterdescription>
<para>the scope tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_is_user_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the scope tag is a user or system tag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="121" column="12" bodyfile="src/vt/collective/collective_scope.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a71b296b1ab86bf0814a4863327165f1c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1detail_1_1_scope_impl" kindref="compound">detail::ScopeImpl</ref> *</type>
        <definition>detail::ScopeImpl * vt::collective::CollectiveScope::getScope</definition>
        <argsstring>()</argsstring>
        <name>getScope</name>
        <briefdescription>
<para>Get the scope state. </para>
        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the scope state </para>
</simplesect>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="221" column="21" bodyfile="src/vt/collective/collective_scope.cc" bodystart="115" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1aef18868ea87dbbf5647c5575f86903a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::collective::CollectiveScope::CollectiveScope</definition>
        <argsstring>(CollectiveScope &amp;&amp;other)</argsstring>
        <name>CollectiveScope</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">CollectiveScope</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="129" column="3" bodyfile="src/vt/collective/collective_scope.h" bodystart="129" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a9781b1b86796d271cc9407eb8034851f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::CollectiveScope::CollectiveScope</definition>
        <argsstring>(CollectiveScope const &amp;)=delete</argsstring>
        <name>CollectiveScope</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">CollectiveScope</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="137" column="3"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a4a756e93437119e20a72dfe0d9ede190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">CollectiveScope</ref> &amp;</type>
        <definition>CollectiveScope&amp; vt::collective::CollectiveScope::operator=</definition>
        <argsstring>(CollectiveScope &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">CollectiveScope</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="138" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1ae211d02b75ae45834e25eb1cd8c2f7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">CollectiveScope</ref> &amp;</type>
        <definition>CollectiveScope&amp; vt::collective::CollectiveScope::operator=</definition>
        <argsstring>(CollectiveScope const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">CollectiveScope</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="139" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a0b8d9664cdc7f94bed4b17e0eb5c2b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::CollectiveScope::~CollectiveScope</definition>
        <argsstring>()</argsstring>
        <name>~CollectiveScope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="141" column="3" bodyfile="src/vt/collective/collective_scope.cc" bodystart="129" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1ad116d0b00f28b79dbf7c4b0e5c4ed4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::collective::CollectiveScope::mpiCollectiveAsync</definition>
        <argsstring>(ActionType action)</argsstring>
        <name>mpiCollectiveAsync</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Enqueue a lambda with an embedded closed set of MPI operations (including collectives) to execute in the future. Returns immediately, enqueuing the action for the future. </para>
        </briefdescription>
        <detaileddescription>
<para>The set of operations specified in the lambda must be closed, meaning that MPI requests must not escape the lambda. After the lambda finishes, the set of MPI collective calls should be complete.</para>
<para>Any buffers captured in the lambda to use with the MPI operations are in use until <computeroutput>isCollectiveDone</computeroutput> returns <computeroutput>true</computeroutput> or <computeroutput>waitCollective</computeroutput> returns on the returned <computeroutput>TagType</computeroutput> </para>
<para>The operation is counted as activity in the active termination detection epoch</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action containing a closed set of MPI operations</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tag representing the operation set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="164" column="11" bodyfile="src/vt/collective/collective_scope.cc" bodystart="55" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1acc386201ec9e82dbe2691b4ce528a4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::collective::CollectiveScope::isCollectiveDone</definition>
        <argsstring>(TagType tag)</argsstring>
        <name>isCollectiveDone</name>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Query whether an enqueued MPI operation set is complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>MPI operation set identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it has finished or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="173" column="8" bodyfile="src/vt/collective/collective_scope.cc" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1afae2807ff3adc0f1d6772411168064f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::CollectiveScope::waitCollective</definition>
        <argsstring>(TagType tag)</argsstring>
        <name>waitCollective</name>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Wait on an MPI operation set to complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>MPI collective set identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="180" column="8" bodyfile="src/vt/collective/collective_scope.cc" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a0ef41233afe63fc9ead8431e226af193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::CollectiveScope::mpiCollectiveWait</definition>
        <argsstring>(ActionType action)</argsstring>
        <name>mpiCollectiveWait</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Enqueue a lambda with an embedded closed set of MPI operations (including collectives). Spin in the VT scheduler until it terminates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action containing a set of MPI operations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="188" column="8" bodyfile="src/vt/collective/collective_scope.cc" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1a8f8aa109ef27449f8fcb5eb378587196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::collective::CollectiveScope::isUserTag</definition>
        <argsstring>() const</argsstring>
        <name>isUserTag</name>
        <briefdescription>
<para>Get whether this scope is a user-tagged scope. </para>
        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="note"><para>Used for testing purposes</para>
</simplesect>
<simplesect kind="return"><para>whether this scope is a user tag </para>
</simplesect>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="197" column="8" bodyfile="src/vt/collective/collective_scope.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1abed60df0901f32a362a908dccdcbe0fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::collective::CollectiveScope::getScopeBits</definition>
        <argsstring>() const</argsstring>
        <name>getScopeBits</name>
        <briefdescription>
<para>Get the scope tag bits. </para>
        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="note"><para>Used for testing purposes</para>
</simplesect>
<simplesect kind="return"><para>the scope bits </para>
</simplesect>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="206" column="11" bodyfile="src/vt/collective/collective_scope.h" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1_collective_scope_1aad6692a59ad1c0b3d87de4a7f67e9d8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::collective::CollectiveScope::serialize</definition>
        <argsstring>(Serializer &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>Serializer &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/collective_scope.h" line="209" column="8" bodyfile="src/vt/collective/collective_scope.h" bodystart="209" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A distinct scope for enqueuing ordered collective operations. </para>
    </briefdescription>
    <detaileddescription>
<para>Each collective scope builds an individual sequence of collective operations that get orchestrated across nodes using a consensus algorithm so all nodes agree on a particular operation to execute in the sequence.</para>
<para>An example use case is running a blocking MPI collective (like a <computeroutput>*</computeroutput> MPI_Allreduce) inside VT handlers without causing progress to halt due to asynchrony in VT. </para>
    </detaileddescription>
    <location file="src/vt/collective/collective_scope.h" line="112" column="22" bodyfile="src/vt/collective/collective_scope.h" bodystart="112" bodyend="226"/>
    <listofallmembers>
      <member refid="structvt_1_1collective_1_1_collective_scope_1aa2494f91f09e2ba6a5baae9ee9de430e" prot="private" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>CollectiveAlg</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a2b51fd570c218fc089caaded29fd17c9" prot="private" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>CollectiveScope</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1aef18868ea87dbbf5647c5575f86903a7" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>CollectiveScope</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a9781b1b86796d271cc9407eb8034851f" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>CollectiveScope</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a71b296b1ab86bf0814a4863327165f1c" prot="private" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>getScope</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1abed60df0901f32a362a908dccdcbe0fb" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>getScopeBits</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a2a291ca3421aab53d63088bd84fd7091" prot="private" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>is_user_tag_</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1acc386201ec9e82dbe2691b4ce528a4c2" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>isCollectiveDone</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a8f8aa109ef27449f8fcb5eb378587196" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>isUserTag</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1ad116d0b00f28b79dbf7c4b0e5c4ed4a1" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>mpiCollectiveAsync</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a0ef41233afe63fc9ead8431e226af193" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>mpiCollectiveWait</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a4a756e93437119e20a72dfe0d9ede190" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>operator=</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1ae211d02b75ae45834e25eb1cd8c2f7d0" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>operator=</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a6a1b0fe51f68913bd2aeaed363a5eab9" prot="private" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>scope_</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1aad6692a59ad1c0b3d87de4a7f67e9d8a" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>serialize</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1afae2807ff3adc0f1d6772411168064f9" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>waitCollective</name></member>
      <member refid="structvt_1_1collective_1_1_collective_scope_1a0b8d9664cdc7f94bed4b17e0eb5c2b77" prot="public" virt="non-virtual"><scope>vt::collective::CollectiveScope</scope><name>~CollectiveScope</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
