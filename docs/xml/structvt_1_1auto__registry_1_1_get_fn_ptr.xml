<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1auto__registry_1_1_get_fn_ptr" kind="struct" language="C++" prot="public">
    <compoundname>vt::auto_registry::GetFnPtr</compoundname>
    <includes refid="auto__registry__general_8h" local="no">auto_registry_general.h</includes>
    <templateparamlist>
      <param>
        <type>typename FunctorT</type>
      </param>
      <param>
        <type>bool</type>
        <declname>is_msg_direct</declname>
        <defname>is_msg_direct</defname>
      </param>
      <param>
        <type>typename MsgT</type>
      </param>
    </templateparamlist>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>All Functor Adapters require:<itemizedlist>
<listitem><para>FunctionPtrType</para></listitem><listitem><para>ObjType</para></listitem><listitem><para>getFunction</para></listitem><listitem><para>traceGetEventType</para></listitem><listitem><para>traceGetEventName (The &apos;Functor&apos; naming is a bit of a misnomer as they are not functors nor do they strictly wrap functors..) Adapt a type that provides operator()(..) NOTE: MULTIPLE INSTANCES of the type will be created and discarded. This cannot be used for a stateful instance. This is an implementation detail that could be reconsidered. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="src/vt/registry/auto/auto_registry_general.h" line="84" column="1" bodyfile="src/vt/registry/auto/auto_registry_general.h" bodystart="84" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
