<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1_pipe_manager_base" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::PipeManagerBase</compoundname>
    <derivedcompoundref refid="structvt_1_1pipe_1_1_pipe_manager_t_l" prot="public" virt="virtual">vt::pipe::PipeManagerTL</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1pipe_1_1_pipe_manager_typed" prot="public" virt="virtual">vt::pipe::PipeManagerTyped</derivedcompoundref>
    <includes refid="pipe__manager__base_8h" local="no">pipe_manager_base.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1a1364798bda487c9fb04879599f96c507" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1_pipe_state" kindref="compound">PipeState</ref></type>
        <definition>using vt::pipe::PipeManagerBase::PipeStateType =  PipeState</definition>
        <argsstring></argsstring>
        <name>PipeStateType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="67" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" prot="public" static="no">
        <type>std::function&lt; void(MsgT *)&gt;</type>
        <definition>using vt::pipe::PipeManagerBase::FuncMsgType =  std::function&lt;void(MsgT*)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="70" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" prot="public" static="no">
        <type>std::function&lt; void(MsgT *, ContextT *)&gt;</type>
        <definition>using vt::pipe::PipeManagerBase::FuncMsgCtxType =  std::function&lt;void(MsgT*, ContextT*)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncMsgCtxType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="72" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" prot="public" static="no">
        <type>std::function&lt; void(ContextT *)&gt;</type>
        <definition>using vt::pipe::PipeManagerBase::FuncCtxType =  std::function&lt;void(ContextT*)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncCtxType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="74" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" prot="public" static="no">
        <type>std::function&lt; void(void)&gt;</type>
        <definition>using vt::pipe::PipeManagerBase::FuncType =  std::function&lt;void(void)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="75" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" prot="public" static="no">
        <type>std::function&lt; void(void)&gt;</type>
        <definition>using vt::pipe::PipeManagerBase::FuncVoidType =  std::function&lt;void(void)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="76" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_base_1a983e301505317c5ba2041461e7dec84a" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1_pipe_state_1ad81b637847d9c3185420c58c9272ed7d" kindref="member">PipeState::DispatchFuncType</ref></type>
        <definition>using vt::pipe::PipeManagerBase::DispatchFuncType =  PipeState::DispatchFuncType</definition>
        <argsstring></argsstring>
        <name>DispatchFuncType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="77" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1a2348f4244b5ad72c5686492b15336b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SignalT</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackAnon</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackAnon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="84" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1a2b276fd292a6811275e653a7428a694e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SignalT</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackSend</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackSend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="86" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1ada0bede5371d885f16b00f26b24d806a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SignalT</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackBcast</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackBcast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="88" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1af8e96215722e3f76890719c4b555b188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackAnonTypeless</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackAnonTypeless</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="89" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1a94d1bab8c5864e9c5f95bcc7e27b64de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackProxySendTypeless</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackProxySendTypeless</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="90" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1ad1f9ea1acee2fd15aa12a680a62637c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackProxyBcastTypeless</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackProxyBcastTypeless</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="91" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1acdd1b50009e7155f2bdc2c0d8d7478f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackProxySendDirect</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackProxySendDirect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="92" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1a46319f53e42a02f8de1157c76b2c4b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackProxyBcastDirect</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackProxyBcastDirect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="93" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1af9d7def6910d340d015f26d19426da51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackObjGroupSend</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackObjGroupSend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="94" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1affcd179fae984dc9ffc6c97f790ae883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct pipe::callback::CallbackObjGroupBcast</definition>
        <argsstring></argsstring>
        <name>pipe::callback::CallbackObjGroupBcast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="95" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1a43a19aaa47959ca575b8c99a31433f0e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void triggerPipe</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>triggerPipe</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="145" column="1" bodyfile="src/vt/pipe/pipe_manager.cc" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1a18038800a9665e59944db577325a3f76" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void triggerPipeTyped</definition>
        <argsstring>(PipeType const &amp;pipe, MsgT *msg)</argsstring>
        <name>triggerPipeTyped</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="148" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1pipe_1_1_pipe_manager_base_1af796769ead9441e58e20ee9d43b2a313" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void triggerPipeUnknown</definition>
        <argsstring>(PipeType const &amp;pipe, MsgT *msg)</argsstring>
        <name>triggerPipeUnknown</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="151" column="1" bodyfile="src/vt/pipe/pipe_manager.impl.h" bodystart="172" bodyend="174"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="structvt_1_1pipe_1_1_pipe_manager_base_1a0c85d01e4f6a9bd90056a8745b255c6d" prot="private" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename SignalT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1signal_1_1_signal_holder" kindref="compound">signal::SignalHolder</ref>&lt; SignalT &gt;</type>
        <definition>signal::SignalHolder&lt; SignalT &gt; vt::pipe::PipeManagerBase::signal_holder_</definition>
        <argsstring></argsstring>
        <name>signal_holder_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="158" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1pipe_1_1_pipe_manager_base_1a32f19829aa6cfffde5820b927fc326c9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1pipe_1a8aa7908de242917ac0922b9e9c85fea4" kindref="member">PipeIDType</ref></type>
        <definition>PipeIDType vt::pipe::PipeManagerBase::cur_pipe_id_</definition>
        <argsstring></argsstring>
        <name>cur_pipe_id_</name>
        <initializer>= initial_pipe_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="162" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pipe_1_1_pipe_manager_base_1ab75d5e22880b1bb14a459fdb1147a0e6" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref>, <ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a1364798bda487c9fb04879599f96c507" kindref="member">PipeStateType</ref> &gt;</type>
        <definition>std::unordered_map&lt;PipeType,PipeStateType&gt; vt::pipe::PipeManagerBase::pipe_state_</definition>
        <argsstring></argsstring>
        <name>pipe_state_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="164" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1pipe_1_1_pipe_manager_base_1a911580408d9a2425c5c8cef0b5002612" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; unsigned, std::function&lt; void()&gt; &gt;</type>
        <definition>std::unordered_map&lt;unsigned, std::function&lt;void()&gt; &gt; vt::pipe::PipeManagerBase::signal_cleanup_fns_</definition>
        <argsstring></argsstring>
        <name>signal_cleanup_fns_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="166" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a6b3b1e6d6bfe21308090d2dc62743961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::PipeManagerBase::PipeManagerBase</definition>
        <argsstring>()=default</argsstring>
        <name>PipeManagerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1af7b66141f69a485c6fce5e02bbbd3f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::pipe::PipeManagerBase::~PipeManagerBase</definition>
        <argsstring>()</argsstring>
        <name>~PipeManagerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="81" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a06e2f38ea4dc340ccc63b0c695df3951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
        <definition>PipeType vt::pipe::PipeManagerBase::makeCallbackFuncVoid</definition>
        <argsstring>(bool const &amp;persist, FuncType fn, bool const &amp;dispatch=false, PipeRefType num_signals=-1, PipeRefType num_listeners=1)</argsstring>
        <name>makeCallbackFuncVoid</name>
        <param>
          <type>bool const &amp;</type>
          <declname>persist</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" kindref="member">FuncType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>dispatch</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_signals</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_listeners</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="97" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="105" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a57a1c95c5256aabd25c8a3e0bf58f5cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
        <definition>PipeType vt::pipe::PipeManagerBase::makeCallbackFunc</definition>
        <argsstring>(bool const &amp;persist, FuncMsgType&lt; MsgT &gt; fn, bool const &amp;dispatch=false, PipeRefType num_signals=-1, PipeRefType num_listeners=1)</argsstring>
        <name>makeCallbackFunc</name>
        <param>
          <type>bool const &amp;</type>
          <declname>persist</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" kindref="member">FuncMsgType</ref>&lt; MsgT &gt;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>dispatch</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_signals</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_listeners</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="103" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="171" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1aa878aef84540ec6c2ca89096683d407e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::addListener</definition>
        <argsstring>(PipeType const &amp;pipe, FuncMsgType&lt; MsgT &gt; fn)</argsstring>
        <name>addListener</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" kindref="member">FuncMsgType</ref>&lt; MsgT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="109" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="204" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1ae486f94f76733fd3d97ff393c35d0e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::addListenerVoid</definition>
        <argsstring>(PipeType const &amp;pipe, FuncType fn)</argsstring>
        <name>addListenerVoid</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" kindref="member">FuncType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="110" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="143" bodyend="147"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a465621a26a764f147228e8f814ac5d31" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ListenerT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
        <definition>PipeType vt::pipe::PipeManagerBase::makeCallbackAny</definition>
        <argsstring>(bool const &amp;persist, ListenerT &amp;&amp;fn, bool const &amp;dispatch=false, PipeRefType num_signals=-1, PipeRefType num_listeners=1)</argsstring>
        <name>makeCallbackAny</name>
        <param>
          <type>bool const &amp;</type>
          <declname>persist</declname>
        </param>
        <param>
          <type>ListenerT &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>dispatch</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_signals</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_listeners</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="114" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="138" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1aee28bc7a33e3a0b796aa8fcdd6f72bd9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>typename ListenerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::addListenerAny</definition>
        <argsstring>(PipeType const &amp;pipe, ListenerT &amp;&amp;fn)</argsstring>
        <name>addListenerAny</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>ListenerT &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="120" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="188" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a34492ef027a92525ca5acc4e86b360ce" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::triggerPipeTyped</definition>
        <argsstring>(PipeType const &amp;pipe, MsgT *msg)</argsstring>
        <name>triggerPipeTyped</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="130" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="82" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1ad21185d07e9c3a0206d3d5a791f668a3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::triggerPipeUnknown</definition>
        <argsstring>(PipeType const &amp;pipe, MsgT *msg)</argsstring>
        <name>triggerPipeUnknown</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="132" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="95" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a27f1aea903f8e05655eb84ae1474c729" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SignalT</type>
          </param>
          <param>
            <type>typename ListenerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::registerCallback</definition>
        <argsstring>(PipeType const &amp;pipe, ListenerT &amp;&amp;listener, bool update_state=true)</argsstring>
        <name>registerCallback</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>ListenerT &amp;&amp;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>update_state</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="134" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="110" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a32f82a02196fe42e98ae3b628b73ae6d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::triggerPipe</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>triggerPipe</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="137" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="163" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a27d24548529db938aeeb6fe11af985a1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::generalSignalTrigger</definition>
        <argsstring>(PipeType const &amp;pipe)</argsstring>
        <name>generalSignalTrigger</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="138" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="149" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a835a8b819cfe7100b723b6d9b22cca57" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::newPipeState</definition>
        <argsstring>(PipeType const &amp;pipe, bool persist, bool typeless, PipeRefType num_sig, PipeRefType num_listeners, PipeRefType num_reg_listeners, DispatchFuncType fn=nullptr)</argsstring>
        <name>newPipeState</name>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>persist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>typeless</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_sig</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_listeners</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ace18d74dd489d9ea506d38789fffce34" kindref="member">PipeRefType</ref></type>
          <declname>num_reg_listeners</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1a983e301505317c5ba2041461e7dec84a" kindref="member">DispatchFuncType</ref></type>
          <declname>fn</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="139" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="72" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1af1ba11407837cb69b4d205dd7ba880b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
        <definition>PipeType vt::pipe::PipeManagerBase::makePipeID</definition>
        <argsstring>(bool const persist, bool const send_back)</argsstring>
        <name>makePipeID</name>
        <param>
          <type>bool const</type>
          <declname>persist</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>send_back</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="154" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="195" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1acae150f3cb2f27a84f39186ad4dd1a37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::triggerCallbackHan</definition>
        <argsstring>(CallbackMsg *msg)</argsstring>
        <name>triggerCallbackHan</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_callback_msg" kindref="compound">CallbackMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="123" column="1" bodyfile="src/vt/pipe/pipe_manager_base.cc" bodystart="183" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_base_1a56855a2a2c55decbb79971f51fb9dcce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::PipeManagerBase::triggerCallbackMsgHan</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>triggerCallbackMsgHan</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_base.h" line="126" column="1" bodyfile="src/vt/pipe/pipe_manager_base.impl.h" bodystart="73" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3083">
        <label>vt::pipe::PipeManager</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager"/>
        <childnode refid="3082" relation="public-inheritance">
        </childnode>
        <childnode refid="3084" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3084">
        <label>vt::pipe::PipeManagerTyped</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_typed"/>
        <childnode refid="3081" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3082">
        <label>vt::pipe::PipeManagerTL</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_t_l"/>
        <childnode refid="3081" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3081">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </inheritancegraph>
    <location file="src/vt/pipe/pipe_manager_base.h" line="66" column="1" bodyfile="src/vt/pipe/pipe_manager_base.h" bodystart="66" bodyend="167"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa878aef84540ec6c2ca89096683d407e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aee28bc7a33e3a0b796aa8fcdd6f72bd9" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>addListenerAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ae486f94f76733fd3d97ff393c35d0e5e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>addListenerVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a32f19829aa6cfffde5820b927fc326c9" prot="private" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>cur_pipe_id_</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a983e301505317c5ba2041461e7dec84a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>DispatchFuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>FuncCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>FuncMsgCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>FuncMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>FuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>FuncVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27d24548529db938aeeb6fe11af985a1" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>generalSignalTrigger</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a465621a26a764f147228e8f814ac5d31" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>makeCallbackAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a57a1c95c5256aabd25c8a3e0bf58f5cc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>makeCallbackFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a06e2f38ea4dc340ccc63b0c695df3951" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>makeCallbackFuncVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af1ba11407837cb69b4d205dd7ba880b0" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>makePipeID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a835a8b819cfe7100b723b6d9b22cca57" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>newPipeState</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a2348f4244b5ad72c5686492b15336b8b" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackAnon</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af8e96215722e3f76890719c4b555b188" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackAnonTypeless</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ada0bede5371d885f16b00f26b24d806a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1affcd179fae984dc9ffc6c97f790ae883" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackObjGroupBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af9d7def6910d340d015f26d19426da51" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackObjGroupSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a46319f53e42a02f8de1157c76b2c4b74" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackProxyBcastDirect</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad1f9ea1acee2fd15aa12a680a62637c9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackProxyBcastTypeless</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acdd1b50009e7155f2bdc2c0d8d7478f8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackProxySendDirect</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a94d1bab8c5864e9c5f95bcc7e27b64de" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackProxySendTypeless</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a2b276fd292a6811275e653a7428a694e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe::callback::CallbackSend</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ab75d5e22880b1bb14a459fdb1147a0e6" prot="private" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>pipe_state_</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a6b3b1e6d6bfe21308090d2dc62743961" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>PipeManagerBase</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a1364798bda487c9fb04879599f96c507" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>PipeStateType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27f1aea903f8e05655eb84ae1474c729" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>registerCallback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a911580408d9a2425c5c8cef0b5002612" prot="private" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>signal_cleanup_fns_</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a0c85d01e4f6a9bd90056a8745b255c6d" prot="private" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>signal_holder_</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acae150f3cb2f27a84f39186ad4dd1a37" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerCallbackHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a56855a2a2c55decbb79971f51fb9dcce" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerCallbackMsgHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a32f82a02196fe42e98ae3b628b73ae6d" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerPipe</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a43a19aaa47959ca575b8c99a31433f0e" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerPipe</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a34492ef027a92525ca5acc4e86b360ce" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerPipeTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a18038800a9665e59944db577325a3f76" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerPipeTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad21185d07e9c3a0206d3d5a791f668a3" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerPipeUnknown</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af796769ead9441e58e20ee9d43b2a313" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerBase</scope><name>triggerPipeUnknown</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af7b66141f69a485c6fce5e02bbbd3f89" prot="public" virt="virtual"><scope>vt::pipe::PipeManagerBase</scope><name>~PipeManagerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
