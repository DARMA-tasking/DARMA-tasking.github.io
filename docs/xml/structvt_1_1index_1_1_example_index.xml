<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1index_1_1_example_index" kind="struct" language="C++" prot="public">
    <compoundname>vt::index::ExampleIndex</compoundname>
    <includes refid="index__example_8h" local="no">index_example.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1index_1_1_example_index_1a19740d27aa6a911ec99a6f19f8cfdaab" prot="public" static="no">
        <type>size_t</type>
        <definition>using vt::index::ExampleIndex::IndexSizeType =  size_t</definition>
        <argsstring></argsstring>
        <name>IndexSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="64" column="1" bodyfile="src/vt/topos/index/index_example.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_example_index_1a7a5993e2e55fb1f80f59daa65ab7ead4" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="structvt_1_1index_1_1_example_index" kindref="compound">ExampleIndex</ref>)&gt;</type>
        <definition>using vt::index::ExampleIndex::ApplyType =  std::function&lt;void(ExampleIndex)&gt;</definition>
        <argsstring></argsstring>
        <name>ApplyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="65" column="1" bodyfile="src/vt/topos/index/index_example.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_example_index_1ad880d8cf1bf3b66795a9b9c5ffd7a3eb" prot="public" static="no">
        <type><ref refid="structvt_1_1serialization_1_1_byte_copy_trait" kindref="compound">serialization::ByteCopyTrait</ref></type>
        <definition>using vt::index::ExampleIndex::IsByteCopyable =  serialization::ByteCopyTrait</definition>
        <argsstring></argsstring>
        <name>IsByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="66" column="1" bodyfile="src/vt/topos/index/index_example.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1index_1_1_example_index_1ad5d24fa38ed7adc651d0b1178b53e421" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::index::ExampleIndex::BuildIndexType =  int32_t</definition>
        <argsstring></argsstring>
        <name>BuildIndexType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="70" column="1" bodyfile="src/vt/topos/index/index_example.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1ae95bfbbb43c57658ebd5b15bdbb8dac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::index::ExampleIndex::ExampleIndex</definition>
        <argsstring>()=default</argsstring>
        <name>ExampleIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1af4f0e1862469d47eb715ae553284d826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::index::ExampleIndex::ExampleIndex</definition>
        <argsstring>(ExampleIndex const &amp;)=default</argsstring>
        <name>ExampleIndex</name>
        <param>
          <type><ref refid="structvt_1_1index_1_1_example_index" kindref="compound">ExampleIndex</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1acaf68d730667b378a377bb2eabc53203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1index_1_1_example_index" kindref="compound">ExampleIndex</ref> &amp;</type>
        <definition>ExampleIndex&amp; vt::index::ExampleIndex::operator=</definition>
        <argsstring>(ExampleIndex const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1index_1_1_example_index" kindref="compound">ExampleIndex</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1ab473f0e55b054b4db5226b376357b5b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::index::ExampleIndex::operator==</definition>
        <argsstring>(ExampleIndex const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1index_1_1_example_index" kindref="compound">ExampleIndex</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1a29fc62c72007ce1e4beae6e5109ea567" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1index_1_1_example_index_1a19740d27aa6a911ec99a6f19f8cfdaab" kindref="member">IndexSizeType</ref></type>
        <definition>IndexSizeType vt::index::ExampleIndex::packedSize</definition>
        <argsstring>() const</argsstring>
        <name>packedSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1a9d4dc66e352c419b6958b07c5c547fb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::index::ExampleIndex::indexIsByteCopyable</definition>
        <argsstring>() const</argsstring>
        <name>indexIsByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1abec47decec01c0eccdf3e2db1658a521" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a913e1f07b5228dd8bb64040dc6dcea14" kindref="member">UniqueIndexBitType</ref></type>
        <definition>UniqueIndexBitType vt::index::ExampleIndex::uniqueBits</definition>
        <argsstring>() const</argsstring>
        <name>uniqueBits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1afcee93f213e381a767210e35f7746462" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::index::ExampleIndex::foreach</definition>
        <argsstring>(ExampleIndex const &amp;max, ApplyType fn) const</argsstring>
        <name>foreach</name>
        <param>
          <type><ref refid="structvt_1_1index_1_1_example_index" kindref="compound">ExampleIndex</ref> const &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1index_1_1_example_index_1a7a5993e2e55fb1f80f59daa65ab7ead4" kindref="member">ApplyType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1affdc9729ea50c86b3c04a18dc69c396d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::index::ExampleIndex::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1index_1_1_example_index_1a95fa585991dc2fe785b63a37ba974d89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t vt::index::ExampleIndex::ndims</definition>
        <argsstring>() const</argsstring>
        <name>ndims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/topos/index/index_example.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/topos/index/index_example.h" line="63" column="1" bodyfile="src/vt/topos/index/index_example.h" bodystart="63" bodyend="101"/>
    <listofallmembers>
      <member refid="structvt_1_1index_1_1_example_index_1a7a5993e2e55fb1f80f59daa65ab7ead4" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>ApplyType</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1ad5d24fa38ed7adc651d0b1178b53e421" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>BuildIndexType</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1ae95bfbbb43c57658ebd5b15bdbb8dac0" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>ExampleIndex</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1af4f0e1862469d47eb715ae553284d826" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>ExampleIndex</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1afcee93f213e381a767210e35f7746462" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>foreach</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1a9d4dc66e352c419b6958b07c5c547fb2" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>indexIsByteCopyable</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1a19740d27aa6a911ec99a6f19f8cfdaab" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>IndexSizeType</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1ad880d8cf1bf3b66795a9b9c5ffd7a3eb" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>IsByteCopyable</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1a95fa585991dc2fe785b63a37ba974d89" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>ndims</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1acaf68d730667b378a377bb2eabc53203" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>operator=</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1ab473f0e55b054b4db5226b376357b5b1" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>operator==</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1a29fc62c72007ce1e4beae6e5109ea567" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>packedSize</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1affdc9729ea50c86b3c04a18dc69c396d" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>toString</name></member>
      <member refid="structvt_1_1index_1_1_example_index_1abec47decec01c0eccdf3e2db1658a521" prot="public" virt="non-virtual"><scope>vt::index::ExampleIndex</scope><name>uniqueBits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
