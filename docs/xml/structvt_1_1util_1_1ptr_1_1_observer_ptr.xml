<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1ptr_1_1_observer_ptr" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>vt::util::ptr::ObserverPtr</compoundname>
    <includes refid="observer_8h" local="no">observer.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1afa7f8e2e3bca0e7ec27d61e10443b463" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* vt::util::ptr::ObserverPtr&lt; T &gt;::p_</definition>
        <argsstring></argsstring>
        <name>p_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="99" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a6130f8e36c57c992ab5fc8ce954f921b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::ptr::ObserverPtr&lt; T &gt;::ObserverPtr</definition>
        <argsstring>(T *in_p)</argsstring>
        <name>ObserverPtr</name>
        <param>
          <type>T *</type>
          <declname>in_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="60" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1afa392aae4efef6c10eb8372b19de5008" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::ptr::ObserverPtr&lt; T &gt;::ObserverPtr</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>ObserverPtr</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="64" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a1dfb004e6df35f93847876bdafac2f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::ptr::ObserverPtr&lt; T &gt;::ObserverPtr</definition>
        <argsstring>()=default</argsstring>
        <name>ObserverPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ac156b77e1a813a2cb9d5d32578dba8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::ptr::ObserverPtr&lt; T &gt;::ObserverPtr</definition>
        <argsstring>(ObserverPtr const &amp;)=default</argsstring>
        <name>ObserverPtr</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1abbd144c94f936c6b027508e316270edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::ptr::ObserverPtr&lt; T &gt;::ObserverPtr</definition>
        <argsstring>(ObserverPtr &amp;&amp;)=default</argsstring>
        <name>ObserverPtr</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a1e4b2d8b7fa49ddbba59b5d2516b0317" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref>&lt; T &gt; &amp;</type>
        <definition>ObserverPtr&lt;T&gt;&amp; vt::util::ptr::ObserverPtr&lt; T &gt;::operator=</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>operator=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="69" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a8134934d20910965a81a9dd65b40ed5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref>&lt; T &gt; &amp;</type>
        <definition>ObserverPtr&lt;T&gt;&amp; vt::util::ptr::ObserverPtr&lt; T &gt;::operator=</definition>
        <argsstring>(T *in)</argsstring>
        <name>operator=</name>
        <param>
          <type>T *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="74" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ad1095edbab8585f49c0845914e3d2921" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref>&lt; T &gt; &amp;</type>
        <definition>ObserverPtr&lt;T&gt;&amp; vt::util::ptr::ObserverPtr&lt; T &gt;::operator=</definition>
        <argsstring>(ObserverPtr&lt; T &gt; const &amp;in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="79" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ae7af50331ac75272eee6f6f1d41c01db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::ptr::ObserverPtr&lt; T &gt;::operator==</definition>
        <argsstring>(T *n) const</argsstring>
        <name>operator==</name>
        <param>
          <type>T *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="84" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1aeb5dc64d64f5ebd920bfeaa094fa9647" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::ptr::ObserverPtr&lt; T &gt;::operator!=</definition>
        <argsstring>(T *n) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>T *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="85" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a7b4eb7de1198d4082f5aaaab043ac5d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::ptr::ObserverPtr&lt; T &gt;::operator==</definition>
        <argsstring>(ObserverPtr&lt; T &gt; const &amp;n) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="86" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ab02d0973d758ed1d7e64f05c087180b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::ptr::ObserverPtr&lt; T &gt;::operator!=</definition>
        <argsstring>(ObserverPtr&lt; T &gt; const &amp;n) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1ptr_1_1_observer_ptr" kindref="compound">ObserverPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="87" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a655edf2fad3912f22fa9e2a97278d655" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::ptr::ObserverPtr&lt; T &gt;::operator==</definition>
        <argsstring>(std::nullptr_t) const</argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="88" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a1bb9ff73eed768a8e71c00587db08312" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::ptr::ObserverPtr&lt; T &gt;::operator!=</definition>
        <argsstring>(std::nullptr_t) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="89" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a61aa176c133afa161529a374f0ca0832" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::ptr::ObserverPtr&lt; T &gt;::operator T*</definition>
        <argsstring>() const</argsstring>
        <name>operator T*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="91" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a398c248bc2d31144660dedc526ba5003" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vt::util::ptr::ObserverPtr&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="92" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1aa822ecd1a2f19ffc080eeb6816ea652c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vt::util::ptr::ObserverPtr&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="93" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a727d1e47b06c7603c40a6225866f0754" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vt::util::ptr::ObserverPtr&lt; T &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="94" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a2d0cdf1cc2ae2c930e8c0c7b444f4a93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::ptr::ObserverPtr&lt; T &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/ptr/observer.h" line="96" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="96" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple wrapper over a raw pointer that indicates it is held as an observer that does not own or control the lifetime. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3053">
        <label>T</label>
      </node>
      <node id="3052">
        <label>vt::util::ptr::ObserverPtr&lt; T &gt;</label>
        <link refid="structvt_1_1util_1_1ptr_1_1_observer_ptr"/>
        <childnode refid="3053" relation="usage">
          <edgelabel>p_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/ptr/observer.h" line="58" column="1" bodyfile="src/vt/utils/ptr/observer.h" bodystart="58" bodyend="100"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a727d1e47b06c7603c40a6225866f0754" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a6130f8e36c57c992ab5fc8ce954f921b" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>ObserverPtr</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1afa392aae4efef6c10eb8372b19de5008" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>ObserverPtr</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a1dfb004e6df35f93847876bdafac2f3b" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>ObserverPtr</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ac156b77e1a813a2cb9d5d32578dba8ac" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>ObserverPtr</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1abbd144c94f936c6b027508e316270edc" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>ObserverPtr</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a61aa176c133afa161529a374f0ca0832" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator T*</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1aeb5dc64d64f5ebd920bfeaa094fa9647" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator!=</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ab02d0973d758ed1d7e64f05c087180b2" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator!=</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a1bb9ff73eed768a8e71c00587db08312" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator!=</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a398c248bc2d31144660dedc526ba5003" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator*</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1aa822ecd1a2f19ffc080eeb6816ea652c" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator-&gt;</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a1e4b2d8b7fa49ddbba59b5d2516b0317" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator=</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a8134934d20910965a81a9dd65b40ed5a" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator=</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ad1095edbab8585f49c0845914e3d2921" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator=</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1ae7af50331ac75272eee6f6f1d41c01db" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator==</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a7b4eb7de1198d4082f5aaaab043ac5d1" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator==</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a655edf2fad3912f22fa9e2a97278d655" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>operator==</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1afa7f8e2e3bca0e7ec27d61e10443b463" prot="private" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>p_</name></member>
      <member refid="structvt_1_1util_1_1ptr_1_1_observer_ptr_1a2d0cdf1cc2ae2c930e8c0c7b444f4a93" prot="public" virt="non-virtual"><scope>vt::util::ptr::ObserverPtr</scope><name>reset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
