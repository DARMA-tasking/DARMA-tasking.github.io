<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_active_messenger" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::ActiveMessenger</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_pollable_component" prot="public" virt="non-virtual">vt::runtime::component::PollableComponent&lt; ActiveMessenger &gt;</basecompoundref>
    <includes refid="active_8h" local="no">vt/messaging/active.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a80a9cbda399d7bf035bfcecc761f4b02" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_buffered_active_msg" kindref="compound">BufferedActiveMsg</ref></type>
        <definition>using vt::messaging::ActiveMessenger::BufferedMsgType =  BufferedActiveMsg</definition>
        <argsstring></argsstring>
        <name>BufferedMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="216" column="1" bodyfile="src/vt/messaging/active.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" prot="public" static="no">
        <type><ref refid="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" kindref="member">ShortMessage</ref></type>
        <definition>using vt::messaging::ActiveMessenger::MessageType =  ShortMessage</definition>
        <argsstring></argsstring>
        <name>MessageType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="217" column="1" bodyfile="src/vt/messaging/active.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1aa69cbede6a9fbc4d727bfb38d5546600" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::messaging::ActiveMessenger::CountType =  int32_t</definition>
        <argsstring></argsstring>
        <name>CountType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="218" column="1" bodyfile="src/vt/messaging/active.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1add1d7ab7bf168d53dfe7b93f29f64f02" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_recv" kindref="compound">PendingRecv</ref></type>
        <definition>using vt::messaging::ActiveMessenger::PendingRecvType =  PendingRecv</definition>
        <argsstring></argsstring>
        <name>PendingRecvType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="219" column="1" bodyfile="src/vt/messaging/active.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1aed736a2b2eaa0f96971a4f0be3fe0a25" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" kindref="member">event::AsyncEvent::EventRecordType</ref></type>
        <definition>using vt::messaging::ActiveMessenger::EventRecordType =  event::AsyncEvent::EventRecordType</definition>
        <argsstring></argsstring>
        <name>EventRecordType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="220" column="1" bodyfile="src/vt/messaging/active.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::SendDataRetType =  std::tuple&lt;EventType, TagType&gt;</definition>
        <argsstring></argsstring>
        <name>SendDataRetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="221" column="1" bodyfile="src/vt/messaging/active.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" prot="public" static="no">
        <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" kindref="member">SendDataRetType</ref>(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>, <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>) &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::SendFnType =  std::function&lt; SendDataRetType(RDMA_GetType,NodeType,TagType) &gt;</definition>
        <argsstring></argsstring>
        <name>SendFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="222" column="1" bodyfile="src/vt/messaging/active.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" kindref="member">SendFnType</ref>)&gt;</type>
        <definition>using vt::messaging::ActiveMessenger::UserSendFnType =  std::function&lt;void(SendFnType)&gt;</definition>
        <argsstring></argsstring>
        <name>UserSendFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="225" column="1" bodyfile="src/vt/messaging/active.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a388e97eeb72592e57551e045b43bcfde" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, <ref refid="structvt_1_1messaging_1_1_active_messenger_1add1d7ab7bf168d53dfe7b93f29f64f02" kindref="member">PendingRecvType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ContainerPendingType =  std::unordered_map&lt;TagType,PendingRecvType&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerPendingType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="226" column="1" bodyfile="src/vt/messaging/active.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a18bbfbf9ecd82b33f6fc475b2e5290a5" prot="public" static="no">
        <type>std::list&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a80a9cbda399d7bf035bfcecc761f4b02" kindref="member">BufferedMsgType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::MsgContType =  std::list&lt;BufferedMsgType&gt;</definition>
        <argsstring></argsstring>
        <name>MsgContType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="227" column="1" bodyfile="src/vt/messaging/active.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a1c52f4ec0c93821191cb3e69dc7c8604" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>, <ref refid="structvt_1_1messaging_1_1_active_messenger_1a18bbfbf9ecd82b33f6fc475b2e5290a5" kindref="member">MsgContType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ContWaitType =  std::unordered_map&lt;HandlerType, MsgContType&gt;</definition>
        <argsstring></argsstring>
        <name>ContWaitType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="228" column="1" bodyfile="src/vt/messaging/active.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a98bb74aa4a561161dd7c7073dcd5f1d3" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ReadyHanTagType =  std::tuple&lt;HandlerType, TagType&gt;</definition>
        <argsstring></argsstring>
        <name>ReadyHanTagType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="229" column="1" bodyfile="src/vt/messaging/active.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a745d5e8cad8c2f67d20479afacc6e134" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a98bb74aa4a561161dd7c7073dcd5f1d3" kindref="member">ReadyHanTagType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::MaybeReadyType =  std::vector&lt;ReadyHanTagType&gt;</definition>
        <argsstring></argsstring>
        <name>MaybeReadyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="230" column="1" bodyfile="src/vt/messaging/active.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1ac7e9165df6550ea333f8eb018a5a0e60" prot="public" static="no">
        <type><ref refid="structvt_1_1_handler_manager" kindref="compound">HandlerManager</ref></type>
        <definition>using vt::messaging::ActiveMessenger::HandlerManagerType =  HandlerManager</definition>
        <argsstring></argsstring>
        <name>HandlerManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="231" column="1" bodyfile="src/vt/messaging/active.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a746358029c37dabf2b4c8ad26642aee9" prot="public" static="no">
        <type>std::stack&lt; <ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::EpochStackType =  std::stack&lt;EpochType&gt;</definition>
        <argsstring></argsstring>
        <name>EpochStackType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="232" column="1" bodyfile="src/vt/messaging/active.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></type>
        <definition>using vt::messaging::ActiveMessenger::PendingSendType =  PendingSend</definition>
        <argsstring></argsstring>
        <name>PendingSendType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="233" column="1" bodyfile="src/vt/messaging/active.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a63878fd4ef1fbc505bd1313d32049ca9" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1messaging_1_1_listener" kindref="compound">Listener</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ListenerType =  std::unique_ptr&lt;Listener&gt;</definition>
        <argsstring></argsstring>
        <name>ListenerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="234" column="1" bodyfile="src/vt/messaging/active.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a447c6c0b3387142fd14b26c12e3ed877" prot="private" static="no">
        <type>typename EpochStackType::size_type</type>
        <definition>using vt::messaging::ActiveMessenger::EpochStackSizeType =  typename EpochStackType::size_type</definition>
        <argsstring></argsstring>
        <name>EpochStackSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1526" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1526" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a6e03effc6a6e98384d4488826be55e14" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::current_handler_context_</definition>
        <argsstring></argsstring>
        <name>current_handler_context_</name>
        <initializer>= uninitialized_handler</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1542" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a416bc461f669e4715b30e3f30064aa42" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::messaging::ActiveMessenger::current_node_context_</definition>
        <argsstring></argsstring>
        <name>current_node_context_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1543" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aed6bd1780915417e6f4c186a6573edac" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::current_epoch_context_</definition>
        <argsstring></argsstring>
        <name>current_epoch_context_</name>
        <initializer>= no_epoch</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1544" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a86110eccb05721da80482354f930d40a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>PriorityType vt::messaging::ActiveMessenger::current_priority_context_</definition>
        <argsstring></argsstring>
        <name>current_priority_context_</name>
        <initializer>= no_priority</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1545" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a6be14073d0706e2e410a7ed87aa84acd" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
        <definition>PriorityLevelType vt::messaging::ActiveMessenger::current_priority_level_context_</definition>
        <argsstring></argsstring>
        <name>current_priority_level_context_</name>
        <initializer>= no_priority_level</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1546" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a2db0ef8babe408d23a62518bd0ff180b" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a745d5e8cad8c2f67d20479afacc6e134" kindref="member">MaybeReadyType</ref></type>
        <definition>MaybeReadyType vt::messaging::ActiveMessenger::maybe_ready_tag_han_</definition>
        <argsstring></argsstring>
        <name>maybe_ready_tag_han_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1547" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aae19c8a01b0c483f20d58bd9114cac0e" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a1c52f4ec0c93821191cb3e69dc7c8604" kindref="member">ContWaitType</ref></type>
        <definition>ContWaitType vt::messaging::ActiveMessenger::pending_handler_msgs_</definition>
        <argsstring></argsstring>
        <name>pending_handler_msgs_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1548" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a77b9f9e025e09d85ba39262e523599b8" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a388e97eeb72592e57551e045b43bcfde" kindref="member">ContainerPendingType</ref></type>
        <definition>ContainerPendingType vt::messaging::ActiveMessenger::pending_recvs_</definition>
        <argsstring></argsstring>
        <name>pending_recvs_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1549" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a9a85ff32f58ff99db2c89da92e9c8443" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::messaging::ActiveMessenger::cur_direct_buffer_tag_</definition>
        <argsstring></argsstring>
        <name>cur_direct_buffer_tag_</name>
        <initializer>= starting_direct_buffer_tag</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1550" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a477f7599bd71cba2865e49f3610e6025" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a746358029c37dabf2b4c8ad26642aee9" kindref="member">EpochStackType</ref></type>
        <definition>EpochStackType vt::messaging::ActiveMessenger::epoch_stack_</definition>
        <argsstring></argsstring>
        <name>epoch_stack_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1551" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a52779f8ed30e23442a802e42c3462a0b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a63878fd4ef1fbc505bd1313d32049ca9" kindref="member">ListenerType</ref> &gt;</type>
        <definition>std::vector&lt;ListenerType&gt; vt::messaging::ActiveMessenger::send_listen_</definition>
        <argsstring></argsstring>
        <name>send_listen_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1552" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aaa384d58565da05b8b3ac60c5ee68ee0" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_i_recv_holder" kindref="compound">IRecvHolder</ref>&lt; <ref refid="structvt_1_1messaging_1_1_in_progress_i_recv" kindref="compound">InProgressIRecv</ref> &gt;</type>
        <definition>IRecvHolder&lt;InProgressIRecv&gt; vt::messaging::ActiveMessenger::in_progress_active_msg_irecv</definition>
        <argsstring></argsstring>
        <name>in_progress_active_msg_irecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1553" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aabf031983b435e4cf20d16dd561f179d" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_i_recv_holder" kindref="compound">IRecvHolder</ref>&lt; <ref refid="structvt_1_1messaging_1_1_in_progress_data_i_recv" kindref="compound">InProgressDataIRecv</ref> &gt;</type>
        <definition>IRecvHolder&lt;InProgressDataIRecv&gt; vt::messaging::ActiveMessenger::in_progress_data_irecv</definition>
        <argsstring></argsstring>
        <name>in_progress_data_irecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1554" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a44428f493f635833b6b8da6a6dfcf08f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::messaging::ActiveMessenger::this_node_</definition>
        <argsstring></argsstring>
        <name>this_node_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1555" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a8756789430c46b3829714999926a50ae" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::amSentCounterGauge</definition>
        <argsstring></argsstring>
        <name>amSentCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1559" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a96a3d12f2dcad41e66f7ee766d1e8d5f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::dmSentCounterGauge</definition>
        <argsstring></argsstring>
        <name>dmSentCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1560" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aee8bc2dca92bc3be57472aca90e45759" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::amRecvCounterGauge</definition>
        <argsstring></argsstring>
        <name>amRecvCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1563" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a910d9d24eea2daf233a063fd1348ec31" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::dmRecvCounterGauge</definition>
        <argsstring></argsstring>
        <name>dmRecvCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1564" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aec484a9a792d9833d00621cadf3cace8" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::amPostedCounterGauge</definition>
        <argsstring></argsstring>
        <name>amPostedCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1567" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a5fcc4dc86c3b084e781bdb656230c90f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::dmPostedCounterGauge</definition>
        <argsstring></argsstring>
        <name>dmPostedCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1568" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a6f7a203c3fc2cabd2f6900ecfcd72f89" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::messaging::ActiveMessenger::amHandlerCount</definition>
        <argsstring></argsstring>
        <name>amHandlerCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1571" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1ae7063289867d66c16627d2a5e1d01cd7" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::messaging::ActiveMessenger::bcastsSentCount</definition>
        <argsstring></argsstring>
        <name>bcastsSentCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1572" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a0bc9c9fa378e092e29a246e644529a12" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::messaging::ActiveMessenger::amPollCount</definition>
        <argsstring></argsstring>
        <name>amPollCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1573" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1abb8fb58c74b059143a49fc18140c62f6" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::messaging::ActiveMessenger::dmPollCount</definition>
        <argsstring></argsstring>
        <name>dmPollCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1574" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a8b33706c08e1f3475b504040cac79fc7" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::messaging::ActiveMessenger::tdSentCount</definition>
        <argsstring></argsstring>
        <name>tdSentCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1575" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a313a1560507175413727fed0464f0b9d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::messaging::ActiveMessenger::tdRecvCount</definition>
        <argsstring></argsstring>
        <name>tdRecvCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1576" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a3f7864f87ef5d5aa841fa04bb4ab3fb8" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a95e27dc4e2a74cef48e2cf82a3c5cb36" kindref="member">diagnostic::CounterGauge</ref></type>
        <definition>diagnostic::CounterGauge vt::messaging::ActiveMessenger::amForwardCounterGauge</definition>
        <argsstring></argsstring>
        <name>amForwardCounterGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1579" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1579" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ab6b4f326bf77ec032d8ba86d51899c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::ActiveMessenger::ActiveMessenger</definition>
        <argsstring>()</argsstring>
        <name>ActiveMessenger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="239" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="62" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a10ef2a3dae9bcaddaa1f80903274e7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::messaging::ActiveMessenger::~ActiveMessenger</definition>
        <argsstring>()</argsstring>
        <name>~ActiveMessenger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="244" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="151" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a42112dea411907ca529bd5bc6586249a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::messaging::ActiveMessenger::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="247" column="1" bodyfile="src/vt/messaging/active.h" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ad76f4f0ee9830f4431b57720163f715c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsTermMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsTermMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a termination message. </para>        </briefdescription>
        <detaileddescription>
<para>Used to ignore certain messages for the sake of termination detection considering them control messages instead of normal message which are tracked/counted by the termination detector.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a termination message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="259" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae813b0555258b09de8fa324ed98dcd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsLocationMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsLocationMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a location message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a location message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="267" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae4f8d48cda11b13d4447ab253ff18bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsSerialMsgMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsSerialMsgMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a serialization control message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a serialization control message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="275" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0587ea992b0f1b06da38d52a3851aae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsCollectionMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsCollectionMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a collection message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a collection message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="283" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a5fc9cb79e5cbef41007d847964c17113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::setEpochMessage</definition>
        <argsstring>(MsgT *msg, EpochType epoch)</argsstring>
        <name>setEpochMessage</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Set the epoch in the envelope of a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark the epoch on (envelope must be able to hold) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to mark on the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="292" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ab6d3637cb3c416b3491b748aaf4bab48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::setTagMessage</definition>
        <argsstring>(MsgT *msg, TagType tag)</argsstring>
        <name>setTagMessage</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Set the tag in the envelope of a message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark the tag on (envelope must be able to hold) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to mark on the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="302" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a527858e860bb7b373489ae425fd3fdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">trace::TraceEventIDType</ref></type>
        <definition>trace::TraceEventIDType vt::messaging::ActiveMessenger::makeTraceCreationSend</definition>
        <argsstring>(MsgPtrT msg, HandlerType const handler, auto_registry::RegistryTypeEnum type, MsgSizeType msg_size, bool is_bcast)</argsstring>
        <name>makeTraceCreationSend</name>
        <param>
          <type>MsgPtrT</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1auto__registry_1a9f369ca2b484130b396729e2ddf05241" kindref="member">auto_registry::RegistryTypeEnum</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_bcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="305" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="104" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a957903699d6ab76b0cf39833c777772e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgSerializableImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgSerializableImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="313" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="123" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; true and not ::<ref refid="structvt_1_1messaging_1_1msg__defines__serialize__mode" kindref="compound">vt::messaging::msg_defines_serialize_mode</ref>&lt; MsgT &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="333" column="1" bodyfile="src/vt/messaging/active.h" bodystart="333" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; true and ::<ref refid="structvt_1_1messaging_1_1msg__defines__serialize__mode" kindref="compound">vt::messaging::msg_defines_serialize_mode</ref>&lt; MsgT &gt;::value and ::<ref refid="structvt_1_1messaging_1_1msg__serialization__mode" kindref="compound">vt::messaging::msg_serialization_mode</ref>&lt; MsgT &gt;::required, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="358" column="1" bodyfile="src/vt/messaging/active.h" bodystart="358" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; true and ::<ref refid="structvt_1_1messaging_1_1msg__defines__serialize__mode" kindref="compound">vt::messaging::msg_defines_serialize_mode</ref>&lt; MsgT &gt;::value and ::<ref refid="structvt_1_1messaging_1_1msg__serialization__mode" kindref="compound">vt::messaging::msg_serialization_mode</ref>&lt; MsgT &gt;::supported, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="384" column="1" bodyfile="src/vt/messaging/active.h" bodystart="384" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; true and ::<ref refid="structvt_1_1messaging_1_1msg__defines__serialize__mode" kindref="compound">vt::messaging::msg_defines_serialize_mode</ref>&lt; MsgT &gt;::value and ::<ref refid="structvt_1_1messaging_1_1msg__serialization__mode" kindref="compound">vt::messaging::msg_serialization_mode</ref>&lt; MsgT &gt;::prohibited, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="410" column="1" bodyfile="src/vt/messaging/active.h" bodystart="410" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac678a223a96965cd5533ab945f66f28d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgCopyableImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgCopyableImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="427" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="156" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1ga0d38199d7351ef980e166d8aaabe1be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgSz</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>sendMsgSz</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para>Only invoke this variant if you know the size or the <computeroutput>sizeof(Message)</computeroutput> is different than the number of bytes you actually want to send</para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="479" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="217" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send (shared ptr) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="500" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="206" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1gad30a4e31445d40f9c3c36521fc04f975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>sendMessage</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="522" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="229" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga3a74c8dddad6a829883e75a15164074f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgSz</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgSz</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with an explicit size. </para>        </briefdescription>
        <detaileddescription>
<para>Use this variant to broadcast a message when <computeroutput>sizeof(Message)</computeroutput> != the actual size you want to send (e.g., extra bytes on the end)</para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="578" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="240" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga344802a09eb0e88006900976d1dfa204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="595" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="253" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga29a784965d1a87bc4abc44f225f40e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="612" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1gaac9ca3dd1b23d8df47166546341ab046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgSz</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>sendMsgSz</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with explicit size. </para>        </briefdescription>
        <detaileddescription>
<para>Invoke this send variant if you know the size or the <computeroutput>sizeof(Message)</computeroutput> is different than the number of bytes you actually want to send (e.g., extra bytes on the end of the message)</para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="635" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="276" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga7a5d96676fde771a9ce5af119796fb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <bold>broadcastMsg</bold> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="655" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="299" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga9e67738f189123c256172ce9e22a8b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <bold>sendMsg</bold> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="674" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="288" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__basicsend_1ga06f3b2d69156852600ead958ae95e3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacevt_1a546925d221208866b866b2edf8f24d04" kindref="member">ActiveFnType</ref> *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="731" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__basicsend_1gaab0dc380a72f038f4fc2350ba89de98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacevt_1a546925d221208866b866b2edf8f24d04" kindref="member">ActiveFnType</ref> *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga06f3b2d69156852600ead958ae95e3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga9337b80d48503a52676f80f86bc66cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>broadcastMsg</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="826" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1gaab0dc380a72f038f4fc2350ba89de98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga902007cdc61f7c93e694b7c4c89d7ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>sendMsg</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga8fd0c564e6c5d0bde3fbfa2e9a9d5ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="935" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="410" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga3548fb78b56bcd3f06cdb2fc6239e3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, UserSendFnType send_payload_fn)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" kindref="member">UserSendFnType</ref></type>
          <declname>send_payload_fn</declname>
        </param>
        <briefdescription>
<para>Send a message with a special payload function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_payload_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="954" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="380" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga11c4c7dec9f0da88060bacff76fb118d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MsgPtrThief&lt; MsgT &gt; msg, UserSendFnType send_payload_fn)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" kindref="member">UserSendFnType</ref></type>
          <declname>send_payload_fn</declname>
        </param>
        <briefdescription>
<para>Send a message with a special payload function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_payload_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="973" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="400" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1gab11ebaa792d7b87397773347626ad4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(HandlerType han, MsgPtrThief&lt; MsgT &gt; msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_thief" kindref="compound">MsgPtrThief</ref>&lt; MsgT &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>broadcastMsg</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><simplesect kind="note"><para>Takes ownership of the supplied message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="993" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="422" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a9799bd2681540170faa04b424d3c849e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::packMsg</definition>
        <argsstring>(MessageType *msg, MsgSizeType size, void *ptr, MsgSizeType ptr_bytes)</argsstring>
        <name>packMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>ptr_bytes</declname>
        </param>
        <briefdescription>
<para>Pack a message, used by the system. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Packs bytes directly after a message into a single contiguous buffer to send. The message better have sufficient space allocated after the message to pack these bytes. This is often used when the memory pool slot selected comes with some extra space instead of sending two separate buffers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>message to pack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes at pointer to pack </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1021" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="166" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac4385fea0c9cc860b5af24fea2f89a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" kindref="member">SendDataRetType</ref></type>
        <definition>ActiveMessenger::SendDataRetType vt::messaging::ActiveMessenger::sendData</definition>
        <argsstring>(RDMA_GetType const &amp;ptr, NodeType const &amp;dest, TagType const &amp;tag)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref> const &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Send raw bytes to a node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer and bytes to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the MPI tag put on the send (if vt::no_tag, increments tag)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tuple with the event ID and tag used </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1035" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="399" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac4d614d118396fa51ba7f2634e2653fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsgPriority</definition>
        <argsstring>(PriorityType priority, TagType const &amp;tag, NodeType const &amp;node, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsgPriority</name>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Receive data as bytes from a node with a priority. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>the priority to receive the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the MPI tag to receive on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">next</parametername>
</parameternamelist>
<parameterdescription>
<para>a continuation to execute when data arrives</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it was successful or pending </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1050" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="475" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a33b2e3e047d0b1f6eb1398691f075b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsg</definition>
        <argsstring>(TagType const &amp;tag, NodeType const &amp;node, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Receive data as bytes from a node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the MPI tag to receive on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">next</parametername>
</parameternamelist>
<parameterdescription>
<para>a continuation to execute when data arrives</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it was successful or pending </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1065" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="482" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a3ef2c45eb57382a2d76079ca8da9d527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsg</definition>
        <argsstring>(PriorityType priority, TagType const &amp;tag, NodeType const &amp;recv_node, bool const &amp;enqueue, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>recv_node</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>enqueue</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Receive data as bytes from a node with a priority. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>the priority to receive the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the MPI tag to receive on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">recv_node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node from which to receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enqueue</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enqueue the pending receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">next</parametername>
</parameternamelist>
<parameterdescription>
<para>a continuation to execute when data arrives</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it was successful or pending </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1082" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="679" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a9d62cd073f5b7dc1861dd1fa7b80ca01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsgBuffer</definition>
        <argsstring>(void *const user_buf, PriorityType priority, TagType const &amp;tag, NodeType const &amp;node=uninitialized_destination, bool const &amp;enqueue=true, ActionType dealloc_user_buf=nullptr, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsgBuffer</name>
        <param>
          <type>void *const</type>
          <declname>user_buf</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>enqueue</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>dealloc_user_buf</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Receive data as bytes with a buffer and priority. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">user_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to receive into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>the priority for the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the MPI tag to use for receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node receiving from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enqueue</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enqueue the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dealloc_user_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to deallocate a user buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">next</parametername>
</parameternamelist>
<parameterdescription>
<para>the continuation when the data is ready</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the data is ready or pending </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1101" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="520" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0e2271b6c52382bf2338f35f539225eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsgBuffer</definition>
        <argsstring>(void *const user_buf, TagType const &amp;tag, NodeType const &amp;node=uninitialized_destination, bool const &amp;enqueue=true, ActionType dealloc_user_buf=nullptr, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsgBuffer</name>
        <param>
          <type>void *const</type>
          <declname>user_buf</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>enqueue</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>dealloc_user_buf</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Receive data as bytes with a buffer. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">user_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to receive into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the MPI tag to use for receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node receiving from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enqueue</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enqueue the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dealloc_user_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to deallocate a user buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">next</parametername>
</parameternamelist>
<parameterdescription>
<para>the continuation when the data is ready</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the data is ready or pending </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1121" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="512" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1aa1d3d725885993caa7836f1f5294710a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::messaging::ActiveMessenger::doMessageSend</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; &amp;msg, MsgSizeType msg_size)</argsstring>
        <name>doMessageSend</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>msg_size</declname>
        </param>
        <briefdescription>
<para>Low-level send of a message, handler and other control data should be set already. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message (in bytes)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event for tracking the send completion </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1138" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="333" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a65ec9bc6f62213cac6320ea76cdd4d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::tryProcessIncomingActiveMsg</definition>
        <argsstring>()</argsstring>
        <name>tryProcessIncomingActiveMsg</name>
        <briefdescription>
<para>Poll MPI to discover an incoming message with a handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>whether a message was found </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1148" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="878" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1af4dafc0786bb0515293356e78035a71e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::tryProcessDataMsgRecv</definition>
        <argsstring>()</argsstring>
        <name>tryProcessDataMsgRecv</name>
        <briefdescription>
<para>Poll MPI for raw data messages. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>whether a message was found </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1156" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="488" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a4cd83c125e144ecbd9425fa7cd194538" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int vt::messaging::ActiveMessenger::progress</definition>
        <argsstring>() override</argsstring>
        <name>progress</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_pollable_component_1a34cad810026224d550cd9b0c9d1eff22">progress</reimplements>
        <briefdescription>
<para>Call into the progress engine. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>whether any action was taken (progress was made) </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1164" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1042" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a018435c71415f6f10dc578230397a85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::registerNewHandler</definition>
        <argsstring>(ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>registerNewHandler</name>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Register a bare handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag this handler will accept (<computeroutput>vt::no_tag</computeroutput> means any)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the handler ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1175" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1063" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a7292f6b76137fd12553d50a87aea296b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::swapHandlerFn</definition>
        <argsstring>(HandlerType const &amp;han, ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>swapHandlerFn</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Swap the underlying handler function pointer. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to swap function pointers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the new function pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag this handler will accept (<computeroutput>vt::no_tag</computeroutput> means any) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1187" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1075" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a6db8001e33580d18a5de9628b70d7033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::unregisterHandlerFn</definition>
        <argsstring>(HandlerType const &amp;han, TagType const &amp;tag=no_tag)</argsstring>
        <name>unregisterHandlerFn</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Un-register a bare handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to de-register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag this handler will accept (<computeroutput>vt::no_tag</computeroutput> means any) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1198" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1135" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a8b3f13a6dd4878eb7d12a45933d55769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::registerHandlerFn</definition>
        <argsstring>(HandlerType const &amp;han, ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>registerHandlerFn</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Register a handler function for existing handler. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to swap function pointers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the new function pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag this handler will accept (<computeroutput>vt::no_tag</computeroutput> means any) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1208" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1120" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a7e693e4b292e45fc1ed0dc8c9e2c03ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::collectiveRegisterHandler</definition>
        <argsstring>(ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>collectiveRegisterHandler</name>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Register an active handler (collective) </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>the function pointer for the handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag this handler will accept (<computeroutput>vt::no_tag</computeroutput> means any)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the handler ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1221" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1069" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a80753933950fa9619a5b675e5db291ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::getCurrentHandler</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentHandler</name>
        <briefdescription>
<para>Get the current handler (valid only while running a handler) </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the handler ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1231" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1146" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a433c49a43b304429aa2e046733dc8fde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::messaging::ActiveMessenger::getFromNodeCurrentHandler</definition>
        <argsstring>() const</argsstring>
        <name>getFromNodeCurrentHandler</name>
        <briefdescription>
<para>Get the from node for the current running handler (valid only while running a handler) </para>        </briefdescription>
        <detaileddescription>
<internal><para>For the current handler that is executing, get the node that sent the message that caused this handler to run. Note, for collection handlers this will not be the logical node that sent the message. It will be the node that last forwarded the message during location discovery.</para><para><simplesect kind="return"><para>the node that sent the message that triggered the current handler </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1245" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="688" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a5910d45e103a4c0e9c3a69084a58caac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getCurrentEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentEpoch</name>
        <briefdescription>
<para>Get the current epoch on the handler running. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the epoch on the message that triggered the current handler </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1253" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1150" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a170f37d23b8cad11dac0de0dec556ef6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>PriorityType vt::messaging::ActiveMessenger::getCurrentPriority</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentPriority</name>
        <briefdescription>
<para>Get the priority on the handler running. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the priority on the message that triggered the current handler </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1271" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1154" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1abfa87fe46bbb97786ba2dcd923da8c39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
        <definition>PriorityLevelType vt::messaging::ActiveMessenger::getCurrentPriorityLevel</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentPriorityLevel</name>
        <briefdescription>
<para>Get the priority level on the handler running. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the priority level of the message that triggered the current handler </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1279" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1158" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a877d3a681b48e386a1fe67201181b6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::scheduleActiveMsg</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const &amp;sender, MsgSizeType const &amp;size, bool insert, ActionType cont=nullptr)</argsstring>
        <name>scheduleActiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insert</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>cont</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Schedule an active message for future delivery. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sender</parametername>
</parameternamelist>
<parameterdescription>
<para>the sender of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">insert</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to insert the message if handler does not exist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cont</parametername>
</parameternamelist>
<parameterdescription>
<para>continuation after message is processed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1291" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="692" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1acfbb060ad1d13a75d2a061cfde137194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::processActiveMsg</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const &amp;sender, MsgSizeType const &amp;size, bool insert, ActionType cont=nullptr)</argsstring>
        <name>processActiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insert</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>cont</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Process an incoming active message. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Forwards the message to the appropriate group nodes or broadcasts it depending on envelope. May deliver the message locally or just forward it depending on the target.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sender</parametername>
</parameternamelist>
<parameterdescription>
<para>the sender of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">insert</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to insert the message if handler does not exist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cont</parametername>
</parameternamelist>
<parameterdescription>
<para>continuation after message is processed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it was delivered locally </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1312" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="707" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae68f0233a6d4e95d339ba6c31697dfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::deliverActiveMsg</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const &amp;from_node, bool insert, ActionType cont)</argsstring>
        <name>deliverActiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>from_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insert</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>Deliver an active message locally. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node the message came from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">insert</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to insert the message if handler does not exist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cont</parametername>
</parameternamelist>
<parameterdescription>
<para>continuation after message is processed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the message was delivered, false when handler does not exist </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1328" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="741" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0119aa4565a2268b55cd836b753c2afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::deliverPendingMsgsHandler</definition>
        <argsstring>(HandlerType const &amp;han, TagType const &amp;tag=no_tag)</argsstring>
        <name>deliverPendingMsgsHandler</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Deliver pending messaging waiting for a handler to be registered. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler that will now accept </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag for that handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1340" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1090" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac9fcc6ef325258985074c699b0d783c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::processMaybeReadyHanTag</definition>
        <argsstring>()</argsstring>
        <name>processMaybeReadyHanTag</name>
        <briefdescription>
<para>Process any messages that might be ready now (handler is now registered) </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1349" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1053" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ab3542048b6c0f380899643b031eb1731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::messaging::ActiveMessenger::sendMsgBytes</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, MsgSizeType const &amp;msg_size, TagType const &amp;send_tag)</argsstring>
        <name>sendMsgBytes</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>send_tag</declname>
        </param>
        <briefdescription>
<para>Send message as low-level bytes after packing put bytes if needed. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message base pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the send tag on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event to test/wait for completion </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1362" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="251" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a46c03a8a4da878972eda8db2d3f1cc1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::messaging::ActiveMessenger::sendMsgBytesWithPut</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, MsgSizeType const &amp;msg_size, TagType const &amp;send_tag)</argsstring>
        <name>sendMsgBytesWithPut</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>send_tag</declname>
        </param>
        <briefdescription>
<para>Send message as low-level bytes that is already packed. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message base pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the send tag on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event to test/wait for completion </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1378" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="179" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1aa17a3e718783d3aa08cd61d81abeb6a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::setGlobalEpoch</definition>
        <argsstring>(EpochType const &amp;epoch=no_epoch)</argsstring>
        <name>setGlobalEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
          <defval>no_epoch</defval>
        </param>
        <briefdescription>
<para>Set the global epoch (<computeroutput>pushEpoch</computeroutput> is more desirable) </para>        </briefdescription>
        <detaileddescription>
<internal><para><computeroutput><ref refid="structvt_1_1messaging_1_1_active_messenger_1aa17a3e718783d3aa08cd61d81abeb6a5" kindref="member">setGlobalEpoch()</ref></computeroutput> is a shortcut for both pushing and popping epochs on the stack depending on the value of the `epoch&apos; passed as an argument.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1392" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="478" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1abb892a84a906954d8769794ccfb0c638" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getGlobalEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getGlobalEpoch</name>
        <briefdescription>
<para>Get the current global epoch. </para>        </briefdescription>
        <detaileddescription>
<internal><para><computeroutput>Returns</computeroutput> the top epoch on the stack iff <computeroutput>epoch_stack.size()</computeroutput> &gt; 0, else it returns <computeroutput>vt::no_epoch</computeroutput> </para><para><simplesect kind="return"><para>the current global epoch </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1403" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="496" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac60a61b85392a5c40d2334919981963a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::pushEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>pushEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
<para>Push an epoch on the stack. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Pushes any epoch onto the local stack iff epoch != no_epoch; the epoch stack includes all locally pushed epochs and the current contexts pushed, transitively causally related active message handlers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch to push </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1415" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="504" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0ff3c2d9bf6ccd66002679b93821229c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::popEpoch</definition>
        <argsstring>(EpochType const &amp;epoch=no_epoch)</argsstring>
        <name>popEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
          <defval>no_epoch</defval>
        </param>
        <briefdescription>
<para>Pop an epoch off the stack. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Shall remove the top entry from epoch_size_, iff the size is non-zero and the `epoch&apos; passed, if `epoch != no_epoch&apos;, is equal to the top of the `epoch_stack_.top()&apos;; else, it shall remove any entry from the top of the stack.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epoch</parametername>
</parameternamelist>
<parameterdescription>
<para>the epoch that is expected to exist on the stack</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch popped off the stack </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1431" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="521" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a627a8b2918ad283edf386038cf5693ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getEpoch</name>
        <briefdescription>
<para>Returns the top of the epoch stack. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the epoch on the top of the stack </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1439" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="542" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1aa60710a2d4a1ac7fe60113fd8cbb9809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getEpochContextMsg</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>getEpochContextMsg</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get the epoch for a message based on the current context so an subsequent operation on it can be safely delayed. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to set the epoch on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch on the message or from context </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1451" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="547" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a66c64223357aa92f45a4a4042bd63a5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getEpochContextMsg</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; const &amp;msg)</argsstring>
        <name>getEpochContextMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Get the epoch for a message based on the current context so an subsequent operation on it can be safely delayed. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message (shared ptr) to set the epoch on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch on the message or from context </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1463" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="573" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a7b5a8fc73617491423bf68c4fbe1e2a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::setupEpochMsg</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>setupEpochMsg</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Set the epoch on a message. </para>        </briefdescription>
        <detaileddescription>
<internal><para>The method finds the current epoch based on whether its already set on the message (which in that case it uses the one on the message already) or obtains the current epoch from the epoch stack based on the handler that is running</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to get/set the epoch on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch set </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1479" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="580" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ad7402f346c73b2a50ae1feb71140d891" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::setupEpochMsg</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; const &amp;msg)</argsstring>
        <name>setupEpochMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Set the epoch on th message. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to get/set the epoch on</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the epoch set </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1490" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="595" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a3083324696bb4f6e55164da2cb00a1c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::addSendListener</definition>
        <argsstring>(std::unique_ptr&lt; L &gt; ptr)</argsstring>
        <name>addSendListener</name>
        <param>
          <type>std::unique_ptr&lt; L &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Register a listener on the active messenger<mdash/>see <computeroutput><ref refid="structvt_1_1messaging_1_1_listener" kindref="compound">Listener</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>std::unique_ptr&lt;L&gt;</computeroutput> to a listener </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1499" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1499" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1af7bcc5ce345c1138a67b6f80abb56705" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::clearListeners</definition>
        <argsstring>()</argsstring>
        <name>clearListeners</name>
        <briefdescription>
<para>Clear all listeners. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1507" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1507" bodyend="1509"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a12133fda914a7809ac7ce7694efc312e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::testPendingActiveMsgAsyncRecv</definition>
        <argsstring>()</argsstring>
        <name>testPendingActiveMsgAsyncRecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1512" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1018" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae8e94c46cd2948864a97a671428b64bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::testPendingDataMsgAsyncRecv</definition>
        <argsstring>()</argsstring>
        <name>testPendingDataMsgAsyncRecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1513" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="1030" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a162667e5566546402f12baf8cf60d4da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::finishPendingActiveMsgAsyncRecv</definition>
        <argsstring>(InProgressIRecv *irecv)</argsstring>
        <name>finishPendingActiveMsgAsyncRecv</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_in_progress_i_recv" kindref="compound">InProgressIRecv</ref> *</type>
          <declname>irecv</declname>
        </param>
        <briefdescription>
<para>Called when a VT-MPI message has been received. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1518" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="949" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a80a13017308870133ff8538741bee394" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::finishPendingDataMsgAsyncRecv</definition>
        <argsstring>(InProgressDataIRecv *irecv)</argsstring>
        <name>finishPendingDataMsgAsyncRecv</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_in_progress_data_i_recv" kindref="compound">InProgressDataIRecv</ref> *</type>
          <declname>irecv</declname>
        </param>
        <briefdescription>
<para>Called when a VT-MPI message has been received. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1523" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="629" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a8209c23bddf111089f4fd64d7cd2f67e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a447c6c0b3387142fd14b26c12e3ed877" kindref="member">EpochStackSizeType</ref></type>
        <definition>ActiveMessenger::EpochStackSizeType vt::messaging::ActiveMessenger::epochPreludeHandler</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>epochPreludeHandler</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1528" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="434" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a6418078d6eba01bfd36e46d54c076713" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::epochEpilogHandler</definition>
        <argsstring>(EpochType const &amp;epoch, EpochStackSizeType const &amp;prev_stack_size)</argsstring>
        <name>epochEpilogHandler</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a447c6c0b3387142fd14b26c12e3ed877" kindref="member">EpochStackSizeType</ref> const &amp;</type>
          <declname>prev_stack_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1529" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="446" bodyend="476"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core component of VT used to send messages. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="structvt_1_1messaging_1_1_active_messenger" kindref="compound">ActiveMessenger</ref> is a core VT component that provides the ability to send messages <computeroutput>Message</computeroutput> to registered handlers. It manages the incoming and outgoing messages using MPI to communicate <computeroutput>MPI_Irecv</computeroutput> and <computeroutput>MPI_Isend</computeroutput> </para><para>Calls that send messages, such as <computeroutput>sendMsg</computeroutput> and <computeroutput>broadcastMsg</computeroutput>, relinquish ownership of the message supplied. This is implied regardless of the type of the message argument. This implicit behavior is equivalent to the explicit use of <computeroutput>std::move</computeroutput>.</para><para>The following two code snippets have the same semantics:</para><para><programlisting><codeline><highlight class="normal"><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-<ref refid="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" kindref="member">sendMsg</ref>(0,<sp/>msg);</highlight></codeline>
</programlisting></para><para><programlisting><codeline><highlight class="normal"><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-<ref refid="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" kindref="member">sendMsg</ref>(0,<sp/>std::move(msg));</highlight></codeline>
</programlisting></para><para>It is invalid to attempt to access the messages after such calls, and doing so may result in a vtAssert or undefined behavior. In special cases <computeroutput>promoteMsg</computeroutput> can be used to acquire secondary ownership.</para><para>There are various ways to send messages:<itemizedlist>
<listitem><para><ref refid="group__typesafehan" kindref="compound">Send Message Active Function (type-safe handler)</ref></para></listitem><listitem><para><ref refid="group__preregister" kindref="compound">Basic Active Message Send with Pre-Registered Handler</ref></para></listitem><listitem><para><ref refid="group__basicsend" kindref="compound">Send Message BASIC Active Function</ref></para></listitem><listitem><para><ref refid="group__functorsend" kindref="compound">Send Message to Functor Variants</ref></para></listitem><listitem><para><ref refid="group__sendpayload" kindref="compound">Send Data Message with data payload</ref> </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="37">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>vt::runtime::component::PollableComponent&lt; ActiveMessenger &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_pollable_component"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="34">
        <label>vt::messaging::ActiveMessenger</label>
        <link refid="structvt_1_1messaging_1_1_active_messenger"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="41">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="42">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="36">
        <label>vt::runtime::component::Component&lt; ActiveMessenger &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="46">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="47" relation="public-inheritance">
        </childnode>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>vt::runtime::component::meter::DiagnosticMeter</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_meter"/>
      </node>
      <node id="58">
        <label>vt::runtime::component::detail::DiagnosticSnapshotValues&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_snapshot_values"/>
      </node>
      <node id="44">
        <label>vt::runtime::component::PollableComponent&lt; ActiveMessenger &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_pollable_component"/>
        <childnode refid="45" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>vt::messaging::IRecvHolder&lt; vt::messaging::InProgressDataIRecv &gt;</label>
        <link refid="structvt_1_1messaging_1_1_i_recv_holder"/>
      </node>
      <node id="59">
        <label>vt::runtime::component::meter::Counter&lt; CounterDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="43">
        <label>vt::messaging::ActiveMessenger</label>
        <link refid="structvt_1_1messaging_1_1_active_messenger"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>dmPostedCounterGauge</edgelabel>
          <edgelabel>dmSentCounterGauge</edgelabel>
          <edgelabel>amSentCounterGauge</edgelabel>
          <edgelabel>amForwardCounterGauge</edgelabel>
          <edgelabel>amPostedCounterGauge</edgelabel>
          <edgelabel>dmRecvCounterGauge</edgelabel>
          <edgelabel>amRecvCounterGauge</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>in_progress_data_irecv</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>in_progress_active_msg_irecv</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>amHandlerCount</edgelabel>
          <edgelabel>amPollCount</edgelabel>
          <edgelabel>dmPollCount</edgelabel>
          <edgelabel>tdSentCount</edgelabel>
          <edgelabel>tdRecvCount</edgelabel>
          <edgelabel>bcastsSentCount</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>vt::messaging::IRecvHolder&lt; vt::messaging::InProgressIRecv &gt;</label>
        <link refid="structvt_1_1messaging_1_1_i_recv_holder"/>
      </node>
      <node id="48">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="52">
        <label>vt::runtime::component::meter::CounterGauge&lt; CounterDefaultType, GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter_gauge"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>gauge_</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>counter_</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>vt::runtime::component::meter::Gauge&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_gauge"/>
        <childnode refid="55" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>vt::runtime::component::detail::DiagnosticBase</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_base"/>
      </node>
      <node id="50">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="51">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="55">
        <label>vt::runtime::component::meter::DiagnosticStatsPack&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_stats_pack"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>sum_</edgelabel>
          <edgelabel>avg_</edgelabel>
          <edgelabel>max_</edgelabel>
          <edgelabel>min_</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>vt::runtime::component::detail::DiagnosticSnapshotValues&lt; CounterDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_snapshot_values"/>
      </node>
      <node id="56">
        <label>vt::runtime::component::detail::DiagnosticValue&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>values_</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>vt::runtime::component::Component&lt; ActiveMessenger &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>vt::runtime::component::detail::DiagnosticValue&lt; CounterDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value"/>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>values_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/messaging/active.h" line="215" column="1" bodyfile="src/vt/messaging/active.h" bodystart="215" bodyend="1580"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ab6b4f326bf77ec032d8ba86d51899c60" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ActiveMessenger</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3083324696bb4f6e55164da2cb00a1c6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>addSendListener</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3f7864f87ef5d5aa841fa04bb4ab3fb8" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>amForwardCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6f7a203c3fc2cabd2f6900ecfcd72f89" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>amHandlerCount</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0bc9c9fa378e092e29a246e644529a12" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>amPollCount</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aec484a9a792d9833d00621cadf3cace8" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>amPostedCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aee8bc2dca92bc3be57472aca90e45759" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>amRecvCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a8756789430c46b3829714999926a50ae" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>amSentCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae7063289867d66c16627d2a5e1d01cd7" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>bcastsSentCount</name></member>
      <member refid="group__typesafehan_1ga344802a09eb0e88006900976d1dfa204" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__basicsend_1ga06f3b2d69156852600ead958ae95e3c9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__functorsend_1ga06f3b2d69156852600ead958ae95e3c9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__sendpayload_1ga8fd0c564e6c5d0bde3fbfa2e9a9d5ad9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__typesafehan_1ga7a5d96676fde771a9ce5af119796fb3a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgAuto</name></member>
      <member refid="group__functorsend_1ga9337b80d48503a52676f80f86bc66cf2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgAuto</name></member>
      <member refid="group__sendpayload_1gab11ebaa792d7b87397773347626ad4f9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgAuto</name></member>
      <member refid="group__typesafehan_1ga3a74c8dddad6a829883e75a15164074f" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgSz</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a80a9cbda399d7bf035bfcecc761f4b02" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>BufferedMsgType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1af7bcc5ce345c1138a67b6f80abb56705" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>clearListeners</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a7e693e4b292e45fc1ed0dc8c9e2c03ec" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>collectiveRegisterHandler</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>component_id_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a388e97eeb72592e57551e045b43bcfde" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ContainerPendingType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a1c52f4ec0c93821191cb3e69dc7c8604" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ContWaitType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa69cbede6a9fbc4d727bfb38d5546600" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>CountType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9a85ff32f58ff99db2c89da92e9c8443" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>cur_direct_buffer_tag_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aed6bd1780915417e6f4c186a6573edac" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_epoch_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6e03effc6a6e98384d4488826be55e14" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_handler_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a416bc461f669e4715b30e3f30064aa42" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_node_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a86110eccb05721da80482354f930d40a" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_priority_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6be14073d0706e2e410a7ed87aa84acd" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_priority_level_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae68f0233a6d4e95d339ba6c31697dfd5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>deliverActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0119aa4565a2268b55cd836b753c2afd" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>deliverPendingMsgsHandler</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1abb8fb58c74b059143a49fc18140c62f6" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>dmPollCount</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a5fcc4dc86c3b084e781bdb656230c90f" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>dmPostedCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a910d9d24eea2daf233a063fd1348ec31" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>dmRecvCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a96a3d12f2dcad41e66f7ee766d1e8d5f" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>dmSentCounterGauge</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa1d3d725885993caa7836f1f5294710a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>doMessageSend</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>dumpState</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a477f7599bd71cba2865e49f3610e6025" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>epoch_stack_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6418078d6eba01bfd36e46d54c076713" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>epochEpilogHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a8209c23bddf111089f4fd64d7cd2f67e" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>epochPreludeHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a447c6c0b3387142fd14b26c12e3ed877" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>EpochStackSizeType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a746358029c37dabf2b4c8ad26642aee9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>EpochStackType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aed736a2b2eaa0f96971a4f0be3fe0a25" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>EventRecordType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>finalize</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a162667e5566546402f12baf8cf60d4da" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>finishPendingActiveMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a80a13017308870133ff8538741bee394" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>finishPendingDataMsgAsyncRecv</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a5910d45e103a4c0e9c3a69084a58caac" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a80753933950fa9619a5b675e5db291ad" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a170f37d23b8cad11dac0de0dec556ef6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentPriority</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1abfa87fe46bbb97786ba2dcd923da8c39" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentPriorityLevel</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a627a8b2918ad283edf386038cf5693ca" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa60710a2d4a1ac7fe60113fd8cbb9809" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getEpochContextMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a66c64223357aa92f45a4a4042bd63a5f" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getEpochContextMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a433c49a43b304429aa2e046733dc8fde" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getFromNodeCurrentHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1abb892a84a906954d8769794ccfb0c638" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getGlobalEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac7e9165df6550ea333f8eb018a5a0e60" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>HandlerManagerType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aaa384d58565da05b8b3ac60c5ee68ee0" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>in_progress_active_msg_irecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aabf031983b435e4cf20d16dd561f179d" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>in_progress_data_irecv</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>initialize</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a63878fd4ef1fbc505bd1313d32049ca9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ListenerType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a527858e860bb7b373489ae425fd3fdcc" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>makeTraceCreationSend</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0587ea992b0f1b06da38d52a3851aae5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsCollectionMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae813b0555258b09de8fa324ed98dcd02" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsLocationMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae4f8d48cda11b13d4447ab253ff18bf2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsSerialMsgMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ad76f4f0ee9830f4431b57720163f715c" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsTermMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a2db0ef8babe408d23a62518bd0ff180b" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>maybe_ready_tag_han_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a745d5e8cad8c2f67d20479afacc6e134" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>MaybeReadyType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>MessageType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a18bbfbf9ecd82b33f6fc475b2e5290a5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>MsgContType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a42112dea411907ca529bd5bc6586249a" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>name</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9799bd2681540170faa04b424d3c849e" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>packMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aae19c8a01b0c483f20d58bd9114cac0e" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pending_handler_msgs_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a77b9f9e025e09d85ba39262e523599b8" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pending_recvs_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1add1d7ab7bf168d53dfe7b93f29f64f02" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>PendingRecvType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>PendingSendType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_pollable_component_1a8ad6cfbc184ed9862cae5304605fe025" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pollable</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0ff3c2d9bf6ccd66002679b93821229c" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>popEpoch</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1acfbb060ad1d13a75d2a061cfde137194" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>processActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac9fcc6ef325258985074c699b0d783c6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>processMaybeReadyHanTag</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a4cd83c125e144ecbd9425fa7cd194538" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>progress</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac60a61b85392a5c40d2334919981963a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pushEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a98bb74aa4a561161dd7c7073dcd5f1d3" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ReadyHanTagType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a33b2e3e047d0b1f6eb1398691f075b31" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3ef2c45eb57382a2d76079ca8da9d527" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9d62cd073f5b7dc1861dd1fa7b80ca01" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsgBuffer</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0e2271b6c52382bf2338f35f539225eb" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsgBuffer</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac4d614d118396fa51ba7f2634e2653fa" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsgPriority</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a8b3f13a6dd4878eb7d12a45933d55769" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerHandlerFn</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a018435c71415f6f10dc578230397a85c" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerNewHandler</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a877d3a681b48e386a1fe67201181b6bd" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>scheduleActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a52779f8ed30e23442a802e42c3462a0b" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>send_listen_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac4385fea0c9cc860b5af24fea2f89a1d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendData</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>SendDataRetType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>SendFnType</name></member>
      <member refid="group__preregister_1ga0162a39473e7f9b490a79a7983d949ac" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__typesafehan_1ga29a784965d1a87bc4abc44f225f40e79" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__basicsend_1gaab0dc380a72f038f4fc2350ba89de98f" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__functorsend_1gaab0dc380a72f038f4fc2350ba89de98f" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__sendpayload_1ga3548fb78b56bcd3f06cdb2fc6239e3c6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__sendpayload_1ga11c4c7dec9f0da88060bacff76fb118d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__preregister_1gad30a4e31445d40f9c3c36521fc04f975" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgAuto</name></member>
      <member refid="group__typesafehan_1ga9e67738f189123c256172ce9e22a8b68" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgAuto</name></member>
      <member refid="group__functorsend_1ga902007cdc61f7c93e694b7c4c89d7ee1" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgAuto</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ab3542048b6c0f380899643b031eb1731" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgBytes</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a46c03a8a4da878972eda8db2d3f1cc1d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgBytesWithPut</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac678a223a96965cd5533ab945f66f28d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgCopyableImpl</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgImpl</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgImpl</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgImpl</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae4d52bd4014fe9cfee3a60bf477fe998" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgImpl</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a957903699d6ab76b0cf39833c777772e" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgSerializableImpl</name></member>
      <member refid="group__preregister_1ga0d38199d7351ef980e166d8aaabe1be2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgSz</name></member>
      <member refid="group__typesafehan_1gaac9ca3dd1b23d8df47166546341ab046" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgSz</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a5fc9cb79e5cbef41007d847964c17113" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setEpochMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa17a3e718783d3aa08cd61d81abeb6a5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setGlobalEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ab6d3637cb3c416b3491b748aaf4bab48" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setTagMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a7b5a8fc73617491423bf68c4fbe1e2a2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setupEpochMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ad7402f346c73b2a50ae1feb71140d891" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setupEpochMsg</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>staticInit</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a7292f6b76137fd12553d50a87aea296b" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>swapHandlerFn</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a313a1560507175413727fed0464f0b9d" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>tdRecvCount</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a8b33706c08e1f3475b504040cac79fc7" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>tdSentCount</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a12133fda914a7809ac7ce7694efc312e" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>testPendingActiveMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae8e94c46cd2948864a97a671428b64bc" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>testPendingDataMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a44428f493f635833b6b8da6a6dfcf08f" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>this_node_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1af4dafc0786bb0515293356e78035a71e" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>tryProcessDataMsgRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a65ec9bc6f62213cac6320ea76cdd4d47" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>tryProcessIncomingActiveMsg</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>UnitType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6db8001e33580d18a5de9628b70d7033" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>unregisterHandlerFn</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>UserSendFnType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a10ef2a3dae9bcaddaa1f80903274e7b3" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>~ActiveMessenger</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
