<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_active_messenger" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::ActiveMessenger</compoundname>
    <includes refid="active_8h" local="no">vt/messaging/active.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a80a9cbda399d7bf035bfcecc761f4b02" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_buffered_active_msg" kindref="compound">BufferedActiveMsg</ref></type>
        <definition>using vt::messaging::ActiveMessenger::BufferedMsgType =  BufferedActiveMsg</definition>
        <argsstring></argsstring>
        <name>BufferedMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="195" column="1" bodyfile="src/vt/messaging/active.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" prot="public" static="no">
        <type><ref refid="namespacevt_1a1125ac1da6c0bbf141e0ea0739d7602d" kindref="member">ShortMessage</ref></type>
        <definition>using vt::messaging::ActiveMessenger::MessageType =  ShortMessage</definition>
        <argsstring></argsstring>
        <name>MessageType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="196" column="1" bodyfile="src/vt/messaging/active.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1aa69cbede6a9fbc4d727bfb38d5546600" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::messaging::ActiveMessenger::CountType =  int32_t</definition>
        <argsstring></argsstring>
        <name>CountType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="197" column="1" bodyfile="src/vt/messaging/active.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1add1d7ab7bf168d53dfe7b93f29f64f02" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_recv" kindref="compound">PendingRecv</ref></type>
        <definition>using vt::messaging::ActiveMessenger::PendingRecvType =  PendingRecv</definition>
        <argsstring></argsstring>
        <name>PendingRecvType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="198" column="1" bodyfile="src/vt/messaging/active.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1aed736a2b2eaa0f96971a4f0be3fe0a25" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" kindref="member">event::AsyncEvent::EventRecordType</ref></type>
        <definition>using vt::messaging::ActiveMessenger::EventRecordType =  event::AsyncEvent::EventRecordType</definition>
        <argsstring></argsstring>
        <name>EventRecordType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="199" column="1" bodyfile="src/vt/messaging/active.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::SendDataRetType =  std::tuple&lt;EventType, TagType&gt;</definition>
        <argsstring></argsstring>
        <name>SendDataRetType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="200" column="1" bodyfile="src/vt/messaging/active.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" prot="public" static="no">
        <type>std::function&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" kindref="member">SendDataRetType</ref>(<ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref>, <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>) &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::SendFnType =  std::function&lt; SendDataRetType(RDMA_GetType,NodeType,TagType) &gt;</definition>
        <argsstring></argsstring>
        <name>SendFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="201" column="1" bodyfile="src/vt/messaging/active.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" kindref="member">SendFnType</ref>)&gt;</type>
        <definition>using vt::messaging::ActiveMessenger::UserSendFnType =  std::function&lt;void(SendFnType)&gt;</definition>
        <argsstring></argsstring>
        <name>UserSendFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="204" column="1" bodyfile="src/vt/messaging/active.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a388e97eeb72592e57551e045b43bcfde" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref>, <ref refid="structvt_1_1messaging_1_1_active_messenger_1add1d7ab7bf168d53dfe7b93f29f64f02" kindref="member">PendingRecvType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ContainerPendingType =  std::unordered_map&lt;TagType,PendingRecvType&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerPendingType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="205" column="1" bodyfile="src/vt/messaging/active.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a18bbfbf9ecd82b33f6fc475b2e5290a5" prot="public" static="no">
        <type>std::list&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a80a9cbda399d7bf035bfcecc761f4b02" kindref="member">BufferedMsgType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::MsgContType =  std::list&lt;BufferedMsgType&gt;</definition>
        <argsstring></argsstring>
        <name>MsgContType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="206" column="1" bodyfile="src/vt/messaging/active.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a1c52f4ec0c93821191cb3e69dc7c8604" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>, <ref refid="structvt_1_1messaging_1_1_active_messenger_1a18bbfbf9ecd82b33f6fc475b2e5290a5" kindref="member">MsgContType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ContWaitType =  std::unordered_map&lt;HandlerType, MsgContType&gt;</definition>
        <argsstring></argsstring>
        <name>ContWaitType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="207" column="1" bodyfile="src/vt/messaging/active.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a98bb74aa4a561161dd7c7073dcd5f1d3" prot="public" static="no">
        <type>std::tuple&lt; <ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref>, <ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ReadyHanTagType =  std::tuple&lt;HandlerType, TagType&gt;</definition>
        <argsstring></argsstring>
        <name>ReadyHanTagType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="208" column="1" bodyfile="src/vt/messaging/active.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a745d5e8cad8c2f67d20479afacc6e134" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a98bb74aa4a561161dd7c7073dcd5f1d3" kindref="member">ReadyHanTagType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::MaybeReadyType =  std::vector&lt;ReadyHanTagType&gt;</definition>
        <argsstring></argsstring>
        <name>MaybeReadyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="209" column="1" bodyfile="src/vt/messaging/active.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1ac7e9165df6550ea333f8eb018a5a0e60" prot="public" static="no">
        <type><ref refid="structvt_1_1_handler_manager" kindref="compound">HandlerManager</ref></type>
        <definition>using vt::messaging::ActiveMessenger::HandlerManagerType =  HandlerManager</definition>
        <argsstring></argsstring>
        <name>HandlerManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="210" column="1" bodyfile="src/vt/messaging/active.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a746358029c37dabf2b4c8ad26642aee9" prot="public" static="no">
        <type>std::stack&lt; <ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::EpochStackType =  std::stack&lt;EpochType&gt;</definition>
        <argsstring></argsstring>
        <name>EpochStackType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="211" column="1" bodyfile="src/vt/messaging/active.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" prot="public" static="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></type>
        <definition>using vt::messaging::ActiveMessenger::PendingSendType =  PendingSend</definition>
        <argsstring></argsstring>
        <name>PendingSendType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="212" column="1" bodyfile="src/vt/messaging/active.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a63878fd4ef1fbc505bd1313d32049ca9" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1messaging_1_1_listener" kindref="compound">Listener</ref> &gt;</type>
        <definition>using vt::messaging::ActiveMessenger::ListenerType =  std::unique_ptr&lt;Listener&gt;</definition>
        <argsstring></argsstring>
        <name>ListenerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="213" column="1" bodyfile="src/vt/messaging/active.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a62cdeb842610617f316e6b20c19c5031" prot="public" static="no">
        <type><ref refid="structvt_1_1arguments_1_1_arg_config" kindref="compound">vt::arguments::ArgConfig</ref></type>
        <definition>using vt::messaging::ActiveMessenger::ArgType =  vt::arguments::ArgConfig</definition>
        <argsstring></argsstring>
        <name>ArgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="214" column="1" bodyfile="src/vt/messaging/active.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_active_messenger_1a447c6c0b3387142fd14b26c12e3ed877" prot="private" static="no">
        <type>typename EpochStackType::size_type</type>
        <definition>using vt::messaging::ActiveMessenger::EpochStackSizeType =  typename EpochStackType::size_type</definition>
        <argsstring></argsstring>
        <name>EpochStackSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1515" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1515" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a44428f493f635833b6b8da6a6dfcf08f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::messaging::ActiveMessenger::this_node_</definition>
        <argsstring></argsstring>
        <name>this_node_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1523" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a6e03effc6a6e98384d4488826be55e14" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::current_handler_context_</definition>
        <argsstring></argsstring>
        <name>current_handler_context_</name>
        <initializer>= uninitialized_handler</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1531" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a416bc461f669e4715b30e3f30064aa42" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::messaging::ActiveMessenger::current_node_context_</definition>
        <argsstring></argsstring>
        <name>current_node_context_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1532" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aed6bd1780915417e6f4c186a6573edac" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::current_epoch_context_</definition>
        <argsstring></argsstring>
        <name>current_epoch_context_</name>
        <initializer>= no_epoch</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1533" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a86110eccb05721da80482354f930d40a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>PriorityType vt::messaging::ActiveMessenger::current_priority_context_</definition>
        <argsstring></argsstring>
        <name>current_priority_context_</name>
        <initializer>= no_priority</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1534" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a6be14073d0706e2e410a7ed87aa84acd" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
        <definition>PriorityLevelType vt::messaging::ActiveMessenger::current_priority_level_context_</definition>
        <argsstring></argsstring>
        <name>current_priority_level_context_</name>
        <initializer>= no_priority_level</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1535" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a2db0ef8babe408d23a62518bd0ff180b" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a745d5e8cad8c2f67d20479afacc6e134" kindref="member">MaybeReadyType</ref></type>
        <definition>MaybeReadyType vt::messaging::ActiveMessenger::maybe_ready_tag_han_</definition>
        <argsstring></argsstring>
        <name>maybe_ready_tag_han_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1536" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aae19c8a01b0c483f20d58bd9114cac0e" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a1c52f4ec0c93821191cb3e69dc7c8604" kindref="member">ContWaitType</ref></type>
        <definition>ContWaitType vt::messaging::ActiveMessenger::pending_handler_msgs_</definition>
        <argsstring></argsstring>
        <name>pending_handler_msgs_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1537" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a77b9f9e025e09d85ba39262e523599b8" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a388e97eeb72592e57551e045b43bcfde" kindref="member">ContainerPendingType</ref></type>
        <definition>ContainerPendingType vt::messaging::ActiveMessenger::pending_recvs_</definition>
        <argsstring></argsstring>
        <name>pending_recvs_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1538" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a9a85ff32f58ff99db2c89da92e9c8443" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
        <definition>TagType vt::messaging::ActiveMessenger::cur_direct_buffer_tag_</definition>
        <argsstring></argsstring>
        <name>cur_direct_buffer_tag_</name>
        <initializer>= starting_direct_buffer_tag</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1539" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a477f7599bd71cba2865e49f3610e6025" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a746358029c37dabf2b4c8ad26642aee9" kindref="member">EpochStackType</ref></type>
        <definition>EpochStackType vt::messaging::ActiveMessenger::epoch_stack_</definition>
        <argsstring></argsstring>
        <name>epoch_stack_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1540" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1a52779f8ed30e23442a802e42c3462a0b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1messaging_1_1_active_messenger_1a63878fd4ef1fbc505bd1313d32049ca9" kindref="member">ListenerType</ref> &gt;</type>
        <definition>std::vector&lt;ListenerType&gt; vt::messaging::ActiveMessenger::send_listen_</definition>
        <argsstring></argsstring>
        <name>send_listen_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1541" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aaa384d58565da05b8b3ac60c5ee68ee0" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_i_recv_holder" kindref="compound">IRecvHolder</ref>&lt; <ref refid="structvt_1_1messaging_1_1_in_progress_i_recv" kindref="compound">InProgressIRecv</ref> &gt;</type>
        <definition>IRecvHolder&lt;InProgressIRecv&gt; vt::messaging::ActiveMessenger::in_progress_active_msg_irecv</definition>
        <argsstring></argsstring>
        <name>in_progress_active_msg_irecv</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1542" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_active_messenger_1aabf031983b435e4cf20d16dd561f179d" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_i_recv_holder" kindref="compound">IRecvHolder</ref>&lt; <ref refid="structvt_1_1messaging_1_1_in_progress_data_i_recv" kindref="compound">InProgressDataIRecv</ref> &gt;</type>
        <definition>IRecvHolder&lt;InProgressDataIRecv&gt; vt::messaging::ActiveMessenger::in_progress_data_irecv</definition>
        <argsstring></argsstring>
        <name>in_progress_data_irecv</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1543" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1543" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ab6b4f326bf77ec032d8ba86d51899c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::ActiveMessenger::ActiveMessenger</definition>
        <argsstring>()</argsstring>
        <name>ActiveMessenger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="219" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="58" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a10ef2a3dae9bcaddaa1f80903274e7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::messaging::ActiveMessenger::~ActiveMessenger</definition>
        <argsstring>()</argsstring>
        <name>~ActiveMessenger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="224" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="74" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0a6c5aae1de5530037bc4112e8f39f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsTermMessage</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>markAsTermMessage</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="237" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="62" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae813b0555258b09de8fa324ed98dcd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsLocationMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsLocationMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a location message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a location message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="245" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae4f8d48cda11b13d4447ab253ff18bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsSerialMsgMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsSerialMsgMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a serialization control message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a serialization control message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="253" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="81" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0587ea992b0f1b06da38d52a3851aae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::markAsCollectionMessage</definition>
        <argsstring>(MsgPtrT const msg)</argsstring>
        <name>markAsCollectionMessage</name>
        <param>
          <type>MsgPtrT const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Mark a message as a collection message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to mark as a collection message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="261" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a5fc9cb79e5cbef41007d847964c17113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::setEpochMessage</definition>
        <argsstring>(MsgT *msg, EpochType epoch)</argsstring>
        <name>setEpochMessage</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="271" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ab6d3637cb3c416b3491b748aaf4bab48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::setTagMessage</definition>
        <argsstring>(MsgT *msg, TagType tag)</argsstring>
        <name>setTagMessage</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="281" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a9150be86c098ac678657ed3b34b3b1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">ActiveMessenger::PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgCopyableImpl</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MessageT &gt; &amp;msg, ByteType msg_size, TagType tag)</argsstring>
        <name>sendMsgCopyableImpl</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MessageT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="284" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="156" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1ga2476af8744705ddb66f92f616bfc5bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgSz</definition>
        <argsstring>(NodeType dest, HandlerType han, MessageT *msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>sendMsgSz</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para>Only invoke this variant if you know the size or the <computeroutput>sizeof(Message)</computeroutput> is different than the number of bytes you actually want to send</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="475" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1gaebfcd932babb3be0ea8d481f655a2835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, HandlerType han, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="494" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="214" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1ga16e324b8bb564227e5b396c4a10ec4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>handler to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send (shared ptr) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="512" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group__preregister_1ga0bae3a37f8fe6be59bac4e8e4b35aaba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, HandlerType han, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a pre-registered handler. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>sendMessage</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="532" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="237" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1gae119eb9b2ac7f1374c53ea957d7e4e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgSz</definition>
        <argsstring>(MessageT *msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgSz</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with an explicit size. </para>        </briefdescription>
        <detaileddescription>
<para>Use this variant to broadcast a message when <computeroutput>sizeof(Message)</computeroutput> != the actual size you want to send (e.g., extra bytes on the end)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="586" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="248" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga4a7106231ba8a26a1214a6f133e381eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="601" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="261" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1gac6f823984e34114fc7b85f69395d2cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the sent message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="616" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="273" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga60d1e728bd80623cb4c5093aa4114654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgSz</definition>
        <argsstring>(NodeType dest, MessageT *msg, ByteType msg_size, TagType tag=no_tag)</argsstring>
        <name>sendMsgSz</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with explicit size. </para>        </briefdescription>
        <detaileddescription>
<para>Invoke this send variant if you know the size or the <computeroutput>sizeof(Message)</computeroutput> is different than the number of bytes you actually want to send (e.g., extra bytes on the end of the message)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="637" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="284" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1ga8d7ac047c1a1c84766d976a189e937e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <bold>broadcastMsg</bold> instead.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="655" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="307" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="group__typesafehan_1gaa14d019beb87eda73c7bcb1e15823f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <bold>sendMsg</bold> instead.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="672" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="296" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="group__basicsend_1gaadd12687ecb3f0e9be2ce62224568d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacevt_1a546925d221208866b866b2edf8f24d04" kindref="member">ActiveFnType</ref> *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__basicsend_1ga9a7d3d70ca04c51781771661fa5d3795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacevt_1a546925d221208866b866b2edf8f24d04" kindref="member">ActiveFnType</ref> *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1gaadd12687ecb3f0e9be2ce62224568d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga57f702de3ea781d655728a6cbeae9895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>broadcastMsg</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga9a7d3d70ca04c51781771661fa5d3795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga751cb62d16dff408b281306733f2419d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType dest, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>sendMsg</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="855" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga90a75f1f1bbff156dca7a2237eec1800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(HandlerType han, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="919" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="429" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga115fefe8db464acf9c2da0fe6469cb86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(HandlerType han, MsgSharedPtr&lt; MsgT &gt; &amp;msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="935" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="418" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga946e8ef3e8e2430b70ff09dd555bc837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, HandlerType han, MessageT *msg, UserSendFnType send_payload_fn)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" kindref="member">UserSendFnType</ref></type>
          <declname>send_payload_fn</declname>
        </param>
        <briefdescription>
<para>Send a message with a special payload function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_payload_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="952" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="388" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga3685dbcba2c7fcd75fdfd10b613684ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MessageT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MessageT *msg, UserSendFnType send_payload_fn)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" kindref="member">UserSendFnType</ref></type>
          <declname>send_payload_fn</declname>
        </param>
        <briefdescription>
<para>Send a message with a special payload function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">send_payload_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="969" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="408" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="group__sendpayload_1ga594e99da7cb1a02587b21646679b2936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" kindref="member">PendingSendType</ref></type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(HandlerType han, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>han</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>broadcastMsg</computeroutput> instead.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">han</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to invoke </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="987" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="441" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a9799bd2681540170faa04b424d3c849e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::packMsg</definition>
        <argsstring>(MessageType *msg, MsgSizeType size, void *ptr, MsgSizeType ptr_bytes)</argsstring>
        <name>packMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" kindref="member">MessageType</ref> *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>ptr_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1015" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="89" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac4385fea0c9cc860b5af24fea2f89a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" kindref="member">SendDataRetType</ref></type>
        <definition>ActiveMessenger::SendDataRetType vt::messaging::ActiveMessenger::sendData</definition>
        <argsstring>(RDMA_GetType const &amp;ptr, NodeType const &amp;dest, TagType const &amp;tag)</argsstring>
        <name>sendData</name>
        <param>
          <type><ref refid="namespacevt_1a1cab7f4860f65a49ad2c042d6240f288" kindref="member">RDMA_GetType</ref> const &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1029" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="317" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac4d614d118396fa51ba7f2634e2653fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsgPriority</definition>
        <argsstring>(PriorityType priority, TagType const &amp;tag, NodeType const &amp;node, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsgPriority</name>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1044" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="378" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a33b2e3e047d0b1f6eb1398691f075b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsg</definition>
        <argsstring>(TagType const &amp;tag, NodeType const &amp;node, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1059" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="385" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a3ef2c45eb57382a2d76079ca8da9d527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsg</definition>
        <argsstring>(PriorityType priority, TagType const &amp;tag, NodeType const &amp;recv_node, bool const &amp;enqueue, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsg</name>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>recv_node</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>enqueue</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1076" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="549" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a9d62cd073f5b7dc1861dd1fa7b80ca01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsgBuffer</definition>
        <argsstring>(void *const user_buf, PriorityType priority, TagType const &amp;tag, NodeType const &amp;node=uninitialized_destination, bool const &amp;enqueue=true, ActionType dealloc_user_buf=nullptr, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsgBuffer</name>
        <param>
          <type>void *const</type>
          <declname>user_buf</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>enqueue</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>dealloc_user_buf</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1095" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="423" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0e2271b6c52382bf2338f35f539225eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::recvDataMsgBuffer</definition>
        <argsstring>(void *const user_buf, TagType const &amp;tag, NodeType const &amp;node=uninitialized_destination, bool const &amp;enqueue=true, ActionType dealloc_user_buf=nullptr, RDMA_ContinuationDeleteType next=nullptr)</argsstring>
        <name>recvDataMsgBuffer</name>
        <param>
          <type>void *const</type>
          <declname>user_buf</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
          <defval>uninitialized_destination</defval>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>enqueue</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>dealloc_user_buf</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a4dfad0b5809d9812d60a0311a45ae0c2" kindref="member">RDMA_ContinuationDeleteType</ref></type>
          <declname>next</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1115" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="415" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1aa1d3d725885993caa7836f1f5294710a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::messaging::ActiveMessenger::doMessageSend</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; &amp;msg, MsgSizeType msg_size)</argsstring>
        <name>doMessageSend</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>msg_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1132" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="250" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a65ec9bc6f62213cac6320ea76cdd4d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::tryProcessIncomingActiveMsg</definition>
        <argsstring>()</argsstring>
        <name>tryProcessIncomingActiveMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1142" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="728" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1af4dafc0786bb0515293356e78035a71e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::tryProcessDataMsgRecv</definition>
        <argsstring>()</argsstring>
        <name>tryProcessDataMsgRecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1150" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="391" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae7cac91699945ad8bf3f36d07628116e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::progress</definition>
        <argsstring>()</argsstring>
        <name>progress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1158" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="860" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a018435c71415f6f10dc578230397a85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::registerNewHandler</definition>
        <argsstring>(ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>registerNewHandler</name>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1169" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="881" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a7292f6b76137fd12553d50a87aea296b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::swapHandlerFn</definition>
        <argsstring>(HandlerType const &amp;han, ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>swapHandlerFn</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1181" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="893" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a6db8001e33580d18a5de9628b70d7033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::unregisterHandlerFn</definition>
        <argsstring>(HandlerType const &amp;han, TagType const &amp;tag=no_tag)</argsstring>
        <name>unregisterHandlerFn</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1192" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="951" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a8b3f13a6dd4878eb7d12a45933d55769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::registerHandlerFn</definition>
        <argsstring>(HandlerType const &amp;han, ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>registerHandlerFn</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1202" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="936" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a7e693e4b292e45fc1ed0dc8c9e2c03ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::collectiveRegisterHandler</definition>
        <argsstring>(ActiveClosureFnType fn, TagType const &amp;tag=no_tag)</argsstring>
        <name>collectiveRegisterHandler</name>
        <param>
          <type><ref refid="namespacevt_1a2a06c34cafcd511828f16cbf1476b924" kindref="member">ActiveClosureFnType</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1215" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="887" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a80753933950fa9619a5b675e5db291ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
        <definition>HandlerType vt::messaging::ActiveMessenger::getCurrentHandler</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1225" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="962" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a433c49a43b304429aa2e046733dc8fde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::messaging::ActiveMessenger::getFromNodeCurrentHandler</definition>
        <argsstring>() const</argsstring>
        <name>getFromNodeCurrentHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1239" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="558" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a5910d45e103a4c0e9c3a69084a58caac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getCurrentEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1247" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="966" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a170f37d23b8cad11dac0de0dec556ef6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a86bff9f556eb761b27fc8600d006ac04" kindref="member">PriorityType</ref></type>
        <definition>PriorityType vt::messaging::ActiveMessenger::getCurrentPriority</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentPriority</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1265" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="970" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1abfa87fe46bbb97786ba2dcd923da8c39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a53e07fdb3351b0f263e0dfd51b968d5e" kindref="member">PriorityLevelType</ref></type>
        <definition>PriorityLevelType vt::messaging::ActiveMessenger::getCurrentPriorityLevel</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentPriorityLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1273" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="974" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a5eaa416933b275ead18538fb64f2c484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::scheduleActiveMsg</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const &amp;sender, MsgSizeType const &amp;size, bool insert)</argsstring>
        <name>scheduleActiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1284" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="562" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a17a17df828b8b8fb4b4df12509ce51ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::processActiveMsg</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const &amp;sender, MsgSizeType const &amp;size, bool insert)</argsstring>
        <name>processActiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1304" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="577" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a9280f5b21fe3d311171b865e7e1929cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::deliverActiveMsg</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const &amp;from_node, bool insert)</argsstring>
        <name>deliverActiveMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>from_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>insert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1319" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="602" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0119aa4565a2268b55cd836b753c2afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::deliverPendingMsgsHandler</definition>
        <argsstring>(HandlerType const &amp;han, TagType const &amp;tag=no_tag)</argsstring>
        <name>deliverPendingMsgsHandler</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>han</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1331" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="908" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac9fcc6ef325258985074c699b0d783c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::processMaybeReadyHanTag</definition>
        <argsstring>()</argsstring>
        <name>processMaybeReadyHanTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1340" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="871" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ab3542048b6c0f380899643b031eb1731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::messaging::ActiveMessenger::sendMsgBytes</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, MsgSizeType const &amp;msg_size, TagType const &amp;send_tag)</argsstring>
        <name>sendMsgBytes</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>send_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1353" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="175" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a46c03a8a4da878972eda8db2d3f1cc1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::messaging::ActiveMessenger::sendMsgBytesWithPut</definition>
        <argsstring>(NodeType const &amp;dest, MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, MsgSizeType const &amp;msg_size, TagType const &amp;send_tag)</argsstring>
        <name>sendMsgBytesWithPut</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref> const &amp;</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref> const &amp;</type>
          <declname>send_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1369" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="102" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1aa17a3e718783d3aa08cd61d81abeb6a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::setGlobalEpoch</definition>
        <argsstring>(EpochType const &amp;epoch=no_epoch)</argsstring>
        <name>setGlobalEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
          <defval>no_epoch</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1383" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="497" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1abb892a84a906954d8769794ccfb0c638" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getGlobalEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getGlobalEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1394" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ac60a61b85392a5c40d2334919981963a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::pushEpoch</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>pushEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1406" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="523" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a0ff3c2d9bf6ccd66002679b93821229c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::popEpoch</definition>
        <argsstring>(EpochType const &amp;epoch=no_epoch)</argsstring>
        <name>popEpoch</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
          <defval>no_epoch</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1422" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="540" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a627a8b2918ad283edf386038cf5693ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getEpoch</definition>
        <argsstring>() const</argsstring>
        <name>getEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1430" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="561" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1aa60710a2d4a1ac7fe60113fd8cbb9809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getEpochContextMsg</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>getEpochContextMsg</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1442" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="566" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a66c64223357aa92f45a4a4042bd63a5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::getEpochContextMsg</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; const &amp;msg)</argsstring>
        <name>getEpochContextMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1454" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="592" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a7b5a8fc73617491423bf68c4fbe1e2a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::setupEpochMsg</definition>
        <argsstring>(MsgT *msg)</argsstring>
        <name>setupEpochMsg</name>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1470" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="599" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ad7402f346c73b2a50ae1feb71140d891" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::ActiveMessenger::setupEpochMsg</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; const &amp;msg)</argsstring>
        <name>setupEpochMsg</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1481" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="614" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a3083324696bb4f6e55164da2cb00a1c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::addSendListener</definition>
        <argsstring>(std::unique_ptr&lt; L &gt; ptr)</argsstring>
        <name>addSendListener</name>
        <param>
          <type>std::unique_ptr&lt; L &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1490" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1490" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1af7bcc5ce345c1138a67b6f80abb56705" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::clearListeners</definition>
        <argsstring>()</argsstring>
        <name>clearListeners</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1498" column="1" bodyfile="src/vt/messaging/active.h" bodystart="1498" bodyend="1500"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a527858e860bb7b373489ae425fd3fdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgPtrT</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">trace::TraceEventIDType</ref></type>
        <definition>trace::TraceEventIDType vt::messaging::ActiveMessenger::makeTraceCreationSend</definition>
        <argsstring>(MsgPtrT msg, HandlerType const handler, auto_registry::RegistryTypeEnum type, MsgSizeType msg_size, bool is_bcast)</argsstring>
        <name>makeTraceCreationSend</name>
        <param>
          <type>MsgPtrT</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1auto__registry_1a9f369ca2b484130b396729e2ddf05241" kindref="member">auto_registry::RegistryTypeEnum</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1abfa009d900299ac1df967b40ea8f2c8a" kindref="member">MsgSizeType</ref></type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_bcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1503" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="95" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a12133fda914a7809ac7ce7694efc312e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::testPendingActiveMsgAsyncRecv</definition>
        <argsstring>()</argsstring>
        <name>testPendingActiveMsgAsyncRecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1509" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="844" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1ae8e94c46cd2948864a97a671428b64bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::ActiveMessenger::testPendingDataMsgAsyncRecv</definition>
        <argsstring>()</argsstring>
        <name>testPendingDataMsgAsyncRecv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1510" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="852" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a162667e5566546402f12baf8cf60d4da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::finishPendingActiveMsgAsyncRecv</definition>
        <argsstring>(InProgressIRecv *irecv)</argsstring>
        <name>finishPendingActiveMsgAsyncRecv</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_in_progress_i_recv" kindref="compound">InProgressIRecv</ref> *</type>
          <declname>irecv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1511" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="784" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a80a13017308870133ff8538741bee394" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::finishPendingDataMsgAsyncRecv</definition>
        <argsstring>(InProgressDataIRecv *irecv)</argsstring>
        <name>finishPendingDataMsgAsyncRecv</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_in_progress_data_i_recv" kindref="compound">InProgressDataIRecv</ref> *</type>
          <declname>irecv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1512" column="1" bodyfile="src/vt/messaging/active.cc" bodystart="508" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a8209c23bddf111089f4fd64d7cd2f67e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>EpochStackSizeType</type>
        <definition>ActiveMessenger::EpochStackSizeType vt::messaging::ActiveMessenger::epochPreludeHandler</definition>
        <argsstring>(EpochType const &amp;epoch)</argsstring>
        <name>epochPreludeHandler</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1517" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="453" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_active_messenger_1a6418078d6eba01bfd36e46d54c076713" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::ActiveMessenger::epochEpilogHandler</definition>
        <argsstring>(EpochType const &amp;epoch, EpochStackSizeType const &amp;prev_stack_size)</argsstring>
        <name>epochEpilogHandler</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref> const &amp;</type>
          <declname>epoch</declname>
        </param>
        <param>
          <type>EpochStackSizeType const &amp;</type>
          <declname>prev_stack_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="1518" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="465" bodyend="495"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core component of VT used to send messages. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="structvt_1_1messaging_1_1_active_messenger" kindref="compound">ActiveMessenger</ref> is a core VT component that provides the ability to send messages <computeroutput>Message</computeroutput> to registered handlers. It manages the incoming and outgoing messages using MPI to communicate <computeroutput>MPI_Irecv</computeroutput> and <computeroutput>MPI_Isend</computeroutput> </para><para>There are various ways to send messages:<itemizedlist>
<listitem><para><ref refid="group__typesafehan" kindref="compound">Send Message Active Function (type-safe handler)</ref></para></listitem><listitem><para><ref refid="group__preregister" kindref="compound">Basic Active Message Send with Pre-Registered Handler</ref></para></listitem><listitem><para><ref refid="group__basicsend" kindref="compound">Send Message BASIC Active Function</ref></para></listitem><listitem><para><ref refid="group__functorsend" kindref="compound">Send Message to Functor Variants</ref></para></listitem><listitem><para><ref refid="group__sendpayload" kindref="compound">Send Data Message with data payload</ref> </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="src/vt/messaging/active.h" line="194" column="1" bodyfile="src/vt/messaging/active.h" bodystart="194" bodyend="1544"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ab6b4f326bf77ec032d8ba86d51899c60" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ActiveMessenger</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3083324696bb4f6e55164da2cb00a1c6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>addSendListener</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a62cdeb842610617f316e6b20c19c5031" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ArgType</name></member>
      <member refid="group__typesafehan_1ga4a7106231ba8a26a1214a6f133e381eb" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__basicsend_1gaadd12687ecb3f0e9be2ce62224568d77" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__functorsend_1gaadd12687ecb3f0e9be2ce62224568d77" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__sendpayload_1ga90a75f1f1bbff156dca7a2237eec1800" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__sendpayload_1ga115fefe8db464acf9c2da0fe6469cb86" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsg</name></member>
      <member refid="group__typesafehan_1ga8d7ac047c1a1c84766d976a189e937e3" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgAuto</name></member>
      <member refid="group__functorsend_1ga57f702de3ea781d655728a6cbeae9895" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgAuto</name></member>
      <member refid="group__sendpayload_1ga594e99da7cb1a02587b21646679b2936" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgAuto</name></member>
      <member refid="group__typesafehan_1gae119eb9b2ac7f1374c53ea957d7e4e2a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>broadcastMsgSz</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a80a9cbda399d7bf035bfcecc761f4b02" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>BufferedMsgType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1af7bcc5ce345c1138a67b6f80abb56705" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>clearListeners</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a7e693e4b292e45fc1ed0dc8c9e2c03ec" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>collectiveRegisterHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a388e97eeb72592e57551e045b43bcfde" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ContainerPendingType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a1c52f4ec0c93821191cb3e69dc7c8604" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ContWaitType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa69cbede6a9fbc4d727bfb38d5546600" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>CountType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9a85ff32f58ff99db2c89da92e9c8443" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>cur_direct_buffer_tag_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aed6bd1780915417e6f4c186a6573edac" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_epoch_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6e03effc6a6e98384d4488826be55e14" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_handler_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a416bc461f669e4715b30e3f30064aa42" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_node_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a86110eccb05721da80482354f930d40a" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_priority_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6be14073d0706e2e410a7ed87aa84acd" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>current_priority_level_context_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9280f5b21fe3d311171b865e7e1929cf" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>deliverActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0119aa4565a2268b55cd836b753c2afd" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>deliverPendingMsgsHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa1d3d725885993caa7836f1f5294710a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>doMessageSend</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a477f7599bd71cba2865e49f3610e6025" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>epoch_stack_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6418078d6eba01bfd36e46d54c076713" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>epochEpilogHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a8209c23bddf111089f4fd64d7cd2f67e" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>epochPreludeHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a447c6c0b3387142fd14b26c12e3ed877" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>EpochStackSizeType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a746358029c37dabf2b4c8ad26642aee9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>EpochStackType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aed736a2b2eaa0f96971a4f0be3fe0a25" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>EventRecordType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a162667e5566546402f12baf8cf60d4da" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>finishPendingActiveMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a80a13017308870133ff8538741bee394" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>finishPendingDataMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a5910d45e103a4c0e9c3a69084a58caac" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a80753933950fa9619a5b675e5db291ad" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a170f37d23b8cad11dac0de0dec556ef6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentPriority</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1abfa87fe46bbb97786ba2dcd923da8c39" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getCurrentPriorityLevel</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a627a8b2918ad283edf386038cf5693ca" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa60710a2d4a1ac7fe60113fd8cbb9809" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getEpochContextMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a66c64223357aa92f45a4a4042bd63a5f" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getEpochContextMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a433c49a43b304429aa2e046733dc8fde" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getFromNodeCurrentHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1abb892a84a906954d8769794ccfb0c638" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>getGlobalEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac7e9165df6550ea333f8eb018a5a0e60" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>HandlerManagerType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aaa384d58565da05b8b3ac60c5ee68ee0" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>in_progress_active_msg_irecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aabf031983b435e4cf20d16dd561f179d" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>in_progress_data_irecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a63878fd4ef1fbc505bd1313d32049ca9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ListenerType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a527858e860bb7b373489ae425fd3fdcc" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>makeTraceCreationSend</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0587ea992b0f1b06da38d52a3851aae5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsCollectionMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae813b0555258b09de8fa324ed98dcd02" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsLocationMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae4f8d48cda11b13d4447ab253ff18bf2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsSerialMsgMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0a6c5aae1de5530037bc4112e8f39f2a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>markAsTermMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a2db0ef8babe408d23a62518bd0ff180b" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>maybe_ready_tag_han_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a745d5e8cad8c2f67d20479afacc6e134" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>MaybeReadyType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a720a2b1e7462d414b2a51d9fe005eca9" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>MessageType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a18bbfbf9ecd82b33f6fc475b2e5290a5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>MsgContType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9799bd2681540170faa04b424d3c849e" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>packMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aae19c8a01b0c483f20d58bd9114cac0e" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pending_handler_msgs_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a77b9f9e025e09d85ba39262e523599b8" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pending_recvs_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1add1d7ab7bf168d53dfe7b93f29f64f02" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>PendingRecvType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3626a6ca76d8ad4ec7c3b47a2c70d3a8" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>PendingSendType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0ff3c2d9bf6ccd66002679b93821229c" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>popEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a17a17df828b8b8fb4b4df12509ce51ce" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>processActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac9fcc6ef325258985074c699b0d783c6" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>processMaybeReadyHanTag</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae7cac91699945ad8bf3f36d07628116e" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>progress</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac60a61b85392a5c40d2334919981963a" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>pushEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a98bb74aa4a561161dd7c7073dcd5f1d3" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>ReadyHanTagType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a33b2e3e047d0b1f6eb1398691f075b31" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a3ef2c45eb57382a2d76079ca8da9d527" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9d62cd073f5b7dc1861dd1fa7b80ca01" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsgBuffer</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a0e2271b6c52382bf2338f35f539225eb" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsgBuffer</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac4d614d118396fa51ba7f2634e2653fa" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>recvDataMsgPriority</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a8b3f13a6dd4878eb7d12a45933d55769" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerHandlerFn</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a018435c71415f6f10dc578230397a85c" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>registerNewHandler</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a5eaa416933b275ead18538fb64f2c484" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>scheduleActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a52779f8ed30e23442a802e42c3462a0b" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>send_listen_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ac4385fea0c9cc860b5af24fea2f89a1d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendData</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a839987e944b6b9c681bc56efbea1f220" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>SendDataRetType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9821bc2d924729107f08fadf5a217537" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>SendFnType</name></member>
      <member refid="group__preregister_1gaebfcd932babb3be0ea8d481f655a2835" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__preregister_1ga16e324b8bb564227e5b396c4a10ec4bd" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__typesafehan_1gac6f823984e34114fc7b85f69395d2cd2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__basicsend_1ga9a7d3d70ca04c51781771661fa5d3795" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__functorsend_1ga9a7d3d70ca04c51781771661fa5d3795" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__sendpayload_1ga946e8ef3e8e2430b70ff09dd555bc837" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__sendpayload_1ga3685dbcba2c7fcd75fdfd10b613684ad" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsg</name></member>
      <member refid="group__preregister_1ga0bae3a37f8fe6be59bac4e8e4b35aaba" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgAuto</name></member>
      <member refid="group__typesafehan_1gaa14d019beb87eda73c7bcb1e15823f61" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgAuto</name></member>
      <member refid="group__functorsend_1ga751cb62d16dff408b281306733f2419d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgAuto</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ab3542048b6c0f380899643b031eb1731" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgBytes</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a46c03a8a4da878972eda8db2d3f1cc1d" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgBytesWithPut</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a9150be86c098ac678657ed3b34b3b1fb" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgCopyableImpl</name></member>
      <member refid="group__preregister_1ga2476af8744705ddb66f92f616bfc5bb0" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgSz</name></member>
      <member refid="group__typesafehan_1ga60d1e728bd80623cb4c5093aa4114654" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>sendMsgSz</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a5fc9cb79e5cbef41007d847964c17113" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setEpochMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1aa17a3e718783d3aa08cd61d81abeb6a5" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setGlobalEpoch</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ab6d3637cb3c416b3491b748aaf4bab48" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setTagMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a7b5a8fc73617491423bf68c4fbe1e2a2" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setupEpochMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ad7402f346c73b2a50ae1feb71140d891" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>setupEpochMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a7292f6b76137fd12553d50a87aea296b" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>swapHandlerFn</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a12133fda914a7809ac7ce7694efc312e" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>testPendingActiveMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1ae8e94c46cd2948864a97a671428b64bc" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>testPendingDataMsgAsyncRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a44428f493f635833b6b8da6a6dfcf08f" prot="private" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>this_node_</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1af4dafc0786bb0515293356e78035a71e" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>tryProcessDataMsgRecv</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a65ec9bc6f62213cac6320ea76cdd4d47" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>tryProcessIncomingActiveMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a6db8001e33580d18a5de9628b70d7033" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>unregisterHandlerFn</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a4b1993ad77436b6ed6c7fd32801c50ed" prot="public" virt="non-virtual"><scope>vt::messaging::ActiveMessenger</scope><name>UserSendFnType</name></member>
      <member refid="structvt_1_1messaging_1_1_active_messenger_1a10ef2a3dae9bcaddaa1f80903274e7b3" prot="public" virt="virtual"><scope>vt::messaging::ActiveMessenger</scope><name>~ActiveMessenger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
