<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</compoundname>
    <basecompoundref refid="structvt_1_1util_1_1adt_1_1_union_base" prot="public" virt="non-virtual">vt::util::adt::UnionBase&lt; T, Ts... &gt;</basecompoundref>
    <includes refid="union_8h" local="no">union.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a0f3007f8555c38fa8f73ad4b99896b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionDestroy</definition>
        <argsstring>()=default</argsstring>
        <name>UnionDestroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a081c5ab9e9d8edbb8191efb1c5d45f38" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionDestroy</definition>
        <argsstring>(uint8_t in_which)</argsstring>
        <name>UnionDestroy</name>
        <param>
          <type>uint8_t</type>
          <declname>in_which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="424" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="424" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1ae29f61c7a4b821e0e451abe253a8a367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset the union, calling the appropriate destructor if one variant is active. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="432" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="432" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a699eec83059ebb0e747ac7549e2aaf29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::deallocateAs</definition>
        <argsstring>()</argsstring>
        <name>deallocateAs</name>
        <briefdescription>
<para>Deallocate as a certain type <computeroutput>U</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="443" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a63ff918204bcd7a80361d617ead98c24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::~UnionDestroy</definition>
        <argsstring>()</argsstring>
        <name>~UnionDestroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="452" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="452" bodyend="452"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3957">
        <label>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277"/>
        <childnode refid="3958" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3958">
        <label>vt::util::adt::UnionBase&lt; T, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3959">
        <label>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277"/>
        <childnode refid="3960" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3960">
        <label>vt::util::adt::UnionBase&lt; T, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_base"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/adt/union.h" line="421" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="417" bodyend="453"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1a3badf6a022a698dc00937b3df621caf8" prot="protected" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>data_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a699eec83059ebb0e747ac7549e2aaf29" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>deallocateAs</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1af84a8a5eb01bc6f1ff29bab969177a83" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>getUnsafeRawBytes</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1ae29f61c7a4b821e0e451abe253a8a367" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>reset</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1a416f7532da93b43567cf3782913c2fa0" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionBase</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1aa8b965b0431e03984db9000bb7b4cbf9" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionBase</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a0f3007f8555c38fa8f73ad4b99896b31" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionDestroy</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a081c5ab9e9d8edbb8191efb1c5d45f38" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionDestroy</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1ae46ed3323e83507ef0b47ad82db493d0" prot="protected" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>which_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01not_0117947c5b8b44b7d9f4a4df27d8795277_1a63ff918204bcd7a80361d617ead98c24" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; not detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>~UnionDestroy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
