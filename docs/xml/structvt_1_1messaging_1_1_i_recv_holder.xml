<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_i_recv_holder" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::IRecvHolder</compoundname>
    <includes refid="irecv__holder_8h" local="no">irecv_holder.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_i_recv_holder_1ad906203e102f9180b56d66393bd47c55" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; vt::messaging::IRecvHolder&lt; T &gt;::holder_</definition>
        <argsstring></argsstring>
        <name>holder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/irecv_holder.h" line="158" column="1" bodyfile="src/vt/messaging/irecv_holder.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_i_recv_holder_1a709a349d723247b10bf57ca2831bfe19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::IRecvHolder&lt; T &gt;::IRecvHolder</definition>
        <argsstring>()=default</argsstring>
        <name>IRecvHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/irecv_holder.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_i_recv_holder_1ab81d251a84cb2c8366eb5f5052ce002c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::IRecvHolder&lt; T &gt;::emplace</definition>
        <argsstring>(U &amp;&amp;u)</argsstring>
        <name>emplace</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Insert a new element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/irecv_holder.h" line="86" column="1" bodyfile="src/vt/messaging/irecv_holder.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_i_recv_holder_1ac1314360b79a5deb3a79b970158e83aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::messaging::IRecvHolder&lt; T &gt;::testAll</definition>
        <argsstring>(Callable c, int &amp;num_mpi_tests)</argsstring>
        <name>testAll</name>
        <param>
          <type>Callable</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>num_mpi_tests</declname>
        </param>
        <briefdescription>
<para>MPI test all the element in the holder. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para>callable to run if the element <computeroutput>MPI_Test</computeroutput> succeeds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">num_mpi_tests</parametername>
</parameternamelist>
<parameterdescription>
<para>number of MPI tests that the holder performed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if progress is made </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/irecv_holder.h" line="99" column="1" bodyfile="src/vt/messaging/irecv_holder.h" bodystart="99" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_i_recv_holder_1a10cebd825dd5ff043368d0dfd3bc9064" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::IRecvHolder&lt; T &gt;::serialize</definition>
        <argsstring>(Serializer &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>Serializer &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/irecv_holder.h" line="150" column="1" bodyfile="src/vt/messaging/irecv_holder.h" bodystart="150" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Holds a set of pending MPI Irecvs to poll for completion. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/messaging/irecv_holder.h" line="70" column="1" bodyfile="src/vt/messaging/irecv_holder.h" bodystart="70" bodyend="163"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_i_recv_holder_1ab81d251a84cb2c8366eb5f5052ce002c" prot="public" virt="non-virtual"><scope>vt::messaging::IRecvHolder</scope><name>emplace</name></member>
      <member refid="structvt_1_1messaging_1_1_i_recv_holder_1ad906203e102f9180b56d66393bd47c55" prot="private" virt="non-virtual"><scope>vt::messaging::IRecvHolder</scope><name>holder_</name></member>
      <member refid="structvt_1_1messaging_1_1_i_recv_holder_1a709a349d723247b10bf57ca2831bfe19" prot="public" virt="non-virtual"><scope>vt::messaging::IRecvHolder</scope><name>IRecvHolder</name></member>
      <member refid="structvt_1_1messaging_1_1_i_recv_holder_1a10cebd825dd5ff043368d0dfd3bc9064" prot="public" virt="non-virtual"><scope>vt::messaging::IRecvHolder</scope><name>serialize</name></member>
      <member refid="structvt_1_1messaging_1_1_i_recv_holder_1ac1314360b79a5deb3a79b970158e83aa" prot="public" virt="non-virtual"><scope>vt::messaging::IRecvHolder</scope><name>testAll</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
