<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structcheckpoint_1_1_serializer_ref" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::SerializerRef</compoundname>
    <includes refid="serializer__ref_8h" local="no">serializer_ref.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>SerT</declname>
        <defname>SerT</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>UserTraits</declname>
        <defname>UserTraits</defname>
        <defval><ref refid="namespacecheckpoint_1a161f9794d8b7a5ee9b183f2ef8d1f7a4" kindref="member">UserTraitHolder</ref>&lt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_ref_1a5cf9e12aa42d38fb01455796684daa76" prot="public" static="no">
        <type>UserTraits</type>
        <definition>using checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::TraitHolder =  UserTraits</definition>
        <argsstring></argsstring>
        <name>TraitHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="59" column="3" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_ref_1a6ac113e9c5734f6a3f92e0bae651ed0d" prot="public" static="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">eSerializationMode</ref></type>
        <definition>using checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::ModeType =  eSerializationMode</definition>
        <argsstring></argsstring>
        <name>ModeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="74" column="3" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_ref_1a586a8f7309be221890f7d11e42d5a1db" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename SerT::template <ref refid="structcheckpoint_1_1_serializer_ref_1a586a8f7309be221890f7d11e42d5a1db" kindref="member">DispatcherType</ref>&lt; SerializerT, T &gt;</type>
        <definition>using checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::DispatcherType =  typename SerT::template DispatcherType&lt;SerializerT, T&gt;</definition>
        <argsstring></argsstring>
        <name>DispatcherType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="76" column="3" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_ref_1ac3669ebdb5fc92b2f15d1177e137fc0d" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1_serializer_ref" kindref="compound">SerializerRef</ref>&lt; SerT &gt;</type>
        <definition>using checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::TraitlessT =  SerializerRef&lt;SerT&gt;</definition>
        <argsstring></argsstring>
        <name>TraitlessT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="111" column="3" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_serializer_ref_1a816aa759f787302f92bcffe451996cd5" prot="protected" static="no" mutable="no">
        <type>SerT *const</type>
        <definition>SerT* const checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::impl</definition>
        <argsstring></argsstring>
        <name>impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="136" column="14" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structcheckpoint_1_1_serializer_ref_1a152cdffb306614ee1deaed7bc7350eb6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct SerializerRef</definition>
        <argsstring></argsstring>
        <name>SerializerRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="139" column="3" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1acbb6d055fc5d2285dd80ad01f66ae23f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::SerializerRef</definition>
        <argsstring>(SerT *m_impl, const UserTraits &amp;={})</argsstring>
        <name>SerializerRef</name>
        <param>
          <type>SerT *</type>
          <declname>m_impl</declname>
        </param>
        <param>
          <type>const UserTraits &amp;</type>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="62" column="12" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a57f1de22734b7b64c49e4c7bdabf96fc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherTraits</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::SerializerRef</definition>
        <argsstring>(const SerializerRef&lt; SerT, OtherTraits &gt; &amp;other)</argsstring>
        <name>SerializerRef</name>
        <param>
          <type>const <ref refid="structcheckpoint_1_1_serializer_ref" kindref="compound">SerializerRef</ref>&lt; SerT, OtherTraits &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="68" column="12" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a3450c70678b8ec046427ea9083cd5d7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::getMode</definition>
        <argsstring>() const</argsstring>
        <name>getMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="77" column="12" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a5031519c9bd08ac7206926637784fb1a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::isSizing</definition>
        <argsstring>() const</argsstring>
        <name>isSizing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="78" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1ab20b3bda663a5f38ea39791f28b84286" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::isPacking</definition>
        <argsstring>() const</argsstring>
        <name>isPacking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="79" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a4eef5778157d67b663fe7ead8175d6e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::isUnpacking</definition>
        <argsstring>() const</argsstring>
        <name>isUnpacking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="80" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1abbeadb78537c0b4d1204c0edc1b82aa2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::isFootprinting</definition>
        <argsstring>() const</argsstring>
        <name>isFootprinting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="81" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1ac455b31c143080581258785d9784ebe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::countBytes</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>countBytes</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="83" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a5f39732423a7611c55780acb79a7039e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::addBytes</definition>
        <argsstring>(std::size_t s)</argsstring>
        <name>addBytes</name>
        <param>
          <type>std::size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="84" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1ac0438fdd4fd41c491b080ba980b7ac8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::contiguousBytes</definition>
        <argsstring>(void *ptr, SerialSizeType size, SerialSizeType num_elms)</argsstring>
        <name>contiguousBytes</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="85" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a135504b6d208e4f088145c434f0ebf76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::usedBufferSize</definition>
        <argsstring>() const</argsstring>
        <name>usedBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="88" column="18" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1abe4671053d383cfcdddf322e37e6b726" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::contiguousTyped</definition>
        <argsstring>(SerializerT &amp;serdes, T *ptr, SerialSizeType num_elms)</argsstring>
        <name>contiguousTyped</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>serdes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="90" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a9a19c1a880acef9f88180fbfb1589f34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::skip</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>skip</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="94" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a388d1f308e0935301944bc107d2b4153" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::getBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="97" column="18" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a9a9b6faf39100a9321533c7a9117794a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::getSpotIncrement</definition>
        <argsstring>(const SerialSizeType inc)</argsstring>
        <name>getSpotIncrement</name>
        <param>
          <type>const <ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="98" column="18" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a0ccd882eed79f70b12eb28c108f08e92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::isVirtualDisabled</definition>
        <argsstring>() const</argsstring>
        <name>isVirtualDisabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="99" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1ae3b6bc9d8a64d684729c2a8baa0ae5d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::setVirtualDisabled</definition>
        <argsstring>(bool val)</argsstring>
        <name>setVirtualDisabled</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="100" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1aee4a09247eaddf02b0e8ed5b4157be45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SerT *</type>
        <definition>SerT* checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="103" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a661ca61d969af93e25584803f202b05a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherTraits</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::operator SerializerRef&lt; SerT, OtherTraits &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator SerializerRef&lt; SerT, OtherTraits &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="106" column="3" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a2839c70c2aec7d4675167d606d21d5d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Trait</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Traits</declname>
            <defname>Traits</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::withTraits</definition>
        <argsstring>(UserTraitHolder&lt; Trait, Traits... &gt;={})</argsstring>
        <name>withTraits</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a161f9794d8b7a5ee9b183f2ef8d1f7a4" kindref="member">UserTraitHolder</ref>&lt; Trait, Traits... &gt;</type>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="115" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1a4e42e2513d37b62c42d7f4bfdcc52d9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Trait</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Traits</declname>
            <defname>Traits</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::withoutTraits</definition>
        <argsstring>(UserTraitHolder&lt; Trait, Traits... &gt;={})</argsstring>
        <name>withoutTraits</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a161f9794d8b7a5ee9b183f2ef8d1f7a4" kindref="member">UserTraitHolder</ref>&lt; Trait, Traits... &gt;</type>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="122" column="8" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_ref_1ad0024e3a8b05cb3380ca9ec8785ad86a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>NewTraits</declname>
            <defname>NewTraits</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structcheckpoint_1_1_serializer_ref" kindref="compound">SerializerRef</ref>&lt; SerT, <ref refid="namespacecheckpoint_1a161f9794d8b7a5ee9b183f2ef8d1f7a4" kindref="member">UserTraitHolder</ref>&lt; NewTraits... &gt; &gt;</type>
        <definition>SerializerRef&lt;SerT, UserTraitHolder&lt;NewTraits...&gt; &gt; checkpoint::SerializerRef&lt; SerT, UserTraits &gt;::setTraits</definition>
        <argsstring>(const UserTraitHolder&lt; NewTraits... &gt; &amp;={})</argsstring>
        <name>setTraits</name>
        <param>
          <type>const <ref refid="namespacecheckpoint_1a161f9794d8b7a5ee9b183f2ef8d1f7a4" kindref="member">UserTraitHolder</ref>&lt; NewTraits... &gt; &amp;</type>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="129" column="17" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="129" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" line="58" column="20" bodyfile="lib/checkpoint/src/checkpoint/serializers/serializer_ref.h" bodystart="58" bodyend="140"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializer_ref_1a5f39732423a7611c55780acb79a7039e" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1ac0438fdd4fd41c491b080ba980b7ac8e" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>contiguousBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1abe4671053d383cfcdddf322e37e6b726" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1ac455b31c143080581258785d9784ebe7" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a586a8f7309be221890f7d11e42d5a1db" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a388d1f308e0935301944bc107d2b4153" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a3450c70678b8ec046427ea9083cd5d7b" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a9a9b6faf39100a9321533c7a9117794a" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a816aa759f787302f92bcffe451996cd5" prot="protected" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>impl</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1abbeadb78537c0b4d1204c0edc1b82aa2" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1ab20b3bda663a5f38ea39791f28b84286" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a5031519c9bd08ac7206926637784fb1a" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a4eef5778157d67b663fe7ead8175d6e9" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a0ccd882eed79f70b12eb28c108f08e92" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a6ac113e9c5734f6a3f92e0bae651ed0d" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a661ca61d969af93e25584803f202b05a" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>operator SerializerRef&lt; SerT, OtherTraits &gt;</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1aee4a09247eaddf02b0e8ed5b4157be45" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>operator-&gt;</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a152cdffb306614ee1deaed7bc7350eb6" prot="protected" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>SerializerRef</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1acbb6d055fc5d2285dd80ad01f66ae23f" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>SerializerRef</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a57f1de22734b7b64c49e4c7bdabf96fc" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>SerializerRef</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1ad0024e3a8b05cb3380ca9ec8785ad86a" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>setTraits</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1ae3b6bc9d8a64d684729c2a8baa0ae5d4" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a9a19c1a880acef9f88180fbfb1589f34" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>skip</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a5cf9e12aa42d38fb01455796684daa76" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>TraitHolder</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1ac3669ebdb5fc92b2f15d1177e137fc0d" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>TraitlessT</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a135504b6d208e4f088145c434f0ebf76" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a4e42e2513d37b62c42d7f4bfdcc52d9f" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>withoutTraits</name></member>
      <member refid="structcheckpoint_1_1_serializer_ref_1a2839c70c2aec7d4675167d606d21d5d0" prot="public" virt="non-virtual"><scope>checkpoint::SerializerRef</scope><name>withTraits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
