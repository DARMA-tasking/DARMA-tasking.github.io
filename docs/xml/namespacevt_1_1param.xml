<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1param" kind="namespace" language="C++">
    <compoundname>vt::param</compoundname>
    <innerclass refid="structvt_1_1param_1_1_data_msg" prot="public">vt::param::DataMsg</innerclass>
    <innerclass refid="structvt_1_1param_1_1_non_type" prot="public">vt::param::NonType</innerclass>
    <innerclass refid="structvt_1_1param_1_1_param" prot="public">vt::param::Param</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacevt_1_1param_1ada9e92f75ab7e859947a8ffe5bae6c5b" prot="public" static="no">
        <type>void(*)(Args...)</type>
        <definition>using vt::param::MultiParamType = typedef void(*)(Args...)</definition>
        <argsstring></argsstring>
        <name>MultiParamType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/param_meta.h" line="57" column="1" bodyfile="src/vt/parameterization/param_meta.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacevt_1_1param_1ad9561687e11201a35ed8aba0b666c0b4" prot="public" static="no">
        <type><ref refid="structvt_1_1_handler_manager" kindref="compound">vt::HandlerManager</ref></type>
        <definition>using vt::param::HandlerManagerType = typedef vt::HandlerManager</definition>
        <argsstring></argsstring>
        <name>HandlerManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="64" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1_1param_1abc9c93cc76336669a28b64f562dd78a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::param::callFnTuple</definition>
        <argsstring>(Function f, Tuple t, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>callFnTuple</name>
        <param>
          <type>Function</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/param_meta.h" line="66" column="1" bodyfile="src/vt/parameterization/param_meta.h" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1param_1a8df465cc087697f52404eddfada30574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
          <param>
            <type>typename TypedFnT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::invokeFnTuple</definition>
        <argsstring>(TypedFnT f, std::tuple&lt; Args... &gt; t)</argsstring>
        <name>invokeFnTuple</name>
        <param>
          <type>TypedFnT</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/param_meta.h" line="75" column="1" bodyfile="src/vt/parameterization/param_meta.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1param_1a3aec8e4301c9035e3333fe9d186171fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FnT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::param::invokeCallableTuple</definition>
        <argsstring>(std::tuple&lt; Args... &gt; &amp;tup, FnT fn, bool const &amp;is_functor)</argsstring>
        <name>invokeCallableTuple</name>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>FnT</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>is_functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/param_meta.h" line="81" column="1" bodyfile="src/vt/parameterization/param_meta.h" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1param_1a217f9ea196dfa2a36039f71576e9d33c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void vt::param::dataMessageHandler</definition>
        <argsstring>(DataMsg&lt; Tuple &gt; *msg)</argsstring>
        <name>dataMessageHandler</name>
        <param>
          <type><ref refid="structvt_1_1param_1_1_data_msg" kindref="compound">DataMsg</ref>&lt; Tuple &gt; *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/parameterization/parameterization.h" line="94" column="1" bodyfile="src/vt/parameterization/parameterization.h" bodystart="94" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/parameterization/param_meta.h" line="54" column="1"/>
  </compounddef>
</doxygen>
