<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structcheckpoint_1_1dispatch_1_1_standard" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::dispatch::Standard</compoundname>
    <includes refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2dispatch_8h" local="no">dispatch.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_standard_1a3ab80d79667a790dd38d56c7aa52544c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SizerT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::dispatch::Standard::size</definition>
        <argsstring>(T &amp;target, Args &amp;&amp;... args)</argsstring>
        <name>size</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Recursively get the number of bytes to serialize <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target to size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to the sizer&apos;s constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="135" column="25" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_standard_1ae48838b6ca5ce60c4521c46b229b7f00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename FootprinterT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::dispatch::Standard::footprint</definition>
        <argsstring>(T &amp;target, Args &amp;&amp;... args)</argsstring>
        <name>footprint</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Recursively get the memory footprint of <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target to measure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to the footprinter&apos;s constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>memory footprint of <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="146" column="25" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_standard_1afe92288cac2dc35464ee33e91b4d91d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename PackerT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>PackerT</type>
        <definition>PackerT checkpoint::dispatch::Standard::pack</definition>
        <argsstring>(T &amp;target, SerialSizeType const &amp;size, Args &amp;&amp;... args)</argsstring>
        <name>pack</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Pack <computeroutput>target</computeroutput> that requires <computeroutput>size</computeroutput> number of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target to pack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes for <computeroutput>target</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to the packer&apos;s constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the packer after packing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="158" column="18" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_standard_1a2115701d48c24ab6cbc0d811ef8840e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename UnpackerT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * checkpoint::dispatch::Standard::unpack</definition>
        <argsstring>(T *mem, Args &amp;&amp;... args)</argsstring>
        <name>unpack</name>
        <param>
          <type>T *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Unpack <computeroutput>T</computeroutput> from packed byte-buffer <computeroutput>mem</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mem</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes holding a serialized <computeroutput>T</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">constructed</parametername>
</parameternamelist>
<parameterdescription>
<para>whether mem is constructed <computeroutput>T</computeroutput> or not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to the unpacker&apos;s constructor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to an unpacked <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="170" column="12" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_standard_1a532b9767431c5a8515205209474aca11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * checkpoint::dispatch::Standard::construct</definition>
        <argsstring>(SerialByteType *mem)</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Construct <computeroutput>T</computeroutput> on allocate memory <computeroutput>mem</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mem</parametername>
</parameternamelist>
<parameterdescription>
<para>allocated buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constructed pointer to <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="180" column="12" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_standard_1a289fce710a512a3dbbd96076ed8d721e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType * checkpoint::dispatch::Standard::allocate</definition>
        <argsstring>()</argsstring>
        <name>allocate</name>
        <briefdescription>
<para>Allocate memory for <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>allocated buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="188" column="25" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="214" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structcheckpoint_1_1dispatch_1_1_standard" kindref="compound">Standard</ref> traversals for sizing, packing and unpacking a class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="124" column="15" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" bodystart="124" bodyend="189"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1dispatch_1_1_standard_1a289fce710a512a3dbbd96076ed8d721e" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Standard</scope><name>allocate</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_standard_1a532b9767431c5a8515205209474aca11" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Standard</scope><name>construct</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_standard_1ae48838b6ca5ce60c4521c46b229b7f00" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Standard</scope><name>footprint</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_standard_1afe92288cac2dc35464ee33e91b4d91d0" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Standard</scope><name>pack</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_standard_1a3ab80d79667a790dd38d56c7aa52544c" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Standard</scope><name>size</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_standard_1a2115701d48c24ab6cbc0d811ef8840e3" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Standard</scope><name>unpack</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
