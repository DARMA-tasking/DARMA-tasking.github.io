<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1group_1_1_group_manager" kind="struct" language="C++" prot="public">
    <compoundname>vt::group::GroupManager</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; GroupManager &gt;</basecompoundref>
    <derivedcompoundref refid="structvt_1_1group_1_1_group_manager_t" prot="public" virt="non-virtual">vt::group::GroupManagerT&lt; T &gt;</derivedcompoundref>
    <includes refid="group__manager_8h" local="no">group_manager.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a38876227e6077059a67a5d5e5647d8a3" prot="public" static="no">
        <type><ref refid="structvt_1_1group_1_1region_1_1_region" kindref="compound">region::Region</ref></type>
        <definition>using vt::group::GroupManager::RegionType =  region::Region</definition>
        <argsstring></argsstring>
        <name>RegionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="87" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1group_1_1_group_manager_1a38876227e6077059a67a5d5e5647d8a3" kindref="member">RegionType</ref> &gt;</type>
        <definition>using vt::group::GroupManager::RegionPtrType =  std::unique_ptr&lt;RegionType&gt;</definition>
        <argsstring></argsstring>
        <name>RegionPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="88" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a556f65e569f3e3f2dfc4a247e137b409" prot="public" static="no">
        <type><ref refid="structvt_1_1group_1_1_info" kindref="compound">Info</ref></type>
        <definition>using vt::group::GroupManager::GroupInfoType =  Info</definition>
        <argsstring></argsstring>
        <name>GroupInfoType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="89" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1adedebd6e550efd2bee5bb118f816b2e0" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1group_1_1_group_manager_1a556f65e569f3e3f2dfc4a247e137b409" kindref="member">GroupInfoType</ref> &gt;</type>
        <definition>using vt::group::GroupManager::GroupInfoPtrType =  std::unique_ptr&lt;GroupInfoType&gt;</definition>
        <argsstring></argsstring>
        <name>GroupInfoPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="90" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a9e2a0989865f4097bb5edd390865555e" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref>, <ref refid="structvt_1_1group_1_1_group_manager_1adedebd6e550efd2bee5bb118f816b2e0" kindref="member">GroupInfoPtrType</ref> &gt;</type>
        <definition>using vt::group::GroupManager::GroupContainerType =  std::unordered_map&lt;GroupType, GroupInfoPtrType&gt;</definition>
        <argsstring></argsstring>
        <name>GroupContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="91" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref>)&gt;</type>
        <definition>using vt::group::GroupManager::ActionGroupType =  std::function&lt;void(GroupType)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionGroupType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="92" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a33ca642d5f42e39f033ed4f62613caef" prot="public" static="no">
        <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree" kindref="compound">collective::tree::Tree</ref></type>
        <definition>using vt::group::GroupManager::TreeType =  collective::tree::Tree</definition>
        <argsstring></argsstring>
        <name>TreeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="93" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a9e0bcb0f3241a19b95d4f7fa092f4c8e" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1group_1_1_group_manager_1a33ca642d5f42e39f033ed4f62613caef" kindref="member">TreeType</ref> &gt;</type>
        <definition>using vt::group::GroupManager::TreePtrType =  std::unique_ptr&lt;TreeType&gt;</definition>
        <argsstring></argsstring>
        <name>TreePtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="94" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a48b2dd05bbdda19c5d6195b8932a2716" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref> &gt;</type>
        <definition>using vt::group::GroupManager::ActionListType =  std::vector&lt;ActionType&gt;</definition>
        <argsstring></argsstring>
        <name>ActionListType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="95" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1af722b277e2ad6a8dacdfec0184cd8f2f" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref>, <ref refid="structvt_1_1group_1_1_group_manager_1a48b2dd05bbdda19c5d6195b8932a2716" kindref="member">ActionListType</ref> &gt;</type>
        <definition>using vt::group::GroupManager::ActionContainerType =  std::unordered_map&lt; RemoteOperationIDType, ActionListType &gt;</definition>
        <argsstring></argsstring>
        <name>ActionContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="96" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a28113adbc42622f7cf278fcaed4efefa" prot="public" static="no">
        <type><ref refid="structvt_1_1collective_1_1reduce_1_1_reduce" kindref="compound">collective::reduce::Reduce</ref></type>
        <definition>using vt::group::GroupManager::ReduceType =  collective::reduce::Reduce</definition>
        <argsstring></argsstring>
        <name>ReduceType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="99" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a0c646983506b624ad93ceb127df9e811" prot="public" static="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a28113adbc42622f7cf278fcaed4efefa" kindref="member">ReduceType</ref> *</type>
        <definition>using vt::group::GroupManager::ReducePtrType =  ReduceType*</definition>
        <argsstring></argsstring>
        <name>ReducePtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="100" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1group_1_1_group_manager_1a376be92b957fb33ac9b855f6d134ca6a" prot="public" static="no">
        <type><ref refid="structvt_1_1collective_1_1_collective_scope" kindref="compound">collective::CollectiveScope</ref></type>
        <definition>using vt::group::GroupManager::CollectiveScopeType =  collective::CollectiveScope</definition>
        <argsstring></argsstring>
        <name>CollectiveScopeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="101" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1group_1_1_group_manager_1af0a264c27d0d08af4b617d2e4675fda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct Info</definition>
        <argsstring></argsstring>
        <name>Info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="190" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1group_1_1_group_manager_1a977ca475df628d7e164bae4a7a97c001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct InfoColl</definition>
        <argsstring></argsstring>
        <name>InfoColl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="191" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1group_1_1_group_manager_1ae1817e369e2c7539a02b4eeb0e5cdb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct FinishedWork</definition>
        <argsstring></argsstring>
        <name>FinishedWork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="192" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1group_1_1_group_manager_1a612933a09f56f2382ccb3e70a423d418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct InfoRooted</definition>
        <argsstring></argsstring>
        <name>InfoRooted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="193" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1group_1_1_group_manager_1a3b688c56f16100f140edbbb49b9de739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct GroupActiveAttorney</definition>
        <argsstring></argsstring>
        <name>GroupActiveAttorney</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="194" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a2f40ded22e7e9bde566dffcbdff10ded" prot="private" static="no" mutable="no">
        <type>MPI_Comm</type>
        <definition>MPI_Comm vt::group::GroupManager::default_comm_</definition>
        <argsstring></argsstring>
        <name>default_comm_</name>
        <initializer>= MPI_COMM_NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="410" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1ad14079e35fc22c1ddc8627f4f8bd2ffe" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1group_1a805a6643787ae841525c371fd0cefeb3" kindref="member">GroupIDType</ref></type>
        <definition>GroupIDType vt::group::GroupManager::next_group_id_</definition>
        <argsstring></argsstring>
        <name>next_group_id_</name>
        <initializer>= initial_group_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="411" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a4e15169e16bc0c8d6fa1dd440c386e1b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1group_1a805a6643787ae841525c371fd0cefeb3" kindref="member">GroupIDType</ref></type>
        <definition>GroupIDType vt::group::GroupManager::next_collective_group_id_</definition>
        <argsstring></argsstring>
        <name>next_collective_group_id_</name>
        <initializer>= initial_group_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="412" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a496d3a98cb37579f93815d4723c627f5" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a9e2a0989865f4097bb5edd390865555e" kindref="member">GroupContainerType</ref></type>
        <definition>GroupContainerType vt::group::GroupManager::local_collective_group_info_</definition>
        <argsstring></argsstring>
        <name>local_collective_group_info_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="413" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a90f8d0d19ae71493e3ef0f25cc33dc70" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a9e2a0989865f4097bb5edd390865555e" kindref="member">GroupContainerType</ref></type>
        <definition>GroupContainerType vt::group::GroupManager::local_group_info_</definition>
        <argsstring></argsstring>
        <name>local_group_info_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="414" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a970a1f928ab59533e256a30f1426ccee" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a9e2a0989865f4097bb5edd390865555e" kindref="member">GroupContainerType</ref></type>
        <definition>GroupContainerType vt::group::GroupManager::remote_group_info_</definition>
        <argsstring></argsstring>
        <name>remote_group_info_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="415" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a3926aff931a66b46bcb1f4d2266986e4" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref></type>
        <definition>RemoteOperationIDType vt::group::GroupManager::cur_id_</definition>
        <argsstring></argsstring>
        <name>cur_id_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="416" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1aaa0fcab1d59372a1535f3b626a05db8a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref></type>
        <definition>RemoteOperationIDType vt::group::GroupManager::cur_collective_id_</definition>
        <argsstring></argsstring>
        <name>cur_collective_id_</name>
        <initializer>= 0xFFFFFFFF00000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="417" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a39b9b401f406e473eb073d59fb186e2c" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1af722b277e2ad6a8dacdfec0184cd8f2f" kindref="member">ActionContainerType</ref></type>
        <definition>ActionContainerType vt::group::GroupManager::continuation_actions_</definition>
        <argsstring></argsstring>
        <name>continuation_actions_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="418" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a0b610e2592c927cbcd932322b4bde808" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a48b2dd05bbdda19c5d6195b8932a2716" kindref="member">ActionListType</ref></type>
        <definition>ActionListType vt::group::GroupManager::cleanup_actions_</definition>
        <argsstring></argsstring>
        <name>cleanup_actions_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="419" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1group_1_1_group_manager_1a9d158b1541d5123ccbdecbfa7ce95dc1" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a376be92b957fb33ac9b855f6d134ca6a" kindref="member">CollectiveScopeType</ref></type>
        <definition>CollectiveScopeType vt::group::GroupManager::collective_scope_</definition>
        <argsstring></argsstring>
        <name>collective_scope_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="420" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1acfab15afbf80d7b0aa8d95171167b251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::group::GroupManager::GroupManager</definition>
        <argsstring>()</argsstring>
        <name>GroupManager</name>
        <briefdescription>
<para>Construct the <ref refid="structvt_1_1group_1_1_group_manager" kindref="compound">GroupManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="106" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="511" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a87c2b3dc934de17d0ec1372957b234e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual vt::group::GroupManager::~GroupManager</definition>
        <argsstring>()</argsstring>
        <name>~GroupManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="108" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a46802e85936e68f9bebc844af1793da3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::group::GroupManager::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="115" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ac0eb535f215f0edf1bed601b4338220f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::setupDefaultGroup</definition>
        <argsstring>()</argsstring>
        <name>setupDefaultGroup</name>
        <briefdescription>
<para>Setup the default group spanning all nodes. Called by the VT system at startup so broadcasts can take place. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a076330445139abce77e1f6ab6e4358c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::group::GroupManager::newGroup</definition>
        <argsstring>(RegionPtrType in_region, bool const is_static, ActionGroupType action)</argsstring>
        <name>newGroup</name>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" kindref="member">RegionPtrType</ref></type>
          <declname>in_region</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_static</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" kindref="member">ActionGroupType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Create a new rooted group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_region</parametername>
</parameternamelist>
<parameterdescription>
<para>list of nodes to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_static</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the group is static after creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="132" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1af2986f6eacd693d9906cb397e6e2a706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::group::GroupManager::newGroup</definition>
        <argsstring>(RegionPtrType in_region, ActionGroupType action)</argsstring>
        <name>newGroup</name>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" kindref="member">RegionPtrType</ref></type>
          <declname>in_region</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" kindref="member">ActionGroupType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Create a new rooted group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_region</parametername>
</parameternamelist>
<parameterdescription>
<para>list of nodes to include </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="144" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a92b301d6cf77af7d57ed822c6f044d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::group::GroupManager::newGroupCollective</definition>
        <argsstring>(bool const in_group, ActionGroupType action, bool make_mpi_group=false)</argsstring>
        <name>newGroupCollective</name>
        <param>
          <type>bool const</type>
          <declname>in_group</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" kindref="member">ActionGroupType</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_mpi_group</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a group collectively, must be called on all nodes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this node is included the new group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">make_mpi_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether VT should create an underlying MPI group</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="155" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1aabd66a33c6306ef472119cd5b2d96d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::group::GroupManager::newGroupCollectiveLabel</definition>
        <argsstring>(GroupCollectiveLabelTagType)</argsstring>
        <name>newGroupCollectiveLabel</name>
        <param>
          <type>GroupCollectiveLabelTagType</type>
        </param>
        <briefdescription>
<para>Generate the next group ID. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">GroupCollectiveLabelTagType</parametername>
</parameternamelist>
<parameterdescription>
<para>tag to indicate collective</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="166" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a2204bcd119aaf06e0e356957faad36e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::group::GroupManager::inGroup</definition>
        <argsstring>(GroupType const group)</argsstring>
        <name>inGroup</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Query whether this node is part of a group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether this node is included </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="175" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a15492a3874bd670c18336571e9768e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MPI_Comm</type>
        <definition>MPI_Comm vt::group::GroupManager::getGroupComm</definition>
        <argsstring>(GroupType const group_id)</argsstring>
        <name>getGroupComm</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group_id</declname>
        </param>
        <briefdescription>
<para>Get MPI_Comm from VT group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the MPI_Comm associated with the group; or the default communicator if none. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="185" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="196" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a8c44aa4d3c569c0a6c73c91c9927552a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::group::GroupManager::sendMsg</definition>
        <argsstring>(GroupType const group, MsgT *msg)</argsstring>
        <name>sendMsg</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <param>
          <type>MsgT *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a3234e5be55c32ccfb56785265e26b4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1group_1_1_group_manager_1a0c646983506b624ad93ceb127df9e811" kindref="member">ReducePtrType</ref></type>
        <definition>GroupManager::ReducePtrType vt::group::GroupManager::groupReducer</definition>
        <argsstring>(GroupType const group)</argsstring>
        <name>groupReducer</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Get the reducer associated with a group to reduce over it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the reducer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="339" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="127" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ab5b8178a37165903c73f9159c9259cf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::group::GroupManager::groupRoot</definition>
        <argsstring>(GroupType const group) const</argsstring>
        <name>groupRoot</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Get the root node for a group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the root node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="348" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="138" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ad4d55f7bcf2aadd97c858b3f11c5d365" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::group::GroupManager::isGroupDefault</definition>
        <argsstring>(GroupType const group) const</argsstring>
        <name>isGroupDefault</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Check if a group is the default group (all nodes, default spanning tree) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it is the default group </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="358" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a79edddb814a77d2ff45fea14291e95df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::addCleanupAction</definition>
        <argsstring>(ActionType action)</argsstring>
        <name>addCleanupAction</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Add a cleanup action. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="365" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="518" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a472e95d136ef71c14ac5b4c931ff79b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref></type>
        <definition>RemoteOperationIDType vt::group::GroupManager::getNextOpID</definition>
        <argsstring>()</argsstring>
        <name>getNextOpID</name>
        <briefdescription>
<para>Get the next operation ID. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the operation ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="372" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="522" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a677d2bfaedd8f575f0c773feba40eb9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::group::GroupManager::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="375" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="375" bodyend="387"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1aeea7806669858363e19dfd221fee9cf5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::group::GroupManager::newCollectiveGroup</definition>
        <argsstring>(bool const in_group, bool const is_static, ActionGroupType action, bool make_mpi_group=false)</argsstring>
        <name>newCollectiveGroup</name>
        <param>
          <type>bool const</type>
          <declname>in_group</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_static</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" kindref="member">ActionGroupType</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_mpi_group</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>System call to create a new collective group. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the node is in the group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_static</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the group is static after creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">make_mpi_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether VT should create an underlying MPI group</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="207" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="88" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ad33dede56e2d4b79f447d851e1f3f154" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::group::GroupManager::newLocalGroup</definition>
        <argsstring>(RegionPtrType in_region, bool const is_static, ActionGroupType action)</argsstring>
        <name>newLocalGroup</name>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" kindref="member">RegionPtrType</ref></type>
          <declname>in_region</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_static</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" kindref="member">ActionGroupType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>System call to create a new rooted group. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_region</parametername>
</parameternamelist>
<parameterdescription>
<para>list of nodes in group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_static</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the group is static after creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the group ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="221" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="105" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a1893365a719927e3f2d11b65f6bb806d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::initializeLocalGroupCollective</definition>
        <argsstring>(GroupType const group, bool const is_static, ActionType action, bool const in_group, bool make_mpi_group)</argsstring>
        <name>initializeLocalGroupCollective</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_static</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>in_group</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_mpi_group</declname>
        </param>
        <briefdescription>
<para>Setup new collective group. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_static</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the group is static after creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this node is included the new group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">make_mpi_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether VT should create an underlying MPI group </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="234" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="214" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ac9f99d33480a89a5863e59d0470faea2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::initializeLocalGroup</definition>
        <argsstring>(GroupType const group, RegionPtrType in_region, bool const is_static, ActionType action)</argsstring>
        <name>initializeLocalGroup</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" kindref="member">RegionPtrType</ref></type>
          <declname>in_region</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_static</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Setup a new rooted group locally. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_region</parametername>
</parameternamelist>
<parameterdescription>
<para>list of nodes in group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_static</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the group is static after creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to execute when group is finished construction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="247" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="231" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ae298a5917567082ed11c16cf66690cd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::initializeRemoteGroup</definition>
        <argsstring>(GroupType const group, RegionPtrType in_region, bool const is_static, RegionType::SizeType const group_size)</argsstring>
        <name>initializeRemoteGroup</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const</type>
          <declname>group</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" kindref="member">RegionPtrType</ref></type>
          <declname>in_region</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_static</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1group_1_1region_1_1_region_1a9bb381adf31111aae34dbc644bad6c1f" kindref="member">RegionType::SizeType</ref> const</type>
          <declname>group_size</declname>
        </param>
        <briefdescription>
<para>Setup a new rooted group remotely. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>the group ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_region</parametername>
</parameternamelist>
<parameterdescription>
<para>list of nodes in group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_static</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the group is static after creation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">group_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of nodes in the group </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="259" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="179" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ae8ccd9feb60fcd1ee85cc1f09ed003fb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref></type>
        <definition>RemoteOperationIDType vt::group::GroupManager::nextCollectiveID</definition>
        <argsstring>()</argsstring>
        <name>nextCollectiveID</name>
        <briefdescription>
<para>Get new collective identifier for action registration. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the operation ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="269" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1aebb439bebdefc27cfa6408e5cf0f7741" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref></type>
        <definition>RemoteOperationIDType vt::group::GroupManager::registerContinuation</definition>
        <argsstring>(ActionType action)</argsstring>
        <name>registerContinuation</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Collectively register a operation ID continuation. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the continuation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the operation ID </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="278" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a0e67cdbacf259a8e4447bd3943dd6fdb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::registerContinuation</definition>
        <argsstring>(RemoteOperationIDType const op, ActionType action)</argsstring>
        <name>registerContinuation</name>
        <param>
          <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref> const</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Collectively register a operation ID continuation. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the continuation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="286" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="163" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1aaa86d701377ece72b51bc7a2d0a945b0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::group::GroupManager::triggerContinuation</definition>
        <argsstring>(RemoteOperationIDType const op)</argsstring>
        <name>triggerContinuation</name>
        <param>
          <type><ref refid="namespacevt_1_1group_1a73f2624ddeb535b39a08b6524f26b244" kindref="member">RemoteOperationIDType</ref> const</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Trigger a continuation with an operation ID. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="295" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="169" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a7c958e6ea3f6b0a8eeed2e16f240461a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::group::GroupManager::sendGroup</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const from, MsgSizeType const size, bool const is_root, bool *const deliver)</argsstring>
        <name>sendGroup</name>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a408e86a8c7c89309b52907dc5a513924" kindref="member">MsgSizeType</ref> const</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_root</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>deliver</declname>
        </param>
        <briefdescription>
<para>Send message to a rooted group. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>sender node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_root</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this node is the root </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">deliver</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the caller should deliver locally</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event ID for any generated events (like MPI_Requests) </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="308" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="407" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1a6a3d31f06d32a07d575ebbe16e9c0d07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::group::GroupManager::sendGroupCollective</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;base, NodeType const from, MsgSizeType const size, bool const is_root, bool *const deliver)</argsstring>
        <name>sendGroupCollective</name>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a408e86a8c7c89309b52907dc5a513924" kindref="member">MsgSizeType</ref> const</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_root</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>deliver</declname>
        </param>
        <briefdescription>
<para>Send message to a collective group. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>sender node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_root</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this node is the root </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">deliver</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the caller should deliver locally</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event ID for any generated events (like MPI_Requests) </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="325" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="296" bodyend="405"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structvt_1_1group_1_1_group_manager_1ae0ce8441ff4ce04493ff029c2f7ba027" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::group::GroupManager::groupHandler</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; const &amp;msg, NodeType const from, MsgSizeType const msg_size, bool const is_root, bool *const deliver)</argsstring>
        <name>groupHandler</name>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; const &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a408e86a8c7c89309b52907dc5a513924" kindref="member">MsgSizeType</ref> const</type>
          <declname>msg_size</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>is_root</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>deliver</declname>
        </param>
        <briefdescription>
<para>Execute necessary actions for deliver to a group when a message arrives on this node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>sender node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes of the message being sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_root</parametername>
</parameternamelist>
<parameterdescription>
<para>whether this node is the root </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">deliver</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the caller should deliver locally</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event ID for any generated events (like MPI_Requests) </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/group/group_manager.h" line="402" column="1" bodyfile="src/vt/group/group_manager.cc" bodystart="249" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A core VT component that can create and manage groups of nodes. </para>    </briefdescription>
    <detaileddescription>
<para>Enables rooted and collective asynchronous construction of groups of nodes. The default group is all the nodes in the communicator, which is the group a normal broadcast targets. Beyond this, both the VT system and users can dynamically create groups in a fully distributed manner. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1878">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="1879" relation="public-inheritance">
        </childnode>
        <childnode refid="1882" relation="public-inheritance">
        </childnode>
        <childnode refid="1883" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1876">
        <label>vt::group::GroupManager</label>
        <link refid="structvt_1_1group_1_1_group_manager"/>
        <childnode refid="1877" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1881">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="1879">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="1880" relation="public-inheritance">
        </childnode>
        <childnode refid="1881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1884">
        <label>vt::group::GroupManagerT&lt; T &gt;</label>
        <link refid="structvt_1_1group_1_1_group_manager_t"/>
        <childnode refid="1876" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1880">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="1882">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="1883">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="1877">
        <label>vt::runtime::component::Component&lt; GroupManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="1878" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1887">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="1888" relation="public-inheritance">
        </childnode>
        <childnode refid="1891" relation="public-inheritance">
        </childnode>
        <childnode refid="1892" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1885">
        <label>vt::group::GroupManager</label>
        <link refid="structvt_1_1group_1_1_group_manager"/>
        <childnode refid="1886" relation="public-inheritance">
        </childnode>
        <childnode refid="1893" relation="usage">
          <edgelabel>collective_scope_</edgelabel>
        </childnode>
      </node>
      <node id="1890">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="1893">
        <label>vt::collective::CollectiveScope</label>
        <link refid="structvt_1_1collective_1_1_collective_scope"/>
      </node>
      <node id="1888">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="1889" relation="public-inheritance">
        </childnode>
        <childnode refid="1890" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1889">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="1891">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="1892">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="1886">
        <label>vt::runtime::component::Component&lt; GroupManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="1887" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/group/group_manager.h" line="86" column="1" bodyfile="src/vt/group/group_manager.h" bodystart="86" bodyend="421"/>
    <listofallmembers>
      <member refid="structvt_1_1group_1_1_group_manager_1af722b277e2ad6a8dacdfec0184cd8f2f" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>ActionContainerType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ae871c5871ad62b530220009c1ee4d4b9" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>ActionGroupType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a48b2dd05bbdda19c5d6195b8932a2716" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>ActionListType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a79edddb814a77d2ff45fea14291e95df" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>addCleanupAction</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a0b610e2592c927cbcd932322b4bde808" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>cleanup_actions_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a9d158b1541d5123ccbdecbfa7ce95dc1" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>collective_scope_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a376be92b957fb33ac9b855f6d134ca6a" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>CollectiveScopeType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>component_id_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a39b9b401f406e473eb073d59fb186e2c" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>continuation_actions_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1aaa0fcab1d59372a1535f3b626a05db8a" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>cur_collective_id_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a3926aff931a66b46bcb1f4d2266986e4" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>cur_id_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a2f40ded22e7e9bde566dffcbdff10ded" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>default_comm_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>dumpState</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>finalize</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ae1817e369e2c7539a02b4eeb0e5cdb83" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>FinishedWork</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a15492a3874bd670c18336571e9768e8e" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>getGroupComm</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a472e95d136ef71c14ac5b4c931ff79b9" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>getNextOpID</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a3b688c56f16100f140edbbb49b9de739" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>GroupActiveAttorney</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a9e2a0989865f4097bb5edd390865555e" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>GroupContainerType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ae0ce8441ff4ce04493ff029c2f7ba027" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>groupHandler</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1adedebd6e550efd2bee5bb118f816b2e0" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>GroupInfoPtrType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a556f65e569f3e3f2dfc4a247e137b409" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>GroupInfoType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1acfab15afbf80d7b0aa8d95171167b251" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>GroupManager</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a3234e5be55c32ccfb56785265e26b4c6" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>groupReducer</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ab5b8178a37165903c73f9159c9259cf5" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>groupRoot</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1af0a264c27d0d08af4b617d2e4675fda7" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>Info</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a977ca475df628d7e164bae4a7a97c001" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>InfoColl</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a612933a09f56f2382ccb3e70a423d418" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>InfoRooted</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a2204bcd119aaf06e0e356957faad36e6" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>inGroup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>initialize</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ac9f99d33480a89a5863e59d0470faea2" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>initializeLocalGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a1893365a719927e3f2d11b65f6bb806d" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>initializeLocalGroupCollective</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ae298a5917567082ed11c16cf66690cd3" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>initializeRemoteGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ad4d55f7bcf2aadd97c858b3f11c5d365" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>isGroupDefault</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a496d3a98cb37579f93815d4723c627f5" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>local_collective_group_info_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a90f8d0d19ae71493e3ef0f25cc33dc70" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>local_group_info_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a46802e85936e68f9bebc844af1793da3" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>name</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1aeea7806669858363e19dfd221fee9cf5" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>newCollectiveGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a076330445139abce77e1f6ab6e4358c5" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>newGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1af2986f6eacd693d9906cb397e6e2a706" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>newGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a92b301d6cf77af7d57ed822c6f044d58" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>newGroupCollective</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1aabd66a33c6306ef472119cd5b2d96d3f" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>newGroupCollectiveLabel</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ad33dede56e2d4b79f447d851e1f3f154" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>newLocalGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a4e15169e16bc0c8d6fa1dd440c386e1b" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>next_collective_group_id_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ad14079e35fc22c1ddc8627f4f8bd2ffe" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>next_group_id_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ae8ccd9feb60fcd1ee85cc1f09ed003fb" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>nextCollectiveID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>progress</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a0c646983506b624ad93ceb127df9e811" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>ReducePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>reducer</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a28113adbc42622f7cf278fcaed4efefa" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>ReduceType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a9192e585fc2f99bfd5a6ff65fc21c40b" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>RegionPtrType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a38876227e6077059a67a5d5e5647d8a3" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>RegionType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1aebb439bebdefc27cfa6408e5cf0f7741" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerContinuation</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a0e67cdbacf259a8e4447bd3943dd6fdb" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerContinuation</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a970a1f928ab59533e256a30f1426ccee" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>remote_group_info_</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a7c958e6ea3f6b0a8eeed2e16f240461a" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>sendGroup</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a6a3d31f06d32a07d575ebbe16e9c0d07" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>sendGroupCollective</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a8c44aa4d3c569c0a6c73c91c9927552a" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a677d2bfaedd8f575f0c773feba40eb9c" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1abe85836f57c42a695fdc292cd78b10cb" prot="public" virt="non-virtual" ambiguityscope="Component&lt; GroupManager &gt;::"><scope>vt::group::GroupManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1ac0eb535f215f0edf1bed601b4338220f" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>setupDefaultGroup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>staticInit</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a9e0bcb0f3241a19b95d4f7fa092f4c8e" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>TreePtrType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a33ca642d5f42e39f033ed4f62613caef" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>TreeType</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1aaa86d701377ece72b51bc7a2d0a945b0" prot="private" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>triggerContinuation</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::group::GroupManager</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1group_1_1_group_manager_1a87c2b3dc934de17d0ec1372957b234e5" prot="public" virt="virtual"><scope>vt::group::GroupManager</scope><name>~GroupManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
