<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1serialization_1_1_serialization_traits" kind="struct" language="C++" prot="public">
    <compoundname>vt::serialization::SerializationTraits</compoundname>
    <includes refid="mock__serializer_8h" local="no">mock_serializer.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_serialization_traits_1abb1c9363540c1a2d8b6843f8910df5b4" prot="public" static="no">
        <type>typename std::is_arithmetic&lt; U &gt;</type>
        <definition>using vt::serialization::SerializationTraits&lt; T &gt;::arith =  typename std::is_arithmetic&lt;U&gt;</definition>
        <argsstring></argsstring>
        <name>arith</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="147" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_serialization_traits_1ab7e5dd1f060f8077a26dc1c539e7c4fa" prot="public" static="no">
        <type><ref refid="structvt_1_1serialization_1_1is_tuple" kindref="compound">isTuple</ref>&lt; typename std::decay&lt; U &gt;::type &gt;</type>
        <definition>using vt::serialization::SerializationTraits&lt; T &gt;::tuple =  isTuple&lt;typename std::decay&lt;U&gt;::type&gt;</definition>
        <argsstring></argsstring>
        <name>tuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="150" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_serialization_traits_1a44712948817caf3f18d61fba6f6c1a18" prot="public" static="no">
        <type><ref refid="structvt_1_1serialization_1_1is_vector" kindref="compound">isVector</ref>&lt; typename std::decay&lt; U &gt;::type &gt;</type>
        <definition>using vt::serialization::SerializationTraits&lt; T &gt;::vector =  isVector&lt;typename std::decay&lt;U&gt;::type&gt;</definition>
        <argsstring></argsstring>
        <name>vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="153" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structvt_1_1serialization_1_1_serialization_traits_1a38a97b8b969de14ff2893c1ebcb11aba" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::serialization::SerializationTraits&lt; T &gt;::is_byte_cp</definition>
        <argsstring></argsstring>
        <name>is_byte_cp</name>
        <initializer>=
    <ref refid="structvt_1_1serialization_1_1_serialization_traits_1abb1c9363540c1a2d8b6843f8910df5b4" kindref="member">arith</ref>&lt;T&gt;::value or <ref refid="structvt_1_1serialization_1_1has_byte_copy_trait" kindref="compound">hasByteCopyTrait</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="155" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1serialization_1_1_serialization_traits_1a6626e6e387c99e6d67ef3859eb152747" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::serialization::SerializationTraits&lt; T &gt;::is_byte_cp_tuple</definition>
        <argsstring></argsstring>
        <name>is_byte_cp_tuple</name>
        <initializer>= <ref refid="structvt_1_1serialization_1_1_serialization_traits_1a38a97b8b969de14ff2893c1ebcb11aba" kindref="member">is_byte_cp</ref> or <ref refid="structvt_1_1serialization_1_1_serialization_traits_1ab7e5dd1f060f8077a26dc1c539e7c4fa" kindref="member">tuple</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="157" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1serialization_1_1_serialization_traits_1a2cc60efbf5ab3c003a6b7a923794ccac" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::serialization::SerializationTraits&lt; T &gt;::is_not_byte_cp</definition>
        <argsstring></argsstring>
        <name>is_not_byte_cp</name>
        <initializer>=
    not <ref refid="structvt_1_1serialization_1_1_serialization_traits_1ab7e5dd1f060f8077a26dc1c539e7c4fa" kindref="member">tuple</ref>&lt;T&gt;::value and
    not <ref refid="structvt_1_1serialization_1_1_serialization_traits_1abb1c9363540c1a2d8b6843f8910df5b4" kindref="member">arith</ref>&lt;T&gt;::value and
    not <ref refid="structvt_1_1serialization_1_1has_byte_copy_trait" kindref="compound">hasByteCopyTrait</ref>&lt;T&gt;::value and
    not <ref refid="structvt_1_1serialization_1_1_serialization_traits_1a44712948817caf3f18d61fba6f6c1a18" kindref="member">vector</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="159" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1serialization_1_1_serialization_traits_1a2a0b40d56694871797b9359f430ec731" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::serialization::SerializationTraits&lt; T &gt;::is_tuple</definition>
        <argsstring></argsstring>
        <name>is_tuple</name>
        <initializer>= <ref refid="structvt_1_1serialization_1_1_serialization_traits_1ab7e5dd1f060f8077a26dc1c539e7c4fa" kindref="member">tuple</ref>&lt;T&gt;::value and not <ref refid="structvt_1_1serialization_1_1_serialization_traits_1a38a97b8b969de14ff2893c1ebcb11aba" kindref="member">is_byte_cp</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="165" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1serialization_1_1_serialization_traits_1a0b46991287a3bac546754a2332f33a82" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const vt::serialization::SerializationTraits&lt; T &gt;::is_vec</definition>
        <argsstring></argsstring>
        <name>is_vec</name>
        <initializer>= <ref refid="structvt_1_1serialization_1_1_serialization_traits_1a44712948817caf3f18d61fba6f6c1a18" kindref="member">vector</ref>&lt;T&gt;::value and not <ref refid="structvt_1_1serialization_1_1_serialization_traits_1a38a97b8b969de14ff2893c1ebcb11aba" kindref="member">is_byte_cp</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="166" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/serialization/mock_serializer.h" line="144" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="144" bodyend="167"/>
    <listofallmembers>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1abb1c9363540c1a2d8b6843f8910df5b4" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>arith</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1a38a97b8b969de14ff2893c1ebcb11aba" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>is_byte_cp</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1a6626e6e387c99e6d67ef3859eb152747" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>is_byte_cp_tuple</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1a2cc60efbf5ab3c003a6b7a923794ccac" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>is_not_byte_cp</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1a2a0b40d56694871797b9359f430ec731" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>is_tuple</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1a0b46991287a3bac546754a2332f33a82" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>is_vec</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1ab7e5dd1f060f8077a26dc1c539e7c4fa" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>tuple</name></member>
      <member refid="structvt_1_1serialization_1_1_serialization_traits_1a44712948817caf3f18d61fba6f6c1a18" prot="public" virt="non-virtual"><scope>vt::serialization::SerializationTraits</scope><name>vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
