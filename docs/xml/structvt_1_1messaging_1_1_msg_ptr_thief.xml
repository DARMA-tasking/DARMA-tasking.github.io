<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_msg_ptr_thief" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::MsgPtrThief</compoundname>
    <includes refid="smart__ptr_8h" local="no">smart_ptr.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>MsgT</declname>
        <defname>MsgT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_msg_ptr_thief_1abc3b141a75ff7a89467d5551384a49ce" prot="public" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt;</type>
        <definition>MsgSharedPtr&lt;MsgT&gt; vt::messaging::MsgPtrThief&lt; MsgT &gt;::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="343" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_ptr_thief_1a2055f2033d36e710bbb5247f76520d5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgPtrThief&lt; MsgT &gt;::MsgPtrThief</definition>
        <argsstring>(MsgT const *msgPtr)</argsstring>
        <name>MsgPtrThief</name>
        <param>
          <type>MsgT const *</type>
          <declname>msgPtr</declname>
        </param>
        <briefdescription>
<para>Promote a <computeroutput>MsgT*</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000009"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>MsgPtr&lt;MsgT&gt;&amp;</computeroutput> to pass ownership of messages.</para></xrefdescription></xrefsect></para><para>The message is promoted without any implicit stealing. It is generally assumed the caller did not &apos;own&apos; this message anyway. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="324" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="324" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_ptr_thief_1a6f24dfa36e04c82511704c05d0904de1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgPtrThief&lt; MsgT &gt;::MsgPtrThief</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; &amp;msg)</argsstring>
        <name>MsgPtrThief</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Moves (steals) the incoming MsgPtr. </para>        </briefdescription>
        <detaileddescription>
<para>As though <computeroutput>std::move(msg)</computeroutput> was used, the <computeroutput>msg</computeroutput> is invalidated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="332" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="332" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_ptr_thief_1aed4e66a07cc56e9db883a66270682d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgPtrThief&lt; MsgT &gt;::MsgPtrThief</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; &amp;&amp;msg)</argsstring>
        <name>MsgPtrThief</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;&amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Moves (steals) the incoming MsgPtr. </para>        </briefdescription>
        <detaileddescription>
<para>This form allows code to explicitly use <computeroutput>std::move</computeroutput> as desired. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="340" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="340" bodyend="341"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper to unify &apos;stealing&apos; message ownership. </para>    </briefdescription>
    <detaileddescription>
<para>This type is not intended to be used directly. It uses implicit conversion constructors to perform a &apos;std::move&apos; on a <computeroutput>MsgPtr&lt;MsgT&gt;&amp;</computeroutput>.</para><para>If a normal <computeroutput>MsgT*</computeroutput> is supplied, it is promoted without stealing. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="2858">
        <label>vt::messaging::MsgSharedPtr&lt; MsgT &gt;</label>
        <link refid="structvt_1_1messaging_1_1_msg_shared_ptr"/>
        <childnode refid="2859" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
        <childnode refid="2860" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
      <node id="2860">
        <label>vt::messaging::MsgPtrImplBase</label>
        <link refid="structvt_1_1messaging_1_1_msg_ptr_impl_base"/>
      </node>
      <node id="2859">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
      <node id="2857">
        <label>vt::messaging::MsgPtrThief&lt; MsgT &gt;</label>
        <link refid="structvt_1_1messaging_1_1_msg_ptr_thief"/>
        <childnode refid="2858" relation="usage">
          <edgelabel>msg_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/messaging/message/smart_ptr.h" line="313" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="313" bodyend="344"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_msg_ptr_thief_1abc3b141a75ff7a89467d5551384a49ce" prot="public" virt="non-virtual"><scope>vt::messaging::MsgPtrThief</scope><name>msg_</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_ptr_thief_1a2055f2033d36e710bbb5247f76520d5a" prot="public" virt="non-virtual"><scope>vt::messaging::MsgPtrThief</scope><name>MsgPtrThief</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_ptr_thief_1a6f24dfa36e04c82511704c05d0904de1" prot="public" virt="non-virtual"><scope>vt::messaging::MsgPtrThief</scope><name>MsgPtrThief</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_ptr_thief_1aed4e66a07cc56e9db883a66270682d02" prot="public" virt="non-virtual"><scope>vt::messaging::MsgPtrThief</scope><name>MsgPtrThief</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
