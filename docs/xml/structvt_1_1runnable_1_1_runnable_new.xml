<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1runnable_1_1_runnable_new" kind="struct" language="C++" prot="public">
    <compoundname>vt::runnable::RunnableNew</compoundname>
    <includes refid="runnable_8h" local="no">runnable.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1runnable_1_1_runnable_new_1aba3112ca6cb024a32552569ef0571e20" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1ctx_1_1_base" kindref="compound">ctx::Base</ref> &gt;</type>
        <definition>using vt::runnable::RunnableNew::CtxBasePtr =  std::unique_ptr&lt;ctx::Base&gt;</definition>
        <argsstring></argsstring>
        <name>CtxBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="70" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1runnable_1_1_runnable_new_1a591a5eaee30eea99711e14e050633d34" prot="public" static="no">
        <type>void(*)(Args...)</type>
        <definition>using vt::runnable::RunnableNew::FnParamType =  void(*)(Args...)</definition>
        <argsstring></argsstring>
        <name>FnParamType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="73" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1a1998ba5d1d29bada29c94d884f906d11" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt;</type>
        <definition>MsgSharedPtr&lt;BaseMsgType&gt; vt::runnable::RunnableNew::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The associated message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="245" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1aa29430d7529095b33033112ba405ace7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::runnable::RunnableNew::is_threaded_</definition>
        <argsstring></argsstring>
        <name>is_threaded_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether ULTs are supported </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="246" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1a3dc86a8be6cfd9537f6d90f3939ac208" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1runnable_1_1_runnable_new_1aba3112ca6cb024a32552569ef0571e20" kindref="member">CtxBasePtr</ref> &gt;</type>
        <definition>std::vector&lt;CtxBasePtr&gt; vt::runnable::RunnableNew::contexts_</definition>
        <argsstring></argsstring>
        <name>contexts_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of contexts </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="247" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1a8216711b400b7c1f36c5a9bafaa7133e" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
        <definition>ActionType vt::runnable::RunnableNew::task_</definition>
        <argsstring></argsstring>
        <name>task_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The runnable&apos;s task </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="248" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1ae296cbcff8fe4f664af37960dd00397e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::runnable::RunnableNew::done_</definition>
        <argsstring></argsstring>
        <name>done_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether task is complete </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="249" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1a1b20f584aa7a1a09857029532fda1782" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::runnable::RunnableNew::suspended_</definition>
        <argsstring></argsstring>
        <name>suspended_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether task is suspended </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="250" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1runnable_1_1_runnable_new_1ad0e857fdce2f1c13512a1415993cd7fe" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" kindref="member">ThreadIDType</ref></type>
        <definition>ThreadIDType vt::runnable::RunnableNew::tid_</definition>
        <argsstring></argsstring>
        <name>tid_</name>
        <initializer>= no_thread_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The thread ID for the task </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="251" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a47b84af69a5444b9d837a3ffe4d4792b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>vt::runnable::RunnableNew::RunnableNew</definition>
        <argsstring>(MsgSharedPtr&lt; U &gt; const &amp;in_msg, bool in_is_threaded)</argsstring>
        <name>RunnableNew</name>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; U &gt; const &amp;</type>
          <declname>in_msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_is_threaded</declname>
        </param>
        <briefdescription>
<para>Construct a new <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref></computeroutput> with a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to pass to the task </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_is_threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the handler can be run with a thread </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="82" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a55ff785753c781903bf932a1e5faddd7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::runnable::RunnableNew::RunnableNew</definition>
        <argsstring>(bool in_is_threaded)</argsstring>
        <name>RunnableNew</name>
        <param>
          <type>bool</type>
          <declname>in_is_threaded</declname>
        </param>
        <briefdescription>
<para>Construct a new <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref></computeroutput> without a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_is_threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the handler can be run with a thread </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="92" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1ac7e1d836710c2d0cd2791f1a1c5ac03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::runnable::RunnableNew::RunnableNew</definition>
        <argsstring>(RunnableNew &amp;&amp;)=default</argsstring>
        <name>RunnableNew</name>
        <param>
          <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a4c34cf076ffd914c3d18aca7d2ff28db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::runnable::RunnableNew::RunnableNew</definition>
        <argsstring>(RunnableNew const &amp;)=delete</argsstring>
        <name>RunnableNew</name>
        <param>
          <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a12c7ddbd735a9bf704b06ecea7c26e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref> &amp;</type>
        <definition>RunnableNew&amp; vt::runnable::RunnableNew::operator=</definition>
        <argsstring>(RunnableNew const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a3561cbcbc3197074cded8da204e98924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref> &amp;</type>
        <definition>RunnableNew&amp; vt::runnable::RunnableNew::operator=</definition>
        <argsstring>(RunnableNew &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">RunnableNew</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a63fb77e8f9739e1eb3c7fb0dee6d8a1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::addContext</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>addContext</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Add a new context for this handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to build the context, forwarded to constructor of <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="109" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1aa494c41e589866c5a7f1669a5c2472b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::setupHandlerElement</definition>
        <argsstring>(vrt::collection::UntypedCollection *elm, HandlerType handler)</argsstring>
        <name>setupHandlerElement</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_untyped_collection" kindref="compound">vrt::collection::UntypedCollection</ref> *</type>
          <declname>elm</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Set up a handler to run on an collection object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elm</parametername>
</parameternamelist>
<parameterdescription>
<para>the object pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler ID bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="119" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="108" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1aeaec7cf81fe97f2d6b57f35dbd408b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::setupHandlerElement</definition>
        <argsstring>(vrt::VirtualContext *elm, HandlerType handler)</argsstring>
        <name>setupHandlerElement</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1_virtual_context" kindref="compound">vrt::VirtualContext</ref> *</type>
          <declname>elm</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Set up a handler to run on an non-collection object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elm</parametername>
</parameternamelist>
<parameterdescription>
<para>the object pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler ID bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="129" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1ae6052ee648ca061be2b3b2786ab7b013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::setupHandler</definition>
        <argsstring>(HandlerType handler, bool is_void=false, TagType tag=no_tag)</argsstring>
        <name>setupHandler</name>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_void</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1a84ab281dae04a52a4b243d6bf62d0e52" kindref="member">TagType</ref></type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Set up a basic handler to run. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler ID bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_void</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it&apos;s a void handler w/o an associated message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="138" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="56" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a3fa6c8ee2214c074c748000f782ad793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>Run the task! </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the runnable is non-threaded, <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1ad9acf28ef0fed7a7d63a9ca1d3ba3efc" kindref="member">isDone()</ref></computeroutput> will be <computeroutput>true</computeroutput> after this runs. If it is threaded, it might suspend and the runnable might have more work to complete. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="149" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="128" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a42ab8351e2003e8810711ef020a72931" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" kindref="member">ThreadIDType</ref></type>
        <definition>ThreadIDType vt::runnable::RunnableNew::getThreadID</definition>
        <argsstring>() const</argsstring>
        <name>getThreadID</name>
        <briefdescription>
<para>Get the thread ID associated with the runnable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Return <computeroutput>no_thread_id</computeroutput> if the runnable has not started or is not threaded</para></simplesect>
<simplesect kind="return"><para>the thread ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="159" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a997203eb54dc62151d11211384cf335f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::send</definition>
        <argsstring>(NodeType dest, MsgSizeType size, bool bcast)</argsstring>
        <name>send</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a408e86a8c7c89309b52907dc5a513924" kindref="member">MsgSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bcast</declname>
        </param>
        <briefdescription>
<para>Loop through all contexts add run the <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1a997203eb54dc62151d11211384cf335f" kindref="member">send()</ref></computeroutput> method associated with this runnable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node for the send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the message size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bcast</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it&apos;s a broadcast </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="195" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="214" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1ab7cbde782a5ad0c67fa4c63f02e174ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * vt::runnable::RunnableNew::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Get a context object by the type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the type doesn&apos;t exist, the function will return <computeroutput>nullptr</computeroutput> </para></simplesect>
<simplesect kind="return"><para>the pointer to the context object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="205" column="1" bodyfile="src/vt/runnable/runnable.impl.h" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1aed655dff826a821a3db9162259f33288" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> *</type>
        <definition>BaseMsgType* vt::runnable::RunnableNew::getMsg</definition>
        <argsstring>() const</argsstring>
        <name>getMsg</name>
        <briefdescription>
<para>Get the message associated with the runnable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Returns a non-owning pointer to message</para></simplesect>
<simplesect kind="return"><para>the message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="214" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1ad9acf28ef0fed7a7d63a9ca1d3ba3efc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::runnable::RunnableNew::isDone</definition>
        <argsstring>() const</argsstring>
        <name>isDone</name>
        <briefdescription>
<para>Check if this runnable is complete or not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>After invoking <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1a3fa6c8ee2214c074c748000f782ad793" kindref="member">run()</ref></computeroutput> it should be complete unless it suspended!</para></simplesect>
<simplesect kind="return"><para>whether it is done and can be deallocated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="223" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1af45b4443eee6dff57249bda0a9c2b7f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::runnable::RunnableNew::isSuspended</definition>
        <argsstring>() const</argsstring>
        <name>isSuspended</name>
        <briefdescription>
<para>Check if this runnable is suspended or not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1a3fa6c8ee2214c074c748000f782ad793" kindref="member">run()</ref></computeroutput> method is never called suspended will not be true because it was never started.</para></simplesect>
<simplesect kind="return"><para>return if it is suspended </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="233" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1aa30544adc03798c988a5e3bea2bfa3f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::setExplicitTask</definition>
        <argsstring>(ActionType task_in)</argsstring>
        <name>setExplicitTask</name>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>task_in</declname>
        </param>
        <briefdescription>
<para>Set an explicit task for the runnable bypassing the handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">task_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the task </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="240" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="240" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a045c7de03d22865a65dbfac4c51ae1e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Loop through all the contexts associated with this runnable and invoke <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1a045c7de03d22865a65dbfac4c51ae1e0" kindref="member">begin()</ref></computeroutput> on them. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="166" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a068c32bc50b8754909aad6d2464e3cc8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Loop through all the contexts associated with this runnable and invoke <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1a068c32bc50b8754909aad6d2464e3cc8" kindref="member">end()</ref></computeroutput> on them. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="172" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1aaeb0fefa5654a01600da2e0910f69ca7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::suspend</definition>
        <argsstring>()</argsstring>
        <name>suspend</name>
        <briefdescription>
<para>Loop through all the contexts associated with this runnable and invoke <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1aaeb0fefa5654a01600da2e0910f69ca7" kindref="member">suspend()</ref></computeroutput> on them. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="178" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1runnable_1_1_runnable_new_1a4d38f8f4d413457a40f134a57480449d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::runnable::RunnableNew::resume</definition>
        <argsstring>()</argsstring>
        <name>resume</name>
        <briefdescription>
<para>Loop through all the contexts associated with this runnable and invoke <computeroutput><ref refid="structvt_1_1runnable_1_1_runnable_new_1a4d38f8f4d413457a40f134a57480449d" kindref="member">resume()</ref></computeroutput> on them. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.h" line="184" column="1" bodyfile="src/vt/runnable/runnable.cc" bodystart="208" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Holds a runnable active handler along with all the context associated with it to run it independently of the where in the stack it was created. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3567">
        <label>vt::messaging::MsgPtrImplBase</label>
        <link refid="structvt_1_1messaging_1_1_msg_ptr_impl_base"/>
      </node>
      <node id="3566">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
      <node id="3564">
        <label>vt::runnable::RunnableNew</label>
        <link refid="structvt_1_1runnable_1_1_runnable_new"/>
        <childnode refid="3565" relation="usage">
          <edgelabel>msg_</edgelabel>
        </childnode>
      </node>
      <node id="3565">
        <label>vt::messaging::MsgSharedPtr&lt; vt::messaging::ActiveMsg &gt;</label>
        <link refid="structvt_1_1messaging_1_1_msg_shared_ptr"/>
        <childnode refid="3566" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
        <childnode refid="3567" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/runnable/runnable.h" line="69" column="1" bodyfile="src/vt/runnable/runnable.h" bodystart="69" bodyend="252"/>
    <listofallmembers>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a63fb77e8f9739e1eb3c7fb0dee6d8a1e" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>addContext</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a045c7de03d22865a65dbfac4c51ae1e0" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>begin</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a3dc86a8be6cfd9537f6d90f3939ac208" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>contexts_</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aba3112ca6cb024a32552569ef0571e20" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>CtxBasePtr</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1ae296cbcff8fe4f664af37960dd00397e" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>done_</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a068c32bc50b8754909aad6d2464e3cc8" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>end</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a591a5eaee30eea99711e14e050633d34" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>FnParamType</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1ab7cbde782a5ad0c67fa4c63f02e174ad" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>get</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aed655dff826a821a3db9162259f33288" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>getMsg</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a42ab8351e2003e8810711ef020a72931" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>getThreadID</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aa29430d7529095b33033112ba405ace7" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>is_threaded_</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1ad9acf28ef0fed7a7d63a9ca1d3ba3efc" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>isDone</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1af45b4443eee6dff57249bda0a9c2b7f0" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>isSuspended</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a1998ba5d1d29bada29c94d884f906d11" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>msg_</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a12c7ddbd735a9bf704b06ecea7c26e60" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>operator=</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a3561cbcbc3197074cded8da204e98924" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>operator=</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a4d38f8f4d413457a40f134a57480449d" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>resume</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a3fa6c8ee2214c074c748000f782ad793" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>run</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a47b84af69a5444b9d837a3ffe4d4792b" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>RunnableNew</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a55ff785753c781903bf932a1e5faddd7" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>RunnableNew</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1ac7e1d836710c2d0cd2791f1a1c5ac03c" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>RunnableNew</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a4c34cf076ffd914c3d18aca7d2ff28db" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>RunnableNew</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a997203eb54dc62151d11211384cf335f" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>send</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aa30544adc03798c988a5e3bea2bfa3f3" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>setExplicitTask</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1ae6052ee648ca061be2b3b2786ab7b013" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>setupHandler</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aa494c41e589866c5a7f1669a5c2472b0" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>setupHandlerElement</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aeaec7cf81fe97f2d6b57f35dbd408b5e" prot="public" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>setupHandlerElement</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1aaeb0fefa5654a01600da2e0910f69ca7" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>suspend</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a1b20f584aa7a1a09857029532fda1782" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>suspended_</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1a8216711b400b7c1f36c5a9bafaa7133e" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>task_</name></member>
      <member refid="structvt_1_1runnable_1_1_runnable_new_1ad0e857fdce2f1c13512a1415993cd7fe" prot="private" virt="non-virtual"><scope>vt::runnable::RunnableNew</scope><name>tid_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
