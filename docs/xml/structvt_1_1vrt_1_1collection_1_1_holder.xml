<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1_holder" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::Holder</compoundname>
    <includes refid="vrt_2collection_2holders_2holder_8h" local="no">holder.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>ColT</declname>
        <defname>ColT</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>IndexT</declname>
        <defname>IndexT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae3bb115b69cf47e14a4e8441cebe9142" prot="public" static="no">
        <type>std::unordered_map&lt; T, U &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::ContType =  std::unordered_map&lt;T, U&gt;</definition>
        <argsstring></argsstring>
        <name>ContType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="78" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a38b4a4bfc4408cf28918c32433c80aac" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_collection_base" kindref="compound">CollectionBase</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::CollectionType =  CollectionBase&lt;ColT, IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="79" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a04ba57a7b2c48ce6b4c90d3f3b33f43c" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a38b4a4bfc4408cf28918c32433c80aac" kindref="member">CollectionType</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::VirtualPtrType =  std::unique_ptr&lt;CollectionType&gt;</definition>
        <argsstring></argsstring>
        <name>VirtualPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="80" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a3206c3e5eb5d6deb4667409222163b77" prot="public" static="no">
        <type>IndexT</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::LookupElementType =  IndexT</definition>
        <argsstring></argsstring>
        <name>LookupElementType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="81" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1aafc9b515450179bad7f03e17010b59f8" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_element_holder" kindref="compound">ElementHolder</ref>&lt; ColT, IndexT &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::InnerHolder =  ElementHolder&lt;ColT, IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>InnerHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="82" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae8d4ff940c971d52b237cf4d6049380a" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae3bb115b69cf47e14a4e8441cebe9142" kindref="member">ContType</ref>&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a3206c3e5eb5d6deb4667409222163b77" kindref="member">LookupElementType</ref>, <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1aafc9b515450179bad7f03e17010b59f8" kindref="member">InnerHolder</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::TypedIndexContainer =  ContType&lt;LookupElementType, InnerHolder&gt;</definition>
        <argsstring></argsstring>
        <name>TypedIndexContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="83" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a01812f8ee06d3a67e1a9aa2765989913" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::LBContFnType =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>LBContFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="84" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1af26a59243dd4e1a86d8fcf320a8dc463" prot="public" static="no">
        <type>std::list&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a01812f8ee06d3a67e1a9aa2765989913" kindref="member">LBContFnType</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::LBContListType =  std::list&lt;LBContFnType&gt;</definition>
        <argsstring></argsstring>
        <name>LBContListType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="85" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a9738cadcf89ace9c3d0c23990e4f919e" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae3bb115b69cf47e14a4e8441cebe9142" kindref="member">ContType</ref>&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a3206c3e5eb5d6deb4667409222163b77" kindref="member">LookupElementType</ref>, <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1af26a59243dd4e1a86d8fcf320a8dc463" kindref="member">LBContListType</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::TypedLBContainer =  ContType&lt;LookupElementType, LBContListType&gt;</definition>
        <argsstring></argsstring>
        <name>TypedLBContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="86" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a26e20d23447e935e218a07ffd638706d" prot="public" static="no">
        <type>std::function&lt; void(IndexT const  &amp;, <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a38b4a4bfc4408cf28918c32433c80aac" kindref="member">CollectionType</ref> *)&gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::FuncApplyType =  std::function&lt;void(IndexT const&amp;, CollectionType*)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncApplyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="87" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a5c28963c09fd935028444c5a09fada2d" prot="public" static="no">
        <type>std::function&lt; bool(IndexT const  &amp;)&gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::FuncExprType =  std::function&lt;bool(IndexT const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncExprType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="88" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a3251a556ac19fc7dc4d0bd388cfaedeb" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::CountType =  uint64_t</definition>
        <argsstring></argsstring>
        <name>CountType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="89" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_holder_1af9288b1963f434a90b307b5305a49510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct CollectionManager</definition>
        <argsstring></argsstring>
        <name>CollectionManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="253" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a2d053dab199764dce3029b8a55cbf1cc" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::erased</definition>
        <argsstring></argsstring>
        <name>erased</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="256" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a1b21c6d5b8b0bce316afe9b60e80d621" prot="private" static="no" mutable="no">
        <type>TypedIndexContainer::iterator</type>
        <definition>TypedIndexContainer::iterator vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::foreach_iter</definition>
        <argsstring></argsstring>
        <name>foreach_iter</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="257" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a012801ec34d0ed70bba0260e4383b07e" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref>, <ref refid="structvt_1_1vrt_1_1collection_1_1_collection_message" kindref="compound">CollectionMessage</ref>&lt; ColT &gt; * &gt;</type>
        <definition>std::unordered_map&lt;EpochType, CollectionMessage&lt;ColT&gt;*&gt; vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::bcasts_</definition>
        <argsstring></argsstring>
        <name>bcasts_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="258" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a966244e1c839d42df86d4e9f62f5c633" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::cur_bcast_epoch_</definition>
        <argsstring></argsstring>
        <name>cur_bcast_epoch_</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="259" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1ad41ddb379b9d88253ea822e5261fb541" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae8d4ff940c971d52b237cf4d6049380a" kindref="member">TypedIndexContainer</ref></type>
        <definition>TypedIndexContainer vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::vc_container_</definition>
        <argsstring></argsstring>
        <name>vc_container_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="260" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a862e7f99e626f9ea11de83b635466cab" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::is_destroyed_</definition>
        <argsstring></argsstring>
        <name>is_destroyed_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="261" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a7627f2411c3d19bc070e85b71b1f9fff" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::cur_group_</definition>
        <argsstring></argsstring>
        <name>cur_group_</name>
        <initializer>= no_group</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="262" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1ac897fcc83ba066a30cbf7b81e0283a1f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::use_group_</definition>
        <argsstring></argsstring>
        <name>use_group_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="263" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1ad4041accaac66318b6ddc027f9730d32" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::group_ready_</definition>
        <argsstring></argsstring>
        <name>group_ready_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="264" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a2809b2adf064822eeab947991e8f12d3" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::group_root_</definition>
        <argsstring></argsstring>
        <name>group_root_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="265" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1ac6e747cb66d6f44f78c28448a59d8a0a" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a3251a556ac19fc7dc4d0bd388cfaedeb" kindref="member">CountType</ref></type>
        <definition>CountType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::num_erased_not_removed_</definition>
        <argsstring></argsstring>
        <name>num_erased_not_removed_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="266" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1aebf918fdc3e2ae3b4cf20a1ceb1a6acf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a62d04c44a3c187eae66bdba2090b4505" kindref="member">listener::ListenFnType</ref>&lt; IndexT &gt; &gt;</type>
        <definition>std::vector&lt;listener::ListenFnType&lt;IndexT&gt; &gt; vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::event_listeners_</definition>
        <argsstring></argsstring>
        <name>event_listeners_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="267" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a15b1f2f386c124191f01400fecf24464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::exists</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>exists</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Check of index exists here. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="98" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a68c05b8ae4f8755eb388f50da5c9553b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1aafc9b515450179bad7f03e17010b59f8" kindref="member">InnerHolder</ref> &amp;</type>
        <definition>Holder&lt; ColT, IndexT &gt;::InnerHolder &amp; vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::lookup</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>lookup</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Lookup the inner holder for an index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the inner holder with the actual collection element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="107" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="99" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a67967ed879eafbbb2e8bb1230bc38874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::insert</definition>
        <argsstring>(IndexT const &amp;idx, InnerHolder &amp;&amp;inner)</argsstring>
        <name>insert</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1aafc9b515450179bad7f03e17010b59f8" kindref="member">InnerHolder</ref> &amp;&amp;</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
<para>Insert a new element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inner</parametername>
</parameternamelist>
<parameterdescription>
<para>the inner holder with the collection element unique pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="115" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="66" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae2cd807c3b44832151b7f7d05a07e879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a04ba57a7b2c48ce6b4c90d3f3b33f43c" kindref="member">VirtualPtrType</ref></type>
        <definition>Holder&lt; ColT, IndexT &gt;::VirtualPtrType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::remove</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>remove</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Remove an element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique pointer to element now removed from holder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="124" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="112" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae4bd4f8f82713c8b4b2ea0b472fe7192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::destroyAll</definition>
        <argsstring>()</argsstring>
        <name>destroyAll</name>
        <briefdescription>
<para>Destroy all elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="129" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a974126763d197024453d3ed2dcc9d215" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::isDestroyed</definition>
        <argsstring>() const</argsstring>
        <name>isDestroyed</name>
        <briefdescription>
<para>Check if collection has been destroyed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether it is destroyed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="136" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1aa6641e97e87778904b76dba93a69bb56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::cleanupExists</definition>
        <argsstring>()</argsstring>
        <name>cleanupExists</name>
        <briefdescription>
<para>Cleanup deleted elements that were delayed. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Rename this method</para></xrefdescription></xrefsect></para><para>When deleting elements from a handler, it might not be safe to delete them from the holder right away due to a reference/iterator to the element being held while deletion occurs. This method cleans up an elements that are marked as erased. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="148" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="142" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a8d4a61cc04310a7c998fe37695bbbd6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::foreach</definition>
        <argsstring>(FuncApplyType fn)</argsstring>
        <name>foreach</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a26e20d23447e935e218a07ffd638706d" kindref="member">FuncApplyType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Perform apply action over all collection elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>apply function for each element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="155" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="155" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1aebff9d8a0b857688bf3b303cb832b543" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TypedIndexContainer::size_type</type>
        <definition>Holder&lt; ColT, IndexT &gt;::TypedIndexContainer::size_type vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::numElements</definition>
        <argsstring>() const</argsstring>
        <name>numElements</name>
        <briefdescription>
<para>Count number of elements. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="162" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1aafc7aad37f14db35c91d3e085bdf0500" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TypedIndexContainer::size_type</type>
        <definition>Holder&lt; ColT, IndexT &gt;::TypedIndexContainer::size_type vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::numElementsExpr</definition>
        <argsstring>(FuncExprType f) const</argsstring>
        <name>numElementsExpr</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a5c28963c09fd935028444c5a09fada2d" kindref="member">FuncExprType</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Count number of elements that match a expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>apply function that returns membership of expression</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="171" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a579e33999a2d66ded9c3751be3ba11f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::group</definition>
        <argsstring>() const</argsstring>
        <name>group</name>
        <briefdescription>
<para>Get current group. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the group ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="178" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ad1004d701690d7de8d323de1d5bc1a29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::setGroup</definition>
        <argsstring>(GroupType const &amp;group)</argsstring>
        <name>setGroup</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const &amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Set a group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>group to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="185" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1af9a9e5dbf89d84e9fb4d267f720bfa4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::useGroup</definition>
        <argsstring>() const</argsstring>
        <name>useGroup</name>
        <briefdescription>
<para>Whether the group should be used. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether it should be used </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="192" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1aa76e02e027429572c1c9b2169d013e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::setUseGroup</definition>
        <argsstring>(bool const use_group)</argsstring>
        <name>setUseGroup</name>
        <param>
          <type>bool const</type>
          <declname>use_group</declname>
        </param>
        <briefdescription>
<para>Set whether a group should be used. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it should be used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="199" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1afeafe4c77613531a166be80bdaea4fd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::groupReady</definition>
        <argsstring>() const</argsstring>
        <name>groupReady</name>
        <briefdescription>
<para>Check if group is ready. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether it is ready </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="206" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1aa666f9e2960605203d325fd39de82dd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::setGroupReady</definition>
        <argsstring>(bool const ready)</argsstring>
        <name>setGroupReady</name>
        <param>
          <type>bool const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Set if group is ready to be used. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is ready </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="213" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a4712da9a79782e5c33de2773d66cc587" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::groupRoot</definition>
        <argsstring>() const</argsstring>
        <name>groupRoot</name>
        <briefdescription>
<para>Get the root of the group. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the group root </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="220" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a9805b84e57120bc7088058f782eb56f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::setGroupRoot</definition>
        <argsstring>(NodeType const root)</argsstring>
        <name>setGroupRoot</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Set the root of the group. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>the root </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="227" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a07ea68abde3582b2300a86b32c3ff3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::addListener</definition>
        <argsstring>(listener::ListenFnType&lt; IndexT &gt; fn)</argsstring>
        <name>addListener</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a62d04c44a3c187eae66bdba2090b4505" kindref="member">listener::ListenFnType</ref>&lt; IndexT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Add element-specific listener. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>listener function</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the registered listener entry ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="236" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae54e9da47ea76dc7f6bb4cd12a135209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::removeListener</definition>
        <argsstring>(int element)</argsstring>
        <name>removeListener</name>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Remove a element listener. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">element</parametername>
</parameternamelist>
<parameterdescription>
<para>the entry ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="243" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a3859f44089ed23d724782d5687343061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; ColT, IndexT &gt;::applyListeners</definition>
        <argsstring>(listener::ElementEventEnum event, IndexT const &amp;idx)</argsstring>
        <name>applyListeners</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a96ace4b58b3d91759e7abda5cc33b012" kindref="member">listener::ElementEventEnum</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Run all listeners. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to run on </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="251" column="1" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="204" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hold collection elements mapped to this node for a given collection. </para>    </briefdescription>
    <detaileddescription>
<para>Store the unique pointers to collection elements for a given collection proxy. Provides functionality to find, add, remove, and foreach over the collection elements. </para>    </detaileddescription>
    <location file="src/vt/vrt/collection/holders/holder.h" line="76" column="1" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="76" bodyend="268"/>
    <listofallmembers>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a07ea68abde3582b2300a86b32c3ff3e8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>addListener</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a3859f44089ed23d724782d5687343061" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>applyListeners</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a012801ec34d0ed70bba0260e4383b07e" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>bcasts_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aa6641e97e87778904b76dba93a69bb56" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>cleanupExists</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1af9288b1963f434a90b307b5305a49510" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>CollectionManager</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a38b4a4bfc4408cf28918c32433c80aac" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>CollectionType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae3bb115b69cf47e14a4e8441cebe9142" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>ContType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a3251a556ac19fc7dc4d0bd388cfaedeb" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>CountType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a966244e1c839d42df86d4e9f62f5c633" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>cur_bcast_epoch_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a7627f2411c3d19bc070e85b71b1f9fff" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>cur_group_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae4bd4f8f82713c8b4b2ea0b472fe7192" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>destroyAll</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a2d053dab199764dce3029b8a55cbf1cc" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>erased</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aebf918fdc3e2ae3b4cf20a1ceb1a6acf" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>event_listeners_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a15b1f2f386c124191f01400fecf24464" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>exists</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a8d4a61cc04310a7c998fe37695bbbd6b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>foreach</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a1b21c6d5b8b0bce316afe9b60e80d621" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>foreach_iter</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a26e20d23447e935e218a07ffd638706d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>FuncApplyType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a5c28963c09fd935028444c5a09fada2d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>FuncExprType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a579e33999a2d66ded9c3751be3ba11f8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>group</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad4041accaac66318b6ddc027f9730d32" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>group_ready_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a2809b2adf064822eeab947991e8f12d3" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>group_root_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1afeafe4c77613531a166be80bdaea4fd6" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>groupReady</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4712da9a79782e5c33de2773d66cc587" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>groupRoot</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aafc9b515450179bad7f03e17010b59f8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>InnerHolder</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a67967ed879eafbbb2e8bb1230bc38874" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>insert</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a862e7f99e626f9ea11de83b635466cab" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>is_destroyed_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a974126763d197024453d3ed2dcc9d215" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>isDestroyed</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a01812f8ee06d3a67e1a9aa2765989913" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>LBContFnType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1af26a59243dd4e1a86d8fcf320a8dc463" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>LBContListType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a68c05b8ae4f8755eb388f50da5c9553b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>lookup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a3206c3e5eb5d6deb4667409222163b77" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>LookupElementType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ac6e747cb66d6f44f78c28448a59d8a0a" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>num_erased_not_removed_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aebff9d8a0b857688bf3b303cb832b543" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>numElements</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aafc7aad37f14db35c91d3e085bdf0500" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>numElementsExpr</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae2cd807c3b44832151b7f7d05a07e879" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>remove</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae54e9da47ea76dc7f6bb4cd12a135209" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>removeListener</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad1004d701690d7de8d323de1d5bc1a29" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aa666f9e2960605203d325fd39de82dd7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setGroupReady</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a9805b84e57120bc7088058f782eb56f4" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setGroupRoot</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aa76e02e027429572c1c9b2169d013e56" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setUseGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae8d4ff940c971d52b237cf4d6049380a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>TypedIndexContainer</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a9738cadcf89ace9c3d0c23990e4f919e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>TypedLBContainer</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ac897fcc83ba066a30cbf7b81e0283a1f" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>use_group_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1af9a9e5dbf89d84e9fb4d267f720bfa4e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>useGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad41ddb379b9d88253ea822e5261fb541" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>vc_container_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a04ba57a7b2c48ce6b4c90d3f3b33f43c" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>VirtualPtrType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
