<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1_holder" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::Holder</compoundname>
    <includes refid="vrt_2collection_2holders_2holder_8h" local="no">holder.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>IndexT</declname>
        <defname>IndexT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a89a4952463fceb239ce3415304526dc9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; T, U &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::ContType =  std::unordered_map&lt;T, U&gt;</definition>
        <argsstring></argsstring>
        <name>ContType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="77" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1ad940337a70ac576f960ea2d22a33f290" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_indexable" kindref="compound">Indexable</ref>&lt; IndexT &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::CollectionType =  Indexable&lt;IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="78" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a0a7eb9b25e205e5d113ec13964547a8e" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad940337a70ac576f960ea2d22a33f290" kindref="member">CollectionType</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::VirtualPtrType =  std::unique_ptr&lt;CollectionType&gt;</definition>
        <argsstring></argsstring>
        <name>VirtualPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="79" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a619f5acc2501a0d3f69cca99f89e72fd" prot="public" static="no">
        <type>IndexT</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::LookupElementType =  IndexT</definition>
        <argsstring></argsstring>
        <name>LookupElementType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="80" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a6c93d243ae88f38a8c5f8aa3a1ad86d8" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_element_holder" kindref="compound">ElementHolder</ref>&lt; IndexT &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::InnerHolder =  ElementHolder&lt;IndexT&gt;</definition>
        <argsstring></argsstring>
        <name>InnerHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="81" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a7f238e98ee835799bc876c180a226b0d" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a89a4952463fceb239ce3415304526dc9" kindref="member">ContType</ref>&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a619f5acc2501a0d3f69cca99f89e72fd" kindref="member">LookupElementType</ref>, <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a6c93d243ae88f38a8c5f8aa3a1ad86d8" kindref="member">InnerHolder</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::TypedIndexContainer =  ContType&lt;LookupElementType, InnerHolder&gt;</definition>
        <argsstring></argsstring>
        <name>TypedIndexContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="82" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a1f897dfd5f4e29e997533aeefe7b252d" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::LBContFnType =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>LBContFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="83" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a4a738b6b6c2216d7a5b528956502172a" prot="public" static="no">
        <type>std::list&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a1f897dfd5f4e29e997533aeefe7b252d" kindref="member">LBContFnType</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::LBContListType =  std::list&lt;LBContFnType&gt;</definition>
        <argsstring></argsstring>
        <name>LBContListType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="84" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a299791b3df9ee801283b1ca8ed24433b" prot="public" static="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a89a4952463fceb239ce3415304526dc9" kindref="member">ContType</ref>&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a619f5acc2501a0d3f69cca99f89e72fd" kindref="member">LookupElementType</ref>, <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4a738b6b6c2216d7a5b528956502172a" kindref="member">LBContListType</ref> &gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::TypedLBContainer =  ContType&lt;LookupElementType, LBContListType&gt;</definition>
        <argsstring></argsstring>
        <name>TypedLBContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="85" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1ad90339cb0c4fe0d69f4e0100265a15d4" prot="public" static="no">
        <type>std::function&lt; void(IndexT const  &amp;, <ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad940337a70ac576f960ea2d22a33f290" kindref="member">CollectionType</ref> *)&gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::FuncApplyType =  std::function&lt;void(IndexT const&amp;, CollectionType*)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncApplyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="86" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1a4d4364a2f3aa30c8a86cb08742a84e25" prot="public" static="no">
        <type>std::function&lt; bool(IndexT const  &amp;)&gt;</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::FuncExprType =  std::function&lt;bool(IndexT const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>FuncExprType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="87" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1vrt_1_1collection_1_1_holder_1afdfca52a996f6ac65e6f9e59035f2e3a" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using vt::vrt::collection::Holder&lt; IndexT &gt;::CountType =  uint64_t</definition>
        <argsstring></argsstring>
        <name>CountType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="88" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1vrt_1_1collection_1_1_holder_1af9288b1963f434a90b307b5305a49510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct CollectionManager</definition>
        <argsstring></argsstring>
        <name>CollectionManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="255" column="3" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a8e12bc6e128cbf4829f13a578219a0be" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::erased</definition>
        <argsstring></argsstring>
        <name>erased</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="258" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a7c6f6d6603d35f41f549f2184997efd6" prot="private" static="no" mutable="no">
        <type>TypedIndexContainer::iterator</type>
        <definition>TypedIndexContainer::iterator vt::vrt::collection::Holder&lt; IndexT &gt;::foreach_iter</definition>
        <argsstring></argsstring>
        <name>foreach_iter</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="259" column="42" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1ab343b98c5353be6ec95cb74fb428dcc6" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a7f238e98ee835799bc876c180a226b0d" kindref="member">TypedIndexContainer</ref></type>
        <definition>TypedIndexContainer vt::vrt::collection::Holder&lt; IndexT &gt;::vc_container_</definition>
        <argsstring></argsstring>
        <name>vc_container_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="260" column="23" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a2deaf94120926bbab4dfcc818ea4087e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::is_destroyed_</definition>
        <argsstring></argsstring>
        <name>is_destroyed_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="261" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a18b94e933b0a02c15cbe747ac815a2e8" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::vrt::collection::Holder&lt; IndexT &gt;::cur_group_</definition>
        <argsstring></argsstring>
        <name>cur_group_</name>
        <initializer>= no_group</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="262" column="13" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1aa2e3c8d26988ac5f680f70f59c7bfb37" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::use_group_</definition>
        <argsstring></argsstring>
        <name>use_group_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="263" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1afa3f96bdf578c8a188c1aca64bc343d7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::group_ready_</definition>
        <argsstring></argsstring>
        <name>group_ready_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="264" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1ade00ee9b6c49770e4ecf0d2920bb841b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::Holder&lt; IndexT &gt;::group_root_</definition>
        <argsstring></argsstring>
        <name>group_root_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="265" column="12" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1aa482ff846286aa20fc6616482275c5aa" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1afdfca52a996f6ac65e6f9e59035f2e3a" kindref="member">CountType</ref></type>
        <definition>CountType vt::vrt::collection::Holder&lt; IndexT &gt;::num_erased_not_removed_</definition>
        <argsstring></argsstring>
        <name>num_erased_not_removed_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="266" column="13" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1_holder_1a92cdc5e1e158c07208aa19595114d3a3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a0f35a1b6c7c88d9543939a204f418d7a" kindref="member">listener::ListenFnType</ref>&lt; IndexT &gt; &gt;</type>
        <definition>std::vector&lt;listener::ListenFnType&lt;IndexT&gt; &gt; vt::vrt::collection::Holder&lt; IndexT &gt;::event_listeners_</definition>
        <argsstring></argsstring>
        <name>event_listeners_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="267" column="15" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a4c50d8a3ed73908e5532974227b1bb85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::exists</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>exists</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Check of index exists here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether it exists </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="97" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a1432de82ec0ae7aa521038f01e0b83f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a6c93d243ae88f38a8c5f8aa3a1ad86d8" kindref="member">InnerHolder</ref> &amp;</type>
        <definition>Holder&lt; IndexT &gt;::InnerHolder &amp; vt::vrt::collection::Holder&lt; IndexT &gt;::lookup</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>lookup</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Lookup the inner holder for an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the inner holder with the actual collection element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="106" column="15" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="98" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a52d7c8a407d20668d84c3a6136b1b5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::insert</definition>
        <argsstring>(IndexT const &amp;idx, InnerHolder &amp;&amp;inner)</argsstring>
        <name>insert</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a6c93d243ae88f38a8c5f8aa3a1ad86d8" kindref="member">InnerHolder</ref> &amp;&amp;</type>
          <declname>inner</declname>
        </param>
        <briefdescription>
<para>Insert a new element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inner</parametername>
</parameternamelist>
<parameterdescription>
<para>the inner holder with the collection element unique pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="114" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="65" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a7920bc627a037fa9870dea0682dce31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a0a7eb9b25e205e5d113ec13964547a8e" kindref="member">VirtualPtrType</ref></type>
        <definition>Holder&lt; IndexT &gt;::VirtualPtrType vt::vrt::collection::Holder&lt; IndexT &gt;::remove</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>remove</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Remove an element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique pointer to element now removed from holder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="123" column="18" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="111" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a8627b40225e0ebc51b31269f20c3516f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::destroyAll</definition>
        <argsstring>()</argsstring>
        <name>destroyAll</name>
        <briefdescription>
<para>Destroy all elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="128" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1aa66400b46cb84ee29ff6074ec2dab42d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::isDestroyed</definition>
        <argsstring>() const</argsstring>
        <name>isDestroyed</name>
        <briefdescription>
<para>Check if collection has been destroyed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether it is destroyed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="135" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a46a48d80d10924fbb928f4267a83c441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::cleanupExists</definition>
        <argsstring>()</argsstring>
        <name>cleanupExists</name>
        <briefdescription>
<para>Cleanup deleted elements that were delayed. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Rename this method</para>
</xrefdescription></xrefsect></para>
<para>When deleting elements from a handler, it might not be safe to delete them from the holder right away due to a reference/iterator to the element being held while deletion occurs. This method cleans up an elements that are marked as erased. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="147" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="141" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1adbdb11d1c83ec0c4ce3d02df283a4a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::foreach</definition>
        <argsstring>(FuncApplyType fn)</argsstring>
        <name>foreach</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad90339cb0c4fe0d69f4e0100265a15d4" kindref="member">FuncApplyType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Perform apply action over all collection elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>apply function for each element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="154" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="154" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a430a021e0113ddfeb18a1bb2e72522ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TypedIndexContainer::size_type</type>
        <definition>Holder&lt; IndexT &gt;::TypedIndexContainer::size_type vt::vrt::collection::Holder&lt; IndexT &gt;::numElements</definition>
        <argsstring>() const</argsstring>
        <name>numElements</name>
        <briefdescription>
<para>Count number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="161" column="43" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae75fb5f11a3383a8e758d9a6d24fd536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TypedIndexContainer::size_type</type>
        <definition>Holder&lt; IndexT &gt;::TypedIndexContainer::size_type vt::vrt::collection::Holder&lt; IndexT &gt;::numElementsExpr</definition>
        <argsstring>(FuncExprType f) const</argsstring>
        <name>numElementsExpr</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4d4364a2f3aa30c8a86cb08742a84e25" kindref="member">FuncExprType</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Count number of elements that match a expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>apply function that returns membership of expression</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="170" column="43" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a0bcb968630cce9e2da7a68dbbd46d746" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref></type>
        <definition>GroupType vt::vrt::collection::Holder&lt; IndexT &gt;::group</definition>
        <argsstring>() const</argsstring>
        <name>group</name>
        <briefdescription>
<para>Get current group. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the group ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="177" column="13" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a69156fa0708db3d9d017c0693653cef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::setGroup</definition>
        <argsstring>(GroupType const &amp;group)</argsstring>
        <name>setGroup</name>
        <param>
          <type><ref refid="namespacevt_1a27b5e4411c9b6140c49100e050e2f743" kindref="member">GroupType</ref> const &amp;</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Set a group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">group</parametername>
</parameternamelist>
<parameterdescription>
<para>group to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="184" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a937fec77df65d71ad2d6a7c70017c49f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::useGroup</definition>
        <argsstring>() const</argsstring>
        <name>useGroup</name>
        <briefdescription>
<para>Whether the group should be used. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether it should be used </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="191" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ae169df5467202748f84a06f3b294c322" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::setUseGroup</definition>
        <argsstring>(bool const use_group)</argsstring>
        <name>setUseGroup</name>
        <param>
          <type>bool const</type>
          <declname>use_group</declname>
        </param>
        <briefdescription>
<para>Set whether a group should be used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use_group</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it should be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="198" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a84bec2251b3eb324f9db28b979a7a51d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::vrt::collection::Holder&lt; IndexT &gt;::groupReady</definition>
        <argsstring>() const</argsstring>
        <name>groupReady</name>
        <briefdescription>
<para>Check if group is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether it is ready </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="205" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a4ca1b81daf55017c6f4a4cd584b761d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::setGroupReady</definition>
        <argsstring>(bool const ready)</argsstring>
        <name>setGroupReady</name>
        <param>
          <type>bool const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Set if group is ready to be used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is ready </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="212" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a26b8815a9a424b956e0cde211ea95545" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::vrt::collection::Holder&lt; IndexT &gt;::groupRoot</definition>
        <argsstring>() const</argsstring>
        <name>groupRoot</name>
        <briefdescription>
<para>Get the root of the group. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the group root </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="219" column="12" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1ac63fd92c5e7b93298fe464fcfcdbb1b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::setGroupRoot</definition>
        <argsstring>(NodeType const root)</argsstring>
        <name>setGroupRoot</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>root</declname>
        </param>
        <briefdescription>
<para>Set the root of the group. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">root</parametername>
</parameternamelist>
<parameterdescription>
<para>the root </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="226" column="8" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a501a01ffef66ba8606ec7d9a808b3892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vt::vrt::collection::Holder&lt; IndexT &gt;::addListener</definition>
        <argsstring>(listener::ListenFnType&lt; IndexT &gt; fn)</argsstring>
        <name>addListener</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a0f35a1b6c7c88d9543939a204f418d7a" kindref="member">listener::ListenFnType</ref>&lt; IndexT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Add element-specific listener. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>listener function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the registered listener entry ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="235" column="7" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a777a6cd6d587f484ba3787faa81f92a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::removeListener</definition>
        <argsstring>(int element)</argsstring>
        <name>removeListener</name>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Remove a element listener. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">element</parametername>
</parameternamelist>
<parameterdescription>
<para>the entry ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="242" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="197" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1_holder_1a88cb47c82712c3ddfb5eb5654503b899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::Holder&lt; IndexT &gt;::applyListeners</definition>
        <argsstring>(listener::ElementEventEnum event, IndexT const &amp;idx, NodeType home_node)</argsstring>
        <name>applyListeners</name>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1listener_1a96ace4b58b3d91759e7abda5cc33b012" kindref="member">listener::ElementEventEnum</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>home_node</declname>
        </param>
        <briefdescription>
<para>Run all listeners. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to run on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">home</parametername>
</parameternamelist>
<parameterdescription>
<para>the home node for the element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/holders/holder.h" line="251" column="8" bodyfile="src/vt/vrt/collection/holders/holder.impl.h" bodystart="206" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hold collection elements mapped to this node for a given collection. </para>
    </briefdescription>
    <detaileddescription>
<para>Store the unique pointers to collection elements for a given collection proxy. Provides functionality to find, add, remove, and foreach over the collection elements. </para>
    </detaileddescription>
    <location file="src/vt/vrt/collection/holders/holder.h" line="75" column="13" bodyfile="src/vt/vrt/collection/holders/holder.h" bodystart="75" bodyend="268"/>
    <listofallmembers>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a501a01ffef66ba8606ec7d9a808b3892" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>addListener</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a88cb47c82712c3ddfb5eb5654503b899" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>applyListeners</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a46a48d80d10924fbb928f4267a83c441" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>cleanupExists</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1af9288b1963f434a90b307b5305a49510" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>CollectionManager</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad940337a70ac576f960ea2d22a33f290" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>CollectionType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a89a4952463fceb239ce3415304526dc9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>ContType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1afdfca52a996f6ac65e6f9e59035f2e3a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>CountType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a18b94e933b0a02c15cbe747ac815a2e8" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>cur_group_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a8627b40225e0ebc51b31269f20c3516f" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>destroyAll</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a8e12bc6e128cbf4829f13a578219a0be" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>erased</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a92cdc5e1e158c07208aa19595114d3a3" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>event_listeners_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4c50d8a3ed73908e5532974227b1bb85" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>exists</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1adbdb11d1c83ec0c4ce3d02df283a4a35" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>foreach</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a7c6f6d6603d35f41f549f2184997efd6" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>foreach_iter</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ad90339cb0c4fe0d69f4e0100265a15d4" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>FuncApplyType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4d4364a2f3aa30c8a86cb08742a84e25" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>FuncExprType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a0bcb968630cce9e2da7a68dbbd46d746" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>group</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1afa3f96bdf578c8a188c1aca64bc343d7" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>group_ready_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ade00ee9b6c49770e4ecf0d2920bb841b" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>group_root_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a84bec2251b3eb324f9db28b979a7a51d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>groupReady</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a26b8815a9a424b956e0cde211ea95545" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>groupRoot</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a6c93d243ae88f38a8c5f8aa3a1ad86d8" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>InnerHolder</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a52d7c8a407d20668d84c3a6136b1b5d9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>insert</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a2deaf94120926bbab4dfcc818ea4087e" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>is_destroyed_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aa66400b46cb84ee29ff6074ec2dab42d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>isDestroyed</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a1f897dfd5f4e29e997533aeefe7b252d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>LBContFnType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4a738b6b6c2216d7a5b528956502172a" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>LBContListType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a1432de82ec0ae7aa521038f01e0b83f3" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>lookup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a619f5acc2501a0d3f69cca99f89e72fd" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>LookupElementType</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aa482ff846286aa20fc6616482275c5aa" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>num_erased_not_removed_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a430a021e0113ddfeb18a1bb2e72522ba" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>numElements</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae75fb5f11a3383a8e758d9a6d24fd536" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>numElementsExpr</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a7920bc627a037fa9870dea0682dce31e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>remove</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a777a6cd6d587f484ba3787faa81f92a3" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>removeListener</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a69156fa0708db3d9d017c0693653cef4" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a4ca1b81daf55017c6f4a4cd584b761d5" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setGroupReady</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ac63fd92c5e7b93298fe464fcfcdbb1b6" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setGroupRoot</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ae169df5467202748f84a06f3b294c322" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>setUseGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a7f238e98ee835799bc876c180a226b0d" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>TypedIndexContainer</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a299791b3df9ee801283b1ca8ed24433b" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>TypedLBContainer</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1aa2e3c8d26988ac5f680f70f59c7bfb37" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>use_group_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a937fec77df65d71ad2d6a7c70017c49f" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>useGroup</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1ab343b98c5353be6ec95cb74fb428dcc6" prot="private" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>vc_container_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1_holder_1a0a7eb9b25e205e5d113ec13964547a8e" prot="public" virt="non-virtual"><scope>vt::vrt::collection::Holder</scope><name>VirtualPtrType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
