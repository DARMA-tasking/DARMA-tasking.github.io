<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1memory_1_1_memory_usage" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::memory::MemoryUsage</compoundname>
    <includes refid="memory__usage_8h" local="no">memory_usage.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a3d0c4d774d91b347c598fca206ad61d8" prot="private" static="yes" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1util_1_1memory_1_1_memory_usage" kindref="compound">MemoryUsage</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MemoryUsage &gt; vt::util::memory::MemoryUsage::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="131" column="1" bodyfile="src/vt/utils/memory/memory_usage.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1memory_1_1_memory_usage_1afe2db27e57d4fb6f0356c06a376cd568" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="structvt_1_1util_1_1memory_1_1_reporter" kindref="compound">Reporter</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;Reporter&gt; &gt; vt::util::memory::MemoryUsage::reporters_</definition>
        <argsstring></argsstring>
        <name>reporters_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="133" column="1" bodyfile="src/vt/utils/memory/memory_usage.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a714d3de79740091fce1761c7c0a858bd" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int vt::util::memory::MemoryUsage::first_valid_reporter_</definition>
        <argsstring></argsstring>
        <name>first_valid_reporter_</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="134" column="1" bodyfile="src/vt/utils/memory/memory_usage.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a5838280c7b2b24ab8ed2aff450b5e98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::memory::MemoryUsage::MemoryUsage</definition>
        <argsstring>()</argsstring>
        <name>MemoryUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="108" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="277" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a59d87ec931fe37d4300ba72b00e63d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::util::memory::MemoryUsage::getAverageUsage</definition>
        <argsstring>()</argsstring>
        <name>getAverageUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="110" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="325" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1ab02282aab80eb52e5f8f43095af05304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::util::memory::MemoryUsage::getFirstUsage</definition>
        <argsstring>()</argsstring>
        <name>getFirstUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="112" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="342" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a5baf0fd6bf753755c4602fcb91a7c268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::memory::MemoryUsage::getFirstReporter</definition>
        <argsstring>()</argsstring>
        <name>getFirstReporter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="114" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="361" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1aa37f5b634fb87151fc1688cdba759298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::memory::MemoryUsage::getUsageAll</definition>
        <argsstring>(bool pretty=true, MemoryUnitEnum unit=MemoryUnitEnum::Megabytes)</argsstring>
        <name>getUsageAll</name>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1util_1_1memory_1a64df3d84293b34009f78e2a1db2f9bb6" kindref="member">MemoryUnitEnum</ref></type>
          <declname>unit</declname>
          <defval><ref refid="namespacevt_1_1util_1_1memory_1a64df3d84293b34009f78e2a1db2f9bb6a2276a1b157f2813f3b65d04c0b1c56f6" kindref="member">MemoryUnitEnum::Megabytes</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="116" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="370" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1aee12dfad3c08673967dd1fcd6a6adfb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::memory::MemoryUsage::hasWorkingReporter</definition>
        <argsstring>() const</argsstring>
        <name>hasWorkingReporter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="120" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a23bded824e4360e4389d9869c3bd7f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; vt::util::memory::MemoryUsage::getWorkingReporters</definition>
        <argsstring>()</argsstring>
        <name>getWorkingReporters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="122" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="398" bodyend="406"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1a2a626c96dc7ae098ddaece17c4b28d4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage" kindref="compound">MemoryUsage</ref> *</type>
        <definition>MemoryUsage * vt::util::memory::MemoryUsage::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="124" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="420" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1abcbd3fd9c8f717b98730ca24c57b8cb1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::memory::MemoryUsage::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="126" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="412" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1memory_1_1_memory_usage_1afc60586f69bcd56a783da3f1fd6fb78a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::memory::MemoryUsage::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/memory/memory_usage.h" line="128" column="1" bodyfile="src/vt/utils/memory/memory_usage.cc" bodystart="416" bodyend="418"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/utils/memory/memory_usage.h" line="107" column="1" bodyfile="src/vt/utils/memory/memory_usage.h" bodystart="107" bodyend="135"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1afc60586f69bcd56a783da3f1fd6fb78a" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>finalize</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a714d3de79740091fce1761c7c0a858bd" prot="private" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>first_valid_reporter_</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a2a626c96dc7ae098ddaece17c4b28d4d" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a59d87ec931fe37d4300ba72b00e63d8e" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>getAverageUsage</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a5baf0fd6bf753755c4602fcb91a7c268" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>getFirstReporter</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1ab02282aab80eb52e5f8f43095af05304" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>getFirstUsage</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1aa37f5b634fb87151fc1688cdba759298" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>getUsageAll</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a23bded824e4360e4389d9869c3bd7f18" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>getWorkingReporters</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1aee12dfad3c08673967dd1fcd6a6adfb5" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>hasWorkingReporter</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a3d0c4d774d91b347c598fca206ad61d8" prot="private" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>impl_</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1abcbd3fd9c8f717b98730ca24c57b8cb1" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>initialize</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a5838280c7b2b24ab8ed2aff450b5e98f" prot="public" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>MemoryUsage</name></member>
      <member refid="structvt_1_1util_1_1memory_1_1_memory_usage_1afe2db27e57d4fb6f0356c06a376cd568" prot="private" virt="non-virtual"><scope>vt::util::memory::MemoryUsage</scope><name>reporters_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
