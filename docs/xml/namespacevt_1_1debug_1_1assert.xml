<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1debug_1_1assert" kind="namespace" language="C++">
    <compoundname>vt::debug::assert</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1ad28250da4c859ea57caf834fcb3e125f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::debug::assert::assertOutExpr</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error)</argsstring>
        <name>assertOutExpr</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out.h" line="57" column="1" bodyfile="src/vt/configs/error/assert_out.impl.h" bodystart="64" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1abb19d5cbedec26872e97631a935f8716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value==0 &gt;</type>
        <definition>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value==0 &gt; vt::debug::assert::assertOut</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;str, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error, std::tuple&lt; Args... &gt; &amp;&amp;args)</argsstring>
        <name>assertOut</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out.h" line="65" column="1" bodyfile="src/vt/configs/error/assert_out.impl.h" bodystart="80" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1a4bc7c613ca106f6d3d7867389c4380d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt;</type>
        <definition>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt; vt::debug::assert::assertOut</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;str, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error, std::tuple&lt; Args... &gt; &amp;&amp;args)</argsstring>
        <name>assertOut</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out.h" line="74" column="1" bodyfile="src/vt/configs/error/assert_out.impl.h" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1adcb1f71720f5961b3a6430416e95eb6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt;</type>
        <definition>std::enable_if_t&lt;std::tuple_size&lt;std::tuple&lt;Args...&gt; &gt;::value != 0&gt; vt::debug::assert::assertOutImpl</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;str, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error, Args &amp;&amp;... args)</argsstring>
        <name>assertOutImpl</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out.impl.h" line="96" column="1" bodyfile="src/vt/configs/error/assert_out.impl.h" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1ab6abd4cf4f3c08bc228bb426ed920bce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::debug::assert::assertOutImplTup</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;str, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error, Tuple &amp;&amp;tup, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>assertOutImplTup</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out.impl.h" line="109" column="1" bodyfile="src/vt/configs/error/assert_out.impl.h" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1a91f318f3df8ee377f4f25aba03fe4f26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args2</declname>
            <defname>Args2</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value==0 &gt;</type>
        <definition>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value==0 &gt; vt::debug::assert::assertOutInfo</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;str, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error, std::tuple&lt; Args2... &gt; &amp;&amp;tup, std::tuple&lt; Args... &gt; &amp;&amp;args)</argsstring>
        <name>assertOutInfo</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args2... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out_info.h" line="58" column="1" bodyfile="src/vt/configs/error/assert_out_info.impl.h" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1_1assert_1a4a74f966d45347110a86f76e821c3e7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args2</declname>
            <defname>Args2</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt;</type>
        <definition>std::enable_if_t&lt; std::tuple_size&lt; std::tuple&lt; Args... &gt; &gt;::value !=0 &gt; vt::debug::assert::assertOutInfo</definition>
        <argsstring>(bool fail, std::string const cond, std::string const &amp;str, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error, std::tuple&lt; Args2... &gt; &amp;&amp;t1, std::tuple&lt; Args... &gt; &amp;&amp;args)</argsstring>
        <name>assertOutInfo</name>
        <param>
          <type>bool</type>
          <declname>fail</declname>
        </param>
        <param>
          <type>std::string const</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args2... &gt; &amp;&amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/assert_out_info.h" line="67" column="1" bodyfile="src/vt/configs/error/assert_out_info.impl.h" bodystart="80" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/configs/error/assert_out.h" line="54" column="1"/>
  </compounddef>
</doxygen>
