<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::balance::CommOverhead</compoundname>
    <basecompoundref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model" prot="public" virt="non-virtual">vt::vrt::collection::balance::ComposedModel</basecompoundref>
    <includes refid="comm__overhead_8h" local="no">comm_overhead.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a6c5e0954d01ac8c05a44dfabdc053e0e" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref>, <ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a01ee1fb0ae2da1d2ab7fdca3be9ae351" kindref="member">CommMapType</ref> &gt; const  *</type>
        <definition>std::unordered_map&lt;PhaseType, CommMapType&gt; const* vt::vrt::collection::balance::CommOverhead::proc_comm_</definition>
        <argsstring></argsstring>
        <name>proc_comm_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Underlying comm data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="75" column="28" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1addb20b685e8319db616934d8ca7a12f5" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a8fb51741340b87d7aaee0bef60e9896b" kindref="member">LoadType</ref></type>
        <definition>LoadType vt::vrt::collection::balance::CommOverhead::per_msg_weight_</definition>
        <argsstring></argsstring>
        <name>per_msg_weight_</name>
        <initializer>= 0.001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cost per message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="76" column="12" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a7ea82599681be029e50f056d391bd739" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a8fb51741340b87d7aaee0bef60e9896b" kindref="member">LoadType</ref></type>
        <definition>LoadType vt::vrt::collection::balance::CommOverhead::per_byte_weight_</definition>
        <argsstring></argsstring>
        <name>per_byte_weight_</name>
        <initializer>= 0.000001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cost per bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="77" column="12" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a43c9a18c3436ed642061286b59e0d5b3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::vrt::collection::balance::CommOverhead::CommOverhead</definition>
        <argsstring>(std::shared_ptr&lt; balance::LoadModel &gt; base, LoadType in_per_msg_weight, LoadType in_per_byte_weight)</argsstring>
        <name>CommOverhead</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model" kindref="compound">balance::LoadModel</ref> &gt;</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a8fb51741340b87d7aaee0bef60e9896b" kindref="member">LoadType</ref></type>
          <declname>in_per_msg_weight</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a8fb51741340b87d7aaee0bef60e9896b" kindref="member">LoadType</ref></type>
          <declname>in_per_byte_weight</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying source of object work loads </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_per_msg_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight to add per message received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_per_byte_weight</parametername>
</parameternamelist>
<parameterdescription>
<para>weight to add per byte received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="63" column="12" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.cc" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1ae7a19ba064de7bd6e87d4682cfe1f4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::balance::CommOverhead::setLoads</definition>
        <argsstring>(std::unordered_map&lt; PhaseType, LoadMapType &gt; const *proc_load, std::unordered_map&lt; PhaseType, CommMapType &gt; const *proc_comm, std::unordered_map&lt; PhaseType, DataMapType &gt; const *user_data) override</argsstring>
        <name>setLoads</name>
        <reimplements refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a3de0ef4b35fbdc6e0cb899cfb3cc20ec">setLoads</reimplements>
        <param>
          <type>std::unordered_map&lt; <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref>, <ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a5339303db2e1ce964d783a53fd74e6b1" kindref="member">LoadMapType</ref> &gt; const *</type>
          <declname>proc_load</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref>, <ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a01ee1fb0ae2da1d2ab7fdca3be9ae351" kindref="member">CommMapType</ref> &gt; const *</type>
          <declname>proc_comm</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref>, <ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1acf152c668ed9e2e9c6b29784181d2435" kindref="member">DataMapType</ref> &gt; const *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Initialize the model instance with pointers to the measured load data. </para>
        </briefdescription>
        <detaileddescription>
<para>This would typically be called by <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_manager" kindref="compound">LBManager</ref> when the user has passed a new model instance for a collection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="68" column="8" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.cc" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a96f3be9a9d60c91d9131f481ae96fb53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacevt_1a8fb51741340b87d7aaee0bef60e9896b" kindref="member">LoadType</ref></type>
        <definition>LoadType vt::vrt::collection::balance::CommOverhead::getModeledLoad</definition>
        <argsstring>(ElementIDStruct object, PhaseOffset when) const override</argsstring>
        <name>getModeledLoad</name>
        <reimplements refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a92ee655e6f22652e798151ad5c698ba2">getModeledLoad</reimplements>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a9f5b53fafb270212279a4757d2c4cd28" kindref="member">ElementIDStruct</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_phase_offset" kindref="compound">PhaseOffset</ref></type>
          <declname>when</declname>
        </param>
        <briefdescription>
<para>Provide an estimate of the given object&apos;s load during a specified interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object whose load is desired </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">when</parametername>
</parameternamelist>
<parameterdescription>
<para>The interval in which the estimated load is desired</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>How much computation time the object is estimated to require</para>
</simplesect>
The <computeroutput>updateLoads</computeroutput> method must have been called before any call to this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="72" column="12" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.cc" bodystart="65" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Add some implied, unaccounted work time for communication activity. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>vt::vrt::collection::balance::ComposedModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>vt::vrt::collection::balance::LoadModel</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model"/>
      </node>
      <node id="1">
        <label>vt::vrt::collection::balance::CommOverhead</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>vt::vrt::collection::balance::ComposedModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>vt::vrt::collection::balance::LoadModel</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model"/>
      </node>
      <node id="1">
        <label>vt::vrt::collection::balance::CommOverhead</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/vrt/collection/balance/model/comm_overhead.h" line="55" column="1" bodyfile="src/vt/vrt/collection/balance/model/comm_overhead.h" bodystart="55" bodyend="78"/>
    <listofallmembers>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a8a2a6b2d5e79a7c02002132913c9ae55" prot="private" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>base_</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a7d32b6f8a0ca5970674238325df11783" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>begin</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a43c9a18c3436ed642061286b59e0d5b3" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>CommOverhead</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a84b77c1fceb9e07a0706b896a4d9e9c9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>ComposedModel</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a2b3212a8438a4b58a73c41db841f15b7" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>end</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a2c67639d3ddb44c494937574ab709727" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getComm</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a7ae8d66db9b6e5b234aec9a7e6ba7fc9" prot="public" virt="virtual" ambiguityscope="vt::vrt::collection::balance::LoadModel::"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getComm</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a500c3cd4c8e63cfdeea3edb5ddbcba47" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getModeledComm</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a62ff3ce0ffcf24ad90308741d98a47d7" prot="public" virt="virtual" ambiguityscope="vt::vrt::collection::balance::LoadModel::"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getModeledComm</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a96f3be9a9d60c91d9131f481ae96fb53" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getModeledLoad</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a85bd890eb6e94c85cbfeb9ef321139dc" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getNumCompletedPhases</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1abd58ffd308443021356aff2595c6980f" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getNumObjects</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a20bb994d1b3b27eb2a82729d7d5c30f3" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getNumPastPhasesNeeded</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a744a16572614d11e554b1bf53b7c57f6" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getNumSubphases</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a290b32e5baedcd01d38170937514c145" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getRawLoad</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a3cd2c72c30c988cd8b89b316ace9ad73" prot="public" virt="virtual" ambiguityscope="vt::vrt::collection::balance::LoadModel::"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getRawLoad</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a7dd57ecfc88feafe6e51df62c7164c63" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getUserData</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1abb3670c6d41e1dee4ae5557356218a76" prot="public" virt="virtual" ambiguityscope="vt::vrt::collection::balance::LoadModel::"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>getUserData</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1ad6e2a1c572a80e35acad0fcf1a0e8071" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>hasRawLoad</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1aec716d7c9de7e8e8601e0baae6c2b51e" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>hasUserData</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a90f345e752441d66b2893027f2626226" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>LoadModel</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a7ea82599681be029e50f056d391bd739" prot="private" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>per_byte_weight_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1addb20b685e8319db616934d8ca7a12f5" prot="private" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>per_msg_weight_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1a6c5e0954d01ac8c05a44dfabdc053e0e" prot="private" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>proc_comm_</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1af4d1d40df8f4670a80d62803952949a1" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>serialize</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_comm_overhead_1ae7a19ba064de7bd6e87d4682cfe1f4c3" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>setLoads</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1ad8108b4392d63b7f09e443920a64933a" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>updateLoads</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a6478a387f285b322a48ee1d8a80fc6f7" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::CommOverhead</scope><name>~LoadModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
