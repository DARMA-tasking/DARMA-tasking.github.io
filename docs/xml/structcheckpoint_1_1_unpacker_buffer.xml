<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1_unpacker_buffer" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::UnpackerBuffer</compoundname>
    <basecompoundref refid="structcheckpoint_1_1_memory_serializer" prot="public" virt="non-virtual">checkpoint::MemorySerializer</basecompoundref>
    <includes refid="unpacker_8h" local="no">unpacker.h</includes>
    <templateparamlist>
      <param>
        <type>typename BufferT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_unpacker_buffer_1acdd2460fdb60fc584e04cb4069060613" prot="public" static="no">
        <type>std::unique_ptr&lt; BufferT &gt;</type>
        <definition>using checkpoint::UnpackerBuffer&lt; BufferT &gt;::BufferPtrType =  std::unique_ptr&lt;BufferT&gt;</definition>
        <argsstring></argsstring>
        <name>BufferPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_unpacker_buffer_1ad8bc7d5cd0a7f6b22169c982abf08965" prot="private" static="no" mutable="no">
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::UnpackerBuffer&lt; BufferT &gt;::usedSize_</definition>
        <argsstring></argsstring>
        <name>usedSize_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="67" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_unpacker_buffer_1a0e10a816952c340efd057727e91fe6fa" prot="private" static="no" mutable="no">
        <type><ref refid="structcheckpoint_1_1_unpacker_buffer_1acdd2460fdb60fc584e04cb4069060613" kindref="member">BufferPtrType</ref></type>
        <definition>BufferPtrType checkpoint::UnpackerBuffer&lt; BufferT &gt;::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="69" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_unpacker_buffer_1a38d2f76f492c5dad5ab59747a6169e18" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>checkpoint::UnpackerBuffer&lt; BufferT &gt;::UnpackerBuffer</definition>
        <argsstring>(SerialByteType *buf)</argsstring>
        <name>UnpackerBuffer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="57" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.impl.h" bodystart="57" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_unpacker_buffer_1a29ae9066bbc8f43a660d1e0b0163dd44" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>checkpoint::UnpackerBuffer&lt; BufferT &gt;::UnpackerBuffer</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>UnpackerBuffer</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="60" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.impl.h" bodystart="72" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_unpacker_buffer_1af771af2cb7b14b35f13a1f4605a73148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::UnpackerBuffer&lt; BufferT &gt;::contiguousBytes</definition>
        <argsstring>(void *ptr, SerialSizeType size, SerialSizeType num_elms)</argsstring>
        <name>contiguousBytes</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="62" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.impl.h" bodystart="86" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_unpacker_buffer_1a2d72e0fc79aaa6e062f17b44b74ed0cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::UnpackerBuffer&lt; BufferT &gt;::usedBufferSize</definition>
        <argsstring>() const</argsstring>
        <name>usedBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="63" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.impl.h" bodystart="102" bodyend="104"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4309">
        <label>checkpoint::UnpackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_unpacker_buffer"/>
        <childnode refid="4310" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4310">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="4311" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4311">
        <label>checkpoint::BaseSerializer</label>
        <link refid="structcheckpoint_1_1_base_serializer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4312">
        <label>checkpoint::UnpackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_unpacker_buffer"/>
        <childnode refid="4313" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4313">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="4314" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4314">
        <label>checkpoint::BaseSerializer</label>
        <link refid="structcheckpoint_1_1_base_serializer"/>
      </node>
    </collaborationgraph>
    <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="54" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.h" bodystart="54" bodyend="70"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_base_serializer_1a9c9d32a50074084f78f7c5e049227f25" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a54ef6d9ab0a03d637822dcdacd146763" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>BaseSerializer</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1a0e10a816952c340efd057727e91fe6fa" prot="private" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>buffer_</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1acdd2460fdb60fc584e04cb4069060613" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>BufferPtrType</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1af771af2cb7b14b35f13a1f4605a73148" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>contiguousBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a7a18f4ba50fcfd8b37c8a6efc459ccde" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a70ac6f61c442ade1a0179e353f866333" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1ab1f121effff21997447187346bbd8237" prot="protected" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>cur_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a1755296c5fbd3cdc5df3390d20c80fae" prot="protected" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>cur_mode_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a6e98a837a89de1750749e4ef8742489c" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a075fce46e6d6bcfef43591cf26498d70" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ad9a3bf9aa8081b6efdf8a45ba92ef641" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a1c6b21009223b371ec79d679448f8319" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a449eb24e2136febd621983d26e21a4ed" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>initializeBuffer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a76960f01f04457bca6a40d91d2c4b486" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a1a91b7c0fc85cbd31356791bbf288b0e" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a2d28600a09495b5b9d9b90ae27caa708" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a36efbc9aa78bd2d4b017ac40dacfe9b7" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a5325585631201d413d7992e8916d6f57" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a9c748be7a41c032f2a33fbdc0dbd3611" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>MemorySerializer</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1ae1532a75ce6849ad1f1ceb7a379e56da" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>MemorySerializer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1aaa856a02f204d9c3892810b87671b3e9" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ab16e2ffa62f03f8410b116c637bd4adc" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a7e3575fbbd4bf5bc39d8efb67c014e07" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>skip</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a6285e7e9821a996f6da9f2e6e59b00c2" prot="protected" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>start_</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1a38d2f76f492c5dad5ab59747a6169e18" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>UnpackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1a29ae9066bbc8f43a660d1e0b0163dd44" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>UnpackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1a2d72e0fc79aaa6e062f17b44b74ed0cc" prot="public" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a6ccb8bb1430ac5665aac995b6330bc8a" prot="public" virt="non-virtual" ambiguityscope="checkpoint::MemorySerializer::"><scope>checkpoint::UnpackerBuffer</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_unpacker_buffer_1ad8bc7d5cd0a7f6b22169c982abf08965" prot="private" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>usedSize_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1acdffc3101eb51baafe4a13939ba23e70" prot="protected" virt="non-virtual"><scope>checkpoint::UnpackerBuffer</scope><name>virtual_disabled_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
