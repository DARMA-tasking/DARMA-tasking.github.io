<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1adt_1_1_histogram_approx" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::adt::HistogramApprox</compoundname>
    <includes refid="histogram__approx_8h" local="no">histogram_approx.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>CountT</declname>
        <defname>CountT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" prot="public" static="no">
        <type>CountT</type>
        <definition>using vt::util::adt::HistogramApprox&lt; T, CountT &gt;::CountType =  CountT</definition>
        <argsstring></argsstring>
        <name>CountType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="192" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" prot="public" static="no">
        <type><ref refid="structvt_1_1util_1_1adt_1_1detail_1_1_centroid" kindref="compound">detail::Centroid</ref>&lt; T, <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref> &gt;</type>
        <definition>using vt::util::adt::HistogramApprox&lt; T, CountT &gt;::CentroidType =  detail::Centroid&lt;T, CountType&gt;</definition>
        <argsstring></argsstring>
        <name>CentroidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="193" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a080a663250287f2c4bb1f2db58d60cf3" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
        <definition>CountType vt::util::adt::HistogramApprox&lt; T, CountT &gt;::max_centroids_</definition>
        <argsstring></argsstring>
        <name>max_centroids_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Max centroids allowed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="616" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1aad876385bbf54051a56e736ef403f7a9" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
        <definition>CountType vt::util::adt::HistogramApprox&lt; T, CountT &gt;::total_count_</definition>
        <argsstring></argsstring>
        <name>total_count_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of values added </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="617" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0cf82abced8b354d01757093e4510d46" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T vt::util::adt::HistogramApprox&lt; T, CountT &gt;::min_</definition>
        <argsstring></argsstring>
        <name>min_</name>
        <initializer>= std::numeric_limits&lt;T&gt;::max()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Smallest value added </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="618" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a4bab4f7bffe5cd03a70be4013bd18403" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T vt::util::adt::HistogramApprox&lt; T, CountT &gt;::max_</definition>
        <argsstring></argsstring>
        <name>max_</name>
        <initializer>= std::numeric_limits&lt;T&gt;::lowest()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Largest value added </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="619" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a777a1384cff8b2bd7e0cd8b8a7c4def4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" kindref="member">CentroidType</ref> &gt;</type>
        <definition>std::vector&lt;CentroidType&gt; vt::util::adt::HistogramApprox&lt; T, CountT &gt;::cs_</definition>
        <argsstring></argsstring>
        <name>cs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of centroids </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="620" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="620" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1accb60fd3c6827b4bc3f8db9d688397b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::HistogramApprox&lt; T, CountT &gt;::HistogramApprox</definition>
        <argsstring>()=default</argsstring>
        <name>HistogramApprox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3b78cb4504ac095d913cefe1db3b442a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::HistogramApprox&lt; T, CountT &gt;::HistogramApprox</definition>
        <argsstring>(CountType in_max_centroids)</argsstring>
        <name>HistogramApprox</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
          <declname>in_max_centroids</declname>
        </param>
        <briefdescription>
<para>Construct a new approximate histogram with a bound on storage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_max_centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of centroids (bounds space) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="202" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3beb5b6e74470f8b6bf295217d5ff843" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getMax</definition>
        <argsstring>() const</argsstring>
        <name>getMax</name>
        <briefdescription>
<para>Get the maximum value ever inserted in the histogram. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the max value inserted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="211" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1ab024713bdb28ef694096f3865236faa3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getMin</definition>
        <argsstring>() const</argsstring>
        <name>getMin</name>
        <briefdescription>
<para>Get the minimum value ever inserted in the histogram. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the min value inserted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="218" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1af61bc8614a5096610387643fc05bf2e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
        <definition>CountType vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getCount</definition>
        <argsstring>() const</argsstring>
        <name>getCount</name>
        <briefdescription>
<para>Get the total number of values inserted. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is not the size of the histogram as it is limited to <computeroutput>max_centroids_</computeroutput> </para></simplesect>
<simplesect kind="return"><para>the number of values inserted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="228" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a7d691b9a2139ae2d320a39c1d8fbabab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::add</definition>
        <argsstring>(T value, CountType num_times=1)</argsstring>
        <name>add</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
          <declname>num_times</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Add a value to the histogram. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_times</parametername>
</parameternamelist>
<parameterdescription>
<para>how many times to add it (default 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="236" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="236" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1afbaecd0105590bf33bbf73611fea5a5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vt::util::adt::HistogramApprox&lt; T, CountT &gt;::quantile</definition>
        <argsstring>(double const p)</argsstring>
        <name>quantile</name>
        <param>
          <type>double const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Estimate the p&apos;th quantile defined as the smallest data point, d, such that p*total_count_ &lt;= d. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>the quantile between [0.0, 1.0]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data point, d </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="272" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="272" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1adc37c23f9b9d846e4fb0f7b788cb54de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double vt::util::adt::HistogramApprox&lt; T, CountT &gt;::estimateNumValues</definition>
        <argsstring>(double p)</argsstring>
        <name>estimateNumValues</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Estimate the number of values &lt;= p in the histogram. </para>        </briefdescription>
        <detaileddescription>
<para>This is implemented based on the math in the referenced paper in algorithm 3 &quot;Sum Procedure&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>the value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of values &lt;= p </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="332" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="332" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1af3a3a4065892e90e346fdfbf6060dc9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::mergeIn</definition>
        <argsstring>(HistogramApprox&lt; T, CountType &gt; const &amp;in_hist)</argsstring>
        <name>mergeIn</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx" kindref="compound">HistogramApprox</ref>&lt; T, <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref> &gt; const &amp;</type>
          <declname>in_hist</declname>
        </param>
        <briefdescription>
<para>Merge in another histogram. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_hist</parametername>
</parameternamelist>
<parameterdescription>
<para>the histogram to merge in </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="389" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="389" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a740842719c1af07e00fcfaa4093dc193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref> &gt;</type>
        <definition>std::vector&lt;CountType&gt; vt::util::adt::HistogramApprox&lt; T, CountT &gt;::computeFixedBuckets</definition>
        <argsstring>(int n_buckets)</argsstring>
        <name>computeFixedBuckets</name>
        <param>
          <type>int</type>
          <declname>n_buckets</declname>
        </param>
        <briefdescription>
<para>Build a histogram with fixed buckets, each bucket containing the number of values in that range. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>n_buckets</computeroutput> == 4, the buckets segments will be: { [0, 0.25); [0.25, 0.5); [0.5, 0.75); [0.75, 1.0) }</para><para>Then, for each one of these bucket segments, the number of values that fall in that proportion of the range of values.</para><para><simplesect kind="note"><para>This can be used to output a mini-histogram of where the values fall.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n_buckets</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of buckets </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="428" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="428" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac23b01ef594bcdd86859becf7d81c3b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" kindref="member">CentroidType</ref> &gt; const  &amp;</type>
        <definition>std::vector&lt;CentroidType&gt; const&amp; vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getCentroids</definition>
        <argsstring>() const</argsstring>
        <name>getCentroids</name>
        <briefdescription>
<para>Get the actual centroid array that makes up the histogram. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the centroids </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="458" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="458" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a26c7f2922772baf00c50dcf5e88ad023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::dump</definition>
        <argsstring>()</argsstring>
        <name>dump</name>
        <briefdescription>
<para>Dump the histogram for debugging. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="463" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="463" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1ada0f64fb2e7d5f1e7827bec2762a1291" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::adt::HistogramApprox&lt; T, CountT &gt;::buildContainerString</definition>
        <argsstring>()</argsstring>
        <name>buildContainerString</name>
        <briefdescription>
<para>Build a readable string that contains all internal data for testing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="480" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="480" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1aae8a321f42f550b711aeeb50ac8ef913" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Serialize the centroid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="497" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="497" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a5b6af36eb1219d09bf17349731ed66ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
        <definition>CountType vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getMaxCentroids</definition>
        <argsstring>() const</argsstring>
        <name>getMaxCentroids</name>
        <briefdescription>
<para>Get the max number of centroids. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the max centroids allowed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="510" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1acdc73bd403084f66fc7d6011e4853ff6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
        <definition>CountType vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getNumCentroids</definition>
        <argsstring>() const</argsstring>
        <name>getNumCentroids</name>
        <briefdescription>
<para>Get the number of centroids that are actually used. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of centroids being used </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="519" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="519" bodyend="521"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa23f54efa5c883d2759ceacd3f32279a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::setMaxCentroids</definition>
        <argsstring>(CountType in_max_centroids)</argsstring>
        <name>setMaxCentroids</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
          <declname>in_max_centroids</declname>
        </param>
        <briefdescription>
<para>Modify the max centroids allows. </para>        </briefdescription>
        <detaileddescription>
<para>the implementation, this is used for increasing the max centroids temporarily during a merge with another histogram so optimal merges can be applied</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_max_centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>new max for centroids </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="533" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="533" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a8827a511e5b810ffca9da33d769bc4b9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::pareToNewMaxCentroids</definition>
        <argsstring>(CountType in_max_centroids)</argsstring>
        <name>pareToNewMaxCentroids</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" kindref="member">CountType</ref></type>
          <declname>in_max_centroids</declname>
        </param>
        <briefdescription>
<para>Reduce the number of centroids to a new maximum. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_max_centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>the new max number of centroids </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="542" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="542" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a948e8a7dec4f205fc5bf1d1b896211b1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::HistogramApprox&lt; T, CountT &gt;::removeOneCentroid</definition>
        <argsstring>()</argsstring>
        <name>removeOneCentroid</name>
        <briefdescription>
<para>Reduce number of centroids by one centroid. </para>        </briefdescription>
        <detaileddescription>
<para>the best candidate to reduce the number of centroids </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="557" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="557" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0bba7a9d03149be996f45bfe245abd03" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::util::adt::HistogramApprox&lt; T, CountT &gt;::findMinimumCentroidPair</definition>
        <argsstring>() const</argsstring>
        <name>findMinimumCentroidPair</name>
        <briefdescription>
<para>Find the best candidate for merging two neighboring centroids in the histogram. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the index, <computeroutput>i</computeroutput>, to merge with the neighbor <computeroutput>i+1</computeroutput> </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="577" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="577" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac376fd975845204cca3425c8517376f6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" kindref="member">CentroidType</ref>, <ref refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" kindref="member">CentroidType</ref> &gt;</type>
        <definition>std::tuple&lt;CentroidType, CentroidType&gt; vt::util::adt::HistogramApprox&lt; T, CountT &gt;::getBorderCentroids</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>getBorderCentroids</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get the border centroids of a given i&apos;th centroid returning the (i-1)&apos;th and i&apos;th centroids. </para>        </briefdescription>
        <detaileddescription>
<para>we know the exact min/max values in the histogram (no deletions), even after the centroids are averaged, we can give a more precise border centroid when we are on the boundaries.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>the centroid</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tuple that gives a good neighboring centroid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/histogram_approx.h" line="605" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="605" bodyend="613"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A bounded-size, online/streaming approximate histogram. </para>    </briefdescription>
    <detaileddescription>
<para>This is an implementation of the paper &quot;A Streaming Parallel Decision Tree
Algorithm&quot; by Ben-Haim and Tom-Tov:</para><para><ulink url="http://www.jmlr.org/papers/volume11/ben-haim10a/ben-haim10a.pdf">http://www.jmlr.org/papers/volume11/ben-haim10a/ben-haim10a.pdf</ulink></para><para>The &quot;histogram sketch&quot; (as the authors call it) approximates a histogram with a fixed/maximum number of of centroids (value, count) sorted in ascending order. Each time a new value, V, is added, it is either added to an existing centroid (if the value matches exactly) by increasing the count; or, a new centroid (V, 1) is created. After creation of a new centroid, if at the centroid count limit, the best pair of centroids (ones with the minimum distance) are merged, weighted by their values and associated counts. Quantiles and counts are estimated by finding bordering centroids and using them to estimate the area of a trapezoid. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="2181">
        <label>vt::util::adt::HistogramApprox&lt; T, CountT &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_histogram_approx"/>
        <childnode refid="2182" relation="usage">
          <edgelabel>total_count_</edgelabel>
          <edgelabel>max_centroids_</edgelabel>
        </childnode>
        <childnode refid="2183" relation="usage">
          <edgelabel>max_</edgelabel>
          <edgelabel>min_</edgelabel>
        </childnode>
      </node>
      <node id="2183">
        <label>T</label>
      </node>
      <node id="2182">
        <label>CountT</label>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/adt/histogram_approx.h" line="191" column="1" bodyfile="src/vt/utils/adt/histogram_approx.h" bodystart="191" bodyend="621"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a7d691b9a2139ae2d320a39c1d8fbabab" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>add</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ada0f64fb2e7d5f1e7827bec2762a1291" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>buildContainerString</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aabacbad5be3a407cb00938f079177b95" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>CentroidType</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a740842719c1af07e00fcfaa4093dc193" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>computeFixedBuckets</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa2fb74665588d311da76dd821f2912c6" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>CountType</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a777a1384cff8b2bd7e0cd8b8a7c4def4" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>cs_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a26c7f2922772baf00c50dcf5e88ad023" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>dump</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1adc37c23f9b9d846e4fb0f7b788cb54de" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>estimateNumValues</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0bba7a9d03149be996f45bfe245abd03" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>findMinimumCentroidPair</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac376fd975845204cca3425c8517376f6" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getBorderCentroids</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ac23b01ef594bcdd86859becf7d81c3b2" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getCentroids</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1af61bc8614a5096610387643fc05bf2e9" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getCount</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3beb5b6e74470f8b6bf295217d5ff843" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getMax</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a5b6af36eb1219d09bf17349731ed66ff" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getMaxCentroids</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1ab024713bdb28ef694096f3865236faa3" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getMin</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1acdc73bd403084f66fc7d6011e4853ff6" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>getNumCentroids</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1accb60fd3c6827b4bc3f8db9d688397b3" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>HistogramApprox</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a3b78cb4504ac095d913cefe1db3b442a" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>HistogramApprox</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a4bab4f7bffe5cd03a70be4013bd18403" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>max_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a080a663250287f2c4bb1f2db58d60cf3" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>max_centroids_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1af3a3a4065892e90e346fdfbf6060dc9c" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>mergeIn</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a0cf82abced8b354d01757093e4510d46" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>min_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a8827a511e5b810ffca9da33d769bc4b9" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>pareToNewMaxCentroids</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1afbaecd0105590bf33bbf73611fea5a5c" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>quantile</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1a948e8a7dec4f205fc5bf1d1b896211b1" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>removeOneCentroid</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aae8a321f42f550b711aeeb50ac8ef913" prot="public" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>serialize</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aa23f54efa5c883d2759ceacd3f32279a" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>setMaxCentroids</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_histogram_approx_1aad876385bbf54051a56e736ef403f7a9" prot="private" virt="non-virtual"><scope>vt::util::adt::HistogramApprox</scope><name>total_count_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
