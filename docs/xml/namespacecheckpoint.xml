<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacecheckpoint" kind="namespace" language="C++">
    <compoundname>checkpoint</compoundname>
    <innerclass refid="structcheckpoint_1_1_footprinter" prot="public">checkpoint::Footprinter</innerclass>
    <innerclass refid="structcheckpoint_1_1_serialize_as_virtual_if_needed_3_01_t_00_01_serializer_t_00_01typename_01std432a7e382b83cd966ec84657915841f" prot="public">checkpoint::SerializeAsVirtualIfNeeded&lt; T, SerializerT, typename std::enable_if_t&lt; dispatch::vrt::VirtualSerializeTraits&lt; T &gt;::has_virtual_serialize &gt;&gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1_memory_serializer" prot="public">checkpoint::MemorySerializer</innerclass>
    <innerclass refid="structcheckpoint_1_1_packer_buffer" prot="public">checkpoint::PackerBuffer</innerclass>
    <innerclass refid="structcheckpoint_1_1_serialize_as_virtual_if_needed" prot="public">checkpoint::SerializeAsVirtualIfNeeded</innerclass>
    <innerclass refid="structcheckpoint_1_1_serialized_info" prot="public">checkpoint::SerializedInfo</innerclass>
    <innerclass refid="structcheckpoint_1_1_serializer" prot="public">checkpoint::Serializer</innerclass>
    <innerclass refid="structcheckpoint_1_1_sizer" prot="public">checkpoint::Sizer</innerclass>
    <innerclass refid="structcheckpoint_1_1_unpacker_buffer" prot="public">checkpoint::UnpackerBuffer</innerclass>
    <innerclass refid="structcheckpoint_1_1_serialize_as_virtual_if_needed_3_01_t_00_01_serializer_t_00_01typename_01stb5683a1db1f95d710800e7db0029b9d3" prot="public">checkpoint::SerializeAsVirtualIfNeeded&lt; T, SerializerT, typename std::enable_if_t&lt; dispatch::vrt::VirtualSerializeTraits&lt; T &gt;::has_not_virtual_serialize and not std::is_same&lt; SerializerT, checkpoint::Footprinter &gt;::value &gt;&gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1_serialize_as_virtual_if_needed_3_01_t_00_01_serializer_t_00_01typename_01st7535fd9671f69a00dc505955ba5cc55f" prot="public">checkpoint::SerializeAsVirtualIfNeeded&lt; T, SerializerT, typename std::enable_if_t&lt; dispatch::vrt::VirtualSerializeTraits&lt; T &gt;::has_not_virtual_serialize and std::is_same&lt; SerializerT, checkpoint::Footprinter &gt;::value &gt;&gt;</innerclass>
    <innernamespace refid="namespacecheckpoint_1_1buffer">checkpoint::buffer</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1debug">checkpoint::debug</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1dispatch">checkpoint::dispatch</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" prot="public" static="no">
        <name>eSerializationMode</name>
        <enumvalue id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a9b87ab5a4e2e99d758991f06cad9c3bf" prot="public">
          <name>Unpacking</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059ac46192253e8458f209a350a132cfc876" prot="public">
          <name>Packing</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a92672a7a2b909945fbfa9f44f057c7a1" prot="public">
          <name>Sizing</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059afa42c5852085bf97b53b351ba4fcc474" prot="public">
          <name>Footprinting</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a4bbb8f967da6d1a610596d7257179c2b" prot="public">
          <name>Invalid</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="55" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecheckpoint_1a70bc1b37eae8e32129df38d981ef90f6" prot="public" static="no">
        <type>std::function&lt; char *(std::size_t size)&gt;</type>
        <definition>using checkpoint::BufferCallbackType = typedef std::function&lt;char*(std::size_t size)&gt;</definition>
        <argsstring></argsstring>
        <name>BufferCallbackType</name>
        <briefdescription>
<para>Callback for user to allocate bytes during serialization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1aa61e2b491f405a63a394f9aad528c37a" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structcheckpoint_1_1_serialized_info" kindref="compound">SerializedInfo</ref> &gt;</type>
        <definition>using checkpoint::SerializedReturnType = typedef std::unique_ptr&lt;SerializedInfo&gt;</definition>
        <argsstring></argsstring>
        <name>SerializedReturnType</name>
        <briefdescription>
<para>Convenience typedef for <computeroutput>std::unique_ptr&lt;SerializedInfo&gt;</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="65" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" prot="public" static="no">
        <type>size_t</type>
        <definition>using checkpoint::SerialSizeType = typedef size_t</definition>
        <argsstring></argsstring>
        <name>SerialSizeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/common.h" line="127" column="1" bodyfile="lib/checkpoint/src/checkpoint/common.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" prot="public" static="no">
        <type>char</type>
        <definition>using checkpoint::SerialByteType = typedef char</definition>
        <argsstring></argsstring>
        <name>SerialByteType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/common.h" line="128" column="1" bodyfile="lib/checkpoint/src/checkpoint/common.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a8a2558a1dd0db386339dd81c193b7f10" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *(<ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> size)&gt;</type>
        <definition>using checkpoint::BufferObtainFnType = typedef std::function&lt;SerialByteType*(SerialSizeType size)&gt;</definition>
        <argsstring></argsstring>
        <name>BufferObtainFnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="61" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a7ff642cff4d72d01a16ab10e9bc363ef" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_s_e_r_i_a_l_i_z_e___c_o_n_s_t_r_u_c_t___t_a_g" kindref="compound">dispatch::SERIALIZE_CONSTRUCT_TAG</ref></type>
        <definition>using checkpoint::SERIALIZE_CONSTRUCT_TAG = typedef dispatch::SERIALIZE_CONSTRUCT_TAG</definition>
        <argsstring></argsstring>
        <name>SERIALIZE_CONSTRUCT_TAG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/reconstructor_tag.h" line="56" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/reconstructor_tag.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1ae8adefa66d7575697f8e465bed48e3cc" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_serializable_base" kindref="compound">dispatch::vrt::SerializableBase</ref>&lt; BaseT &gt;</type>
        <definition>using checkpoint::SerializableBase = typedef dispatch::vrt::SerializableBase&lt;BaseT&gt;</definition>
        <argsstring></argsstring>
        <name>SerializableBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/base.h" line="92" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/base.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a9c4afb2c8d1bc1f58b9e158d64331d65" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_serializable_derived" kindref="compound">dispatch::vrt::SerializableDerived</ref>&lt; DerivedT, BaseT &gt;</type>
        <definition>using checkpoint::SerializableDerived = typedef dispatch::vrt::SerializableDerived&lt;DerivedT, BaseT&gt;</definition>
        <argsstring></argsstring>
        <name>SerializableDerived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/derived.h" line="113" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/derived.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1ad744c208c7b1da6ee19c10d071e74f7d" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1_packer_buffer" kindref="compound">PackerBuffer</ref>&lt; <ref refid="structcheckpoint_1_1buffer_1_1_managed_buffer" kindref="compound">buffer::ManagedBuffer</ref> &gt;</type>
        <definition>using checkpoint::Packer = typedef PackerBuffer&lt;buffer::ManagedBuffer&gt;</definition>
        <argsstring></argsstring>
        <name>Packer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="79" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a72c31e3d94e3b4d05bca5972bacc536a" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1_packer_buffer" kindref="compound">PackerBuffer</ref>&lt; <ref refid="structcheckpoint_1_1buffer_1_1_user_buffer" kindref="compound">buffer::UserBuffer</ref> &gt;</type>
        <definition>using checkpoint::PackerUserBuf = typedef PackerBuffer&lt;buffer::UserBuffer&gt;</definition>
        <argsstring></argsstring>
        <name>PackerUserBuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="80" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a0c8b3f2f174fd1076b410c7a2128919b" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1_packer_buffer" kindref="compound">PackerBuffer</ref>&lt; <ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer" kindref="compound">buffer::IOBuffer</ref> &gt;</type>
        <definition>using checkpoint::PackerIO = typedef PackerBuffer&lt;buffer::IOBuffer&gt;</definition>
        <argsstring></argsstring>
        <name>PackerIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/packer.h" line="81" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/packer.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1af36cfec8b3ef7476bb97b3b12908370d" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1_unpacker_buffer" kindref="compound">UnpackerBuffer</ref>&lt; <ref refid="structcheckpoint_1_1buffer_1_1_user_buffer" kindref="compound">buffer::UserBuffer</ref> &gt;</type>
        <definition>using checkpoint::Unpacker = typedef UnpackerBuffer&lt;buffer::UserBuffer&gt;</definition>
        <argsstring></argsstring>
        <name>Unpacker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="69" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecheckpoint_1a0efc06d99dce79e452b9d1b503059a74" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1_unpacker_buffer" kindref="compound">UnpackerBuffer</ref>&lt; <ref refid="structcheckpoint_1_1buffer_1_1_i_o_buffer" kindref="compound">buffer::IOBuffer</ref> &gt;</type>
        <definition>using checkpoint::UnpackerIO = typedef UnpackerBuffer&lt;buffer::IOBuffer&gt;</definition>
        <argsstring></argsstring>
        <name>UnpackerIO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/unpacker.h" line="70" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/unpacker.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacecheckpoint_1aa61e2b491f405a63a394f9aad528c37a" kindref="member">SerializedReturnType</ref></type>
        <definition>SerializedReturnType checkpoint::serialize</definition>
        <argsstring>(T &amp;target, BufferCallbackType fn=nullptr)</argsstring>
        <name>serialize</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a70bc1b37eae8e32129df38d981ef90f6" kindref="member">BufferCallbackType</ref></type>
          <declname>fn</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Serialize <computeroutput>T</computeroutput> into a byte buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Serializes an object recursively by invoking the <computeroutput>serialize</computeroutput> functions/methods recursively.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>T</computeroutput> to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) callback to supply buffer for to allow user allocation of the produced byte buffer. The callback will be passed the number of bytes required and return a char* to a buffer of at least that many bytes.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>std::unique_ptr</computeroutput> to a <computeroutput><ref refid="structcheckpoint_1_1_serialized_info" kindref="compound">SerializedInfo</ref></computeroutput> containing the buffer with serialized data and the size of the buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="83" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aee0d7387d339b0275e9b95634748d63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * checkpoint::deserialize</definition>
        <argsstring>(char *buf, char *object_buf)</argsstring>
        <name>deserialize</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>object_buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a byte buffer and corresponding <computeroutput>size</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed on <computeroutput>user_buf</computeroutput> (or a system allocated buffer) or reconstructed based on a user-defined reconstruct method. If <computeroutput>user_buf</computeroutput> is not passed, the returned object point must be deallocated with <computeroutput>delete</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the bytes to reify <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) buffer containing bytes allocated with sufficient size for <computeroutput>T</computeroutput>. If this buffer != null, the caller is responsible for deallocating the buffer. If it is not passed, the system will allocate a buffer that must be de-allocated with <computeroutput>delete</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the newly reified <computeroutput>T</computeroutput> based on bytes in <computeroutput>buf</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="106" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ab8beefac6b3dc40c69e11dc430618c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserialize</definition>
        <argsstring>(char *buf)</argsstring>
        <name>deserialize</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a byte buffer and corresponding <computeroutput>size</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed or reconstructed based on a user-defined reconstruct method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the bytes to reify <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a unique pointer to the newly reified <computeroutput>T</computeroutput> based on bytes in <computeroutput>buf</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="123" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1af605968a3b8731448c68e5c9fff917ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::deserializeInPlace</definition>
        <argsstring>(char *buf, T *t)</argsstring>
        <name>deserializeInPlace</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a byte buffer and corresponding <computeroutput>size</computeroutput> in-place on the user-provided <computeroutput>t</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Note: the other form of <computeroutput>deserialize</computeroutput> will either reconstruct to default construct <computeroutput>T</computeroutput> in-place. This overload will not allocate or construct <computeroutput>T</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the bytes to reify <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer to a <computeroutput>T</computeroutput> that has been user-allocated and constructed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="137" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a1fa5c2e70f11308a1a94b163924d88f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserialize</definition>
        <argsstring>(SerializedReturnType &amp;&amp;in)</argsstring>
        <name>deserialize</name>
        <param>
          <type><ref refid="namespacecheckpoint_1aa61e2b491f405a63a394f9aad528c37a" kindref="member">SerializedReturnType</ref> &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convenience function for de-serializing and reify <computeroutput>T</computeroutput> directly from <computeroutput>in</computeroutput> the return value from <computeroutput>serialize</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer and size combo returned from <computeroutput>serialize</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a unique pointer to <computeroutput>T</computeroutput> that must be deallocated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="148" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1af0e68ef201b5e6831939bcd752e1b18b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t checkpoint::getSize</definition>
        <argsstring>(T &amp;target)</argsstring>
        <name>getSize</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Get the number of bytes that <computeroutput>target</computeroutput> requires for serialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to <computeroutput>T</computeroutput> to size</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes for the <computeroutput>target</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="158" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a3c06c0dd0b9bccfd2aa6b79570b9cda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t checkpoint::getMemoryFootprint</definition>
        <argsstring>(T &amp;target, std::size_t size_offset=0)</argsstring>
        <name>getMemoryFootprint</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get memory footprint of <computeroutput>target</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to <computeroutput>T</computeroutput> to measure footprint </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>add an arbitrary <computeroutput>size_offset</computeroutput> to the footprint</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>memory footprint of the <computeroutput>target</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="169" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a3d4326982e3c3feeb933e985758eea82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeToFile</definition>
        <argsstring>(T &amp;target, std::string const &amp;file)</argsstring>
        <name>serializeToFile</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Serialize <computeroutput>T</computeroutput> to file with filename <computeroutput>file</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Byte-serializes <computeroutput>T</computeroutput> to file, truncating <computeroutput>file</computeroutput> if it already exists. If any error occurs while opening/closing/mapping the file, <computeroutput>std::runtime_error</computeroutput> will be thrown with an appropriate error message containing the corresponding errno.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>T</computeroutput> to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to create </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="183" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ad71bcfe197379c59aa16f737b7e2cf3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserializeFromFile</definition>
        <argsstring>(std::string const &amp;file)</argsstring>
        <name>deserializeFromFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a file. </para>        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed or reconstructed based on a user-defined reconstruct method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to read with bytes for <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique pointer to the new object <computeroutput>T</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="199" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a4a98c599eb8a73519cd643bfafb739d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::deserializeInPlaceFromFile</definition>
        <argsstring>(std::string const &amp;file, T *buf)</argsstring>
        <name>deserializeInPlaceFromFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a file in place on an existing pointer to <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by invoking the <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to read with bytes for <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid, constructed <computeroutput>T</computeroutput> to deserialize into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/checkpoint_api.h" line="213" column="1" bodyfile="lib/checkpoint/src/checkpoint/checkpoint_api.impl.h" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a976e83bf5f22b7bfc5036fd829be039e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::array&lt; T, N &gt; &amp;array)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/array_serialize.h" line="56" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/array_serialize.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a40ca9a5c99807bd8a0610098d94b5125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;    std::is_same&lt;SerializerT, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>&gt;::value  &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(SerializerT &amp;s, const std::atomic&lt; T &gt; &amp;atomic)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::atomic&lt; T &gt; &amp;</type>
          <declname>atomic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/atomic_serialize.h" line="61" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/atomic_serialize.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aec244476371c452d9d9318b9d5b24401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename Rep</type>
          </param>
          <param>
            <type>typename Period</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::chrono::duration&lt; Rep, Period &gt; &amp;d)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::chrono::duration&lt; Rep, Period &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/chrono_serialize.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/chrono_serialize.h" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a3359595d5a4c6fcf5fc95069c71f869b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
        </templateparamlist>
        <type>ContainerT::size_type</type>
        <definition>ContainerT::size_type checkpoint::serializeContainerSize</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont)</argsstring>
        <name>serializeContainerSize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/container_serialize.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/container_serialize.h" bodystart="55" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a9c880ba9bb9a106e784e06554b2fbcf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeContainerElems</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont)</argsstring>
        <name>serializeContainerElems</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/container_serialize.h" line="66" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/container_serialize.h" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a5f368cb543eec78bb608a68fe2401562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename Enum</type>
          </param>
          <param>
            <type>typename Underlying</type>
            <defval>std::underlying_type_t&lt;Enum&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeEnum</definition>
        <argsstring>(Serializer &amp;s, Enum &amp;e)</argsstring>
        <name>serializeEnum</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Enum &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/enum_serialize.h" line="60" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/enum_serialize.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ad3043fe034b7bf1d0d864e1e819c84d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename Res</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgTypes</declname>
            <defname>ArgTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(SerializerT &amp;s, std::function&lt; Res(ArgTypes...)&gt; &amp;fn)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::function&lt; Res(ArgTypes...)&gt; &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Serialize function <computeroutput>func</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only footprinting mode is supported at the moment.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serializer</parametername>
</parameternamelist>
<parameterdescription>
<para>serializer to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>function to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/function_serialize.h" line="63" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/function_serialize.h" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a4161978e6d6de385d942cbcbe659817a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename Res</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgTypes</declname>
            <defname>ArgTypes</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;    std::is_same&lt;      SerializerT,      <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>    &gt;::value  &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeFunction</definition>
        <argsstring>(SerializerT &amp;s, std::function&lt; Res(ArgTypes...)&gt; &amp;fn)</argsstring>
        <name>serializeFunction</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::function&lt; Res(ArgTypes...)&gt; &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/function_serialize.h" line="78" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/function_serialize.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1affdb2f2117fc38cb03d94aa59e1bdf48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
          <param>
            <type>typename ElmT</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; not std::is_same&lt; <ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref>, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; not std::is_same&lt;Serializer, checkpoint::Footprinter&gt;::value, void&gt; checkpoint::deserializeOrderedElems</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont, typename ContainerT::size_type size)</argsstring>
        <name>deserializeOrderedElems</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>typename ContainerT::size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/list_serialize.h" line="61" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/list_serialize.h" bodystart="61" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a9976fffc8f39073e5b40ec61d93a5482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
          <param>
            <type>typename ElmT</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; <ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref>, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt;Serializer, checkpoint::Footprinter&gt;::value, void&gt; checkpoint::deserializeOrderedElems</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont, typename ContainerT::size_type size)</argsstring>
        <name>deserializeOrderedElems</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>typename ContainerT::size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/list_serialize.h" line="82" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/list_serialize.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a0b15edc50a881e06260e7112b2c60742" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeOrderedContainer</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont)</argsstring>
        <name>serializeOrderedContainer</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/list_serialize.h" line="87" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/list_serialize.h" bodystart="87" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1afb32627049eb840e4f8b9fd3022f2eb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::list&lt; T &gt; &amp;lst)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::list&lt; T &gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/list_serialize.h" line="100" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/list_serialize.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a179b767294c9b23617f30fc4566d0be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::deque&lt; T &gt; &amp;lst)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::deque&lt; T &gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/list_serialize.h" line="105" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/list_serialize.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a9016e0756f91e6e982b3c824c007c251" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
          <param>
            <type>typename ElmT</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; not std::is_same&lt; <ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref>, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; not std::is_same&lt;Serializer, checkpoint::Footprinter&gt;::value, void&gt; checkpoint::deserializeEmplaceElems</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont, typename ContainerT::size_type size)</argsstring>
        <name>deserializeEmplaceElems</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>typename ContainerT::size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="63" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a811956d461a3ebc7329272fd33e1084f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
          <param>
            <type>typename ElmT</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; <ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref>, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt;Serializer, checkpoint::Footprinter&gt;::value, void&gt; checkpoint::deserializeEmplaceElems</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont, typename ContainerT::size_type size)</argsstring>
        <name>deserializeEmplaceElems</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>typename ContainerT::size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="84" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a99092baac18b33d03b1bb47ed1f2d7fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename ContainerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeMapLikeContainer</definition>
        <argsstring>(Serializer &amp;s, ContainerT &amp;cont)</argsstring>
        <name>serializeMapLikeContainer</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ContainerT &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="89" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a39ee0888319dc204dff7af20dd1e8238" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename Comp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::map&lt; T, U, Comp &gt; &amp;map)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::map&lt; T, U, Comp &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="102" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a44434f578fc304afa3a62a9305be2a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename Comp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::multimap&lt; T, U, Comp &gt; &amp;map)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::multimap&lt; T, U, Comp &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="107" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a9f1869781f4cce4db94c144174680b24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Comp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::set&lt; T, Comp &gt; &amp;set)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::set&lt; T, Comp &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="112" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ae032265314cdf8e9155a6bbc423ca1c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Comp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::multiset&lt; T, Comp &gt; &amp;set)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::multiset&lt; T, Comp &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="117" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a9fc2f3eb20d3ce8d6145e99a2559ea58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename Eq</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::unordered_map&lt; T, U, Hash, Eq &gt; &amp;map)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; T, U, Hash, Eq &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="122" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aa77eeb7a036d253ef33ed2c9ef764a5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename Eq</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::unordered_multimap&lt; T, U, Hash, Eq &gt; &amp;map)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::unordered_multimap&lt; T, U, Hash, Eq &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="127" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ae4ca8cbc6daf2f5a2a20d44d9fe1cc9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename Eq</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::unordered_set&lt; T, Hash, Eq &gt; &amp;set)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::unordered_set&lt; T, Hash, Eq &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="132" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a64c8a1aa29d469bc71c88a8836264ecc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename Eq</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::unordered_multiset&lt; T, Hash, Eq &gt; &amp;set)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::unordered_multiset&lt; T, Hash, Eq &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/map_serialize.h" line="137" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/map_serialize.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a5621e2549443d76acad6c83fdfdcbeab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, const std::queue&lt; T &gt; &amp;q)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::queue&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/queue_serialize.h" line="56" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/queue_serialize.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a9493433bed418b54358130463961ce50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, const std::priority_queue&lt; T &gt; &amp;q)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::priority_queue&lt; T &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/queue_serialize.h" line="61" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/queue_serialize.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a1d399ef63dc7723f1b4387e4605b3259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, const std::stack&lt; T &gt; &amp;stack)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::stack&lt; T &gt; &amp;</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/queue_serialize.h" line="66" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/queue_serialize.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a33956387419a85cfe810fbce88f5bdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename Q</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;    std::is_same&lt;      SerializerT,      <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>    &gt;::value  &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeQueueLikeContainer</definition>
        <argsstring>(SerializerT &amp;s, const Q &amp;q)</argsstring>
        <name>serializeQueueLikeContainer</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const Q &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/queue_serialize.h" line="80" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/queue_serialize.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a5242b8701b19ff5eeb7587fb4a07bfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;    std::is_same&lt;      SerializerT,      <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>    &gt;::value  &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(SerializerT &amp;s, T *ptr)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Serialize raw pointer <computeroutput>ptr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Only footprinting mode is supported at the moment. Counts the pointer size and follows it (note that it doesn&apos;t work correctly for C-style arrays!).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serializer</parametername>
</parameternamelist>
<parameterdescription>
<para>serializer to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" line="71" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a6113644a35f5023a57e2ed3ca4814490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeRawPtr</definition>
        <argsstring>(SerializerT &amp;s, T *ptr)</argsstring>
        <name>serializeRawPtr</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" line="79" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aaadeb0ab61d069afc8a97ec6b6dc630c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeRawPtr</definition>
        <argsstring>(SerializerT &amp;s, void *ptr)</argsstring>
        <name>serializeRawPtr</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Note: do not follow void pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" line="92" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ae2581f30d683e58b2058a697ceb0385f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeRawPtr</definition>
        <argsstring>(SerializerT &amp;s, FILE *ptr)</argsstring>
        <name>serializeRawPtr</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Note: do not follow FILE pointer as it might be an incomplete type on some platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" line="103" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/raw_ptr_serialize.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aff1bebba5ce7fda79f83d2af8c859254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;    std::is_same&lt;      SerializerT,      <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>    &gt;::value  &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(SerializerT &amp;s, std::shared_ptr&lt; T &gt; &amp;ptr)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/shared_ptr_serialize.h" line="62" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/shared_ptr_serialize.h" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a1ea8e1ef9d0a10d26df77cb5309435aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeStringMeta</definition>
        <argsstring>(Serializer &amp;s, std::string &amp;str)</argsstring>
        <name>serializeStringMeta</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/string_serialize.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/string_serialize.h" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aef8e8717e4cc129379525653730c4eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::string &amp;str)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Serialize string <computeroutput>str</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Resizes a string to its actual size and serializes it. Note: footprinting mode does not detect small string optimization, so a limited overcount is possible.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serializer</parametername>
</parameternamelist>
<parameterdescription>
<para>serializer to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/string_serialize.h" line="72" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/string_serialize.h" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ab9c05efe18a47d990fb20e84f73e9943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;    std::is_same&lt;SerializerT, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>&gt;::value  &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(SerializerT &amp;s, const std::thread &amp;t)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::thread &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/thread_serialize.h" line="60" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/thread_serialize.h" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ab763d3ca9396ff9a1896f5da6c2b3c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Idxs</declname>
            <defname>Idxs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::tuple_helper</definition>
        <argsstring>(Serializer &amp;s, std::tuple&lt; T... &gt; &amp;tup, std::index_sequence&lt; Idxs... &gt;)</argsstring>
        <name>tuple_helper</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::tuple&lt; T... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Idxs... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/tuple_serialize.h" line="57" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/tuple_serialize.h" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a7ac21fa6ad08fd64a47c789c32966019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::tuple&lt; Args... &gt; &amp;tuple)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/tuple_serialize.h" line="64" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/tuple_serialize.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a7b5c3ff67d3f7b65cfb46da7617e87ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::pair&lt; T, U &gt; &amp;pair)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::pair&lt; T, U &gt; &amp;</type>
          <declname>pair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/tuple_serialize.h" line="69" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/tuple_serialize.h" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a617341cb0473cbdce921a3a4d049f4fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::unique_ptr&lt; T, Deleter &gt; &amp;ptr)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; T, Deleter &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/unique_ptr_serialize.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/unique_ptr_serialize.h" bodystart="55" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1ae257a02737b213492283962cc645c6a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VectorAllocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; not std::is_same&lt; SerializerT, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; not std::is_same&lt;SerializerT, checkpoint::Footprinter&gt;::value, void&gt; checkpoint::serializeVectorMeta</definition>
        <argsstring>(SerializerT &amp;s, std::vector&lt; T, VectorAllocator &gt; &amp;vec)</argsstring>
        <name>serializeVectorMeta</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; T, VectorAllocator &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/vector_serialize.h" line="59" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/vector_serialize.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a0133c00735e3d54bb46ffa9e24d59d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VectorAllocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; SerializerT, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; std::is_same&lt;SerializerT, checkpoint::Footprinter&gt;::value, void&gt; checkpoint::serializeVectorMeta</definition>
        <argsstring>(SerializerT &amp;s, std::vector&lt; T, VectorAllocator &gt; &amp;vec)</argsstring>
        <name>serializeVectorMeta</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; T, VectorAllocator &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/vector_serialize.h" line="69" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/vector_serialize.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a3a422f601605de1c02c6bdd57f3dc93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename VectorAllocator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::vector&lt; T, VectorAllocator &gt; &amp;vec)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; T, VectorAllocator &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/vector_serialize.h" line="75" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/vector_serialize.h" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1aef7e26930d4d3446970f8aca0640b11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename VectorAllocator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serialize</definition>
        <argsstring>(Serializer &amp;s, std::vector&lt; bool, VectorAllocator &gt; &amp;vec)</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; bool, VectorAllocator &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/container/vector_serialize.h" line="82" column="1" bodyfile="lib/checkpoint/src/checkpoint/container/vector_serialize.h" bodystart="82" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a5c9a1c4d05ec6880270c9a6d0dded825" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Serializer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
        <definition>Serializer &amp; checkpoint::operator|</definition>
        <argsstring>(Serializer &amp;s, T &amp;target)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/dispatch.h" line="64" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/dispatch.impl.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a09875c2d3c012be868f3fd88b3ed55be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>SerializerTs</declname>
            <defname>SerializerTs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::instantiateObjSerializer</definition>
        <argsstring>()</argsstring>
        <name>instantiateObjSerializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/serialize_instantiator.h" line="121" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/serialize_instantiator.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1a2bcd2958a1f59fa059218ddd96946ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::allocateConstructForPointer</definition>
        <argsstring>(SerializerT &amp;s, T *&amp;target)</argsstring>
        <name>allocateConstructForPointer</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Allocate and construct memory for a pointer with type <computeroutput>T</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This function automatically handles allocating and constructing the right type for virtually serialized pointers or non-virtual static allocation and construction.</para><para>An example of how to use this to properly serialize a std::shared_ptr&lt;T&gt;:</para><para>template &lt;typename t&gt;=&quot;&quot;&gt; struct X { std::shared_ptr&lt;T&gt; a;</para><para>template &lt;typename serializert&gt;=&quot;&quot;&gt; void serialize(SerializerT&amp; s) { T* raw = elm.get(); checkpoint::allocateConstructForPointer(s, raw); if (s.isUnpacking()) { a = std::shared_ptr&lt;T&gt;(raw); } s | *a; } };</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to a pointer to the target object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/virtual_serialize.h" line="173" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/virtual_serialize.h" bodystart="173" bodyend="175"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/buffer/buffer.h" line="53" column="1"/>
  </compounddef>
</doxygen>
