<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structcheckpoint_1_1_serializable_traits" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::SerializableTraits</compoundname>
    <includes refid="serializable__traits_8h" local="no">serializable_traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>S</declname>
        <defname>S</defname>
        <defval><ref refid="structcheckpoint_1_1_base_serializer" kindref="compound">checkpoint::BaseSerializer</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; U &gt;().<ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serialize_t =  decltype( std::declval&lt;U&gt;().serialize(std::declval&lt;V&amp;&gt;()) )</definition>
        <argsstring></argsstring>
        <name>serialize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start with detection of &quot;serialize&quot; overloads, intrusive and non-intrusive.</para>
<para>NOTE: Detection of <computeroutput>serializeParent</computeroutput> and <computeroutput>serializeThis</computeroutput> are no longer used on &quot;develop&quot; in VT (eliminated with message serialization refactoring), but remain on the release branch for 1.0.0. Thus, they must stay for now. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="102" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1ab565b1e56509babb16ea5525ed4a3ebf" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" kindref="member">serialize_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize =  detection::is_detected&lt;serialize_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="105" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(std::declval&lt; V &amp; &gt;(), std::declval&lt; U &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::nonintrustive_serialize_t =  decltype(serialize( std::declval&lt;V&amp;&gt;(), std::declval&lt;U&amp;&gt;() ))</definition>
        <argsstring></argsstring>
        <name>nonintrustive_serialize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="108" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1abc3628bc485acd98b08840fb99450850" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" kindref="member">nonintrustive_serialize_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_nonintrustive_serialize =  detection::is_detected&lt;nonintrustive_serialize_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_nonintrustive_serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="112" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; U &gt;().serializeParent(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serializeParent_t =  decltype(std::declval&lt;U&gt;().serializeParent(std::declval&lt;V&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>serializeParent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="117" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a4785b7f54369ec889ac5a25a8256a578" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" kindref="member">serializeParent_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serializeParent =  detection::is_detected&lt;serializeParent_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serializeParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="119" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; U &gt;().serializeThis(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serializeThis_t =  decltype(std::declval&lt;U&gt;().serializeThis(std::declval&lt;V&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>serializeThis_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="122" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1adc99520813c22cf61ab70ba2fea3cdc6" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" kindref="member">serializeThis_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serializeThis =  detection::is_detected&lt;serializeThis_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serializeThis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="124" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1is_byte_copyable" kindref="compound">isByteCopyable</ref>&lt; T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_byteCopyTraitTrue =  isByteCopyable&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>has_byteCopyTraitTrue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detect byte-copyability trait and std::is_arithmetic, used for types that do not have a serialize method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="151" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::is_arithmetic&lt; U &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_isArith =  std::is_arithmetic&lt;U&gt;</definition>
        <argsstring></argsstring>
        <name>has_isArith</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="154" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(U())</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::constructor_t =  decltype(U())</definition>
        <argsstring></argsstring>
        <name>constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detect different types of re-constructibility: default constructors, explicitly tagged constructors for serializers, and reconstruct methods. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="166" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a824afd2953233388cbc3223a82c75df8" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" kindref="member">constructor_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_default_constructor =  detection::is_detected&lt;constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_default_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="167" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(U(std::declval&lt; <ref refid="namespacecheckpoint_1a7ff642cff4d72d01a16ab10e9bc363ef" kindref="member">SERIALIZE_CONSTRUCT_TAG</ref> &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::tagged_constructor_t =  decltype(U(std::declval&lt;SERIALIZE_CONSTRUCT_TAG&gt;()))</definition>
        <argsstring></argsstring>
        <name>tagged_constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="170" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a3388d17f4748bf899e063b3d05e0dbe4" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" kindref="member">tagged_constructor_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_tagged_constructor =  detection::is_detected&lt;tagged_constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_tagged_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="171" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(U::reconstruct(std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::reconstruct_t =  decltype(U::reconstruct(std::declval&lt;void*&gt;()))</definition>
        <argsstring></argsstring>
        <name>reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="174" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a1c37f2f1a317fdd0d198c3d6ad2d35c4" prot="public" static="no">
        <type><ref refid="namespacedetection_1affc661f546e50448d9582e54280f7a11" kindref="member">detection::is_detected_exact</ref>&lt; T &amp;, <ref refid="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" kindref="member">reconstruct_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_reconstruct =  detection::is_detected_exact&lt;T&amp;, reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="175" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="namespacecheckpoint_1a6254f2e220f905a2b0c797c08092a7a1" kindref="member">reconstruct</ref>(std::declval&lt; U *&amp; &gt;(), std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::nonintrustive_reconstruct_t =  decltype( reconstruct( std::declval&lt;U*&amp;&gt;(), std::declval&lt;void*&gt;() ) )</definition>
        <argsstring></argsstring>
        <name>nonintrustive_reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="178" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1aeaa2e5459d2910f2ed6a8e423b45552b" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" kindref="member">nonintrustive_reconstruct_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_nonintrusive_reconstruct =  detection::is_detected&lt;nonintrustive_reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_nonintrusive_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="184" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a914c73251ad840e5370f1ac7cb1c18de" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="structcheckpoint_1_1_checkpoint_reconstructor" kindref="compound">checkpoint::CheckpointReconstructor</ref>&lt; U &gt;::<ref refid="namespacecheckpoint_1a6254f2e220f905a2b0c797c08092a7a1" kindref="member">reconstruct</ref>(std::declval&lt; U *&amp; &gt;(), std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::specialized_reconstruct_t =  decltype( checkpoint::CheckpointReconstructor&lt;U&gt;::reconstruct( std::declval&lt;U*&amp;&gt;(), std::declval&lt;void*&gt;() ) )</definition>
        <argsstring></argsstring>
        <name>specialized_reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="188" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1afa7760f6127136a1772b90cbe9922bc3" prot="public" static="no">
        <type><ref refid="namespacedetection_1a30893549a3de1e9603d78dad6d5dce92" kindref="member">detection::is_detected</ref>&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a914c73251ad840e5370f1ac7cb1c18de" kindref="member">specialized_reconstruct_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_specialized_reconstruct =  detection::is_detected&lt;specialized_reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_specialized_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="194" column="3" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1ac398852c9ac167f1e922d98f91d1ec01" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_instrusive</definition>
        <argsstring></argsstring>
        <name>has_serialize_instrusive</name>
        <initializer>= <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_serialize::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="127" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a837a521991fb741610de1c5847576f7f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_noninstrusive</definition>
        <argsstring></argsstring>
        <name>has_serialize_noninstrusive</name>
        <initializer>=
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_nonintrustive_serialize::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="130" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a404f0e26b0e8c29335a13133ec5b2d7b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_function</definition>
        <argsstring></argsstring>
        <name>has_serialize_function</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1ac398852c9ac167f1e922d98f91d1ec01" kindref="member">has_serialize_instrusive</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1a837a521991fb741610de1c5847576f7f" kindref="member">has_serialize_noninstrusive</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="134" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a34f523b2264a750ee3a8380da6388b15" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_parent_serialize</definition>
        <argsstring></argsstring>
        <name>has_parent_serialize</name>
        <initializer>= <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_serializeParent::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="138" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a4cffc082900896781bb6a9d3e9aa91df" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_this_serialize</definition>
        <argsstring></argsstring>
        <name>has_this_serialize</name>
        <initializer>= <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_serializeThis::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="141" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a79d952745fde047cca2c221c5db1c221" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_split_serialize</definition>
        <argsstring></argsstring>
        <name>has_split_serialize</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a34f523b2264a750ee3a8380da6388b15" kindref="member">has_parent_serialize</ref> and <ref refid="structcheckpoint_1_1_serializable_traits_1a4cffc082900896781bb6a9d3e9aa91df" kindref="member">has_this_serialize</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="144" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1aeffbf834f99665626f91e511145a19ba" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_bytecopyable</definition>
        <argsstring></argsstring>
        <name>is_bytecopyable</name>
        <initializer>=
    has_byteCopyTraitTrue::value or <ref refid="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" kindref="member">has_isArith</ref>&lt;T&gt;::value or
    <ref refid="structcheckpoint_1_1_byte_copy_non_intrusive" kindref="compound">ByteCopyNonIntrusive</ref>&lt;T&gt;::isByteCopyable::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="157" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1af4fd4725b2fbcf8948d667040a2d365d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_default_constructible</definition>
        <argsstring></argsstring>
        <name>is_default_constructible</name>
        <initializer>=
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_default_constructor::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="198" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a4e4f340db88ec3c6649ea5b36bf53710" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_tagged_constructible</definition>
        <argsstring></argsstring>
        <name>is_tagged_constructible</name>
        <initializer>=
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_tagged_constructor::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="202" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a42e4be78b19a646b214c02cac1c3d962" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_intrusive_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_intrusive_reconstructible</name>
        <initializer>= has_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="206" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a6bc5927c8686c7f66ab6d4cd15782d15" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_nonintrusive_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_nonintrusive_reconstructible</name>
        <initializer>=
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_nonintrusive_reconstruct::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="209" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a5200671aebbe1289230895b1d42d2f64" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_specialized_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_specialized_reconstructible</name>
        <initializer>=
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_specialized_reconstruct::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="213" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1af117da0901a9359e0032b633f27f16c0" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_reconstructible</name>
        <initializer>=
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_nonintrusive_reconstruct::value</ref> or
    has_reconstruct::value or
    <ref refid="structdetection_1_1detector_1a024596b8b67ed33cf415ef292cdf44e8" kindref="member">has_specialized_reconstruct::value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="217" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1aba6a71b6ec368dfddf66385dbc3e2f31" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_constructible</definition>
        <argsstring></argsstring>
        <name>is_constructible</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1af4fd4725b2fbcf8948d667040a2d365d" kindref="member">is_default_constructible</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1af117da0901a9359e0032b633f27f16c0" kindref="member">is_reconstructible</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1a4e4f340db88ec3c6649ea5b36bf53710" kindref="member">is_tagged_constructible</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="224" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a53aa8e541439d66d9c42ca4f31f6e9f7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_serializable</definition>
        <argsstring></argsstring>
        <name>is_serializable</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a404f0e26b0e8c29335a13133ec5b2d7b" kindref="member">has_serialize_function</ref> and <ref refid="structcheckpoint_1_1_serializable_traits_1aba6a71b6ec368dfddf66385dbc3e2f31" kindref="member">is_constructible</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finally, combine all these into a single definition of is_serializable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="230" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a7c2f8732d58b3dd59130a157f09926ad" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_traversable</definition>
        <argsstring></argsstring>
        <name>is_traversable</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a404f0e26b0e8c29335a13133ec5b2d7b" kindref="member">has_serialize_function</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1aeffbf834f99665626f91e511145a19ba" kindref="member">is_bytecopyable</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="233" column="31" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="90" column="25" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="90" bodyend="235"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>constructor_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_byteCopyTraitTrue</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a824afd2953233388cbc3223a82c75df8" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_default_constructor</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_isArith</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aeaa2e5459d2910f2ed6a8e423b45552b" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_nonintrusive_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1abc3628bc485acd98b08840fb99450850" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_nonintrustive_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a34f523b2264a750ee3a8380da6388b15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_parent_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a1c37f2f1a317fdd0d198c3d6ad2d35c4" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ab565b1e56509babb16ea5525ed4a3ebf" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a404f0e26b0e8c29335a13133ec5b2d7b" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_function</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ac398852c9ac167f1e922d98f91d1ec01" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_instrusive</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a837a521991fb741610de1c5847576f7f" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_noninstrusive</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4785b7f54369ec889ac5a25a8256a578" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serializeParent</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1adc99520813c22cf61ab70ba2fea3cdc6" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serializeThis</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1afa7760f6127136a1772b90cbe9922bc3" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_specialized_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a79d952745fde047cca2c221c5db1c221" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_split_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3388d17f4748bf899e063b3d05e0dbe4" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_tagged_constructor</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4cffc082900896781bb6a9d3e9aa91df" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_this_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aeffbf834f99665626f91e511145a19ba" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_bytecopyable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aba6a71b6ec368dfddf66385dbc3e2f31" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1af4fd4725b2fbcf8948d667040a2d365d" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_default_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a42e4be78b19a646b214c02cac1c3d962" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_intrusive_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a6bc5927c8686c7f66ab6d4cd15782d15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_nonintrusive_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1af117da0901a9359e0032b633f27f16c0" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a53aa8e541439d66d9c42ca4f31f6e9f7" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_serializable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a5200671aebbe1289230895b1d42d2f64" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_specialized_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4e4f340db88ec3c6649ea5b36bf53710" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_tagged_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a7c2f8732d58b3dd59130a157f09926ad" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_traversable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>nonintrustive_reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>nonintrustive_serialize_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serialize_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serializeParent_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serializeThis_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a914c73251ad840e5370f1ac7cb1c18de" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>specialized_reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>tagged_constructor_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
