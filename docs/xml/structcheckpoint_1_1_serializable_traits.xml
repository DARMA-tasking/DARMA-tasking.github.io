<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1_serializable_traits" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::SerializableTraits</compoundname>
    <includes refid="serializable__traits_8h" local="no">serializable_traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>S</declname>
        <defname>S</defname>
        <defval><ref refid="structcheckpoint_1_1_serializer" kindref="compound">checkpoint::Serializer</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().<ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serialize_t =  decltype( std::declval&lt;U&gt;().serialize(std::declval&lt;V&amp;&gt;()) )</definition>
        <argsstring></argsstring>
        <name>serialize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start with detection of &quot;serialize&quot; overloads, intrusive and non-intrusive.</para><para>NOTE: Detection of <computeroutput>serializeParent</computeroutput> and <computeroutput>serializeThis</computeroutput> are no longer used on &quot;develop&quot; in VT (eliminated with message serialization refactoring), but remain on the release branch for 1.0.0. Thus, they must stay for now. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="95" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1ab565b1e56509babb16ea5525ed4a3ebf" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" kindref="member">serialize_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize =  detection::is_detected&lt;serialize_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="98" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" prot="public" static="no">
        <type>decltype(<ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(std::declval&lt; V &amp; &gt;(), std::declval&lt; U &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::nonintrustive_serialize_t =  decltype(serialize( std::declval&lt;V&amp;&gt;(), std::declval&lt;U&amp;&gt;() ))</definition>
        <argsstring></argsstring>
        <name>nonintrustive_serialize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="101" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1abc3628bc485acd98b08840fb99450850" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" kindref="member">nonintrustive_serialize_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_nonintrustive_serialize =  detection::is_detected&lt;nonintrustive_serialize_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_nonintrustive_serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="105" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().serializeParent(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serializeParent_t =  decltype(std::declval&lt;U&gt;().serializeParent(std::declval&lt;V&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>serializeParent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="110" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a4785b7f54369ec889ac5a25a8256a578" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" kindref="member">serializeParent_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serializeParent =  detection::is_detected&lt;serializeParent_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serializeParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="112" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" prot="public" static="no">
        <type>decltype(std::declval&lt; U &gt;().serializeThis(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serializeThis_t =  decltype(std::declval&lt;U&gt;().serializeThis(std::declval&lt;V&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>serializeThis_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="115" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1adc99520813c22cf61ab70ba2fea3cdc6" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" kindref="member">serializeThis_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serializeThis =  detection::is_detected&lt;serializeThis_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serializeThis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="117" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1is_byte_copyable" kindref="compound">isByteCopyable</ref>&lt; T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_byteCopyTraitTrue =  isByteCopyable&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>has_byteCopyTraitTrue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detect byte-copyability trait and std::is_arithmetic, used for types that do not have a serialize method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="144" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" prot="public" static="no">
        <type>std::is_arithmetic&lt; U &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_isArith =  std::is_arithmetic&lt;U&gt;</definition>
        <argsstring></argsstring>
        <name>has_isArith</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="147" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" prot="public" static="no">
        <type>decltype(U())</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::constructor_t =  decltype(U())</definition>
        <argsstring></argsstring>
        <name>constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detect different types of re-constructibility: default constructors, explicitly tagged constructors for serializers, and reconstruct methods. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="158" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a824afd2953233388cbc3223a82c75df8" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" kindref="member">constructor_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_default_constructor =  detection::is_detected&lt;constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_default_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="159" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" prot="public" static="no">
        <type>decltype(U(std::declval&lt; <ref refid="namespacecheckpoint_1a7ff642cff4d72d01a16ab10e9bc363ef" kindref="member">SERIALIZE_CONSTRUCT_TAG</ref> &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::tagged_constructor_t =  decltype(U(std::declval&lt;SERIALIZE_CONSTRUCT_TAG&gt;()))</definition>
        <argsstring></argsstring>
        <name>tagged_constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="162" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a3388d17f4748bf899e063b3d05e0dbe4" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" kindref="member">tagged_constructor_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_tagged_constructor =  detection::is_detected&lt;tagged_constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_tagged_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="163" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" prot="public" static="no">
        <type>decltype(U::reconstruct(std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::reconstruct_t =  decltype(U::reconstruct(std::declval&lt;void*&gt;()))</definition>
        <argsstring></argsstring>
        <name>reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="166" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a1c37f2f1a317fdd0d198c3d6ad2d35c4" prot="public" static="no">
        <type>detection::is_detected_exact&lt; T &amp;, <ref refid="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" kindref="member">reconstruct_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_reconstruct =  detection::is_detected_exact&lt;T&amp;, reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="167" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" prot="public" static="no">
        <type>decltype(<ref refid="namespacecheckpoint_1a6254f2e220f905a2b0c797c08092a7a1" kindref="member">reconstruct</ref>(std::declval&lt; U *&amp; &gt;(), std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::nonintrustive_reconstruct_t =  decltype( reconstruct( std::declval&lt;U*&amp;&gt;(), std::declval&lt;void*&gt;() ) )</definition>
        <argsstring></argsstring>
        <name>nonintrustive_reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="170" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1aeaa2e5459d2910f2ed6a8e423b45552b" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" kindref="member">nonintrustive_reconstruct_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_nonintrusive_reconstruct =  detection::is_detected&lt;nonintrustive_reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_nonintrusive_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="176" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a9e6855e572198a99854e9e8d2ac8b9d7" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_instrusive</definition>
        <argsstring></argsstring>
        <name>has_serialize_instrusive</name>
        <initializer>= has_serialize::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="120" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a2b02dea52e9cce1e6ec8e251c414e2e5" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_noninstrusive</definition>
        <argsstring></argsstring>
        <name>has_serialize_noninstrusive</name>
        <initializer>=
    has_nonintrustive_serialize::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="123" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a4d17a7627a8e033cccb5cf4e6b8fd0dc" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_function</definition>
        <argsstring></argsstring>
        <name>has_serialize_function</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a9e6855e572198a99854e9e8d2ac8b9d7" kindref="member">has_serialize_instrusive</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1a2b02dea52e9cce1e6ec8e251c414e2e5" kindref="member">has_serialize_noninstrusive</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="127" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a122e712dd9adffac78f239a7c30b0a8f" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::has_parent_serialize</definition>
        <argsstring></argsstring>
        <name>has_parent_serialize</name>
        <initializer>= has_serializeParent::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="131" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1ab228ede8ce64a9aaebf9ce43ac388400" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::has_this_serialize</definition>
        <argsstring></argsstring>
        <name>has_this_serialize</name>
        <initializer>= has_serializeThis::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="134" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a1fa333e360a0dfeafebe350436ae9141" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::has_split_serialize</definition>
        <argsstring></argsstring>
        <name>has_split_serialize</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a122e712dd9adffac78f239a7c30b0a8f" kindref="member">has_parent_serialize</ref> and <ref refid="structcheckpoint_1_1_serializable_traits_1ab228ede8ce64a9aaebf9ce43ac388400" kindref="member">has_this_serialize</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="137" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a19e58ea0f510be10502e476258ed14ae" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_bytecopyable</definition>
        <argsstring></argsstring>
        <name>is_bytecopyable</name>
        <initializer>=
    has_byteCopyTraitTrue::value or <ref refid="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" kindref="member">has_isArith</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="150" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a4bdbe26cdd11c7ff07f84e4cfdf34e7f" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_default_constructible</definition>
        <argsstring></argsstring>
        <name>is_default_constructible</name>
        <initializer>=
    has_default_constructor::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="180" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1aa6618d9f36e37127006112c73755fceb" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_tagged_constructible</definition>
        <argsstring></argsstring>
        <name>is_tagged_constructible</name>
        <initializer>=
    has_tagged_constructor::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="184" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a9879da69f4597dfb32b869142c1c46c9" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_intrusive_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_intrusive_reconstructible</name>
        <initializer>= has_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="188" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a35d5afbe97197885a1513765a210837c" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_nonintrusive_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_nonintrusive_reconstructible</name>
        <initializer>=
    has_nonintrusive_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="191" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a6cc78a7cc9b4645727c92437619fce83" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_reconstructible</name>
        <initializer>=
    has_nonintrusive_reconstruct::value or has_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="195" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a7720e2f57d1b3d2f87fd022b47d0b775" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_constructible</definition>
        <argsstring></argsstring>
        <name>is_constructible</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a4bdbe26cdd11c7ff07f84e4cfdf34e7f" kindref="member">is_default_constructible</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1a6cc78a7cc9b4645727c92437619fce83" kindref="member">is_reconstructible</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1aa6618d9f36e37127006112c73755fceb" kindref="member">is_tagged_constructible</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="200" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a3941c4fcb5397fe564a3453857aa9183" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_serializable</definition>
        <argsstring></argsstring>
        <name>is_serializable</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a4d17a7627a8e033cccb5cf4e6b8fd0dc" kindref="member">has_serialize_function</ref> and <ref refid="structcheckpoint_1_1_serializable_traits_1a7720e2f57d1b3d2f87fd022b47d0b775" kindref="member">is_constructible</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finally, combine all these into a single definition of is_serializable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="206" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a426639501cd0ce23cb14c7b2ff982fc1" prot="public" static="yes" mutable="no">
        <type>constexpr auto const</type>
        <definition>constexpr auto const checkpoint::SerializableTraits&lt; T, S &gt;::is_traversable</definition>
        <argsstring></argsstring>
        <name>is_traversable</name>
        <initializer>=
    <ref refid="structcheckpoint_1_1_serializable_traits_1a4d17a7627a8e033cccb5cf4e6b8fd0dc" kindref="member">has_serialize_function</ref> or <ref refid="structcheckpoint_1_1_serializable_traits_1a19e58ea0f510be10502e476258ed14ae" kindref="member">is_bytecopyable</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="209" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" line="83" column="1" bodyfile="lib/checkpoint/src/checkpoint/traits/serializable_traits.h" bodystart="83" bodyend="211"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>constructor_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_byteCopyTraitTrue</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a824afd2953233388cbc3223a82c75df8" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_default_constructor</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_isArith</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aeaa2e5459d2910f2ed6a8e423b45552b" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_nonintrusive_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1abc3628bc485acd98b08840fb99450850" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_nonintrustive_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a122e712dd9adffac78f239a7c30b0a8f" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_parent_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a1c37f2f1a317fdd0d198c3d6ad2d35c4" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ab565b1e56509babb16ea5525ed4a3ebf" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4d17a7627a8e033cccb5cf4e6b8fd0dc" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_function</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a9e6855e572198a99854e9e8d2ac8b9d7" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_instrusive</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a2b02dea52e9cce1e6ec8e251c414e2e5" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_noninstrusive</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4785b7f54369ec889ac5a25a8256a578" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serializeParent</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1adc99520813c22cf61ab70ba2fea3cdc6" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serializeThis</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a1fa333e360a0dfeafebe350436ae9141" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_split_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3388d17f4748bf899e063b3d05e0dbe4" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_tagged_constructor</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ab228ede8ce64a9aaebf9ce43ac388400" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_this_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a19e58ea0f510be10502e476258ed14ae" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_bytecopyable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a7720e2f57d1b3d2f87fd022b47d0b775" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4bdbe26cdd11c7ff07f84e4cfdf34e7f" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_default_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a9879da69f4597dfb32b869142c1c46c9" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_intrusive_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a35d5afbe97197885a1513765a210837c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_nonintrusive_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a6cc78a7cc9b4645727c92437619fce83" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3941c4fcb5397fe564a3453857aa9183" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_serializable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aa6618d9f36e37127006112c73755fceb" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_tagged_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a426639501cd0ce23cb14c7b2ff982fc1" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_traversable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>nonintrustive_reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>nonintrustive_serialize_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serialize_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serializeParent_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serializeThis_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>tagged_constructor_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
