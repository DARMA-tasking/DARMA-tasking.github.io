<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvt_1_1util_1_1demangle_1_1_template_extract" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::demangle::TemplateExtract</compoundname>
    <includes refid="demangle_8h" local="no">demangle.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a544c77a181038fc1de063fe3d3fc761d" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr char const  *</type>
        <definition>static constexpr char const* vt::util::demangle::TemplateExtract::prettyFunctionForType</definition>
        <argsstring>()</argsstring>
        <name>prettyFunctionForType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IFF tracing a tracing-enabled build, returns the compiler-dependent &apos;PRETTY PRINT&apos; value of the ADORNED function as a string. The only useful bit here is the &quot;[T = ..]&quot; of the template in scope as the function name itself is self-evident; GCC and Clang supply this. This code will simply NOT COMPILE if the compiler is lacking required support; this method cannot be used if tracing is disabled. There should probably be a cmake check.. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="66" column="31" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a2fa8ebf7aca434dc7bf6c3113b04226b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>T</type>
            <declname>PF_VALUE_NAME</declname>
            <defname>PF_VALUE_NAME</defname>
          </param>
        </templateparamlist>
        <type>constexpr char const  *</type>
        <definition>static constexpr char const* vt::util::demangle::TemplateExtract::prettyFunctionForValue</definition>
        <argsstring>()</argsstring>
        <name>prettyFunctionForValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When the goal is to extract the value &quot;as appearing&quot; in the template parameterization, and not the type.. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="78" column="31" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a1fc274aa3088c6c65c5da2450896d6bf" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>T *</type>
            <declname>PF_VALUE_NAME</declname>
            <defname>PF_VALUE_NAME</defname>
          </param>
        </templateparamlist>
        <type>constexpr char const  *</type>
        <definition>static constexpr char const* vt::util::demangle::TemplateExtract::prettyFunctionForValuePtr</definition>
        <argsstring>()</argsstring>
        <name>prettyFunctionForValuePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="89" column="31" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="89" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a5b76d8ad80e5054d4da8bea682a1752d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::demangle::TemplateExtract::singlePfType</definition>
        <argsstring>(std::string const &amp;pf)</argsstring>
        <name>singlePfType</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>pf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a GCC/Clang-like <bold>PRETTY_FUNCTION</bold> output, extract the template instantiation information as a string, assuming a SINGLE template parameter. Returns an empty string if such cannot be extracted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="102" column="22" bodyfile="src/vt/utils/demangle/demangle.cc" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a8fe842098a300f5b31f5ab1b0a76804b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::demangle::TemplateExtract::lastNamedPfType</definition>
        <argsstring>(std::string const &amp;spf, std::string const &amp;tparam)</argsstring>
        <name>lastNamedPfType</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>spf</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>tparam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a GCG/Clang-long <bold>PRETTY_FUNCTION</bold> output, extract the template information as a string, assuming tparam names the LAST template parameter. Returns an empty string if such cannot be extracted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="108" column="22" bodyfile="src/vt/utils/demangle/demangle.cc" bodystart="70" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a78ecb83a83712ee88bbeacfb49cbf538" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vt::util::demangle::TemplateExtract::getTypeName</definition>
        <argsstring>()</argsstring>
        <name>getTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the type of T, as a string. Requires compiler extension support. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="113" column="22" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1afae798a13fb482fdd8fc668af2c3f0d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vt::util::demangle::TemplateExtract::getValueName</definition>
        <argsstring>()</argsstring>
        <name>getValueName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the type of T, as a string. Requires compiler extension support. (Might be able to use &apos;auto T&apos; in C++17.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="121" column="22" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a78f655ef251d1a4a542291d84dc38917" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T *</type>
            <declname>value</declname>
            <defname>value</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vt::util::demangle::TemplateExtract::getValueNamePtr</definition>
        <argsstring>()</argsstring>
        <name>getValueNamePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="127" column="22" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a5e896032f040eedc15e6e6b1397a6bfc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::demangle::TemplateExtract::getNamespace</definition>
        <argsstring>(std::string const &amp;typestr)</argsstring>
        <name>getNamespace</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>typestr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a string like &apos;a::b::c&apos;, return the namespace of &apos;a::b&apos;. Does not strip out extra template parameterization artifacts. Removes any leading &apos;&amp;&apos;, if present (as in &apos;values representing types&apos;). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="134" column="22" bodyfile="src/vt/utils/demangle/demangle.cc" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1aa9a0cc82115687324c7e10d0b27f0977" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::demangle::TemplateExtract::getBarename</definition>
        <argsstring>(std::string const &amp;typestr)</argsstring>
        <name>getBarename</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>typestr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a string like &apos;a::b::c&apos;, return the barename of &apos;c&apos;. Returns the bare name in absense of any namespace (eg. &apos;c&apos; -&gt; &apos;c&apos;). Removes any leading &apos;&amp;&apos;, if present (as in &apos;values representing types&apos;). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="139" column="22" bodyfile="src/vt/utils/demangle/demangle.cc" bodystart="155" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1demangle_1_1_template_extract_1a7085981a1d4ca05c458affcc2a5ca1cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::util::demangle::TemplateExtract::getVoidFuncStrArgs</definition>
        <argsstring>(std::string const &amp;typestr)</argsstring>
        <name>getVoidFuncStrArgs</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>typestr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a string like &apos;void (...)&apos; (that is, the string representation of a function type.. return the argument section. As the name indicates this is somewhat limited. Returns the original if not starting with &apos;void (&apos; or ending in &apos;)&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/demangle/demangle.h" line="145" column="22" bodyfile="src/vt/utils/demangle/demangle.cc" bodystart="169" bodyend="193"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/utils/demangle/demangle.h" line="57" column="1" bodyfile="src/vt/utils/demangle/demangle.h" bodystart="57" bodyend="146"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1aa9a0cc82115687324c7e10d0b27f0977" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>getBarename</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a5e896032f040eedc15e6e6b1397a6bfc" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>getNamespace</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a78ecb83a83712ee88bbeacfb49cbf538" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>getTypeName</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1afae798a13fb482fdd8fc668af2c3f0d4" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>getValueName</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a78f655ef251d1a4a542291d84dc38917" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>getValueNamePtr</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a7085981a1d4ca05c458affcc2a5ca1cc" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>getVoidFuncStrArgs</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a8fe842098a300f5b31f5ab1b0a76804b" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>lastNamedPfType</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a544c77a181038fc1de063fe3d3fc761d" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>prettyFunctionForType</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a2fa8ebf7aca434dc7bf6c3113b04226b" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>prettyFunctionForValue</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a1fc274aa3088c6c65c5da2450896d6bf" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>prettyFunctionForValuePtr</name></member>
      <member refid="structvt_1_1util_1_1demangle_1_1_template_extract_1a5b76d8ad80e5054d4da8bea682a1752d" prot="public" virt="non-virtual"><scope>vt::util::demangle::TemplateExtract</scope><name>singlePfType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
