<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1event_1_1_async_event" kind="struct" language="C++" prot="public">
    <compoundname>vt::event::AsyncEvent</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_pollable_component" prot="public" virt="non-virtual">vt::runtime::component::PollableComponent&lt; AsyncEvent &gt;</basecompoundref>
    <includes refid="event_8h" local="no">vt/event/event.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a4cf6f3c99e69b2efeb5fa9b3ffbcca4a" prot="public" static="no">
        <type><ref refid="namespacevt_1_1event_1a1ea9fec44d101bf40b8fd786d44ebed9" kindref="member">eEventRecord</ref></type>
        <definition>using vt::event::AsyncEvent::EventRecordTypeType =  eEventRecord</definition>
        <argsstring></argsstring>
        <name>EventRecordTypeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="86" column="1" bodyfile="src/vt/event/event.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a087519ac9e5ceaf317a2f6f583bfabd6" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_i_d_manager" kindref="compound">EventIDManager</ref></type>
        <definition>using vt::event::AsyncEvent::EventManagerType =  EventIDManager</definition>
        <argsstring></argsstring>
        <name>EventManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="87" column="1" bodyfile="src/vt/event/event.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a35f2dfb3322fc042d4561ce1e119a0c8" prot="public" static="no">
        <type><ref refid="namespacevt_1_1event_1a787aca6361696d96d817a639195c429c" kindref="member">EventState</ref></type>
        <definition>using vt::event::AsyncEvent::EventStateType =  EventState</definition>
        <argsstring></argsstring>
        <name>EventStateType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="88" column="1" bodyfile="src/vt/event/event.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_record" kindref="compound">EventRecord</ref></type>
        <definition>using vt::event::AsyncEvent::EventRecordType =  EventRecord</definition>
        <argsstring></argsstring>
        <name>EventRecordType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="89" column="1" bodyfile="src/vt/event/event.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a858268f301cb838d33d21cc66232803b" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" kindref="member">EventRecordType</ref> &gt;</type>
        <definition>using vt::event::AsyncEvent::EventRecordPtrType =  std::unique_ptr&lt;EventRecordType&gt;</definition>
        <argsstring></argsstring>
        <name>EventRecordPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="90" column="1" bodyfile="src/vt/event/event.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_holder" kindref="compound">EventHolder</ref></type>
        <definition>using vt::event::AsyncEvent::EventHolderType =  EventHolder</definition>
        <argsstring></argsstring>
        <name>EventHolderType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="91" column="1" bodyfile="src/vt/event/event.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1aaa94fd7e3a63b17dc5b5e5751e5d05e8" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_holder" kindref="compound">EventHolder</ref> *</type>
        <definition>using vt::event::AsyncEvent::EventHolderPtrType =  EventHolder*</definition>
        <argsstring></argsstring>
        <name>EventHolderPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="92" column="1" bodyfile="src/vt/event/event.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" prot="public" static="no">
        <type>std::list&lt; <ref refid="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" kindref="member">EventHolderType</ref> &gt;</type>
        <definition>using vt::event::AsyncEvent::TypedEventContainerType =  std::list&lt;EventHolderType&gt;</definition>
        <argsstring></argsstring>
        <name>TypedEventContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="93" column="1" bodyfile="src/vt/event/event.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a0f9634db3d6887c4a22076f6b9054e93" prot="public" static="no">
        <type>typename TypedEventContainerType::iterator</type>
        <definition>using vt::event::AsyncEvent::EventContIter =  typename TypedEventContainerType::iterator</definition>
        <argsstring></argsstring>
        <name>EventContIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="94" column="1" bodyfile="src/vt/event/event.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a391e9ac6236bd3dc5c884b8bc7e48257" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref>, <ref refid="structvt_1_1event_1_1_async_event_1a0f9634db3d6887c4a22076f6b9054e93" kindref="member">EventContIter</ref> &gt;</type>
        <definition>using vt::event::AsyncEvent::EventContainerType =  std::unordered_map&lt;EventType, EventContIter&gt;</definition>
        <argsstring></argsstring>
        <name>EventContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="95" column="1" bodyfile="src/vt/event/event.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a8775e8bb7eee0344126af34897ca7612" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::cur_event_</definition>
        <argsstring></argsstring>
        <name>cur_event_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="206" column="1" bodyfile="src/vt/event/event.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1ab976472ed1ec00878dfad854d0a74202" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" kindref="member">TypedEventContainerType</ref></type>
        <definition>TypedEventContainerType vt::event::AsyncEvent::event_container_</definition>
        <argsstring></argsstring>
        <name>event_container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="209" column="1" bodyfile="src/vt/event/event.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1aa622d9e34d70a6de6ca74b16e65c1bae" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" kindref="member">TypedEventContainerType</ref></type>
        <definition>TypedEventContainerType vt::event::AsyncEvent::polling_event_container_</definition>
        <argsstring></argsstring>
        <name>polling_event_container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="212" column="1" bodyfile="src/vt/event/event.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a8810ca30cca503944aed2741a6d28430" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a391e9ac6236bd3dc5c884b8bc7e48257" kindref="member">EventContainerType</ref></type>
        <definition>EventContainerType vt::event::AsyncEvent::lookup_container_</definition>
        <argsstring></argsstring>
        <name>lookup_container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="215" column="1" bodyfile="src/vt/event/event.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a2699d7c273fc91d9b7a3c51fbae364d9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a55fcc9d6ffa285d1b085c01df2507d2f" kindref="member">diagnostic::Counter</ref></type>
        <definition>diagnostic::Counter vt::event::AsyncEvent::eventPollCount</definition>
        <argsstring></argsstring>
        <name>eventPollCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="222" column="1" bodyfile="src/vt/event/event.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a8fc0ec877d847df0ac290c330146fd8a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1ad68069af499e2047c28d1852d77680ee" kindref="member">diagnostic::Gauge</ref></type>
        <definition>diagnostic::Gauge vt::event::AsyncEvent::eventSizeGauge</definition>
        <argsstring></argsstring>
        <name>eventSizeGauge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="223" column="1" bodyfile="src/vt/event/event.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a09ed5cc72e0c43fa1de10ccb4effd7df" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1diagnostic_1a84795feb3d3500ee2d7d59248499efb8" kindref="member">diagnostic::Timer</ref></type>
        <definition>diagnostic::Timer vt::event::AsyncEvent::mpiEventWaitTime</definition>
        <argsstring></argsstring>
        <name>mpiEventWaitTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="224" column="1" bodyfile="src/vt/event/event.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ad9837496e616789010bdbeefa968639d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::event::AsyncEvent::AsyncEvent</definition>
        <argsstring>()=default</argsstring>
        <name>AsyncEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a605a6078d0bcd10467a21464fe143561" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::event::AsyncEvent::~AsyncEvent</definition>
        <argsstring>()</argsstring>
        <name>~AsyncEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="99" column="1" bodyfile="src/vt/event/event.cc" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ac8d9f977b1cca3f43a06d0e83bc88e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410">initialize</reimplements>
        <briefdescription>
<para>Empty default overridden initialize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="101" column="1" bodyfile="src/vt/event/event.cc" bodystart="62" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a77e3aafaae98603825556cdf8105ba57" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959">finalize</reimplements>
        <briefdescription>
<para>Empty default overridden finalize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="102" column="1" bodyfile="src/vt/event/event.cc" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1abc1629d13f9f3391e5e7f9ebc6303265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createEvent</definition>
        <argsstring>(EventRecordTypeType const &amp;type, NodeType const &amp;node)</argsstring>
        <name>createEvent</name>
        <param>
          <type><ref refid="namespacevt_1_1event_1a1ea9fec44d101bf40b8fd786d44ebed9" kindref="member">EventRecordTypeType</ref> const &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Create a new event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of event to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that&apos;s embedded in the event bit field</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new event identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="112" column="1" bodyfile="src/vt/event/event.cc" bodystart="219" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a78e777586ef948a4436b8dcea3c33be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" kindref="member">EventRecordType</ref> &amp;</type>
        <definition>EventRecordType&amp; vt::event::AsyncEvent::getEvent</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>getEvent</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Get the event record. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event record </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a288c3db66bf12de8dc65733b184870c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::event::AsyncEvent::getOwningNode</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>getOwningNode</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Get the owning node for an event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the node that owns the event </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="130" column="1" bodyfile="src/vt/event/event.cc" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ae94bb2059c35857a228fd55ab5512272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createMPIEvent</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>createMPIEvent</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Create a new MPI event that holds a MPI_Request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node on which the MPI event exists</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="139" column="1" bodyfile="src/vt/event/event.cc" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1aa7c07c129ba54bde5abbe95c543ca352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createNormalEvent</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>createNormalEvent</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Create a regular type event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that owns it</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="148" column="1" bodyfile="src/vt/event/event.cc" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a9646f211d660d2e991df07b77e5f2cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createParentEvent</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>createParentEvent</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Create a parent event that can have multiple children. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">node</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that owns it</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the event identifier </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="157" column="1" bodyfile="src/vt/event/event.cc" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a27d14dba4b35f66aad75d46fb56227a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" kindref="member">EventHolderType</ref> &amp;</type>
        <definition>AsyncEvent::EventHolderType &amp; vt::event::AsyncEvent::getEventHolder</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>getEventHolder</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Get the holder for an event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the holder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="166" column="1" bodyfile="src/vt/event/event.cc" bodystart="261" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a8aeeb83c7b467b3d130e522d079e5a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::event::AsyncEvent::holderExists</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>holderExists</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Check if a holder exist for an event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if it exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="175" column="1" bodyfile="src/vt/event/event.cc" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a4d6056e47909a858fcd3bfc3782b8d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::event::AsyncEvent::needsPolling</definition>
        <argsstring>(EventRecordTypeType const &amp;type)</argsstring>
        <name>needsPolling</name>
        <param>
          <type><ref refid="namespacevt_1_1event_1a1ea9fec44d101bf40b8fd786d44ebed9" kindref="member">EventRecordTypeType</ref> const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="176" column="1" bodyfile="src/vt/event/event.cc" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a67a603eff81f5f912118f38fd5cbaccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::removeEventID</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>removeEventID</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="177" column="1" bodyfile="src/vt/event/event.cc" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ac14b4e2fc658f70937c591dfdc8ea083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1event_1a787aca6361696d96d817a639195c429c" kindref="member">EventStateType</ref></type>
        <definition>AsyncEvent::EventStateType vt::event::AsyncEvent::testEventComplete</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>testEventComplete</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="178" column="1" bodyfile="src/vt/event/event.cc" bodystart="287" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1aa6432e2fff56eb073f9489bfc37e89bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::attachAction</definition>
        <argsstring>(EventType const &amp;event, ActionType callable)</argsstring>
        <name>attachAction</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>callable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="179" column="1" bodyfile="src/vt/event/event.cc" bodystart="82" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a383418f69041085a8c76b87c3bf82f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::testEventsTrigger</definition>
        <argsstring>(int const &amp;num_events=num_check_actions)</argsstring>
        <name>testEventsTrigger</name>
        <param>
          <type>int const &amp;</type>
          <declname>num_events</declname>
          <defval>num_check_actions</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="180" column="1" bodyfile="src/vt/event/event.cc" bodystart="304" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1aa99cf6ece5deebbe4f43c9d21a78a2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int vt::event::AsyncEvent::progress</definition>
        <argsstring>(TimeType current_time) override</argsstring>
        <name>progress</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_pollable_component_1a51939e8b7e895a377c10c6767034396b">progress</reimplements>
        <param>
          <type><ref refid="namespacevt_1a876a9d0cd5a952859c72de8a46881442" kindref="member">TimeType</ref></type>
          <declname>current_time</declname>
        </param>
        <briefdescription>
<para>Override progress function to force user to supply a real function. Abort if the user does not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of units processed<mdash/>zero </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="181" column="1" bodyfile="src/vt/event/event.cc" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a10af2d5cb5318e2ef25eabcd88c8139a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::event::AsyncEvent::isLocalTerm</definition>
        <argsstring>()</argsstring>
        <name>isLocalTerm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="182" column="1" bodyfile="src/vt/event/event.cc" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ac68b97804ca9b3dab1785a3c8a5d8242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::event::AsyncEvent::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="187" column="1" bodyfile="src/vt/event/event.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a6ca82dda3527409fb727450980817ca4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::event::AsyncEvent::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="190" column="1" bodyfile="src/vt/event/event.h" bodystart="190" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a2228d79f1c1f838e630dcb3325edfde3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::eventFinished</definition>
        <argsstring>(EventFinishedMsg *msg)</argsstring>
        <name>eventFinished</name>
        <param>
          <type><ref refid="structvt_1_1_event_finished_msg" kindref="compound">EventFinishedMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="184" column="1" bodyfile="src/vt/event/event.cc" bodystart="140" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a5493f4402db0fffba5300246247523b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::checkEventFinished</definition>
        <argsstring>(EventCheckFinishedMsg *msg)</argsstring>
        <name>checkEventFinished</name>
        <param>
          <type><ref refid="structvt_1_1_event_check_finished_msg" kindref="compound">EventCheckFinishedMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="185" column="1" bodyfile="src/vt/event/event.cc" bodystart="152" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used to track events. </para>    </briefdescription>
    <detaileddescription>
<para>Component to track events in the system to trigger actions or other events </para>    </detaileddescription>
    <inheritancegraph>
      <node id="201">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="202" relation="public-inheritance">
        </childnode>
        <childnode refid="205" relation="public-inheritance">
        </childnode>
        <childnode refid="206" relation="public-inheritance">
        </childnode>
      </node>
      <node id="200">
        <label>vt::runtime::component::Component&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="201" relation="public-inheritance">
        </childnode>
      </node>
      <node id="204">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="199">
        <label>vt::runtime::component::PollableComponent&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_pollable_component"/>
        <childnode refid="200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="202">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="203" relation="public-inheritance">
        </childnode>
        <childnode refid="204" relation="public-inheritance">
        </childnode>
      </node>
      <node id="203">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="205">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="206">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="198">
        <label>vt::event::AsyncEvent</label>
        <link refid="structvt_1_1event_1_1_async_event"/>
        <childnode refid="199" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="210">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="211" relation="public-inheritance">
        </childnode>
        <childnode refid="214" relation="public-inheritance">
        </childnode>
        <childnode refid="215" relation="public-inheritance">
        </childnode>
      </node>
      <node id="218">
        <label>vt::runtime::component::meter::DiagnosticMeter</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_meter"/>
      </node>
      <node id="225">
        <label>vt::runtime::component::detail::DiagnosticSnapshotValues&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_snapshot_values"/>
      </node>
      <node id="226">
        <label>vt::runtime::component::meter::Counter&lt; CounterDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_counter"/>
        <childnode refid="218" relation="public-inheritance">
        </childnode>
        <childnode refid="227" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
      <node id="216">
        <label>vt::runtime::component::meter::Timer&lt; TimerDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_timer"/>
        <childnode refid="217" relation="public-inheritance">
        </childnode>
      </node>
      <node id="209">
        <label>vt::runtime::component::Component&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="210" relation="public-inheritance">
        </childnode>
      </node>
      <node id="213">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="208">
        <label>vt::runtime::component::PollableComponent&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_pollable_component"/>
        <childnode refid="209" relation="public-inheritance">
        </childnode>
      </node>
      <node id="211">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="212" relation="public-inheritance">
        </childnode>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="217">
        <label>vt::runtime::component::meter::DiagnosticStatsPack&lt; TimerDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_stats_pack"/>
        <childnode refid="218" relation="public-inheritance">
        </childnode>
        <childnode refid="219" relation="usage">
          <edgelabel>sum_</edgelabel>
          <edgelabel>avg_</edgelabel>
          <edgelabel>max_</edgelabel>
          <edgelabel>min_</edgelabel>
        </childnode>
      </node>
      <node id="212">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="221">
        <label>vt::runtime::component::detail::DiagnosticSnapshotValues&lt; TimerDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_snapshot_values"/>
      </node>
      <node id="222">
        <label>vt::runtime::component::meter::Gauge&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_gauge"/>
        <childnode refid="223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="220">
        <label>vt::runtime::component::detail::DiagnosticBase</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_base"/>
      </node>
      <node id="214">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="215">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="223">
        <label>vt::runtime::component::meter::DiagnosticStatsPack&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1meter_1_1_diagnostic_stats_pack"/>
        <childnode refid="218" relation="public-inheritance">
        </childnode>
        <childnode refid="224" relation="usage">
          <edgelabel>sum_</edgelabel>
          <edgelabel>avg_</edgelabel>
          <edgelabel>max_</edgelabel>
          <edgelabel>min_</edgelabel>
        </childnode>
      </node>
      <node id="207">
        <label>vt::event::AsyncEvent</label>
        <link refid="structvt_1_1event_1_1_async_event"/>
        <childnode refid="208" relation="public-inheritance">
        </childnode>
        <childnode refid="216" relation="usage">
          <edgelabel>mpiEventWaitTime</edgelabel>
        </childnode>
        <childnode refid="222" relation="usage">
          <edgelabel>eventSizeGauge</edgelabel>
        </childnode>
        <childnode refid="226" relation="usage">
          <edgelabel>eventPollCount</edgelabel>
        </childnode>
      </node>
      <node id="228">
        <label>vt::runtime::component::detail::DiagnosticSnapshotValues&lt; CounterDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_snapshot_values"/>
      </node>
      <node id="219">
        <label>vt::runtime::component::detail::DiagnosticValue&lt; TimerDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value"/>
        <childnode refid="220" relation="public-inheritance">
        </childnode>
        <childnode refid="221" relation="usage">
          <edgelabel>values_</edgelabel>
        </childnode>
      </node>
      <node id="224">
        <label>vt::runtime::component::detail::DiagnosticValue&lt; GaugeDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value"/>
        <childnode refid="220" relation="public-inheritance">
        </childnode>
        <childnode refid="225" relation="usage">
          <edgelabel>values_</edgelabel>
        </childnode>
      </node>
      <node id="227">
        <label>vt::runtime::component::detail::DiagnosticValue&lt; CounterDefaultType &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1detail_1_1_diagnostic_value"/>
        <childnode refid="220" relation="public-inheritance">
        </childnode>
        <childnode refid="228" relation="usage">
          <edgelabel>values_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/event/event.h" line="85" column="1" bodyfile="src/vt/event/event.h" bodystart="85" bodyend="225"/>
    <listofallmembers>
      <member refid="structvt_1_1event_1_1_async_event_1ad9837496e616789010bdbeefa968639d" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>AsyncEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa6432e2fff56eb073f9489bfc37e89bc" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>attachAction</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a5493f4402db0fffba5300246247523b9" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>checkEventFinished</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>component_id_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1abc1629d13f9f3391e5e7f9ebc6303265" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ae94bb2059c35857a228fd55ab5512272" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createMPIEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa7c07c129ba54bde5abbe95c543ca352" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createNormalEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a9646f211d660d2e991df07b77e5f2cc6" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createParentEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8775e8bb7eee0344126af34897ca7612" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>cur_event_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>dumpState</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ab976472ed1ec00878dfad854d0a74202" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>event_container_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a391e9ac6236bd3dc5c884b8bc7e48257" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventContainerType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a0f9634db3d6887c4a22076f6b9054e93" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventContIter</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a2228d79f1c1f838e630dcb3325edfde3" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>eventFinished</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aaa94fd7e3a63b17dc5b5e5751e5d05e8" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventHolderPtrType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventHolderType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a087519ac9e5ceaf317a2f6f583bfabd6" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventManagerType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a2699d7c273fc91d9b7a3c51fbae364d9" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>eventPollCount</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a858268f301cb838d33d21cc66232803b" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventRecordPtrType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventRecordType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a4cf6f3c99e69b2efeb5fa9b3ffbcca4a" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventRecordTypeType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8fc0ec877d847df0ac290c330146fd8a" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>eventSizeGauge</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a35f2dfb3322fc042d4561ce1e119a0c8" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventStateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>fatalError</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a77e3aafaae98603825556cdf8105ba57" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a78e777586ef948a4436b8dcea3c33be4" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a27d14dba4b35f66aad75d46fb56227a9" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getEventHolder</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a288c3db66bf12de8dc65733b184870c0" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getOwningNode</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8aeeb83c7b467b3d130e522d079e5a7d" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>holderExists</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ac8d9f977b1cca3f43a06d0e83bc88e3d" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>initialize</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a10af2d5cb5318e2ef25eabcd88c8139a" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>isLocalTerm</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8810ca30cca503944aed2741a6d28430" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>lookup_container_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a09ed5cc72e0c43fa1de10ccb4effd7df" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>mpiEventWaitTime</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ac68b97804ca9b3dab1785a3c8a5d8242" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>name</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_progressable_1a86dd4c58e43f7dbf6bd67f7a8e6df088" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>needsCurrentTime</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a4d6056e47909a858fcd3bfc3782b8d2d" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>needsPolling</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_pollable_component_1a8ad6cfbc184ed9862cae5304605fe025" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>pollable</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa622d9e34d70a6de6ca74b16e65c1bae" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>polling_event_container_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa99cf6ece5deebbe4f43c9d21a78a2aa" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a67a603eff81f5f912118f38fd5cbaccb" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>removeEventID</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a6ca82dda3527409fb727450980817ca4" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1abe85836f57c42a695fdc292cd78b10cb" prot="public" virt="non-virtual" ambiguityscope="PollableComponent&lt; AsyncEvent &gt;::"><scope>vt::event::AsyncEvent</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>staticInit</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ac14b4e2fc658f70937c591dfdc8ea083" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>testEventComplete</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a383418f69041085a8c76b87c3bf82f27" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>testEventsTrigger</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>TypedEventContainerType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a605a6078d0bcd10467a21464fe143561" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>~AsyncEvent</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
