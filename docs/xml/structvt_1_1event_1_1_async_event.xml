<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1event_1_1_async_event" kind="struct" language="C++" prot="public">
    <compoundname>vt::event::AsyncEvent</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_pollable_component" prot="public" virt="non-virtual">vt::runtime::component::PollableComponent&lt; AsyncEvent &gt;</basecompoundref>
    <includes refid="event_8h" local="no">event.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a4cf6f3c99e69b2efeb5fa9b3ffbcca4a" prot="public" static="no">
        <type><ref refid="namespacevt_1_1event_1a1ea9fec44d101bf40b8fd786d44ebed9" kindref="member">eEventRecord</ref></type>
        <definition>using vt::event::AsyncEvent::EventRecordTypeType =  eEventRecord</definition>
        <argsstring></argsstring>
        <name>EventRecordTypeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="73" column="1" bodyfile="src/vt/event/event.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a087519ac9e5ceaf317a2f6f583bfabd6" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_i_d_manager" kindref="compound">EventIDManager</ref></type>
        <definition>using vt::event::AsyncEvent::EventManagerType =  EventIDManager</definition>
        <argsstring></argsstring>
        <name>EventManagerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="74" column="1" bodyfile="src/vt/event/event.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a35f2dfb3322fc042d4561ce1e119a0c8" prot="public" static="no">
        <type><ref refid="namespacevt_1_1event_1a787aca6361696d96d817a639195c429c" kindref="member">EventState</ref></type>
        <definition>using vt::event::AsyncEvent::EventStateType =  EventState</definition>
        <argsstring></argsstring>
        <name>EventStateType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="75" column="1" bodyfile="src/vt/event/event.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_record" kindref="compound">EventRecord</ref></type>
        <definition>using vt::event::AsyncEvent::EventRecordType =  EventRecord</definition>
        <argsstring></argsstring>
        <name>EventRecordType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="76" column="1" bodyfile="src/vt/event/event.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a858268f301cb838d33d21cc66232803b" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" kindref="member">EventRecordType</ref> &gt;</type>
        <definition>using vt::event::AsyncEvent::EventRecordPtrType =  std::unique_ptr&lt;EventRecordType&gt;</definition>
        <argsstring></argsstring>
        <name>EventRecordPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="77" column="1" bodyfile="src/vt/event/event.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_holder" kindref="compound">EventHolder</ref></type>
        <definition>using vt::event::AsyncEvent::EventHolderType =  EventHolder</definition>
        <argsstring></argsstring>
        <name>EventHolderType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="78" column="1" bodyfile="src/vt/event/event.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1aaa94fd7e3a63b17dc5b5e5751e5d05e8" prot="public" static="no">
        <type><ref refid="structvt_1_1event_1_1_event_holder" kindref="compound">EventHolder</ref> *</type>
        <definition>using vt::event::AsyncEvent::EventHolderPtrType =  EventHolder*</definition>
        <argsstring></argsstring>
        <name>EventHolderPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="79" column="1" bodyfile="src/vt/event/event.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" prot="public" static="no">
        <type>std::list&lt; <ref refid="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" kindref="member">EventHolderType</ref> &gt;</type>
        <definition>using vt::event::AsyncEvent::TypedEventContainerType =  std::list&lt;EventHolderType&gt;</definition>
        <argsstring></argsstring>
        <name>TypedEventContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="80" column="1" bodyfile="src/vt/event/event.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a0f9634db3d6887c4a22076f6b9054e93" prot="public" static="no">
        <type>typename TypedEventContainerType::iterator</type>
        <definition>using vt::event::AsyncEvent::EventContIter =  typename TypedEventContainerType::iterator</definition>
        <argsstring></argsstring>
        <name>EventContIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="81" column="1" bodyfile="src/vt/event/event.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1event_1_1_async_event_1a391e9ac6236bd3dc5c884b8bc7e48257" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref>, <ref refid="structvt_1_1event_1_1_async_event_1a0f9634db3d6887c4a22076f6b9054e93" kindref="member">EventContIter</ref> &gt;</type>
        <definition>using vt::event::AsyncEvent::EventContainerType =  std::unordered_map&lt;EventType, EventContIter&gt;</definition>
        <argsstring></argsstring>
        <name>EventContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="82" column="1" bodyfile="src/vt/event/event.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a8775e8bb7eee0344126af34897ca7612" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::cur_event_</definition>
        <argsstring></argsstring>
        <name>cur_event_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="113" column="1" bodyfile="src/vt/event/event.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1ab976472ed1ec00878dfad854d0a74202" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" kindref="member">TypedEventContainerType</ref></type>
        <definition>TypedEventContainerType vt::event::AsyncEvent::event_container_</definition>
        <argsstring></argsstring>
        <name>event_container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="116" column="1" bodyfile="src/vt/event/event.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1aa622d9e34d70a6de6ca74b16e65c1bae" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" kindref="member">TypedEventContainerType</ref></type>
        <definition>TypedEventContainerType vt::event::AsyncEvent::polling_event_container_</definition>
        <argsstring></argsstring>
        <name>polling_event_container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="119" column="1" bodyfile="src/vt/event/event.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1event_1_1_async_event_1a8810ca30cca503944aed2741a6d28430" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a391e9ac6236bd3dc5c884b8bc7e48257" kindref="member">EventContainerType</ref></type>
        <definition>EventContainerType vt::event::AsyncEvent::lookup_container_</definition>
        <argsstring></argsstring>
        <name>lookup_container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="122" column="1" bodyfile="src/vt/event/event.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ad9837496e616789010bdbeefa968639d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::event::AsyncEvent::AsyncEvent</definition>
        <argsstring>()=default</argsstring>
        <name>AsyncEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a605a6078d0bcd10467a21464fe143561" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::event::AsyncEvent::~AsyncEvent</definition>
        <argsstring>()</argsstring>
        <name>~AsyncEvent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="86" column="1" bodyfile="src/vt/event/event.cc" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ac8d9f977b1cca3f43a06d0e83bc88e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410">initialize</reimplements>
        <briefdescription>
<para>Empty default overridden initialize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="88" column="1" bodyfile="src/vt/event/event.cc" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a77e3aafaae98603825556cdf8105ba57" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959">finalize</reimplements>
        <briefdescription>
<para>Empty default overridden finalize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="89" column="1" bodyfile="src/vt/event/event.cc" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1abc1629d13f9f3391e5e7f9ebc6303265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createEvent</definition>
        <argsstring>(EventRecordTypeType const &amp;type, NodeType const &amp;node)</argsstring>
        <name>createEvent</name>
        <param>
          <type><ref refid="namespacevt_1_1event_1a1ea9fec44d101bf40b8fd786d44ebed9" kindref="member">EventRecordTypeType</ref> const &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="90" column="1" bodyfile="src/vt/event/event.cc" bodystart="208" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a78e777586ef948a4436b8dcea3c33be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" kindref="member">EventRecordType</ref> &amp;</type>
        <definition>EventRecordType&amp; vt::event::AsyncEvent::getEvent</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>getEvent</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a288c3db66bf12de8dc65733b184870c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::event::AsyncEvent::getOwningNode</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>getOwningNode</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="92" column="1" bodyfile="src/vt/event/event.cc" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ae94bb2059c35857a228fd55ab5512272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createMPIEvent</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>createMPIEvent</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="93" column="1" bodyfile="src/vt/event/event.cc" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1aa7c07c129ba54bde5abbe95c543ca352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createNormalEvent</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>createNormalEvent</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="94" column="1" bodyfile="src/vt/event/event.cc" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a9646f211d660d2e991df07b77e5f2cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::createParentEvent</definition>
        <argsstring>(NodeType const &amp;node)</argsstring>
        <name>createParentEvent</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="95" column="1" bodyfile="src/vt/event/event.cc" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a27d14dba4b35f66aad75d46fb56227a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" kindref="member">EventHolderType</ref> &amp;</type>
        <definition>AsyncEvent::EventHolderType &amp; vt::event::AsyncEvent::getEventHolder</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>getEventHolder</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="96" column="1" bodyfile="src/vt/event/event.cc" bodystart="246" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a8aeeb83c7b467b3d130e522d079e5a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::event::AsyncEvent::holderExists</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>holderExists</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="97" column="1" bodyfile="src/vt/event/event.cc" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a4d6056e47909a858fcd3bfc3782b8d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::event::AsyncEvent::needsPolling</definition>
        <argsstring>(EventRecordTypeType const &amp;type)</argsstring>
        <name>needsPolling</name>
        <param>
          <type><ref refid="namespacevt_1_1event_1a1ea9fec44d101bf40b8fd786d44ebed9" kindref="member">EventRecordTypeType</ref> const &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="98" column="1" bodyfile="src/vt/event/event.cc" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a67a603eff81f5f912118f38fd5cbaccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::removeEventID</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>removeEventID</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="99" column="1" bodyfile="src/vt/event/event.cc" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ac14b4e2fc658f70937c591dfdc8ea083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1event_1a787aca6361696d96d817a639195c429c" kindref="member">EventStateType</ref></type>
        <definition>AsyncEvent::EventStateType vt::event::AsyncEvent::testEventComplete</definition>
        <argsstring>(EventType const &amp;event)</argsstring>
        <name>testEventComplete</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="100" column="1" bodyfile="src/vt/event/event.cc" bodystart="272" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1aa6432e2fff56eb073f9489bfc37e89bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref></type>
        <definition>EventType vt::event::AsyncEvent::attachAction</definition>
        <argsstring>(EventType const &amp;event, ActionType callable)</argsstring>
        <name>attachAction</name>
        <param>
          <type><ref refid="namespacevt_1a009267401def7ae8bf201892222d060f" kindref="member">EventType</ref> const &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>callable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="101" column="1" bodyfile="src/vt/event/event.cc" bodystart="73" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a383418f69041085a8c76b87c3bf82f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::testEventsTrigger</definition>
        <argsstring>(int const &amp;num_events=num_check_actions)</argsstring>
        <name>testEventsTrigger</name>
        <param>
          <type>int const &amp;</type>
          <declname>num_events</declname>
          <defval>num_check_actions</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="102" column="1" bodyfile="src/vt/event/event.cc" bodystart="289" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a36f18429bc2856a30c8f7fd70654e0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int vt::event::AsyncEvent::progress</definition>
        <argsstring>() override</argsstring>
        <name>progress</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_pollable_component_1a34cad810026224d550cd9b0c9d1eff22">progress</reimplements>
        <briefdescription>
<para>Override progress function to force user to supply a real function. Abort if the user does not. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of units processed<mdash/>zero </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="103" column="1" bodyfile="src/vt/event/event.cc" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a10af2d5cb5318e2ef25eabcd88c8139a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::event::AsyncEvent::isLocalTerm</definition>
        <argsstring>()</argsstring>
        <name>isLocalTerm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="104" column="1" bodyfile="src/vt/event/event.cc" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1ac68b97804ca9b3dab1785a3c8a5d8242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::event::AsyncEvent::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_base_component_1a7701485f3539f78d42e6bad47fc7eb78">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="109" column="1" bodyfile="src/vt/event/event.h" bodystart="109" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a2228d79f1c1f838e630dcb3325edfde3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::eventFinished</definition>
        <argsstring>(EventFinishedMsg *msg)</argsstring>
        <name>eventFinished</name>
        <param>
          <type><ref refid="structvt_1_1_event_finished_msg" kindref="compound">EventFinishedMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="106" column="1" bodyfile="src/vt/event/event.cc" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1event_1_1_async_event_1a5493f4402db0fffba5300246247523b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::event::AsyncEvent::checkEventFinished</definition>
        <argsstring>(EventCheckFinishedMsg *msg)</argsstring>
        <name>checkEventFinished</name>
        <param>
          <type><ref refid="structvt_1_1_event_check_finished_msg" kindref="compound">EventCheckFinishedMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/event/event.h" line="107" column="1" bodyfile="src/vt/event/event.cc" bodystart="142" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="144">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="145" relation="public-inheritance">
        </childnode>
        <childnode refid="146" relation="public-inheritance">
        </childnode>
        <childnode refid="147" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>vt::runtime::component::Component&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="142">
        <label>vt::runtime::component::PollableComponent&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_pollable_component"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
      </node>
      <node id="146">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="147">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="141">
        <label>vt::event::AsyncEvent</label>
        <link refid="structvt_1_1event_1_1_async_event"/>
        <childnode refid="142" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="151">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="152" relation="public-inheritance">
        </childnode>
        <childnode refid="153" relation="public-inheritance">
        </childnode>
        <childnode refid="154" relation="public-inheritance">
        </childnode>
      </node>
      <node id="150">
        <label>vt::runtime::component::Component&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="151" relation="public-inheritance">
        </childnode>
      </node>
      <node id="149">
        <label>vt::runtime::component::PollableComponent&lt; AsyncEvent &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_pollable_component"/>
        <childnode refid="150" relation="public-inheritance">
        </childnode>
      </node>
      <node id="152">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
      </node>
      <node id="153">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="154">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="148">
        <label>vt::event::AsyncEvent</label>
        <link refid="structvt_1_1event_1_1_async_event"/>
        <childnode refid="149" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/event/event.h" line="72" column="1" bodyfile="src/vt/event/event.h" bodystart="72" bodyend="127"/>
    <listofallmembers>
      <member refid="structvt_1_1event_1_1_async_event_1ad9837496e616789010bdbeefa968639d" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>AsyncEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa6432e2fff56eb073f9489bfc37e89bc" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>attachAction</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a5493f4402db0fffba5300246247523b9" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>checkEventFinished</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a7b791c5956fad1774db36bd457d6158a" prot="protected" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>component_id_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1abc1629d13f9f3391e5e7f9ebc6303265" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ae94bb2059c35857a228fd55ab5512272" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createMPIEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa7c07c129ba54bde5abbe95c543ca352" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createNormalEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a9646f211d660d2e991df07b77e5f2cc6" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>createParentEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8775e8bb7eee0344126af34897ca7612" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>cur_event_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>dumpState</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ab976472ed1ec00878dfad854d0a74202" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>event_container_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a391e9ac6236bd3dc5c884b8bc7e48257" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventContainerType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a0f9634db3d6887c4a22076f6b9054e93" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventContIter</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a2228d79f1c1f838e630dcb3325edfde3" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>eventFinished</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aaa94fd7e3a63b17dc5b5e5751e5d05e8" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventHolderPtrType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a6b529d829ccb5b12c50c2b1978c41a86" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventHolderType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a087519ac9e5ceaf317a2f6f583bfabd6" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventManagerType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a858268f301cb838d33d21cc66232803b" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventRecordPtrType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a5b4ef37db6e5962fdc0e6e0e56e74bc1" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventRecordType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a4cf6f3c99e69b2efeb5fa9b3ffbcca4a" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventRecordTypeType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a35f2dfb3322fc042d4561ce1e119a0c8" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>EventStateType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a77e3aafaae98603825556cdf8105ba57" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1aa5b0980785f4de36affd4d10d255634b" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a78e777586ef948a4436b8dcea3c33be4" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getEvent</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a27d14dba4b35f66aad75d46fb56227a9" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getEventHolder</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a288c3db66bf12de8dc65733b184870c0" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>getOwningNode</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aca5f3a7c1db697b6d0ba70de7ff8b887" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>hasCons</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a389e53dbfc20013d66ef09d4f42c0a53" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>hasNoCons</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8aeeb83c7b467b3d130e522d079e5a7d" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>holderExists</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ac8d9f977b1cca3f43a06d0e83bc88e3d" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>initialize</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a10af2d5cb5318e2ef25eabcd88c8139a" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>isLocalTerm</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a8810ca30cca503944aed2741a6d28430" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>lookup_container_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ac68b97804ca9b3dab1785a3c8a5d8242" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>name</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a4d6056e47909a858fcd3bfc3782b8d2d" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>needsPolling</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_pollable_component_1a8ad6cfbc184ed9862cae5304605fe025" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>pollable</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1aa622d9e34d70a6de6ca74b16e65c1bae" prot="private" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>polling_event_container_</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a36f18429bc2856a30c8f7fd70654e0a4" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a69c53ea9651f96565e23307667c8eaef" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>reducer</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a67a603eff81f5f912118f38fd5cbaccb" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>removeEventID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7d82b061566ef21d6438f4701ae6b733" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>staticInit</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aaada4d04e8adf4cc5556bed2fdcdb321" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>staticInit</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1ac14b4e2fc658f70937c591dfdc8ea083" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>testEventComplete</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a383418f69041085a8c76b87c3bf82f27" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>testEventsTrigger</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1af0397f32fb9d7dd136c544737eeb7796" prot="public" virt="non-virtual"><scope>vt::event::AsyncEvent</scope><name>TypedEventContainerType</name></member>
      <member refid="structvt_1_1event_1_1_async_event_1a605a6078d0bcd10467a21464fe143561" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>~AsyncEvent</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::event::AsyncEvent</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
