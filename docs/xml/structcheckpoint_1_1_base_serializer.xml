<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1_base_serializer" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::BaseSerializer</compoundname>
    <derivedcompoundref refid="structcheckpoint_1_1_footprinter" prot="public" virt="non-virtual">checkpoint::Footprinter</derivedcompoundref>
    <derivedcompoundref refid="structcheckpoint_1_1_memory_serializer" prot="public" virt="non-virtual">checkpoint::MemorySerializer</derivedcompoundref>
    <derivedcompoundref refid="structcheckpoint_1_1_sizer" prot="public" virt="non-virtual">checkpoint::Sizer</derivedcompoundref>
    <includes refid="base__serializer_8h" local="no">base_serializer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_base_serializer_1aaa856a02f204d9c3892810b87671b3e9" prot="public" static="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">eSerializationMode</ref></type>
        <definition>using checkpoint::BaseSerializer::ModeType =  eSerializationMode</definition>
        <argsstring></argsstring>
        <name>ModeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="76" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_base_serializer_1a6e98a837a89de1750749e4ef8742489c" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_basic_dispatcher" kindref="compound">dispatch::BasicDispatcher</ref>&lt; SerializerT, T &gt;</type>
        <definition>using checkpoint::BaseSerializer::DispatcherType =  dispatch::BasicDispatcher&lt;SerializerT, T&gt;</definition>
        <argsstring></argsstring>
        <name>DispatcherType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="79" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_base_serializer_1a1755296c5fbd3cdc5df3390d20c80fae" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::BaseSerializer::cur_mode_</definition>
        <argsstring></argsstring>
        <name>cur_mode_</name>
        <initializer>= <ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a4bbb8f967da6d1a610596d7257179c2b" kindref="member">ModeType::Invalid</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The current mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="207" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_base_serializer_1acdffc3101eb51baafe4a13939ba23e70" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool checkpoint::BaseSerializer::virtual_disabled_</definition>
        <argsstring></argsstring>
        <name>virtual_disabled_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual serialization disabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="208" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a54ef6d9ab0a03d637822dcdacd146763" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>checkpoint::BaseSerializer::BaseSerializer</definition>
        <argsstring>(ModeType const &amp;in_mode)</argsstring>
        <name>BaseSerializer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref> const &amp;</type>
          <declname>in_mode</declname>
        </param>
        <briefdescription>
<para>Construct a base serializer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The serializer mode </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="86" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1ad9a3bf9aa8081b6efdf8a45ba92ef641" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::BaseSerializer::getMode</definition>
        <argsstring>() const</argsstring>
        <name>getMode</name>
        <briefdescription>
<para>Get the serializer mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the serializer mode </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="93" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a2d28600a09495b5b9d9b90ae27caa708" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::BaseSerializer::isSizing</definition>
        <argsstring>() const</argsstring>
        <name>isSizing</name>
        <briefdescription>
<para>Check if the serializer is sizing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is sizing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="100" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a1a91b7c0fc85cbd31356791bbf288b0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::BaseSerializer::isPacking</definition>
        <argsstring>() const</argsstring>
        <name>isPacking</name>
        <briefdescription>
<para>Check if the serializer is packing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is packing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="107" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a36efbc9aa78bd2d4b017ac40dacfe9b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::BaseSerializer::isUnpacking</definition>
        <argsstring>() const</argsstring>
        <name>isUnpacking</name>
        <briefdescription>
<para>Check if the serializer is unpacking. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is unpacking </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="114" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a76960f01f04457bca6a40d91d2c4b486" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::BaseSerializer::isFootprinting</definition>
        <argsstring>() const</argsstring>
        <name>isFootprinting</name>
        <briefdescription>
<para>Check if the serializer is footprinting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is footprinting </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="121" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1ae5f1634cea01bf4e28008320fed7be1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::BaseSerializer::countBytes</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>countBytes</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Count bytes for footprinting<mdash/>default empty implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>an element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="129" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1ac1d15d1c529fe82280fd9547b3843541" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::BaseSerializer::addBytes</definition>
        <argsstring>(std::size_t s)</argsstring>
        <name>addBytes</name>
        <param>
          <type>std::size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Add bytes for footprinting<mdash/>default empty implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of bytes to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="136" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1acb789d8d69ba8b2f43b38af163eee9da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::BaseSerializer::contiguousBytes</definition>
        <argsstring>(void *ptr, SerialSizeType size, SerialSizeType num_elms)</argsstring>
        <name>contiguousBytes</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
<para>Add contiguous bytes to the sizer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the element being serialized (not used) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes for each element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_elms</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="145" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a6ccb8bb1430ac5665aac995b6330bc8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::BaseSerializer::usedBufferSize</definition>
        <argsstring>()</argsstring>
        <name>usedBufferSize</name>
        <briefdescription>
<para>Returns size of buffer (in bytes) used during given serialization step. By default it returns 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>an element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="153" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a7a18f4ba50fcfd8b37c8a6efc459ccde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::BaseSerializer::contiguousTyped</definition>
        <argsstring>(SerializerT &amp;serdes, T *ptr, SerialSizeType num_elms)</argsstring>
        <name>contiguousTyped</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>serdes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
<para>Serialize a contiguous set of typed bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serdes</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a typed element <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_elms</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="163" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a375bc80d210beae8ffd46229e800e3a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::BaseSerializer::skip</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>skip</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Tell the serializer that some data is skipped in the traversal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Used/implemented in serialization sanitizer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="173" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a09da55de0edbc77e33c2a29b374ebdc1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::BaseSerializer::getBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBuffer</name>
        <briefdescription>
<para>Get a buffer if it is associated with the serializer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to the <computeroutput>char*</computeroutput> buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="180" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a2b6d088bf58d9c77f12a959763bb307b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::BaseSerializer::getSpotIncrement</definition>
        <argsstring>(SerialSizeType const inc)</argsstring>
        <name>getSpotIncrement</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
<para>Get the current spot in the buffer and then increment by some number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inc</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to incremenet</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current spot </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="190" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1a5325585631201d413d7992e8916d6f57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::BaseSerializer::isVirtualDisabled</definition>
        <argsstring>() const</argsstring>
        <name>isVirtualDisabled</name>
        <briefdescription>
<para>Check if virtual serialization is disabled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether virtual serialization is disabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="197" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_base_serializer_1ab16e2ffa62f03f8410b116c637bd4adc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::BaseSerializer::setVirtualDisabled</definition>
        <argsstring>(bool val)</argsstring>
        <name>setVirtualDisabled</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set whether virtual serialization is enabled/disabled. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>whether virtual serialization is disabled </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="204" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="204" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>General base class for serialiers. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="445">
        <label>checkpoint::Sizer</label>
        <link refid="structcheckpoint_1_1_sizer"/>
        <childnode refid="440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="444">
        <label>checkpoint::UnpackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_unpacker_buffer"/>
        <childnode refid="442" relation="public-inheritance">
        </childnode>
      </node>
      <node id="443">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="442" relation="public-inheritance">
        </childnode>
      </node>
      <node id="442">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="441">
        <label>checkpoint::Footprinter</label>
        <link refid="structcheckpoint_1_1_footprinter"/>
        <childnode refid="440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="440">
        <label>checkpoint::BaseSerializer</label>
        <link refid="structcheckpoint_1_1_base_serializer"/>
      </node>
    </inheritancegraph>
    <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="75" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="75" bodyend="209"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_base_serializer_1ac1d15d1c529fe82280fd9547b3843541" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a54ef6d9ab0a03d637822dcdacd146763" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>BaseSerializer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1acb789d8d69ba8b2f43b38af163eee9da" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>contiguousBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a7a18f4ba50fcfd8b37c8a6efc459ccde" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ae5f1634cea01bf4e28008320fed7be1d" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a1755296c5fbd3cdc5df3390d20c80fae" prot="protected" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>cur_mode_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a6e98a837a89de1750749e4ef8742489c" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a09da55de0edbc77e33c2a29b374ebdc1" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ad9a3bf9aa8081b6efdf8a45ba92ef641" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a2b6d088bf58d9c77f12a959763bb307b" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a76960f01f04457bca6a40d91d2c4b486" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a1a91b7c0fc85cbd31356791bbf288b0e" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a2d28600a09495b5b9d9b90ae27caa708" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a36efbc9aa78bd2d4b017ac40dacfe9b7" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a5325585631201d413d7992e8916d6f57" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1aaa856a02f204d9c3892810b87671b3e9" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ab16e2ffa62f03f8410b116c637bd4adc" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a375bc80d210beae8ffd46229e800e3a0" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>skip</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a6ccb8bb1430ac5665aac995b6330bc8a" prot="public" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1acdffc3101eb51baafe4a13939ba23e70" prot="protected" virt="non-virtual"><scope>checkpoint::BaseSerializer</scope><name>virtual_disabled_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
