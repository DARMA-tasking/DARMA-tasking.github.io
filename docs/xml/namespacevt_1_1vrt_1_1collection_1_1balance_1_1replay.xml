<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1vrt_1_1collection_1_1balance_1_1replay" kind="namespace" language="C++">
    <compoundname>vt::vrt::collection::balance::replay</compoundname>
    <innerclass refid="structvt_1_1vrt_1_1collection_1_1balance_1_1replay_1_1_workload_data_migrator" prot="public">vt::vrt::collection::balance::replay::WorkloadDataMigrator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1_1vrt_1_1collection_1_1balance_1_1replay_1a4923aa281087b1b8c161372c1742be4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::balance::replay::replayWorkloads</definition>
        <argsstring>(PhaseType initial_phase, PhaseType phases_to_run, PhaseType phase_mod)</argsstring>
        <name>replayWorkloads</name>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>initial_phase</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>phases_to_run</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>phase_mod</declname>
        </param>
        <briefdescription>
<para>Simulate replaying the object workloads as recorded in the json file, but allow new load balancing decisions to be made. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">initial_phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the first phase to replay </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">phases_to_run</parametername>
</parameternamelist>
<parameterdescription>
<para>how many phases to replay</para></parameterdescription>
</parameteritem>
</parameterlist>
The json files specified by the command-line arguments <ndash/>vt_lb_data_file_in and <ndash/>vt_lb_data_dir_in will be imported and the LB data contained within will be fed through the load balancer(s) specified on the vt command-line on each requested phase, allowing new load balancing decisions to happen. There is no requirement to colocate the LB data on the same rank as the object exists during any given phase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/workload_replay.cc" line="58" column="1" bodyfile="src/vt/vrt/collection/balance/workload_replay.cc" bodystart="58" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1vrt_1_1collection_1_1balance_1_1replay_1ae14719e5612680a87f68f2d9057cb67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::vrt::collection::balance::replay::replayWorkloads</definition>
        <argsstring>(PhaseType initial_phase, PhaseType phases_to_run, PhaseType phase_mod, std::shared_ptr&lt; LBDataHolder &gt; workloads, Callback&lt; std::vector&lt; balance::LoadData &gt;&gt; stats_cb)</argsstring>
        <name>replayWorkloads</name>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>initial_phase</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>phases_to_run</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>phase_mod</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_data_holder" kindref="compound">LBDataHolder</ref> &gt;</type>
          <declname>workloads</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a57b238783d05de96bc2c4027f7073b7f" kindref="member">Callback</ref>&lt; std::vector&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_load_data" kindref="compound">balance::LoadData</ref> &gt;&gt;</type>
          <declname>stats_cb</declname>
        </param>
        <briefdescription>
<para>Simulate replaying the object workloads passed in, but allow new load balancing decisions to be made. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">initial_phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the first phase to replay </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">phases_to_run</parametername>
</parameternamelist>
<parameterdescription>
<para>how many phases to replay </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">workloads</parametername>
</parameternamelist>
<parameterdescription>
<para>the workload data to simulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stats_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback for post-lb statistics</para></parameterdescription>
</parameteritem>
</parameterlist>
LB data passed in will be fed through the load balancer(s) specified on the vt command-line on each requested phase, allowing new load balancing decisions to happen. There is no requirement to colocate the LB data on the same rank as the object exists during any given phase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/workload_replay.cc" line="73" column="1" bodyfile="src/vt/vrt/collection/balance/workload_replay.cc" bodystart="73" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1vrt_1_1collection_1_1balance_1_1replay_1a2177c340e50c514aa567bde597a58139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_data_holder" kindref="compound">LBDataHolder</ref> &gt;</type>
        <definition>std::shared_ptr&lt; LBDataHolder &gt; vt::vrt::collection::balance::replay::readInWorkloads</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>readInWorkloads</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Build a <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_data_holder" kindref="compound">LBDataHolder</ref> object from the LB data in a json file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>read in LB data from the specified json file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_l_b_data_holder" kindref="compound">LBDataHolder</ref> object built from the LB data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/workload_replay.cc" line="245" column="1" bodyfile="src/vt/vrt/collection/balance/workload_replay.cc" bodystart="245" bodyend="269"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/vrt/collection/balance/workload_replay.cc" line="56" column="1"/>
  </compounddef>
</doxygen>
