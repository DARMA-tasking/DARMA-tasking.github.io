<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases" kind="struct" language="C++" prot="public">
    <compoundname>vt::vrt::collection::balance::MultiplePhases</compoundname>
    <basecompoundref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model" prot="public" virt="non-virtual">vt::vrt::collection::balance::ComposedModel</basecompoundref>
    <includes refid="multiple__phases_8h" local="no">multiple_phases.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases_1a26b2a79fd6145e7e3ab56581a8558584" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int vt::vrt::collection::balance::MultiplePhases::future_phase_block_size_</definition>
        <argsstring></argsstring>
        <name>future_phase_block_size_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/multiple_phases.h" line="86" column="1" bodyfile="src/vt/vrt/collection/balance/model/multiple_phases.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases_1a28aba5fe005d35319e34ca8406aca936" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::vrt::collection::balance::MultiplePhases::MultiplePhases</definition>
        <argsstring>(std::shared_ptr&lt; balance::LoadModel &gt; base, int in_future_phase_block_size)</argsstring>
        <name>MultiplePhases</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_load_model" kindref="compound">balance::LoadModel</ref> &gt;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_future_phase_block_size</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>the base model</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_future_phase_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>how many phases to predict as each single queried phase </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/multiple_phases.h" line="77" column="1" bodyfile="src/vt/vrt/collection/balance/model/multiple_phases.h" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases_1a5adc006905ed0521ba40827df6d15575" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacevt_1a876a9d0cd5a952859c72de8a46881442" kindref="member">TimeType</ref></type>
        <definition>TimeType vt::vrt::collection::balance::MultiplePhases::getWork</definition>
        <argsstring>(ElementIDType object, PhaseOffset when) override</argsstring>
        <name>getWork</name>
        <reimplements refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a5de9a43648cfd18ca00f1f0a6c61be4d">getWork</reimplements>
        <param>
          <type><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a14c8d2c972f2913aa3f1636e5be0a120" kindref="member">ElementIDType</ref></type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_phase_offset" kindref="compound">PhaseOffset</ref></type>
          <declname>when</declname>
        </param>
        <briefdescription>
<para>Provide an estimate of the given object&apos;s load during a specified interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>The object whose load is desired </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">when</parametername>
</parameternamelist>
<parameterdescription>
<para>The interval in which the estimated load is desired</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>How much computation time the object is estimated to require</para></simplesect>
The <computeroutput>updateLoads</computeroutput> method must have been called before any call to this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/vrt/collection/balance/model/multiple_phases.h" line="83" column="1" bodyfile="src/vt/vrt/collection/balance/model/multiple_phases.cc" bodystart="49" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Predict an object&apos;s load as a sum over blocks of N future phases. </para>    </briefdescription>
    <detaileddescription>
<para>Expected to be most useful either when queried by an explicitly subphase-aware vector-optimizing load balancer, or when queried by a whole-phase scalar-optimizing load balancer with a <ref refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_norm" kindref="compound">Norm</ref> model composed on top of this.</para><para>Multiple phase blocked predictions will only be meaningfully different from single phase predictions when composed on top of a Predictor model that is not constant across future phases. I.e. <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_linear_model" kindref="compound">LinearModel</ref></computeroutput> rather than <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_naive_persistence" kindref="compound">NaivePersistence</ref></computeroutput> or <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_persistence_median_last_n" kindref="compound">PersistenceMedianLastN</ref></computeroutput>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2579">
        <label>vt::vrt::collection::balance::ComposedModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model"/>
        <childnode refid="2580" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2578">
        <label>vt::vrt::collection::balance::MultiplePhases</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases"/>
        <childnode refid="2579" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2580">
        <label>vt::vrt::collection::balance::LoadModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_load_model"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2582">
        <label>vt::vrt::collection::balance::ComposedModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model"/>
        <childnode refid="2583" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2581">
        <label>vt::vrt::collection::balance::MultiplePhases</label>
        <link refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases"/>
        <childnode refid="2582" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2583">
        <label>vt::vrt::collection::balance::LoadModel</label>
        <link refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_load_model"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/vrt/collection/balance/model/multiple_phases.h" line="68" column="1" bodyfile="src/vt/vrt/collection/balance/model/multiple_phases.h" bodystart="68" bodyend="87"/>
    <listofallmembers>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a8f34205887c08a22a1e5bef6ee358f2b" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>begin</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a84b77c1fceb9e07a0706b896a4d9e9c9" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>ComposedModel</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a23ca95221c6bffb7417aafa2c939b40a" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>end</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases_1a26b2a79fd6145e7e3ab56581a8558584" prot="private" virt="non-virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>future_phase_block_size_</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a2797ee7c1b39b815fe63279a7d67ed90" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>getNumCompletedPhases</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a7b383954706cb8069e841a87c3ff3f8f" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>getNumObjects</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1abf2a02ff624e66c7076bfe3dce961981" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>getNumPastPhasesNeeded</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1af3ea09828c281d9c278198a19fe4e533" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>getNumSubphases</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases_1a5adc006905ed0521ba40827df6d15575" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>getWork</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a90f345e752441d66b2893027f2626226" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>LoadModel</name></member>
      <member refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_multiple_phases_1a28aba5fe005d35319e34ca8406aca936" prot="public" virt="non-virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>MultiplePhases</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1a2f9013d1f135574a03fe5de70ac11862" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>setLoads</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_composed_model_1ad8108b4392d63b7f09e443920a64933a" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>updateLoads</name></member>
      <member refid="classvt_1_1vrt_1_1collection_1_1balance_1_1_load_model_1a6478a387f285b322a48ee1d8a80fc6f7" prot="public" virt="virtual"><scope>vt::vrt::collection::balance::MultiplePhases</scope><name>~LoadModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
