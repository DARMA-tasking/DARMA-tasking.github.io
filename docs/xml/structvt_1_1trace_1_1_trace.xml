<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1trace_1_1_trace" kind="struct" language="C++" prot="public">
    <compoundname>vt::trace::Trace</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; Trace &gt;</basecompoundref>
    <basecompoundref refid="structvt_1_1trace_1_1_trace_lite" prot="public" virt="non-virtual">vt::trace::TraceLite</basecompoundref>
    <includes refid="trace_8h" local="no">trace.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1trace_1_1_trace_1add132ae9df1b7ef820c8082c32b0f839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct Log</definition>
        <argsstring></argsstring>
        <name>Log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="124" column="1" bodyfile="src/vt/trace/trace.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1trace_1_1_trace_1a17caa1eeb27fd6a4af8786a7f0679d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void insertNewUserEvent</definition>
        <argsstring>(UserEventIDType event, std::string const &amp;name)</argsstring>
        <name>insertNewUserEvent</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a5908920d051c144c89f17c69ed262350" kindref="member">UserEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="365" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="213" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1trace_1_1_trace_1a0f00be1050ef823347cf2d5daaa0e1c4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int vt::trace::Trace::incremental_flush_mode</definition>
        <argsstring></argsstring>
        <name>incremental_flush_mode</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="397" column="1" bodyfile="src/vt/trace/trace.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1trace_1_1_trace_1a15282e64860d2a553d39396c9c1fe784" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
        <definition>ObjGroupProxyType vt::trace::Trace::spec_proxy_</definition>
        <argsstring></argsstring>
        <name>spec_proxy_</name>
        <initializer>= vt::no_obj_group</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="402" column="1" bodyfile="src/vt/trace/trace.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1trace_1_1_trace_1a3be76c8f807837a4b242a5a28c005599" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref></type>
        <definition>TraceEntryIDType vt::trace::Trace::between_sched_event_type_</definition>
        <argsstring></argsstring>
        <name>between_sched_event_type_</name>
        <initializer>= no_trace_entry_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="407" column="1" bodyfile="src/vt/trace/trace.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1trace_1_1_trace_1a3fdadda342771b037bb85aa77e0fc9cb" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1trace_1_1_trace_processing_tag" kindref="compound">TraceProcessingTag</ref></type>
        <definition>TraceProcessingTag vt::trace::Trace::between_sched_event_</definition>
        <argsstring></argsstring>
        <name>between_sched_event_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="408" column="1" bodyfile="src/vt/trace/trace.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a2b736f560ee446cbd84aaf96e25c8d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::trace::Trace::Trace</definition>
        <argsstring>(std::string const &amp;in_prog_name)</argsstring>
        <name>Trace</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>in_prog_name</declname>
        </param>
        <briefdescription>
<para>System call to construct the trace component. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_prog_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the program name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="118" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="75" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a80b3426aed07572525ef4834b0c4dedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>vt::trace::Trace::~Trace</definition>
        <argsstring>()</argsstring>
        <name>~Trace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="120" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="151" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1aaae4bbf6d009229a5c8b9db67a127942" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::trace::Trace::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="122" column="1" bodyfile="src/vt/trace/trace.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a24019edd964c0a307008f8d6a0f1f825" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::initialize</definition>
        <argsstring>() override</argsstring>
        <name>initialize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410">initialize</reimplements>
        <briefdescription>
<para>Empty default overridden initialize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="126" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a5dd8767d9020ebeaba49ea3a684738a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::startup</definition>
        <argsstring>() override</argsstring>
        <name>startup</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2">startup</reimplements>
        <briefdescription>
<para>Empty default overridden startup method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="127" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="91" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a571333fa708843b1b24079eccfc3ba93" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::finalize</definition>
        <argsstring>() override</argsstring>
        <name>finalize</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959">finalize</reimplements>
        <briefdescription>
<para>Empty default overridden finalize method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="128" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a8f1a745228757b9d2ece4cd226d9540c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1trace_1_1_trace_processing_tag" kindref="compound">TraceProcessingTag</ref></type>
        <definition>TraceProcessingTag vt::trace::Trace::beginProcessing</definition>
        <argsstring>(TraceEntryIDType const ep, TraceMsgLenType const len, TraceEventIDType const event, NodeType const from_node, uint64_t const idx1=0, uint64_t const idx2=0, uint64_t const idx3=0, uint64_t const idx4=0, double const time=getCurrentTime())</argsstring>
        <name>beginProcessing</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref> const</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1aeb598f45d67d41db7902e494f2f0ce59" kindref="member">TraceMsgLenType</ref> const</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">TraceEventIDType</ref> const</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>from_node</declname>
        </param>
        <param>
          <type>uint64_t const</type>
          <declname>idx1</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint64_t const</type>
          <declname>idx2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint64_t const</type>
          <declname>idx3</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint64_t const</type>
          <declname>idx4</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double const</type>
          <declname>time</declname>
          <defval><ref refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" kindref="member">getCurrentTime</ref>()</defval>
        </param>
        <briefdescription>
<para>Initiate a paired processing event. </para>        </briefdescription>
        <detaileddescription>
<para>Currently <computeroutput>endProcessing</computeroutput> MUST be called in the opposite order of <computeroutput>beginProcessing</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the entry point (registered handler ID) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of message in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the associated trace event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_node</parametername>
</parameternamelist>
<parameterdescription>
<para>which node instigated this processing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx1</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) if collection, dimension 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx2</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) if collection, dimension 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx3</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) if collection, dimension 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx4</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) if collection, dimension 4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time this occurred</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a tag to close this processing event </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="148" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="334" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a18f66e844acc133fce37c2c9d9f939e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::endProcessing</definition>
        <argsstring>(TraceProcessingTag const &amp;processing_tag, double const time=getCurrentTime())</argsstring>
        <name>endProcessing</name>
        <param>
          <type><ref refid="structvt_1_1trace_1_1_trace_processing_tag" kindref="compound">TraceProcessingTag</ref> const &amp;</type>
          <declname>processing_tag</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>time</declname>
          <defval><ref refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" kindref="member">getCurrentTime</ref>()</defval>
        </param>
        <briefdescription>
<para>Finalize a paired event. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>processing_tag</computeroutput> value comes from <computeroutput>beginProcessing</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">processing_tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the matching tag from <computeroutput>beginProcessing</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time this occurred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="164" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="367" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a5552347220b63160248f1ff5f14845f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::pendingSchedulerLoop</definition>
        <argsstring>()</argsstring>
        <name>pendingSchedulerLoop</name>
        <briefdescription>
<para>Scheduler trigger for <computeroutput>sched::SchedulerEvent::PendingSchedulerLoop</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="172" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="419" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a0e6566503861138843e7dc0a9ba30180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::beginSchedulerLoop</definition>
        <argsstring>()</argsstring>
        <name>beginSchedulerLoop</name>
        <briefdescription>
<para>Scheduler trigger for <computeroutput>sched::SchedulerEvent::BeginSchedulerLoop</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="177" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="425" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1ad7ee4fc8c75874a524ce7cc1501209fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::endSchedulerLoop</definition>
        <argsstring>()</argsstring>
        <name>endSchedulerLoop</name>
        <briefdescription>
<para>Scheduler trigger for <computeroutput>sched::SchedulerEvent::EndSchedulerLoop</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="182" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="434" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a99fcca49a5506c3ee5cda67e541e37cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1a5908920d051c144c89f17c69ed262350" kindref="member">UserEventIDType</ref></type>
        <definition>UserEventIDType vt::trace::Trace::registerUserEventRoot</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>registerUserEventRoot</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Register a user event rooted on a single node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For users, it is recommended that the free function be called <computeroutput>registerEventRooted</computeroutput> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name for the user event</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the user event ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="194" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a1b80a8ca6bebbfbe61f8b119342e14f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1a5908920d051c144c89f17c69ed262350" kindref="member">UserEventIDType</ref></type>
        <definition>UserEventIDType vt::trace::Trace::registerUserEventHash</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>registerUserEventHash</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Idempotent registration of a user event using a hash of its name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For users, it is recommended that the free function be called <computeroutput>registerEventHashed</computeroutput> </para></simplesect>
<simplesect kind="warning"><para>This call can be dangerous because while it does allow impromptu user event type creation, any collisions in the hash will cause multiple events to be conflated to the same event type</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name for the user event</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the user event ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="210" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1ade8d39718f60924f1aeb178ccda56cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::registerUserEventManual</definition>
        <argsstring>(std::string const &amp;name, UserSpecEventIDType id)</argsstring>
        <name>registerUserEventManual</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a70c43e0e1596eea236912d4197d3120a" kindref="member">UserSpecEventIDType</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Manually register a user event, directly passing the ID for the sts file. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This call may be dangerous unless all user events IDs are managed for a given program</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>name for the user event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID for the sts file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="222" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a0a4bbdf7bd3c2b8742cbceb24389a4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEvent</definition>
        <argsstring>(UserEventIDType event)</argsstring>
        <name>addUserEvent</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a5908920d051c144c89f17c69ed262350" kindref="member">UserEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a user event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="229" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="219" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a2d9fac6bd71ba67e4f87b7efd7c6c6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEventManual</definition>
        <argsstring>(UserSpecEventIDType event)</argsstring>
        <name>addUserEventManual</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a70c43e0e1596eea236912d4197d3120a" kindref="member">UserSpecEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a user event generated manually. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="236" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="239" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1ab0dd676ca3870682b0c52669d3603c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEventBracketedManual</definition>
        <argsstring>(UserSpecEventIDType event, double begin, double end)</argsstring>
        <name>addUserEventBracketedManual</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a70c43e0e1596eea236912d4197d3120a" kindref="member">UserSpecEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>double</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a bracketed user event manually with start and end time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID for the sts file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">begin</parametername>
</parameternamelist>
<parameterdescription>
<para>the begin time </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end time </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="245" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="312" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a1264ea508298bfeb6a6ef5e06d9214f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEventBracketedBegin</definition>
        <argsstring>(UserEventIDType event)</argsstring>
        <name>addUserEventBracketedBegin</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a5908920d051c144c89f17c69ed262350" kindref="member">UserEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> the start of a user event that is bracketed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="254" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="254" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a9ed44cd0fb5939013ae30de2aeb8aa0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEventBracketedEnd</definition>
        <argsstring>(UserEventIDType event)</argsstring>
        <name>addUserEventBracketedEnd</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a5908920d051c144c89f17c69ed262350" kindref="member">UserEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> the end of a user event that is bracketed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the event ID </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="261" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="274" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1ab6def24560e35a011beb771b2a05894c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEventBracketedManualBegin</definition>
        <argsstring>(UserSpecEventIDType event)</argsstring>
        <name>addUserEventBracketedManualBegin</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a70c43e0e1596eea236912d4197d3120a" kindref="member">UserSpecEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> the start of a manual user event that is bracketed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID for the sts file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="268" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="294" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a5de97038ac60bfcdf868c3f32637ef9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserEventBracketedManualEnd</definition>
        <argsstring>(UserSpecEventIDType event)</argsstring>
        <name>addUserEventBracketedManualEnd</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a70c43e0e1596eea236912d4197d3120a" kindref="member">UserSpecEventIDType</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> the end of a manual user event that is bracketed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID for the sts file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="275" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a8be5309a84a6d0f99df0eb835fedf3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserNote</definition>
        <argsstring>(std::string const &amp;note)</argsstring>
        <name>addUserNote</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>note</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a user note. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">note</parametername>
</parameternamelist>
<parameterdescription>
<para>the note to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="282" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="161" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a7f5ede52aa552c2eac88b894853a2efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addUserData</definition>
        <argsstring>(int32_t data)</argsstring>
        <name>addUserData</name>
        <param>
          <type>int32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a user note with an integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="289" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="180" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1abc497f6fa641ac1c2c20889815b06dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::addMemoryEvent</definition>
        <argsstring>(std::size_t memory, double const time=getCurrentTime())</argsstring>
        <name>addMemoryEvent</name>
        <param>
          <type>std::size_t</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>time</declname>
          <defval><ref refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" kindref="member">getCurrentTime</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a memory usage event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">memory</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of memory used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time it occurred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="297" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a5b5091197568d7ed104bb40d68b4ddd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">TraceEventIDType</ref></type>
        <definition>TraceEventIDType vt::trace::Trace::messageCreation</definition>
        <argsstring>(TraceEntryIDType const ep, TraceMsgLenType const len, double const time=getCurrentTime())</argsstring>
        <name>messageCreation</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref> const</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1aeb598f45d67d41db7902e494f2f0ce59" kindref="member">TraceMsgLenType</ref> const</type>
          <declname>len</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>time</declname>
          <defval><ref refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" kindref="member">getCurrentTime</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a message send. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time is was sent</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trace event ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="311" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="455" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1ad034b14649101fb530eccfb4e2b958ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">TraceEventIDType</ref></type>
        <definition>TraceEventIDType vt::trace::Trace::messageCreationBcast</definition>
        <argsstring>(TraceEntryIDType const ep, TraceMsgLenType const len, double const time=getCurrentTime())</argsstring>
        <name>messageCreationBcast</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref> const</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1aeb598f45d67d41db7902e494f2f0ce59" kindref="member">TraceMsgLenType</ref> const</type>
          <declname>len</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>time</declname>
          <defval><ref refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" kindref="member">getCurrentTime</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a message broadcast. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time is was sent</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trace event ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="325" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="470" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1aa14d58fb03a226e213f72bb03a13bb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1a64a7185f3e102df8d8258f263ccd1582" kindref="member">TraceEventIDType</ref></type>
        <definition>TraceEventIDType vt::trace::Trace::messageRecv</definition>
        <argsstring>(TraceEntryIDType const ep, TraceMsgLenType const len, NodeType const from_node, double const time=getCurrentTime())</argsstring>
        <name>messageRecv</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref> const</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1trace_1aeb598f45d67d41db7902e494f2f0ce59" kindref="member">TraceMsgLenType</ref> const</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const</type>
          <declname>from_node</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>time</declname>
          <defval><ref refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" kindref="member">getCurrentTime</ref>()</defval>
        </param>
        <briefdescription>
<para><ref refid="structvt_1_1trace_1_1_log" kindref="compound">Log</ref> a received message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_node</parametername>
</parameternamelist>
<parameterdescription>
<para>node that sent the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time is was sent</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the trace event ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="340" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="485" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a06f74f8d2c0c2fb97be14a264fd36a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::loadAndBroadcastSpec</definition>
        <argsstring>()</argsstring>
        <name>loadAndBroadcastSpec</name>
        <briefdescription>
<para>Load and broadcast the trace specification file. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="348" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="125" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1aa2740411eec8e1dabf10d60f48193e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::Trace::setTraceEnabledCurrentPhase</definition>
        <argsstring>(PhaseType cur_phase)</argsstring>
        <name>setTraceEnabledCurrentPhase</name>
        <param>
          <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
          <declname>cur_phase</declname>
        </param>
        <briefdescription>
<para>Tell tracing that a new phase has been reached so tracing can be enabled/disabled based on a specification file. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cur_phase</parametername>
</parameternamelist>
<parameterdescription>
<para>the phase </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="356" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="501" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a1e7429d95dbddd9f235a02800d158d36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::trace::Trace::inIdleEvent</definition>
        <argsstring>() const</argsstring>
        <name>inIdleEvent</name>
        <briefdescription>
<para>Check if trace is in a idle event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether in an idle eveent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="363" column="1" bodyfile="src/vt/trace/trace.cc" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_1a737d62cb21f0b634ca5a45e0221f7ee9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::trace::Trace::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace.h" line="368" column="1" bodyfile="src/vt/trace/trace.h" bodystart="368" bodyend="390"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A optional VT component that traces execution on multiple node for performance analysis. </para>    </briefdescription>
    <detaileddescription>
<para>Traces distributed execution on every node for registered handlers, user events, and MPI invocations, to produce traces that can be analyzed after the program terminates. Tracks dependencies between handlers for later analysis. VT handlers are automatically traced through registration and dispatch from the scheduler. Through the PMPI interface, MPI events can be traced while VT is not running.</para><para>Outputs Projections log and sts files, which can be examined by the java Projections tool. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3935">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="3936" relation="public-inheritance">
        </childnode>
        <childnode refid="3939" relation="public-inheritance">
        </childnode>
        <childnode refid="3940" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3933">
        <label>vt::trace::Trace</label>
        <link refid="structvt_1_1trace_1_1_trace"/>
        <childnode refid="3934" relation="public-inheritance">
        </childnode>
        <childnode refid="3941" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3938">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="3936">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="3937" relation="public-inheritance">
        </childnode>
        <childnode refid="3938" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3937">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="3939">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="3941">
        <label>vt::trace::TraceLite</label>
        <link refid="structvt_1_1trace_1_1_trace_lite"/>
      </node>
      <node id="3940">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="3934">
        <label>vt::runtime::component::Component&lt; Trace &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="3935" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3944">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="3945" relation="public-inheritance">
        </childnode>
        <childnode refid="3948" relation="public-inheritance">
        </childnode>
        <childnode refid="3949" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3942">
        <label>vt::trace::Trace</label>
        <link refid="structvt_1_1trace_1_1_trace"/>
        <childnode refid="3943" relation="public-inheritance">
        </childnode>
        <childnode refid="3950" relation="public-inheritance">
        </childnode>
        <childnode refid="3952" relation="usage">
          <edgelabel>between_sched_event_</edgelabel>
        </childnode>
      </node>
      <node id="3947">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="3952">
        <label>vt::trace::TraceProcessingTag</label>
        <link refid="structvt_1_1trace_1_1_trace_processing_tag"/>
      </node>
      <node id="3945">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="3946" relation="public-inheritance">
        </childnode>
        <childnode refid="3947" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3946">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="3948">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="3950">
        <label>vt::trace::TraceLite</label>
        <link refid="structvt_1_1trace_1_1_trace_lite"/>
        <childnode refid="3951" relation="usage">
          <edgelabel>user_event_</edgelabel>
        </childnode>
      </node>
      <node id="3949">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="3951">
        <label>vt::trace::UserEventRegistry</label>
        <link refid="structvt_1_1trace_1_1_user_event_registry"/>
      </node>
      <node id="3943">
        <label>vt::runtime::component::Component&lt; Trace &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="3944" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/trace/trace.h" line="110" column="1" bodyfile="src/vt/trace/trace.h" bodystart="110" bodyend="409"/>
    <listofallmembers>
      <member refid="structvt_1_1trace_1_1_trace_1abc497f6fa641ac1c2c20889815b06dbc" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addMemoryEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aac43836481f9848a210f935837167bc5" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserBracketedNote</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a7f5ede52aa552c2eac88b894853a2efe" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserData</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a0a4bbdf7bd3c2b8742cbceb24389a4c0" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ac683bae25af871b4e7b0deaf73bde529" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventBracketed</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a1264ea508298bfeb6a6ef5e06d9214f9" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventBracketedBegin</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a9ed44cd0fb5939013ae30de2aeb8aa0e" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventBracketedEnd</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1ab0dd676ca3870682b0c52669d3603c11" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventBracketedManual</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1ab6def24560e35a011beb771b2a05894c" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventBracketedManualBegin</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a5de97038ac60bfcdf868c3f32637ef9e" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventBracketedManualEnd</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a2d9fac6bd71ba67e4f87b7efd7c6c6c7" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserEventManual</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a8be5309a84a6d0f99df0eb835fedf3b1" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>addUserNote</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a48ffd3b44801a6d79681086e2c031983" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>beginIdle</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a8f1a745228757b9d2ece4cd226d9540c" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>beginProcessing</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a0e6566503861138843e7dc0a9ba30180" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>beginSchedulerLoop</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a3fdadda342771b037bb85aa77e0fc9cb" prot="private" virt="non-virtual"><scope>vt::trace::Trace</scope><name>between_sched_event_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a3be76c8f807837a4b242a5a28c005599" prot="private" virt="non-virtual"><scope>vt::trace::Trace</scope><name>between_sched_event_type_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a8c80920e23cef1aeedbb2282fb6769f2" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>checkDynamicRuntimeEnabled</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ac412f235b5e5b4510d848fa0b3b6a539" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>cleanupTracesFile</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>component_id_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a06815b5d345c41f07105dd382b4c3c2b" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>cur_event_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ac494fd6858647fd548b6554cf066568b" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>disableTracing</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>dumpState</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a6d33deb4bef608ff3c68dcf80b2fcc42" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>emitTraceForTopProcessingEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a414bdf6f5d6e031264b392aed0e8e320" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>enabled_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a99c538b6e3cd2521bba5cba161ac4240" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>enableTracing</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a72c44d3d5e8361560104f8b91332a22c" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>endIdle</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a18f66e844acc133fce37c2c9d9f939e0" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>endProcessing</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1ad7ee4fc8c75874a524ce7cc1501209fd" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>endSchedulerLoop</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a323d77bc03ed78b44e632c595433b7ba" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>event_holds_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1af9e05e83b3d0adfb9d45cf13c0bb7525" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>EventHoldStackType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a571333fa708843b1b24079eccfc3ba93" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>finalize</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1acba836a9cc25aee679f7738c8f2721eb" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>flush_event_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a31513ed82d3b3c74369fde81491eb3a2" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>flushTracesFile</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a3871cf535ca6f31bfb499a46cde4c80c" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>full_dir_name_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aa7236609212e978252ddefd9c0131537" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>full_sts_name_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a0381e516d389555b3b40b954d276eff9" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>full_trace_name_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ad1d8159d645a3b7047ce3f2e0c080f8d" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getCurrentTime</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aee5f10410a94c3149eefe595ccb2bbab" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getDirectory</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1af62ce95a0cd54b4d729e730e9dd94311" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getSTSName</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aa0cff75782c7c6fb3f90731b98b49c2f" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getTraceName</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a1cdbccebe00aec90174e93b3d1fa0bcf" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>getTracesSize</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a75ffdb0ab1dea68a665085596ece7b96" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>idle_begun_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a0f00be1050ef823347cf2d5daaa0e1c4" prot="private" virt="non-virtual"><scope>vt::trace::Trace</scope><name>incremental_flush_mode</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a1e7429d95dbddd9f235a02800d158d36" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>inIdleEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a24019edd964c0a307008f8d6a0f1f825" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>initialize</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a17caa1eeb27fd6a4af8786a7f0679d77" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>insertNewUserEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1acfad34ebd68c53547dcff4115dd54388" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>isStsOutputNode</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a06f74f8d2c0c2fb97be14a264fd36a45" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>loadAndBroadcastSpec</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1add132ae9df1b7ef820c8082c32b0f839" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>Log</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ab074b4892ac4fd0508c03150710eb46d" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>log_file_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aeb468f1222761674e4ffb0cfa27f0641" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>logEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aeb73e523d31829d3163c877b145afa2a" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>LogType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a5b5091197568d7ed104bb40d68b4ddd7" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>messageCreation</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1ad034b14649101fb530eccfb4e2b958ce" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>messageCreationBcast</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1aa14d58fb03a226e213f72bb03a13bb9f" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>messageRecv</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1aaae4bbf6d009229a5c8b9db67a127942" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>name</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a11cf264af89fe8dd3703e8897d0bb77b" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>open_events_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a7b60eedbf68a4989a1566f2cf85d94dd" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>outputControlFile</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1af0dc30a8b2b52fc291d90f606f585a2d" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>outputFooter</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1af48d0cba490b7d15dc35ee2cfcc88a3f" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>outputHeader</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a90769de4b190c30fb016990f36ef032e" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>outputTraces</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a5552347220b63160248f1ff5f14845f3" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>pendingSchedulerLoop</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a8bd3836d6fad28bb428ce3b824a00595" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>prog_name_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a095a8bb2aaebbaf340b52c421101f918" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerUserEventColl</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a1b80a8ca6bebbfbe61f8b119342e14f7" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerUserEventHash</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1ade8d39718f60924f1aeb178ccda56cbc" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerUserEventManual</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a99fcca49a5506c3ee5cda67e541e37cc" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>registerUserEventRoot</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a737d62cb21f0b634ca5a45e0221f7ee9" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1abe85836f57c42a695fdc292cd78b10cb" prot="public" virt="non-virtual" ambiguityscope="Component&lt; Trace &gt;::"><scope>vt::trace::Trace</scope><name>serialize</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1aa2740411eec8e1dabf10d60f48193e69" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>setTraceEnabledCurrentPhase</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a1f8e52289799bcd6b469b20be7d1e149" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>setupNames</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a15282e64860d2a553d39396c9c1fe784" prot="private" virt="non-virtual"><scope>vt::trace::Trace</scope><name>spec_proxy_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a1c41f9e975ef1ba41cc6550bab7b2375" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>standalone_initalized_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a5f5c81900355ce74b084ef64ab69edc4" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>start_time_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a5dd8767d9020ebeaba49ea3a684738a1" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>staticInit</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a301955b0e2e8d76ca5974c10be8125c4" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>TimeIntegerType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a54f5dd2119d3de0bb5df60d7986ea7aa" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>timeToMicros</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a2b736f560ee446cbd84aaf96e25c8d0b" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>Trace</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ae75d01f083974fe39f81455377ac3842" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>trace_enabled_cur_phase_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ae6209336c8aabf62ec626fa6b8fbc8ee" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>trace_name_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ac4f99b5bd44df7b4aa07b700fab162c7" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>trace_write_count_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a55bd5754c9786ae91a33bcf57f32acc8" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>TraceConstantsType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a346a7751a544de425345a8983ed52146" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>TraceContainerType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a328b735cfc479d3bf3339638aeb96a10" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>TraceLite</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a3751cf984ddc83e14f120daf5d533a2c" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>traces_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1ae827dd1c4f37ac2dbcb6f4898a664b99" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>TraceStackType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aaf2192758f67bc57ab66766523bd96ad" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>traceWritingEnabled</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::trace::Trace</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a7dcadada68a0b250898d7838de01458b" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>user_event_</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1aa385172051bc8f3fc58a345fec10eae2" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>writeTracesFile</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a3af89ea00d5dfcf4341aabf9c2b33aef" prot="protected" virt="non-virtual"><scope>vt::trace::Trace</scope><name>wrote_sts_file_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_1a80b3426aed07572525ef4834b0c4dedd" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>~Trace</name></member>
      <member refid="structvt_1_1trace_1_1_trace_lite_1a08eca22659dc1f361d534c2b9c03b90b" prot="public" virt="virtual"><scope>vt::trace::Trace</scope><name>~TraceLite</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
