<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="proc-stats" kind="page">
    <compoundname>proc-stats</compoundname>
    <title>Processor Statistics</title>
    <detaileddescription>
<para>Manager object profiling data</para><para>The processor statistics manager component <computeroutput><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_proc_stats" kindref="compound">vt::vrt::collection::balance::ProcStats</ref></computeroutput>, accessed via <computeroutput><ref refid="namespacevt_1ab4d442af76f551aa2259cc1bb7d54271" kindref="member">vt::theProcStats()</ref></computeroutput> manages instrumentation data from objects in a collection. It holds data per node on the timing of these objects and communication between them demarcated by phase and subphase.</para><para>When LB is invoked in <bold><emphasis>vt</emphasis></bold>, the <ref refid="lb-manager" kindref="compound">LB Manager</ref> passes the processor statistics to the various LB strategies to run the load balancer. The processor statistics component can also dump the statistic data it holds to files, which can be read externally. The LBAF (Load Balancing Analysis Framework) can also then read this data to analyze the quality of the load distribution at any phase in the file.</para><sect1 id="proc-stats_1export-lb-stats-file">
<title>Exporting LB Statistic Files (VOM)</title>
<para>The <computeroutput>ProcStats</computeroutput> component, after collecting statistics from the running program, can dump these to files in a VOM file (Virtual Object Map). As indicated by the name, the VOM file specifies the mapping of object to node for each phase along with statistics for each object (computation time and communication load).</para><para>To output VOM files, pass <computeroutput>--vt_lb_stats</computeroutput> to enable output along with <computeroutput>--vt_lb_stats_dir=&lt;my-directory&gt;</computeroutput> and <computeroutput>--vt_lb_stats_file=&lt;my-base-name&gt;</computeroutput> to control the directory the files are generated along with the base file name. With this enabled, <bold><emphasis>vt</emphasis></bold> will generate a file for each node that contains the statistics and mapping.</para><sect2 id="proc-stats_1stats-file-format">
<title>File Format</title>
<para>Each line in the file will one of two formats. The first line is a computation time line for each phase, that breaks time down into subphases:</para><para><programlisting><codeline><highlight class="normal">&lt;phase&gt;,<sp/>&lt;object-id&gt;,<sp/>&lt;time-in-seconds&gt;<sp/>&lt;#-of-subphases&gt;<sp/>&apos;[&apos;<sp/>[&lt;subphase-time-1&gt;]<sp/>...<sp/>[&lt;subphase-time-N&gt;]<sp/>&apos;]&apos;</highlight></codeline>
</programlisting></para><para>The second line format is a communication line:</para><para><programlisting><codeline><highlight class="normal">&lt;phase&gt;,<sp/>&lt;object-id1-to/recv&gt;,<sp/>&lt;object-id2-from/send&gt;,<sp/>&lt;num-bytes&gt;,<sp/>&lt;comm-type={1..6}&gt;</highlight></codeline>
</programlisting></para><para>Where <computeroutput>&lt;comm-type&gt;</computeroutput> is the type of communication occurred. The type of communication lines up the enum <computeroutput><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a9cc6c6884ca0416dae824e9204093c57" kindref="member">vt::vrt::collection::balance::CommCategory</ref></computeroutput> in the code.</para><para><table rows="7" cols="3"><row>
<entry thead="yes"><para>Value </para></entry><entry thead="yes"><para>Enum entry </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para>1 </para></entry><entry thead="no"><para><computeroutput>CommCategory::SendRecv</computeroutput> </para></entry><entry thead="no"><para>A send-receive edge between two collection elements </para></entry></row>
<row>
<entry thead="no"><para>2 </para></entry><entry thead="no"><para><computeroutput>CommCategory::CollectionToNode</computeroutput> </para></entry><entry thead="no"><para>A send from a collection element to a node </para></entry></row>
<row>
<entry thead="no"><para>3 </para></entry><entry thead="no"><para><computeroutput>CommCategory::NodeToCollection</computeroutput> </para></entry><entry thead="no"><para>A send from a node to a collection element </para></entry></row>
<row>
<entry thead="no"><para>4 </para></entry><entry thead="no"><para><computeroutput>CommCategory::Broadcast</computeroutput> </para></entry><entry thead="no"><para>A broadcast from a collection element to a whole collection (receive-side) </para></entry></row>
<row>
<entry thead="no"><para>5 </para></entry><entry thead="no"><para><computeroutput>CommCategory::CollectionToNodeBcast</computeroutput> </para></entry><entry thead="no"><para>A broadcast from a collection element to all nodes (receive-side) </para></entry></row>
<row>
<entry thead="no"><para>6 </para></entry><entry thead="no"><para><computeroutput>CommCategory::NodeToCollectionBcast</computeroutput> </para></entry><entry thead="no"><para>A broadcast from a node to a whole collection (receive-side) </para></entry></row>
</table>
For all the broadcast-like edges, the communication logging will occur on the receive of the broadcast side (one entry per broadcast recipient). </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
