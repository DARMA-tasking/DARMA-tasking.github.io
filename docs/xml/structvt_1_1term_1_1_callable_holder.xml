<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1term_1_1_callable_holder" kind="struct" language="C++" prot="public">
    <compoundname>vt::term::CallableHolder</compoundname>
    <basecompoundref refid="structvt_1_1term_1_1_callable_base" prot="public" virt="non-virtual">vt::term::CallableBase</basecompoundref>
    <includes refid="term__action_8h" local="no">term_action.h</includes>
    <templateparamlist>
      <param>
        <type>typename Callable</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1term_1_1_callable_holder_1a8b22db3730f6ed7853b0084b9499505f" prot="private" static="no" mutable="no">
        <type>Callable</type>
        <definition>Callable vt::term::CallableHolder&lt; Callable &gt;::c_</definition>
        <argsstring></argsstring>
        <name>c_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="90" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_holder_1a69d93533fc725eb0206a34e98395b7f3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::term::CallableHolder&lt; Callable &gt;::CallableHolder</definition>
        <argsstring>(Callable &amp;&amp;in_c)</argsstring>
        <name>CallableHolder</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>in_c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="71" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_holder_1a61c0e9929ff96936132fe697d6585992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::CallableHolder&lt; Callable &gt;::CallableHolder</definition>
        <argsstring>(CallableHolder const &amp;)=delete</argsstring>
        <name>CallableHolder</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_callable_holder" kindref="compound">CallableHolder</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_holder_1a02091f8787e03f8e29a9e78a975b86d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::CallableHolder&lt; Callable &gt;::CallableHolder</definition>
        <argsstring>(CallableHolder &amp;&amp;)=default</argsstring>
        <name>CallableHolder</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1_callable_holder" kindref="compound">CallableHolder</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_holder_1a33bc8b5d543eb4338c257522cc0084f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void vt::term::CallableHolder&lt; Callable &gt;::invoke</definition>
        <argsstring>() override</argsstring>
        <name>invoke</name>
        <reimplements refid="structvt_1_1term_1_1_callable_base_1a534f470aaf4dd168faa9adf3c91e6ca2">invoke</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="84" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="84" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_holder_1a9a1517406276e39c5a5c140196ea7ccf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr Callable &amp;&amp;</type>
        <definition>constexpr Callable&amp;&amp; vt::term::CallableHolder&lt; Callable &gt;::move</definition>
        <argsstring>()</argsstring>
        <name>move</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="76" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1_callable_holder_1a4cf06b82cc1a80a9070f77de9841957f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::term::CallableHolder&lt; Callable &gt;::operator()</definition>
        <argsstring>(A &amp;&amp;... a) -&gt; decltype(auto)</argsstring>
        <name>operator()</name>
        <param>
          <type>A &amp;&amp;...</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/term_action.h" line="79" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="79" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="418">
        <label>vt::term::CallableBase</label>
        <link refid="structvt_1_1term_1_1_callable_base"/>
      </node>
      <node id="417">
        <label>vt::term::CallableHolder&lt; Callable &gt;</label>
        <link refid="structvt_1_1term_1_1_callable_holder"/>
        <childnode refid="418" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="420">
        <label>vt::term::CallableBase</label>
        <link refid="structvt_1_1term_1_1_callable_base"/>
      </node>
      <node id="419">
        <label>vt::term::CallableHolder&lt; Callable &gt;</label>
        <link refid="structvt_1_1term_1_1_callable_holder"/>
        <childnode refid="420" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/termination/term_action.h" line="70" column="1" bodyfile="src/vt/termination/term_action.h" bodystart="70" bodyend="91"/>
    <listofallmembers>
      <member refid="structvt_1_1term_1_1_callable_holder_1a8b22db3730f6ed7853b0084b9499505f" prot="private" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>c_</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1ab92dd683afcc403807330c93a9f5b0b9" prot="protected" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>CallableBase</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1a640500fd629bfc5187bc9f0a28a27dd1" prot="public" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>CallableBase</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1aacacdf848cfeaf66aae83124084721c7" prot="public" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>CallableBase</name></member>
      <member refid="structvt_1_1term_1_1_callable_holder_1a69d93533fc725eb0206a34e98395b7f3" prot="public" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>CallableHolder</name></member>
      <member refid="structvt_1_1term_1_1_callable_holder_1a61c0e9929ff96936132fe697d6585992" prot="public" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>CallableHolder</name></member>
      <member refid="structvt_1_1term_1_1_callable_holder_1a02091f8787e03f8e29a9e78a975b86d4" prot="public" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>CallableHolder</name></member>
      <member refid="structvt_1_1term_1_1_callable_holder_1a33bc8b5d543eb4338c257522cc0084f1" prot="public" virt="virtual"><scope>vt::term::CallableHolder</scope><name>invoke</name></member>
      <member refid="structvt_1_1term_1_1_callable_holder_1a9a1517406276e39c5a5c140196ea7ccf" prot="protected" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>move</name></member>
      <member refid="structvt_1_1term_1_1_callable_holder_1a4cf06b82cc1a80a9070f77de9841957f" prot="protected" virt="non-virtual"><scope>vt::term::CallableHolder</scope><name>operator()</name></member>
      <member refid="structvt_1_1term_1_1_callable_base_1a436cddd808a4935f2f1c78f85ff1f88b" prot="public" virt="virtual"><scope>vt::term::CallableHolder</scope><name>~CallableBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
