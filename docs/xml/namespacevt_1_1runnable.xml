<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1runnable" kind="namespace" language="C++">
    <compoundname>vt::runnable</compoundname>
    <innerclass refid="structvt_1_1runnable_1_1_callable_wrapper" prot="public">vt::runnable::CallableWrapper</innerclass>
    <innerclass refid="structvt_1_1runnable_1_1_callable_wrapper_3_01_ret_07_5_08_07_args_8_8_8_08_00_01f_01_4" prot="public">vt::runnable::CallableWrapper&lt; Ret(*)(Args...), f &gt;</innerclass>
    <innerclass refid="structvt_1_1runnable_1_1_callable_wrapper_3_01_ret_07_class_1_1_5_08_07_args_8_8_8_08_00_01f_01_4" prot="public">vt::runnable::CallableWrapper&lt; Ret(Class::*)(Args...), f &gt;</innerclass>
    <innerclass refid="structvt_1_1runnable_1_1_runnable_maker" prot="public">vt::runnable::RunnableMaker</innerclass>
    <innerclass refid="structvt_1_1runnable_1_1_runnable_new" prot="public">vt::runnable::RunnableNew</innerclass>
    <innerclass refid="structvt_1_1runnable_1_1_runnable_new_alloc" prot="public">vt::runnable::RunnableNewAlloc</innerclass>
    <innernamespace refid="namespacevt_1_1runnable_1_1detail">vt::runnable::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1_1runnable_1aa9dacb3d53330c3bcfb8b948377af3aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
          <param>
            <type>FunctionType</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vt::runnable::CreatetEventTypeCStyleFunc</definition>
        <argsstring>()</argsstring>
        <name>CreatetEventTypeCStyleFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="57" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1ae41e94c2f81f2b5ce9b6fb992ef1ca0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Class</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vt::runnable::CreatetEventTypeMemberFunc</definition>
        <argsstring>()</argsstring>
        <name>CreatetEventTypeMemberFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="69" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="69" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1ae556d205a3633ee19cef45b542a67240" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctionType</type>
          </param>
          <param>
            <type>FunctionType</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string vt::runnable::CreateEventName</definition>
        <argsstring>()</argsstring>
        <name>CreateEventName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="81" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1a4253e4fa9c8c6e68da420ab440f2b298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fn</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename std::enable_if_t&lt; std::is_pointer&lt; std::decay_t&lt; T1 &gt;&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) vt::runnable::invokeImpl</definition>
        <argsstring>(Type Fn::*f, T1 &amp;&amp;obj, Args &amp;&amp;... args)</argsstring>
        <name>invokeImpl</name>
        <param>
          <type>Type Fn::*</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="160" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1af14b1c72fc3bf8437c2b89021af7eecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) vt::runnable::invokeImpl</definition>
        <argsstring>(Callable &amp;&amp;f, Args &amp;&amp;... args)</argsstring>
        <name>invokeImpl</name>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="174" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1a14fa3dbf3bef4a683fc7284452b766d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>Callable</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1util_1ae9a553985cdc8e9bd4e55f55161f2929" kindref="member">util::Copyable</ref>&lt; Callable &gt;</type>
        <definition>util::Copyable&lt;Callable&gt; vt::runnable::invoke</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>invoke</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="179" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="179" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1aa86b7892ea9590c2e8fef9ed0ca4e80c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>Callable</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1util_1a0760a3963341a602dfe2dfc42d78c867" kindref="member">util::NotCopyable</ref>&lt; Callable &gt;</type>
        <definition>util::NotCopyable&lt;Callable&gt; vt::runnable::invoke</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>invoke</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="195" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="195" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1ad7a4c11af0d8864939dca87f89fba1cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>Callable</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacevt_1_1util_1a97df3e28837417537b3bc035c74f064d" kindref="member">util::IsVoidReturn</ref>&lt; Callable &gt;</type>
        <definition>util::IsVoidReturn&lt;Callable&gt; vt::runnable::invoke</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>invoke</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/invoke.h" line="211" column="1" bodyfile="src/vt/runnable/invoke.h" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1afb8d5dae85a94591271296e201b4f838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1runnable_1_1_runnable_maker" kindref="compound">RunnableMaker</ref>&lt; U &gt;</type>
        <definition>RunnableMaker&lt;U&gt; vt::runnable::makeRunnable</definition>
        <argsstring>(MsgSharedPtr&lt; U &gt; const &amp;msg, bool is_threaded, HandlerType handler, NodeType from)</argsstring>
        <name>makeRunnable</name>
        <param>
          <type><ref refid="namespacevt_1ab2b3d506ec8e8d1540aede826d84a239" kindref="member">MsgSharedPtr</ref>&lt; U &gt; const &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_threaded</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Make a new runnable with a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is threaded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that caused this runnable to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">han_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of handler</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maker for further customization </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/make_runnable.h" line="309" column="1" bodyfile="src/vt/runnable/make_runnable.h" bodystart="309" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1aa35ee520f896c49ba7f3952acb5881b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1runnable_1_1_runnable_maker" kindref="compound">RunnableMaker</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt;</type>
        <definition>RunnableMaker&lt;BaseMsgType&gt; vt::runnable::makeRunnableVoid</definition>
        <argsstring>(bool is_threaded, HandlerType handler, NodeType from)</argsstring>
        <name>makeRunnableVoid</name>
        <param>
          <type>bool</type>
          <declname>is_threaded</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Make a new runnable without a message (void handler) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>whether it is threaded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>the node that caused this runnable to execute</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maker for further customization </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/make_runnable.h" line="334" column="1" bodyfile="src/vt/runnable/make_runnable.h" bodystart="334" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1afec92e402b96766d18a24246651015f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structvt_1_1ctx_1_1_set_context" kindref="compound">ctx::SetContext</ref> *</type>
        <definition>ctx::SetContext* vt::runnable::RunnableNew::get&lt; ctx::SetContext &gt;</definition>
        <argsstring>()</argsstring>
        <name>RunnableNew::get&lt; ctx::SetContext &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.impl.h" line="54" column="1" bodyfile="src/vt/runnable/runnable.impl.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1runnable_1ace1b6a23d611fae4fa00910100d91702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="structvt_1_1ctx_1_1_l_b_data" kindref="compound">ctx::LBData</ref> *</type>
        <definition>ctx::LBData* vt::runnable::RunnableNew::get&lt; ctx::LBData &gt;</definition>
        <argsstring>()</argsstring>
        <name>RunnableNew::get&lt; ctx::LBData &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runnable/runnable.impl.h" line="59" column="1" bodyfile="src/vt/runnable/runnable.impl.h" bodystart="59" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/runnable/invoke.h" line="54" column="1"/>
  </compounddef>
</doxygen>
