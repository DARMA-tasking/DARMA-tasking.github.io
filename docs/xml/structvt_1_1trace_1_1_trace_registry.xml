<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structvt_1_1trace_1_1_trace_registry" kind="struct" language="C++" prot="public">
    <compoundname>vt::trace::TraceRegistry</compoundname>
    <includes refid="trace__registry_8h" local="no">trace_registry.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_registry_1a557118b7661378a6c74ed693b87c3d83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref></type>
        <definition>TraceEntryIDType vt::trace::TraceRegistry::registerEventHashed</definition>
        <argsstring>(std::string const &amp;event_type_name, std::string const &amp;event_name)</argsstring>
        <name>registerEventHashed</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>event_type_name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>event_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers an event, if it does not already exist. Creates the event type (aka parent) as needed. Returns a non-0 value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace_registry.h" line="56" column="27" bodyfile="src/vt/trace/trace_registry.cc" bodystart="64" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_registry_1ac7de433a12632737154a38ed50bbc82e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::trace::TraceRegistry::setTraceName</definition>
        <argsstring>(TraceEntryIDType id, std::string const &amp;name, std::string const &amp;type_name)</argsstring>
        <name>setTraceName</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>type_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the name of an event and/or event type name. Empty string values are ignored, which can be used for partial updates. Changing the type name will affect ALL events that share the type. <ref refid="structvt_1_1trace_1_1_event" kindref="compound">Event</ref> trace IDs are not affected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace_registry.h" line="64" column="15" bodyfile="src/vt/trace/trace_registry.cc" bodystart="123" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1trace_1_1_trace_registry_1a852c5c4d04b17eb093d008cc0a25e316" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1_1trace_1afc5456ac95b0d3e9bb63a21597f5660c" kindref="member">EventClassType</ref> const  &amp;</type>
        <definition>EventClassType const  &amp; vt::trace::TraceRegistry::getEvent</definition>
        <argsstring>(TraceEntryIDType id)</argsstring>
        <name>getEvent</name>
        <param>
          <type><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">TraceEntryIDType</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the event that corresponds with the ID. If not found the returned event has no_trace_entry_id for an ID. The resulting object is invalidated if new event types are added. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/trace/trace_registry.h" line="71" column="31" bodyfile="src/vt/trace/trace_registry.cc" bodystart="165" bodyend="172"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/trace/trace_registry.h" line="52" column="20" bodyfile="src/vt/trace/trace_registry.h" bodystart="52" bodyend="72"/>
    <listofallmembers>
      <member refid="structvt_1_1trace_1_1_trace_registry_1a852c5c4d04b17eb093d008cc0a25e316" prot="public" virt="non-virtual"><scope>vt::trace::TraceRegistry</scope><name>getEvent</name></member>
      <member refid="structvt_1_1trace_1_1_trace_registry_1a557118b7661378a6c74ed693b87c3d83" prot="public" virt="non-virtual"><scope>vt::trace::TraceRegistry</scope><name>registerEventHashed</name></member>
      <member refid="structvt_1_1trace_1_1_trace_registry_1ac7de433a12632737154a38ed50bbc82e" prot="public" virt="non-virtual"><scope>vt::trace::TraceRegistry</scope><name>setTraceName</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
