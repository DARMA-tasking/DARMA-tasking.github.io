<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__basicsend" kind="group">
    <compoundname>basicsend</compoundname>
    <title>Send Message BASIC Active Function</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__basicsend_1gaadd12687ecb3f0e9be2ce62224568d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacevt_1a546925d221208866b866b2edf8f24d04" kindref="member">ActiveFnType</ref> *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__basicsend_1ga9a7d3d70ca04c51781771661fa5d3795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacevt_1a546925d221208866b866b2edf8f24d04" kindref="member">ActiveFnType</ref> *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename MessageT</type>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType dest, MessageT *msg, TagType tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a type-safe handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="729" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Send a message to a auto-registered non-type-safe active message handler. This should be used rarely. </para>    </briefdescription>
    <detaileddescription>
<para>Send message using basic function handler. These handlers are NOT type-safe and require the user to cast their message to the correct type as shown. Most likely this will be deprecated unless there is a use for this, since type safety does not cost anything in terms of overhead (either at runtime or compile-time).</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyMsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_a)<sp/>:<sp/>a_(in_a)<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>basicHandler(<ref refid="structvt_1_1messaging_1_1_base_msg" kindref="compound">vt::BaseMessage</ref>*<sp/>msg_in)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyMsg*<sp/>msg<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">MyMsg*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(msg_in);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sendCode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>myHandler<sp/>is<sp/>automatically<sp/>registered<sp/>with<sp/>the<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-&gt;<ref refid="group__preregister_1gaebfcd932babb3be0ea8d481f655a2835" kindref="member">sendMsg</ref>&lt;basicHandler,<sp/>MyMsg&gt;(1,<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
