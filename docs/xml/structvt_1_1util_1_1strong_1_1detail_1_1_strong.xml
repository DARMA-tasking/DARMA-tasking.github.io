<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1strong_1_1detail_1_1_strong" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::strong::detail::Strong</compoundname>
    <derivedcompoundref refid="structvt_1_1epoch_1_1_epoch_type" prot="public" virt="non-virtual">vt::epoch::EpochType</derivedcompoundref>
    <includes refid="strong__type_8h" local="no">strong_type.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>T</type>
        <declname>init_val</declname>
        <defname>init_val</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Tag</declname>
        <defname>Tag</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ab47d63a1c618b3aafd0b30f022fedba7" prot="public" static="no">
        <type>T</type>
        <definition>using vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::Type =  T</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="61" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" prot="public" static="no">
        <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong" kindref="compound">Strong</ref>&lt; T, init_val, Tag &gt;</type>
        <definition>using vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::ThisType =  Strong&lt;T, init_val, Tag&gt;</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="62" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1add96444b837f77d0fc47ae3d29d00bdb" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::isByteCopyable =  std::true_type</definition>
        <argsstring></argsstring>
        <name>isByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All <computeroutput><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong" kindref="compound">Strong</ref></computeroutput> types are byte-copyable and arithmetic and thus don&apos;t need a serializer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="66" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a33b2c6727665a7c34405125870e71895" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::v_</definition>
        <argsstring></argsstring>
        <name>v_</name>
        <initializer>= init_val</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The underlying value held </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="163" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aacc46aaa7ec00051d3056b7cbd850586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::Strong</definition>
        <argsstring>()=default</argsstring>
        <name>Strong</name>
        <briefdescription>
<para>Default construct with static initial value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a25fead6e8aff403d57fa5a4718e3a0ef" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::Strong</definition>
        <argsstring>(T v)</argsstring>
        <name>Strong</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Construct with a explicit initial value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>the value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="78" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ac32855789c8e77843e7b6a5b63698f67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator==</definition>
        <argsstring>(ThisType const &amp;in) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" kindref="member">ThisType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Equal operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the other value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="85" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aa6dd594219a084feae812a5975240963" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator!=</definition>
        <argsstring>(ThisType const &amp;in) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" kindref="member">ThisType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Non-equal operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the other value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="94" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a8f82e9a4d971a1b80b84234661a6ca58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator&lt;</definition>
        <argsstring>(ThisType const &amp;in) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" kindref="member">ThisType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Less-than operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the other value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="103" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a5f36a542fc6a5716037c606ea090d635" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator&lt;=</definition>
        <argsstring>(ThisType const &amp;in) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" kindref="member">ThisType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Less-than-equal operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the other value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="112" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a56fd64561dfd96f87d9d46a6df44ed04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator&gt;</definition>
        <argsstring>(ThisType const &amp;in) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" kindref="member">ThisType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Greater-than operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the other value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="121" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a849dd3f84fc0c448715fcda4216a626a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator&gt;=</definition>
        <argsstring>(ThisType const &amp;in) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" kindref="member">ThisType</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Greater-than-equal operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the other value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="130" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ab0423a5f73f3d080e84bab4db2bd10f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Dereference the value as a reference. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to underlying value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="139" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a41a0ccceade5b4d7e2a3b67549ab142a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  &amp;</type>
        <definition>T const&amp; vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Dereference the value as a const reference. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to the underlying value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="146" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a111bcf44f59fcedcecf4eb59fcb11460" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Get reference. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to underlying value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="153" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aa84e50fbeaefbb74fb8843a3fb1368a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  &amp;</type>
        <definition>T const&amp; vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Get const reference. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to underlying value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/strong/strong_type.h" line="160" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="160" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used to hoist weak C++ types (like <computeroutput><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">vt::VirtualProxyType</ref></computeroutput> ) into strongly typed values that have a unique type to enforce interfaces, inhibit dangerous conversions, and provide more semantic control. </para>    </briefdescription>
    <detaileddescription>
<internal></internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="4060">
        <label>vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;</label>
        <link refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong"/>
      </node>
      <node id="4061">
        <label>vt::epoch::EpochType&lt; detail::EpochImplType, detail::no_epoch_impl, detail::EpochImplTag &gt;</label>
        <link refid="structvt_1_1epoch_1_1_epoch_type"/>
        <childnode refid="4060" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4062">
        <label>vt::util::strong::detail::Strong&lt; T, init_val, Tag &gt;</label>
        <link refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong"/>
        <childnode refid="4063" relation="usage">
          <edgelabel>v_</edgelabel>
        </childnode>
      </node>
      <node id="4063">
        <label>T</label>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/strong/strong_type.h" line="60" column="1" bodyfile="src/vt/utils/strong/strong_type.h" bodystart="60" bodyend="164"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a111bcf44f59fcedcecf4eb59fcb11460" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aa84e50fbeaefbb74fb8843a3fb1368a7" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1add96444b837f77d0fc47ae3d29d00bdb" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>isByteCopyable</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aa6dd594219a084feae812a5975240963" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator!=</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ab0423a5f73f3d080e84bab4db2bd10f8" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator*</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a41a0ccceade5b4d7e2a3b67549ab142a" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator*</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a8f82e9a4d971a1b80b84234661a6ca58" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator&lt;</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a5f36a542fc6a5716037c606ea090d635" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator&lt;=</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ac32855789c8e77843e7b6a5b63698f67" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator==</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a56fd64561dfd96f87d9d46a6df44ed04" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator&gt;</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a849dd3f84fc0c448715fcda4216a626a" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>operator&gt;=</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1aacc46aaa7ec00051d3056b7cbd850586" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>Strong</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a25fead6e8aff403d57fa5a4718e3a0ef" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>Strong</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a510d40741bda362d97a4753919a577dd" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>ThisType</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1ab47d63a1c618b3aafd0b30f022fedba7" prot="public" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>Type</name></member>
      <member refid="structvt_1_1util_1_1strong_1_1detail_1_1_strong_1a33b2c6727665a7c34405125870e71895" prot="private" virt="non-virtual"><scope>vt::util::strong::detail::Strong</scope><name>v_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
