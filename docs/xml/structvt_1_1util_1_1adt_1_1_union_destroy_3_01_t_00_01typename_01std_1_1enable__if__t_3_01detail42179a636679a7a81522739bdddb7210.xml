<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</compoundname>
    <basecompoundref refid="structvt_1_1util_1_1adt_1_1_union_base" prot="public" virt="non-virtual">vt::util::adt::UnionBase&lt; T, Ts... &gt;</basecompoundref>
    <includes refid="union_8h" local="no">union.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210_1a9754ad167ee9844764f02d976110d53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionDestroy</definition>
        <argsstring>()=default</argsstring>
        <name>UnionDestroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210_1aab76556b3fdd29b060495fdce22a5c83" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::UnionDestroy</definition>
        <argsstring>(uint8_t in_which)</argsstring>
        <name>UnionDestroy</name>
        <param>
          <type>uint8_t</type>
          <declname>in_which</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="403" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="403" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210_1a829cc75c996bd60ba4591d1d85dd3a28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset the union, calling the appropriate destructor if one variant is active. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="411" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="411" bodyend="413"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3906">
        <label>vt::util::adt::UnionBase&lt; T, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_base"/>
      </node>
      <node id="3905">
        <label>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210"/>
        <childnode refid="3906" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3908">
        <label>vt::util::adt::UnionBase&lt; T, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_base"/>
      </node>
      <node id="3907">
        <label>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210"/>
        <childnode refid="3908" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/adt/union.h" line="400" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="396" bodyend="414"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1a3badf6a022a698dc00937b3df621caf8" prot="protected" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>data_</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1af84a8a5eb01bc6f1ff29bab969177a83" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>getUnsafeRawBytes</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210_1a829cc75c996bd60ba4591d1d85dd3a28" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>reset</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1a416f7532da93b43567cf3782913c2fa0" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionBase</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1aa8b965b0431e03984db9000bb7b4cbf9" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionBase</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210_1a9754ad167ee9844764f02d976110d53e" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionDestroy</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_destroy_3_01_t_00_01typename_01std_1_1enable__if__t_3_01detail42179a636679a7a81522739bdddb7210_1aab76556b3fdd29b060495fdce22a5c83" prot="public" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>UnionDestroy</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_union_base_1ae46ed3323e83507ef0b47ad82db493d0" prot="protected" virt="non-virtual"><scope>vt::util::adt::UnionDestroy&lt; T, typename std::enable_if_t&lt; detail::IsTriviallyDestructible&lt; T, Ts... &gt;::value &gt;, Ts... &gt;</scope><name>which_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
