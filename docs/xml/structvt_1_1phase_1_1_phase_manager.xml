<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1phase_1_1_phase_manager" kind="struct" language="C++" prot="public">
    <compoundname>vt::phase::PhaseManager</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; PhaseManager &gt;</basecompoundref>
    <includes refid="phase__manager_8h" local="no">phase_manager.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1phase_1_1_phase_manager_1a552ed398953e67cd97c440a7f39a8a6c" prot="public" static="no">
        <type>typename std::underlying_type&lt; <ref refid="namespacevt_1_1phase_1aec9a63fdd99680d7a7fe99d321193811" kindref="member">PhaseHook</ref> &gt;::type</type>
        <definition>using vt::phase::PhaseManager::HookIDType =  typename std::underlying_type&lt;PhaseHook&gt;::type</definition>
        <argsstring></argsstring>
        <name>HookIDType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="84" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1phase_1_1_phase_manager_1aa8583887716955f4bd4f438bc26141e9" prot="public" static="no">
        <type>std::map&lt; std::size_t, <ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref> &gt;</type>
        <definition>using vt::phase::PhaseManager::HookMapType =  std::map&lt;std::size_t, ActionType&gt;</definition>
        <argsstring></argsstring>
        <name>HookMapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="85" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1phase_1_1_phase_manager_1a7f9784fa7550beaa1e7d59e639169a8b" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="structvt_1_1phase_1_1_phase_manager_1a552ed398953e67cd97c440a7f39a8a6c" kindref="member">HookIDType</ref>, <ref refid="structvt_1_1phase_1_1_phase_manager_1aa8583887716955f4bd4f438bc26141e9" kindref="member">HookMapType</ref> &gt;</type>
        <definition>using vt::phase::PhaseManager::HookIDMapType =  std::unordered_map&lt;HookIDType, HookMapType&gt;</definition>
        <argsstring></argsstring>
        <name>HookIDMapType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="86" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a481f6b2da9da107b31d6ce8d970c7aff" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
        <definition>PhaseType vt::phase::PhaseManager::cur_phase_</definition>
        <argsstring></argsstring>
        <name>cur_phase_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current phase </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="218" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a119ac185c79c50761d7e8c3f68b751e7" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
        <definition>ObjGroupProxyType vt::phase::PhaseManager::proxy_</definition>
        <argsstring></argsstring>
        <name>proxy_</name>
        <initializer>= no_obj_group</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Objgroup proxy </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="219" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1aafc873771fb849243f082cba71f36672" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1phase_1_1_phase_manager_1a7f9784fa7550beaa1e7d59e639169a8b" kindref="member">HookIDMapType</ref></type>
        <definition>HookIDMapType vt::phase::PhaseManager::collective_hooks_</definition>
        <argsstring></argsstring>
        <name>collective_hooks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collective regisstered hooks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="220" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a6a2b1be3c11f4fc91bfb84cc2c47c545" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1phase_1_1_phase_manager_1a7f9784fa7550beaa1e7d59e639169a8b" kindref="member">HookIDMapType</ref></type>
        <definition>HookIDMapType vt::phase::PhaseManager::rooted_hooks_</definition>
        <argsstring></argsstring>
        <name>rooted_hooks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rooted regisstered hooks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="221" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a4270d82b84c02d60c16521d4c5972657" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t vt::phase::PhaseManager::next_collective_hook_id_</definition>
        <argsstring></argsstring>
        <name>next_collective_hook_id_</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Next ID for collective hooks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="222" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a22a3945b22c96b581a1aa1cdadd149e4" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t vt::phase::PhaseManager::next_rooted_hook_id_</definition>
        <argsstring></argsstring>
        <name>next_rooted_hook_id_</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Next ID for rooted hooks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="223" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1ac57c867b3d30923a0241ef462a275f5c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::phase::PhaseManager::in_next_phase_collective_</definition>
        <argsstring></argsstring>
        <name>in_next_phase_collective_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether blocked in next phase </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="224" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a28428326d10fe9485d3da07e8650d352" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::phase::PhaseManager::reduce_next_phase_done_</definition>
        <argsstring></argsstring>
        <name>reduce_next_phase_done_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether reduce is complete </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="225" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a2d4f894445c848ea2ead4a4fe0919eb0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::phase::PhaseManager::reduce_finished_</definition>
        <argsstring></argsstring>
        <name>reduce_finished_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether next phase is done </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="226" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1phase_1_1_phase_manager_1a77b80e03b225c32acd50ed727fe4aafd" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a876a9d0cd5a952859c72de8a46881442" kindref="member">TimeType</ref></type>
        <definition>TimeType vt::phase::PhaseManager::start_time_</definition>
        <argsstring></argsstring>
        <name>start_time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current phase start time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="227" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a981990f9f44c00334f80be2e4eb604f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::phase::PhaseManager::PhaseManager</definition>
        <argsstring>()</argsstring>
        <name>PhaseManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="88" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a159d95eca1eedeef33f245a3c232037d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::phase::PhaseManager::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="90" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a541d1f6c7a350fad979911ac60f38025" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::startup</definition>
        <argsstring>() override</argsstring>
        <name>startup</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2">startup</reimplements>
        <briefdescription>
<para>Empty default overridden startup method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="92" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a217ff68fb553eedf12c9f4947a977ebd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a46ce6733d5cdbd735d561b7b4029f6d7" kindref="member">PhaseType</ref></type>
        <definition>PhaseType vt::phase::PhaseManager::getCurrentPhase</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentPhase</name>
        <briefdescription>
<para>Get the current phase. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current phase </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="107" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a31f6a6f91315fb68826ee073a7cb0a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1phase_1_1_phase_hook_i_d" kindref="compound">PhaseHookID</ref></type>
        <definition>PhaseHookID vt::phase::PhaseManager::registerHookCollective</definition>
        <argsstring>(PhaseHook type, ActionType trigger)</argsstring>
        <name>registerHookCollective</name>
        <param>
          <type><ref refid="namespacevt_1_1phase_1aec9a63fdd99680d7a7fe99d321193811" kindref="member">PhaseHook</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
<para>Collectively register a phase hook that triggers depending on the type of hook. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>These must be registered across all nodes as they will be run in a collective epoch. This is for synchronized phase actions. The order in which hooks are collectively registered dictate the order they are executed.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of trigger to register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to trigger</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>registered ID that can be used to unregister the hook </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="123" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="65" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a61a1797497a522f9352fe64abf3753be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1phase_1_1_phase_hook_i_d" kindref="compound">PhaseHookID</ref></type>
        <definition>PhaseHookID vt::phase::PhaseManager::registerHookRooted</definition>
        <argsstring>(PhaseHook type, ActionType trigger)</argsstring>
        <name>registerHookRooted</name>
        <param>
          <type><ref refid="namespacevt_1_1phase_1aec9a63fdd99680d7a7fe99d321193811" kindref="member">PhaseHook</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ae0a5a7b18cc99d7b732cb4d44f46b0f3" kindref="member">ActionType</ref></type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
<para>Rooted register a phase hook that triggers depending on the type of hook. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is an independent hook that runs on this node only</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of trigger to register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to trigger</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>registered ID that can be used to unregister the hook </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="136" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="85" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a78334fd49c35f694f1e5fe5c560dc211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::unregisterHook</definition>
        <argsstring>(PhaseHookID hook)</argsstring>
        <name>unregisterHook</name>
        <param>
          <type><ref refid="structvt_1_1phase_1_1_phase_hook_i_d" kindref="compound">PhaseHookID</ref></type>
          <declname>hook</declname>
        </param>
        <briefdescription>
<para>Unregister an existing hook. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>For collective hooks, they must all be unregistered across all nodes before the next <computeroutput>nextPhaseCollective</computeroutput> is invoked.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hook</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the hook to unregister </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="146" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="104" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1ac94bfde4a103cbdec426542191c41092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::nextPhaseCollective</definition>
        <argsstring>()</argsstring>
        <name>nextPhaseCollective</name>
        <briefdescription>
<para>Start the next phase collectively. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Performs a reduction to coordinate across nodes and then triggers post-phase triggerable actions. This function does not return until the any post-phase actions, including migrations as a result, are terminated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="155" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="135" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a7844c9468a45c9e49d94436f3f565a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::setStartTime</definition>
        <argsstring>()</argsstring>
        <name>setStartTime</name>
        <briefdescription>
<para>Store start time for the current phase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="160" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a789e81d0a1ae09f1aeac4e72fd884584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::printSummary</definition>
        <argsstring>(vrt::collection::lb::PhaseInfo *last_phase_info)</argsstring>
        <name>printSummary</name>
        <param>
          <type><ref refid="structvt_1_1vrt_1_1collection_1_1lb_1_1_phase_info" kindref="compound">vrt::collection::lb::PhaseInfo</ref> *</type>
          <declname>last_phase_info</declname>
        </param>
        <briefdescription>
<para>Print summary for the current phase. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">last_phase_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The info for the last phase execution </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="167" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="230" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1ae436f95e5eb570b17c71a48d96675f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::runHooksManual</definition>
        <argsstring>(PhaseHook type)</argsstring>
        <name>runHooksManual</name>
        <param>
          <type><ref refid="namespacevt_1_1phase_1aec9a63fdd99680d7a7fe99d321193811" kindref="member">PhaseHook</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Run hooks manually. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is only intended to be used for testing and non-standard use cases where they need to be run. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="201" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a9cc247a2194bc858fa043a5fe5c9fb76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::phase::PhaseManager::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="204" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="204" bodyend="215"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a6d864be02daa1cc0ec0b336aa1ebc31e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1phase_1_1_phase_manager" kindref="compound">PhaseManager</ref> &gt;</type>
        <definition>std::unique_ptr&lt; PhaseManager &gt; vt::phase::PhaseManager::construct</definition>
        <argsstring>()</argsstring>
        <name>construct</name>
        <briefdescription>
<para>Construct a new <computeroutput><ref refid="structvt_1_1phase_1_1_phase_manager" kindref="compound">PhaseManager</ref></computeroutput> as an objgroup. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>unique pointer to the new manager </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="100" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="55" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1a59345a6496fb1413de1a1899fe4532cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::nextPhaseReduce</definition>
        <argsstring>(NextMsg *msg)</argsstring>
        <name>nextPhaseReduce</name>
        <param>
          <type><ref refid="structvt_1_1phase_1_1_next_msg" kindref="compound">NextMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Reduce handler to kick off the next phase. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the (empty) next phase message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="176" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1aa8db0caf0fcef7fe3ead90de2adda963" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::nextPhaseDone</definition>
        <argsstring>(NextMsg *msg)</argsstring>
        <name>nextPhaseDone</name>
        <param>
          <type><ref refid="structvt_1_1phase_1_1_next_msg" kindref="compound">NextMsg</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Reduce handler to synchronize the end of the phase transition. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the (empty) next phase message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="184" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1phase_1_1_phase_manager_1aeeb5b14ac179b2400a52914208bbd922" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::phase::PhaseManager::runHooks</definition>
        <argsstring>(PhaseHook type)</argsstring>
        <name>runHooks</name>
        <param>
          <type><ref refid="namespacevt_1_1phase_1aec9a63fdd99680d7a7fe99d321193811" kindref="member">PhaseHook</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Run all the hooks registered here of a certain variety. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of hook to run designated by the enum <computeroutput>PhaseHook</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/phase/phase_manager.h" line="192" column="1" bodyfile="src/vt/phase/phase_manager.cc" bodystart="197" bodyend="220"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>General management of phases in an application to delineate collective intervals of time across nodes. </para>    </briefdescription>
    <detaileddescription>
<para>Many system components use phases as a natural boundary for performing incremental operations as the runtime makes progress. For instance, traces may be flushed at phase boundaries and the load balancing framework might apply a strategy between phases.</para><para>The main interface for users is invoking <computeroutput><ref refid="namespacevt_1a3799d6b51fb71d7b6505760aad457e61" kindref="member">vt::thePhase()</ref>-&gt;<ref refid="structvt_1_1phase_1_1_phase_manager_1ac94bfde4a103cbdec426542191c41092" kindref="member">nextPhaseCollective()</ref></computeroutput> to start the next phase. The system performs a reduction and blocks completion inside this call. Any work that belongs in the preceding phase should be synchronized before this is called. The runtime system or users can register hooks when a phase starts, ends, or after any migrations are complete. Hooks may be collective or rooted; collective hooks are invoked in the order in which they are registered and are always run in a collective epoch. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3059">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="3060" relation="public-inheritance">
        </childnode>
        <childnode refid="3063" relation="public-inheritance">
        </childnode>
        <childnode refid="3064" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3062">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="3060">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="3061" relation="public-inheritance">
        </childnode>
        <childnode refid="3062" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3061">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="3057">
        <label>vt::phase::PhaseManager</label>
        <link refid="structvt_1_1phase_1_1_phase_manager"/>
        <childnode refid="3058" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3063">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="3064">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="3058">
        <label>vt::runtime::component::Component&lt; PhaseManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="3059" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3067">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
        <childnode refid="3071" relation="public-inheritance">
        </childnode>
        <childnode refid="3072" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3070">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="3068">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="3069" relation="public-inheritance">
        </childnode>
        <childnode refid="3070" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3069">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="3065">
        <label>vt::phase::PhaseManager</label>
        <link refid="structvt_1_1phase_1_1_phase_manager"/>
        <childnode refid="3066" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3071">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="3072">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="3066">
        <label>vt::runtime::component::Component&lt; PhaseManager &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="3067" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/phase/phase_manager.h" line="83" column="1" bodyfile="src/vt/phase/phase_manager.h" bodystart="83" bodyend="228"/>
    <listofallmembers>
      <member refid="structvt_1_1phase_1_1_phase_manager_1aafc873771fb849243f082cba71f36672" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>collective_hooks_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>component_id_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a6d864be02daa1cc0ec0b336aa1ebc31e" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>construct</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a481f6b2da9da107b31d6ce8d970c7aff" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>cur_phase_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>dumpState</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>fatalError</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a217ff68fb553eedf12c9f4947a977ebd" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>getCurrentPhase</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a7f9784fa7550beaa1e7d59e639169a8b" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>HookIDMapType</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a552ed398953e67cd97c440a7f39a8a6c" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>HookIDType</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1aa8583887716955f4bd4f438bc26141e9" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>HookMapType</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1ac57c867b3d30923a0241ef462a275f5c" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>in_next_phase_collective_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>initialize</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a159d95eca1eedeef33f245a3c232037d" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>name</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a4270d82b84c02d60c16521d4c5972657" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>next_collective_hook_id_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a22a3945b22c96b581a1aa1cdadd149e4" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>next_rooted_hook_id_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1ac94bfde4a103cbdec426542191c41092" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>nextPhaseCollective</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1aa8db0caf0fcef7fe3ead90de2adda963" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>nextPhaseDone</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a59345a6496fb1413de1a1899fe4532cf" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>nextPhaseReduce</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a981990f9f44c00334f80be2e4eb604f5" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>PhaseManager</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a789e81d0a1ae09f1aeac4e72fd884584" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>printSummary</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>progress</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a119ac185c79c50761d7e8c3f68b751e7" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>proxy_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a2d4f894445c848ea2ead4a4fe0919eb0" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>reduce_finished_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a28428326d10fe9485d3da07e8650d352" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>reduce_next_phase_done_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a31f6a6f91315fb68826ee073a7cb0a14" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerHookCollective</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a61a1797497a522f9352fe64abf3753be" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerHookRooted</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a6a2b1be3c11f4fc91bfb84cc2c47c545" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>rooted_hooks_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1aeeb5b14ac179b2400a52914208bbd922" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>runHooks</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1ae436f95e5eb570b17c71a48d96675f69" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>runHooksManual</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a9cc247a2194bc858fa043a5fe5c9fb76" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1abe85836f57c42a695fdc292cd78b10cb" prot="public" virt="non-virtual" ambiguityscope="Component&lt; PhaseManager &gt;::"><scope>vt::phase::PhaseManager</scope><name>serialize</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a7844c9468a45c9e49d94436f3f565a1f" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>setStartTime</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a77b80e03b225c32acd50ed727fe4aafd" prot="private" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>start_time_</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a541d1f6c7a350fad979911ac60f38025" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>staticInit</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>UnitType</name></member>
      <member refid="structvt_1_1phase_1_1_phase_manager_1a78334fd49c35f694f1e5fe5c560dc211" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>unregisterHook</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::phase::PhaseManager</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::phase::PhaseManager</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
