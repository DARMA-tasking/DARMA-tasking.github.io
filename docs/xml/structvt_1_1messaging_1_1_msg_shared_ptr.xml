<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_msg_shared_ptr" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>vt::messaging::MsgSharedPtr</compoundname>
    <includes refid="smart__ptr_8h" local="no">smart_ptr.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a714463f633ada883b4fbdfd3541d30a7" prot="public" static="no">
        <type>T</type>
        <definition>using vt::messaging::MsgSharedPtr&lt; T &gt;::MsgType =  T</definition>
        <argsstring></argsstring>
        <name>MsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="100" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a778cb9ec8919e4a309d28ed345ac318d" prot="public" static="no">
        <type><ref refid="namespacevt_1ac34f95a5e2b8109b55bfba52b074443d" kindref="member">BaseMessage</ref></type>
        <definition>using vt::messaging::MsgSharedPtr&lt; T &gt;::BaseMsgType =  BaseMessage</definition>
        <argsstring></argsstring>
        <name>BaseMsgType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="101" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_msg_shared_ptr_1aac5218a8b39004946a523ac4a729a3da" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a778cb9ec8919e4a309d28ed345ac318d" kindref="member">BaseMsgType</ref> *</type>
        <definition>BaseMsgType* vt::messaging::MsgSharedPtr&lt; T &gt;::ptr_</definition>
        <argsstring></argsstring>
        <name>ptr_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="299" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_msg_shared_ptr_1aa3d0c6c8f14e94de5f4c5e67c81f9ff1" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
        <definition>ByteType vt::messaging::MsgSharedPtr&lt; T &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <initializer>= no_byte</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="301" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_msg_shared_ptr_1aa0cf96203c13d77d691888c852bc333e" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_impl_base" kindref="compound">MsgPtrImplBase</ref> *</type>
        <definition>MsgPtrImplBase* vt::messaging::MsgSharedPtr&lt; T &gt;::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="304" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a560ea1c81555ee5ea06efaa86445ba1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::MsgSharedPtr</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>MsgSharedPtr</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="103" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1aceba59bb70858cbf4c5affc00968a6a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::MsgSharedPtr</definition>
        <argsstring>(T *in, ByteType size=no_byte)</argsstring>
        <name>MsgSharedPtr</name>
        <param>
          <type>T *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>size</declname>
          <defval>no_byte</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="105" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1afd1eeed56746b0a56aef23b5ba8cf31f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::MsgSharedPtr</definition>
        <argsstring>(T *in, ByteType size, MsgPtrImplBase *impl)</argsstring>
        <name>MsgSharedPtr</name>
        <param>
          <type>T *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_impl_base" kindref="compound">MsgPtrImplBase</ref> *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="110" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a19dac0c0fbac2b4ed069564445500de6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::MsgSharedPtr</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; const &amp;in, ByteType size=no_byte)</argsstring>
        <name>MsgSharedPtr</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>size</declname>
          <defval>no_byte</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="114" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1af08de8fd20fe431e551273451123b334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::MsgSharedPtr</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; &amp;&amp;in)</argsstring>
        <name>MsgSharedPtr</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="120" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1ac6f496608ceb2f96b9457b0082f76e28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; &amp;</type>
        <definition>MsgSharedPtr&lt;T&gt;&amp; vt::messaging::MsgSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>operator=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="124" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1af2b0f17fdd4601d00b75410699fa5738" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; &amp;</type>
        <definition>MsgSharedPtr&lt;T&gt;&amp; vt::messaging::MsgSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; const &amp;in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="129" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1ad6712e7dac73e70a61690e83122fda7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; &amp;</type>
        <definition>MsgSharedPtr&lt;T&gt;&amp; vt::messaging::MsgSharedPtr&lt; T &gt;::operator=</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; &amp;&amp;in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="135" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a41b62019acea0627ce3297d31257524c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::~MsgSharedPtr</definition>
        <argsstring>()</argsstring>
        <name>~MsgSharedPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="141" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a984ff1a806b338a5fce6fc1861fd0198" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::operator MsgSharedPtr&lt; U &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator MsgSharedPtr&lt; U &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="146" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a85b58c8af4068d8cfd4ad2ebb02d8111" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::MsgSharedPtr&lt; T &gt;::operator T*</definition>
        <argsstring>() const</argsstring>
        <name>operator T*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="148" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1ae3d838b37f94f5f63ffc433518d46ada" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; U &gt;</type>
        <definition>MsgSharedPtr&lt;U&gt; vt::messaging::MsgSharedPtr&lt; T &gt;::to</definition>
        <argsstring>() const</argsstring>
        <name>to</name>
        <briefdescription>
<para>Access as another (usually base) message type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="152" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1ab210c87a0489113368209634e76a72b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; U &gt;</type>
        <definition>MsgSharedPtr&lt;U&gt; vt::messaging::MsgSharedPtr&lt; T &gt;::toVirtual</definition>
        <argsstring>() const</argsstring>
        <name>toVirtual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>[obsolete] Use <ref refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ae3d838b37f94f5f63ffc433518d46ada" kindref="member">to()</ref> as MsgVirtualPtr &lt;-&gt; <ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>. Both methods are equivalent in funciton. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="162" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a7f385be5d82602555a25a6737c779962" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::MsgSharedPtr&lt; T &gt;::operator==</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; const &amp;n) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="166" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a1a37a82a49f68a91ef92ec675d2a324e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::MsgSharedPtr&lt; T &gt;::operator!=</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; const &amp;n) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="167" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a7da24c983c0b606a570138d928148298" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::MsgSharedPtr&lt; T &gt;::operator==</definition>
        <argsstring>(std::nullptr_t) const</argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="168" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a3d21051f673b7370ac6dcdaeac110e84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::MsgSharedPtr&lt; T &gt;::operator!=</definition>
        <argsstring>(std::nullptr_t) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="169" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a4140dc4ea157de37d258c8f8821179c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vt::messaging::MsgSharedPtr&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Implicit access to MsgT*. </para>        </briefdescription>
        <detaileddescription>
<para>Asserts ownership: invalid to use after a std::move or implicit thief.</para><para><simplesect kind="return"><para>the owned message, never null </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="178" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a609cd3703233ec7a0e26db0ff457b8f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; vt::messaging::MsgSharedPtr&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Implicit access to MsgT&amp;. </para>        </briefdescription>
        <detaileddescription>
<para>Asserts ownership: invalid to use after a std::move or implicit thief.</para><para><simplesect kind="return"><para>ref to the owned message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="187" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a6e6e25e087e662d9171fa20b5092efdd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vt::messaging::MsgSharedPtr&lt; T &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Explicit access to MsgT*. </para>        </briefdescription>
        <detaileddescription>
<para>Asserts ownership: invalid to use after a std::move or implicit thief.</para><para><simplesect kind="return"><para>the owned message, never null </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="196" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="196" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a2ed79c214e294d8a15c930ee573f13b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
        <definition>ByteType vt::messaging::MsgSharedPtr&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Explicit access to message size. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the owned message, never null </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="208" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1aea0124e8c6c53e91f3239a8ecf3cdca8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::MsgSharedPtr&lt; T &gt;::ownsMessage</definition>
        <argsstring>() const</argsstring>
        <name>ownsMessage</name>
        <briefdescription>
<para>Checks to see if a message is owned. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if a message is owned or <computeroutput>false</computeroutput> after std::move. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="221" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a604694c988590bdb3a35e403c677cba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;      std::is_same&lt;SerializerT, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref>&gt;::value    &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::MsgSharedPtr&lt; T &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="240" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="240" bodyend="251"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1messaging_1_1_msg_shared_ptr_1ac412f09ec806f5915ea4a94f3e84d5f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, MsgSharedPtr&lt; T &gt; const &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="225" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="225" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a780631de45b6dfb6812abb9af26cb4e8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::MsgSharedPtr&lt; T &gt;::init</definition>
        <argsstring>(T *msgPtr, ByteType size, MsgPtrImplBase *impl)</argsstring>
        <name>init</name>
        <param>
          <type>T *</type>
          <declname>msgPtr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_ptr_impl_base" kindref="compound">MsgPtrImplBase</ref> *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs state-ownership, always taking an additional message ref. Should probably be called every constructor; must ONLY be called from fresh (zero-init member) or <ref refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ace4439c8585f3d3c50b861570db07d99" kindref="member">clear()</ref> state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="258" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="258" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1ace4439c8585f3d3c50b861570db07d99" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::MsgSharedPtr&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear all internal state. Effectively destructor in operation, with guarantee that <ref refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a780631de45b6dfb6812abb9af26cb4e8" kindref="member">init()</ref> can be used again after. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="276" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="276" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_msg_shared_ptr_1a351f61999bc2f15ec3027fcb76c9a942" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::MsgSharedPtr&lt; T &gt;::moveFrom</definition>
        <argsstring>(MsgSharedPtr&lt; T &gt; &amp;&amp;in)</argsstring>
        <name>moveFrom</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Move. Must be invoked on fresh/clear state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/message/smart_ptr.h" line="289" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="289" bodyend="295"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2779">
        <label>vt::messaging::MsgPtrImplBase</label>
        <link refid="structvt_1_1messaging_1_1_msg_ptr_impl_base"/>
      </node>
      <node id="2778">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
      <node id="2777">
        <label>vt::messaging::MsgSharedPtr&lt; T &gt;</label>
        <link refid="structvt_1_1messaging_1_1_msg_shared_ptr"/>
        <childnode refid="2778" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
        <childnode refid="2779" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/messaging/message/smart_ptr.h" line="99" column="1" bodyfile="src/vt/messaging/message/smart_ptr.h" bodystart="99" bodyend="305"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a778cb9ec8919e4a309d28ed345ac318d" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>BaseMsgType</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ace4439c8585f3d3c50b861570db07d99" prot="private" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>clear</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a6e6e25e087e662d9171fa20b5092efdd" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>get</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1aa0cf96203c13d77d691888c852bc333e" prot="private" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>impl_</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a780631de45b6dfb6812abb9af26cb4e8" prot="private" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>init</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a351f61999bc2f15ec3027fcb76c9a942" prot="private" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>moveFrom</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a560ea1c81555ee5ea06efaa86445ba1b" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>MsgSharedPtr</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1aceba59bb70858cbf4c5affc00968a6a1" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>MsgSharedPtr</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1afd1eeed56746b0a56aef23b5ba8cf31f" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>MsgSharedPtr</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a19dac0c0fbac2b4ed069564445500de6" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>MsgSharedPtr</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1af08de8fd20fe431e551273451123b334" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>MsgSharedPtr</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a714463f633ada883b4fbdfd3541d30a7" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>MsgType</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a984ff1a806b338a5fce6fc1861fd0198" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator MsgSharedPtr&lt; U &gt;</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a85b58c8af4068d8cfd4ad2ebb02d8111" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator T*</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a1a37a82a49f68a91ef92ec675d2a324e" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator!=</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a3d21051f673b7370ac6dcdaeac110e84" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator!=</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a609cd3703233ec7a0e26db0ff457b8f7" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator*</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a4140dc4ea157de37d258c8f8821179c8" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator-&gt;</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ac412f09ec806f5915ea4a94f3e84d5f4" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator&lt;&lt;</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ac6f496608ceb2f96b9457b0082f76e28" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator=</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1af2b0f17fdd4601d00b75410699fa5738" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator=</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ad6712e7dac73e70a61690e83122fda7c" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator=</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a7f385be5d82602555a25a6737c779962" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator==</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a7da24c983c0b606a570138d928148298" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>operator==</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1aea0124e8c6c53e91f3239a8ecf3cdca8" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>ownsMessage</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1aac5218a8b39004946a523ac4a729a3da" prot="private" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>ptr_</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a604694c988590bdb3a35e403c677cba2" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>serialize</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a2ed79c214e294d8a15c930ee573f13b9" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>size</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1aa3d0c6c8f14e94de5f4c5e67c81f9ff1" prot="private" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>size_</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ae3d838b37f94f5f63ffc433518d46ada" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>to</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1ab210c87a0489113368209634e76a72b8" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>toVirtual</name></member>
      <member refid="structvt_1_1messaging_1_1_msg_shared_ptr_1a41b62019acea0627ce3297d31257524c" prot="public" virt="non-virtual"><scope>vt::messaging::MsgSharedPtr</scope><name>~MsgSharedPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
