<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1collective_1_1tree_1_1_tree" kind="struct" language="C++" prot="public">
    <compoundname>vt::collective::tree::Tree</compoundname>
    <derivedcompoundref refid="structvt_1_1collective_1_1barrier_1_1_barrier" prot="public" virt="virtual">vt::collective::barrier::Barrier</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1collective_1_1reduce_1_1_reduce" prot="public" virt="virtual">vt::collective::reduce::Reduce</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1collective_1_1scatter_1_1_scatter" prot="public" virt="virtual">vt::collective::scatter::Scatter</derivedcompoundref>
    <derivedcompoundref refid="structvt_1_1term_1_1_termination_detector" prot="public" virt="non-virtual">vt::term::TerminationDetector</derivedcompoundref>
    <includes refid="tree_8h" local="no">tree.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> &gt;</type>
        <definition>using vt::collective::tree::Tree::NodeListType =  std::vector&lt;NodeType&gt;</definition>
        <argsstring></argsstring>
        <name>NodeListType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="71" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref>)&gt;</type>
        <definition>using vt::collective::tree::Tree::OperationType =  std::function&lt;void(NodeType)&gt;</definition>
        <argsstring></argsstring>
        <name>OperationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="72" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" prot="public" static="no">
        <type>int32_t</type>
        <definition>using vt::collective::tree::Tree::NumLevelsType =  int32_t</definition>
        <argsstring></argsstring>
        <name>NumLevelsType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="73" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1collective_1_1tree_1_1_tree_1af240b20228198eae21c33e1b6a042fe2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::collective::tree::Tree::set_up_tree_</definition>
        <argsstring></argsstring>
        <name>set_up_tree_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="189" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1tree_1_1_tree_1a9984c66b641a7a3ea9db6afc686739b0" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::collective::tree::Tree::parent_</definition>
        <argsstring></argsstring>
        <name>parent_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="190" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1tree_1_1_tree_1abe6e5a200fc08f3dc040bd134e97d8f2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::collective::tree::Tree::is_root_</definition>
        <argsstring></argsstring>
        <name>is_root_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="191" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1collective_1_1tree_1_1_tree_1ad4485d4ba90addf6bd7e25425d4cf6dd" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" kindref="member">NodeListType</ref></type>
        <definition>NodeListType vt::collective::tree::Tree::children_</definition>
        <argsstring></argsstring>
        <name>children_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="192" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1ae9570e9a8f303295744e99b527603a51" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::tree::Tree::Tree</definition>
        <argsstring>(DefaultTreeConstructTag)</argsstring>
        <name>Tree</name>
        <param>
          <type>DefaultTreeConstructTag</type>
        </param>
        <briefdescription>
<para>Construct the default spanning tree across the whole communicator. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">DefaultTreeConstructTag</parametername>
</parameternamelist>
<parameterdescription>
<para>constructor tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="81" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1ad759f716890ce5344a6c6053fcdc7055" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::tree::Tree::Tree</definition>
        <argsstring>(NodeListType const &amp;in_children)</argsstring>
        <name>Tree</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" kindref="member">NodeListType</ref> const &amp;</type>
          <declname>in_children</declname>
        </param>
        <briefdescription>
<para>Construct a spanning tree with a list of children nodes on the root node. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="warning"><para>This should only be called on the root.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_children</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of children </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="91" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a949f8b592559125bf225bd3828bd6b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::collective::tree::Tree::Tree</definition>
        <argsstring>(bool const in_is_root, NodeType const &amp;parent, NodeListType const &amp;in_children)</argsstring>
        <name>Tree</name>
        <param>
          <type>bool const</type>
          <declname>in_is_root</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" kindref="member">NodeListType</ref> const &amp;</type>
          <declname>in_children</declname>
        </param>
        <briefdescription>
<para>Construct a spanning tree with a list of children nodes, parent node, and whether this is the root. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_is_root</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is the root node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parent</parametername>
</parameternamelist>
<parameterdescription>
<para>the node&apos;s parent in the tree </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_children</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of children </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="101" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1aa3120d3bdbb2a308dd6831aa52d0ebb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::tree::Tree::setupTree</definition>
        <argsstring>()</argsstring>
        <name>setupTree</name>
        <briefdescription>
<para>Setup the default (binomial) tree. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="109" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="134" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1ab509dada696b718152e8ac04edd551af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::collective::tree::Tree::getParent</definition>
        <argsstring>() const</argsstring>
        <name>getParent</name>
        <briefdescription>
<para>Get the parent node in the tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the parent node </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="116" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1ad68dc6aac90193cc15955d7bd1a5b1fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::collective::tree::Tree::getNumChildren</definition>
        <argsstring>() const</argsstring>
        <name>getNumChildren</name>
        <briefdescription>
<para>Get the number of children nodes. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>the number of children nodes </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="123" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a88b2add909b0035f4844317481ed559b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::collective::tree::Tree::isRoot</definition>
        <argsstring>() const</argsstring>
        <name>isRoot</name>
        <briefdescription>
<para>Get whether this node is the root. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>whether this node is the root </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="130" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a57b3edade6230de16232213b7c4380f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" kindref="member">NodeListType</ref> const  &amp;</type>
        <definition>Tree::NodeListType const  &amp; vt::collective::tree::Tree::getChildren</definition>
        <argsstring>() const</argsstring>
        <name>getChildren</name>
        <briefdescription>
<para>Get the (const) list of children. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>(const) list of children </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="137" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a39e27b1538bf00674a5a653dfd7a0e83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" kindref="member">NodeListType</ref></type>
        <definition>Tree::NodeListType vt::collective::tree::Tree::getChildren</definition>
        <argsstring>(NodeType node) const</argsstring>
        <name>getChildren</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Get the list of children for a particular node in the tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>list of children </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="144" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="83" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1ad5546485f90dd449a203f174b1374a01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::tree::Tree::foreachChild</definition>
        <argsstring>(OperationType op) const</argsstring>
        <name>foreachChild</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" kindref="member">OperationType</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Apply function (foreach) across all children. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>action to apply, passed the node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="151" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a56532f6b47b9c71864980b73deee2d5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" kindref="member">NumLevelsType</ref></type>
        <definition>Tree::NumLevelsType vt::collective::tree::Tree::numLevels</definition>
        <argsstring>() const</argsstring>
        <name>numLevels</name>
        <briefdescription>
<para>Get number of levels in the tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>number of levels </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="158" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a8200f03bf19b18b2323d1fcb99d5335f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::collective::tree::Tree::foreachChild</definition>
        <argsstring>(NumLevelsType level, OperationType op) const</argsstring>
        <name>foreachChild</name>
        <param>
          <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" kindref="member">NumLevelsType</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" kindref="member">OperationType</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Apply function (foreach) across all children with number of levels passed to apply function. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">level</parametername>
</parameternamelist>
<parameterdescription>
<para>number of levels in spanning tree </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>action to apply, passed levels and node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="167" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a5375e6fbda5c36891b21cc17acc204dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::collective::tree::Tree::getNumDescendants</definition>
        <argsstring>(NodeType child) const</argsstring>
        <name>getNumDescendants</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Get total number of descendants for a particular node in the tree. </para>        </briefdescription>
        <detaileddescription>
<para>returned count does not include the node passed<mdash/>only its descendants.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">child</parametername>
</parameternamelist>
<parameterdescription>
<para>the node</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of descendants </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="179" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1collective_1_1tree_1_1_tree_1a26e27c8c2da5db17c5cc26f15c2ebfb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::collective::tree::Tree::getNumDescendants</definition>
        <argsstring>() const</argsstring>
        <name>getNumDescendants</name>
        <briefdescription>
<para>Get total number of descendants in the tree. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="return"><para>number of descendants </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/collective/tree/tree.h" line="186" column="1" bodyfile="src/vt/collective/tree/tree.cc" bodystart="106" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>General interface for storing a spanning tree. </para>    </briefdescription>
    <detaileddescription>
<internal><para>Holds the portion of a spanning tree on each node. Does not do any parallel coordination. Higher-level components must keep track of the pieces of the tree on each node. </para></internal>
    </detaileddescription>
    <inheritancegraph>
      <node id="4237">
        <label>vt::collective::scatter::Scatter</label>
        <link refid="structvt_1_1collective_1_1scatter_1_1_scatter"/>
        <childnode refid="4233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4235">
        <label>vt::collective::CollectiveAlg</label>
        <link refid="structvt_1_1collective_1_1_collective_alg"/>
        <childnode refid="4234" relation="public-inheritance">
        </childnode>
        <childnode refid="4237" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4238">
        <label>vt::term::TerminationDetector</label>
        <link refid="structvt_1_1term_1_1_termination_detector"/>
        <childnode refid="4233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4236">
        <label>vt::collective::reduce::Reduce</label>
        <link refid="structvt_1_1collective_1_1reduce_1_1_reduce"/>
        <childnode refid="4233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4234">
        <label>vt::collective::barrier::Barrier</label>
        <link refid="structvt_1_1collective_1_1barrier_1_1_barrier"/>
        <childnode refid="4233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4233">
        <label>vt::collective::tree::Tree</label>
        <link refid="structvt_1_1collective_1_1tree_1_1_tree"/>
      </node>
    </inheritancegraph>
    <location file="src/vt/collective/tree/tree.h" line="70" column="1" bodyfile="src/vt/collective/tree/tree.h" bodystart="70" bodyend="193"/>
    <listofallmembers>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad4485d4ba90addf6bd7e25425d4cf6dd" prot="private" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>children_</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad5546485f90dd449a203f174b1374a01" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a8200f03bf19b18b2323d1fcb99d5335f" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>foreachChild</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a57b3edade6230de16232213b7c4380f5" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a39e27b1538bf00674a5a653dfd7a0e83" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>getChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad68dc6aac90193cc15955d7bd1a5b1fc" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>getNumChildren</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5375e6fbda5c36891b21cc17acc204dd" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a26e27c8c2da5db17c5cc26f15c2ebfb8" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>getNumDescendants</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ab509dada696b718152e8ac04edd551af" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>getParent</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1abe6e5a200fc08f3dc040bd134e97d8f2" prot="private" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>is_root_</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a88b2add909b0035f4844317481ed559b" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>isRoot</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a834e7b54ea2dceae42db7c5ea859753f" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>NodeListType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a56532f6b47b9c71864980b73deee2d5a" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>numLevels</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1af64acc9543dc1bd1b56d6ed17b003425" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>NumLevelsType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a5ce4242e9580c807baa74168401f381a" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>OperationType</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a9984c66b641a7a3ea9db6afc686739b0" prot="private" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>parent_</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1af240b20228198eae21c33e1b6a042fe2" prot="private" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>set_up_tree_</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1aa3120d3bdbb2a308dd6831aa52d0ebb0" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>setupTree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ae9570e9a8f303295744e99b527603a51" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1ad759f716890ce5344a6c6053fcdc7055" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>Tree</name></member>
      <member refid="structvt_1_1collective_1_1tree_1_1_tree_1a949f8b592559125bf225bd3828bd6b88" prot="public" virt="non-virtual"><scope>vt::collective::tree::Tree</scope><name>Tree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
