<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="checkpoint__traits_8h" kind="file" language="C++">
    <compoundname>checkpoint_traits.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes refid="lib_2checkpoint_2src_2checkpoint_2common_8h" local="yes">checkpoint/common.h</includes>
    <includes refid="detector_8h" local="yes">checkpoint/detector.h</includes>
    <incdepgraph>
      <node id="33596">
        <label>checkpoint/common.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2common_8h"/>
        <childnode refid="33597" relation="include">
        </childnode>
        <childnode refid="33598" relation="include">
        </childnode>
        <childnode refid="33595" relation="include">
        </childnode>
        <childnode refid="33599" relation="include">
        </childnode>
        <childnode refid="33600" relation="include">
        </childnode>
        <childnode refid="33601" relation="include">
        </childnode>
      </node>
      <node id="33597">
        <label>checkpoint/cmake_config.h</label>
      </node>
      <node id="33595">
        <label>cstdint</label>
      </node>
      <node id="33602">
        <label>checkpoint/detector.h</label>
        <link refid="detector_8h"/>
        <childnode refid="33603" relation="include">
        </childnode>
      </node>
      <node id="33601">
        <label>cassert</label>
      </node>
      <node id="33599">
        <label>cstdio</label>
      </node>
      <node id="33594">
        <label>lib/checkpoint/src/checkpoint/traits/checkpoint_traits.h</label>
        <link refid="checkpoint__traits_8h"/>
        <childnode refid="33595" relation="include">
        </childnode>
        <childnode refid="33596" relation="include">
        </childnode>
        <childnode refid="33602" relation="include">
        </childnode>
      </node>
      <node id="33600">
        <label>utility</label>
      </node>
      <node id="33598">
        <label>cstdlib</label>
      </node>
      <node id="33603">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcheckpoint_1_1_serializer_traits" prot="public">checkpoint::SerializerTraits</innerclass>
    <innernamespace refid="namespacecheckpoint">checkpoint</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkpoint_traits.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/checkpoint<sp/>=&gt;<sp/>Serialization<sp/>Library</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_CHECKPOINT_TRAITS_CHECKPOINT_TRAITS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_CHECKPOINT_TRAITS_CHECKPOINT_TRAITS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lib_2checkpoint_2src_2checkpoint_2common_8h" kindref="compound">checkpoint/common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="detector_8h" kindref="compound">checkpoint/detector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecheckpoint" kindref="compound">checkpoint</ref><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="55" refid="structcheckpoint_1_1_serializer_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1_serializer_traits" kindref="compound">SerializerTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1aaa8510ef21bb5aac75f50f8038091b86" kindref="member">contiguousBytes_t</ref><sp/>=<sp/>decltype(std::declval&lt;U&gt;().contiguousBytes(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::declval&lt;void*&gt;(),<sp/>std::declval&lt;SizeType&gt;(),<sp/>std::declval&lt;SizeType&gt;()</highlight></codeline>
<codeline lineno="59" refid="structcheckpoint_1_1_serializer_traits_1aaa8510ef21bb5aac75f50f8038091b86" refkind="member"><highlight class="normal"><sp/><sp/>));</highlight></codeline>
<codeline lineno="60" refid="structcheckpoint_1_1_serializer_traits_1aee3349b1b0e4064b7f3a0baf29580835" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetection_1_1detector" kindref="compound">has_contiguousBytes</ref><sp/>=<sp/><ref refid="structdetection_1_1detector" kindref="compound">detection::is_detected&lt;contiguousBytes_t, T&gt;</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="63" refid="structcheckpoint_1_1_serializer_traits_1a7b2ce347c816a50063e37b1216076814" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1a7b2ce347c816a50063e37b1216076814" kindref="member">isSizing_t</ref><sp/>=<sp/>decltype(std::declval&lt;U&gt;().isSizing());</highlight></codeline>
<codeline lineno="64" refid="structcheckpoint_1_1_serializer_traits_1a4dda444a377178bddaa8448a639f9735" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1a4dda444a377178bddaa8448a639f9735" kindref="member">has_isSizing</ref><sp/>=<sp/><ref refid="namespacedetection_1afb970b23e39cfecb33449d40242c49ff" kindref="member">detection::is_detected_convertible&lt;bool, isSizing_t, T&gt;</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="67" refid="structcheckpoint_1_1_serializer_traits_1aeec71e5f15a9dc7e8a265d40a65518b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1aeec71e5f15a9dc7e8a265d40a65518b0" kindref="member">isPacking_t</ref><sp/>=<sp/>decltype(std::declval&lt;U&gt;().isPacking());</highlight></codeline>
<codeline lineno="68" refid="structcheckpoint_1_1_serializer_traits_1a8b54c38de0887bf25f179e0f065af3fb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1a8b54c38de0887bf25f179e0f065af3fb" kindref="member">has_isPacking</ref><sp/>=<sp/><ref refid="namespacedetection_1afb970b23e39cfecb33449d40242c49ff" kindref="member">detection::is_detected_convertible&lt;bool, isPacking_t, T&gt;</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="71" refid="structcheckpoint_1_1_serializer_traits_1abc375c9fd74b102d51a74af8884c72e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1abc375c9fd74b102d51a74af8884c72e0" kindref="member">isUnpacking_t</ref><sp/>=<sp/>decltype(std::declval&lt;U&gt;().isUnpacking());</highlight></codeline>
<codeline lineno="72" refid="structcheckpoint_1_1_serializer_traits_1ab3d539e82b415b4a98ac7fc13aaab685" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1ab3d539e82b415b4a98ac7fc13aaab685" kindref="member">has_isUnpacking</ref><sp/>=<sp/><ref refid="namespacedetection_1afb970b23e39cfecb33449d40242c49ff" kindref="member">detection::is_detected_convertible&lt;bool, isUnpacking_t, T&gt;</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="75" refid="structcheckpoint_1_1_serializer_traits_1ad78a62a4399d95f2085684fc09c12196" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1ad78a62a4399d95f2085684fc09c12196" kindref="member">isVirtualDisabled_t</ref><sp/>=<sp/>decltype(std::declval&lt;const<sp/>U&gt;().isVirtualDisabled());</highlight></codeline>
<codeline lineno="76" refid="structcheckpoint_1_1_serializer_traits_1ac590c05fc0b7df1473c2bec826227c78" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1ac590c05fc0b7df1473c2bec826227c78" kindref="member">has_isVirtualDisabled</ref><sp/>=<sp/><ref refid="namespacedetection_1afb970b23e39cfecb33449d40242c49ff" kindref="member">detection::is_detected_convertible&lt;bool, isVirtualDisabled_t, T&gt;</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="79" refid="structcheckpoint_1_1_serializer_traits_1ac8e1715e588932dc8e4dc14130b6ca9e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1ac8e1715e588932dc8e4dc14130b6ca9e" kindref="member">setVirtualDisabled_t</ref><sp/>=<sp/>decltype(std::declval&lt;U&gt;().setVirtualDisabled(std::declval&lt;bool&gt;()));</highlight></codeline>
<codeline lineno="80" refid="structcheckpoint_1_1_serializer_traits_1adba95a75d3573b6d8d11bf9d2300a9ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1adba95a75d3573b6d8d11bf9d2300a9ca" kindref="member">has_setVirtualDisabled</ref><sp/>=<sp/><ref refid="namespacedetection_1afb970b23e39cfecb33449d40242c49ff" kindref="member">detection::is_detected_convertible&lt;bool, setVirtualDisabled_t, T&gt;</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>be<sp/>a<sp/>valid<sp/>serializer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structcheckpoint_1_1_serializer_traits_1a8818dc68069bcf67d4d2b43a9cd57026" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializer_traits_1a8818dc68069bcf67d4d2b43a9cd57026" kindref="member">is_valid_serializer</ref><sp/>=</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetection_1_1detector_1a6d7d0e1bdf5903db9edbe448edccf83b" kindref="member">has_contiguousBytes::value</ref><sp/>and</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>has_isSizing::value<sp/>and</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>has_isPacking::value<sp/>and</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>has_isUnpacking::value<sp/>and</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>has_isVirtualDisabled::value<sp/>and</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>has_setVirtualDisabled::value;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>checkpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_CHECKPOINT_TRAITS_CHECKPOINT_TRAITS_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="lib/checkpoint/src/checkpoint/traits/checkpoint_traits.h"/>
  </compounddef>
</doxygen>
