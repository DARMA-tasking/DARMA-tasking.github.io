<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1serialization_1_1_byte_copyable_traits" kind="struct" language="C++" prot="public">
    <compoundname>vt::serialization::ByteCopyableTraits</compoundname>
    <includes refid="mock__serializer_8h" local="no">mock_serializer.h</includes>
    <templateparamlist>
      <param>
        <type>typename BufferT</type>
      </param>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_byte_copyable_traits_1ab06bcaa790f4a227936f6d6854d2bf41" prot="public" static="no">
        <type>std::unique_ptr&lt; BufferT &gt;</type>
        <definition>using vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::BufferPtrType =  std::unique_ptr&lt;BufferT&gt;</definition>
        <argsstring></argsstring>
        <name>BufferPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="172" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_byte_copyable_traits_1a3113636143fcf9ee209752353f9fec3a" prot="public" static="no">
        <type>typename std::enable_if&lt; <ref refid="structvt_1_1serialization_1_1_serialization_traits" kindref="compound">SerializationTraits</ref>&lt; U &gt;::is_byte_cp, T &gt;::type</type>
        <definition>using vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::isByteCopyType =  typename std::enable_if&lt;SerializationTraits&lt;U&gt;::is_byte_cp, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isByteCopyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="175" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_byte_copyable_traits_1a99c4b667bd99e2cdaad0e0be5b21af50" prot="public" static="no">
        <type>typename std::enable_if&lt; <ref refid="structvt_1_1serialization_1_1_serialization_traits" kindref="compound">SerializationTraits</ref>&lt; U &gt;::is_vec, T &gt;::type</type>
        <definition>using vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::isVecType =  typename std::enable_if&lt;SerializationTraits&lt;U&gt;::is_vec, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isVecType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="179" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_byte_copyable_traits_1ac6700c34f3c9642a029d3d3857811f59" prot="public" static="no">
        <type>typename std::enable_if&lt; <ref refid="structvt_1_1serialization_1_1_serialization_traits" kindref="compound">SerializationTraits</ref>&lt; U &gt;::is_tuple, T &gt;::type</type>
        <definition>using vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::isTupleType =  typename std::enable_if&lt;SerializationTraits&lt;U&gt;::is_tuple, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isTupleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="183" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1serialization_1_1_byte_copyable_traits_1a9cbf2126e3b503513822b5f4f3dfa136" prot="public" static="no">
        <type>typename std::enable_if&lt; <ref refid="structvt_1_1serialization_1_1_serialization_traits" kindref="compound">SerializationTraits</ref>&lt; U &gt;::is_not_byte_cp, T &gt;::type</type>
        <definition>using vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::isNotByteCopyType =  typename std::enable_if&lt;SerializationTraits&lt;U&gt;::is_not_byte_cp, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isNotByteCopyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="187" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1serialization_1_1_byte_copyable_traits_1aaad683f9cdcd56e768a19864c22d1020" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Vs</declname>
            <defname>Vs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::tupleStaticCheck</definition>
        <argsstring>(std::tuple&lt; Vs... &gt; &amp;tup)</argsstring>
        <name>tupleStaticCheck</name>
        <param>
          <type>std::tuple&lt; Vs... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="191" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1serialization_1_1_byte_copyable_traits_1acff1719ea2b2291b4ef73f03a6edc9c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ab06bcaa790f4a227936f6d6854d2bf41" kindref="member">BufferPtrType</ref></type>
        <definition>static BufferPtrType vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::apply</definition>
        <argsstring>(T *val, SizeType num, isByteCopyType&lt; U &gt; *x=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a3113636143fcf9ee209752353f9fec3a" kindref="member">isByteCopyType</ref>&lt; U &gt; *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="202" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1serialization_1_1_byte_copyable_traits_1ad7f6f30f399a7021bb6e3895e955b503" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ab06bcaa790f4a227936f6d6854d2bf41" kindref="member">BufferPtrType</ref></type>
        <definition>static BufferPtrType vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::apply</definition>
        <argsstring>(T *val, SizeType num, isVecType&lt; U &gt; *x=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a99c4b667bd99e2cdaad0e0be5b21af50" kindref="member">isVecType</ref>&lt; U &gt; *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="208" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1serialization_1_1_byte_copyable_traits_1a05047eccf3aa8afadaac31783cd74b86" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ab06bcaa790f4a227936f6d6854d2bf41" kindref="member">BufferPtrType</ref></type>
        <definition>static BufferPtrType vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::apply</definition>
        <argsstring>(T *val, SizeType num, isTupleType&lt; U &gt; *x=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ac6700c34f3c9642a029d3d3857811f59" kindref="member">isTupleType</ref>&lt; U &gt; *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="218" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1serialization_1_1_byte_copyable_traits_1a7f61ed0ebf3f22db6f9aa8d4e3dd28ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ab06bcaa790f4a227936f6d6854d2bf41" kindref="member">BufferPtrType</ref></type>
        <definition>static BufferPtrType vt::serialization::ByteCopyableTraits&lt; BufferT, T &gt;::apply</definition>
        <argsstring>(T *val, SizeType num, isNotByteCopyType&lt; U &gt; *x=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a9cbf2126e3b503513822b5f4f3dfa136" kindref="member">isNotByteCopyType</ref>&lt; U &gt; *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/serialization/mock_serializer.h" line="224" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="224" bodyend="226"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/serialization/mock_serializer.h" line="171" column="1" bodyfile="src/vt/serialization/mock_serializer.h" bodystart="171" bodyend="227"/>
    <listofallmembers>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1acff1719ea2b2291b4ef73f03a6edc9c4" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>apply</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ad7f6f30f399a7021bb6e3895e955b503" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>apply</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a05047eccf3aa8afadaac31783cd74b86" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>apply</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a7f61ed0ebf3f22db6f9aa8d4e3dd28ca" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>apply</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ab06bcaa790f4a227936f6d6854d2bf41" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>BufferPtrType</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a3113636143fcf9ee209752353f9fec3a" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>isByteCopyType</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a9cbf2126e3b503513822b5f4f3dfa136" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>isNotByteCopyType</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1ac6700c34f3c9642a029d3d3857811f59" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>isTupleType</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1a99c4b667bd99e2cdaad0e0be5b21af50" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>isVecType</name></member>
      <member refid="structvt_1_1serialization_1_1_byte_copyable_traits_1aaad683f9cdcd56e768a19864c22d1020" prot="public" virt="non-virtual"><scope>vt::serialization::ByteCopyableTraits</scope><name>tupleStaticCheck</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
