<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="invoke_8h" kind="file" language="C++">
    <compoundname>invoke.h</compoundname>
    <includes refid="config_8h" local="yes">vt/config.h</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="205724">
        <label>vt/configs/features/features_featureswitch.h</label>
        <link refid="features__featureswitch_8h"/>
      </node>
      <node id="205731">
        <label>functional</label>
      </node>
      <node id="205736">
        <label>vt/epoch/epoch_impl_type.h</label>
        <link refid="epoch__impl__type_8h"/>
        <childnode refid="205723" relation="include">
        </childnode>
        <childnode refid="205737" relation="include">
        </childnode>
      </node>
      <node id="205742">
        <label>vt/configs/debug/debug_colorize.h</label>
        <link refid="debug__colorize_8h"/>
        <childnode refid="205743" relation="include">
        </childnode>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
      </node>
      <node id="205743">
        <label>vt/configs/arguments/app_config.h</label>
        <link refid="app__config_8h"/>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205745" relation="include">
        </childnode>
      </node>
      <node id="205723">
        <label>cstdint</label>
      </node>
      <node id="205764">
        <label>vt/configs/error/assert_out_info.impl.h</label>
        <link refid="assert__out__info_8impl_8h"/>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205758" relation="include">
        </childnode>
        <childnode refid="205763" relation="include">
        </childnode>
        <childnode refid="205765" relation="include">
        </childnode>
        <childnode refid="205742" relation="include">
        </childnode>
        <childnode refid="205762" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205767" relation="include">
        </childnode>
        <childnode refid="205748" relation="include">
        </childnode>
      </node>
      <node id="205738">
        <label>vt/epoch/epoch_type.h</label>
        <link refid="epoch__type_8h"/>
        <childnode refid="205739" relation="include">
        </childnode>
        <childnode refid="205736" relation="include">
        </childnode>
        <childnode refid="205741" relation="include">
        </childnode>
      </node>
      <node id="205748">
        <label>fmt-vt/core.h</label>
      </node>
      <node id="205762">
        <label>cassert</label>
      </node>
      <node id="205759">
        <label>vt/configs/error/assert_out.impl.h</label>
        <link refid="assert__out_8impl_8h"/>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205758" relation="include">
        </childnode>
        <childnode refid="205760" relation="include">
        </childnode>
        <childnode refid="205742" relation="include">
        </childnode>
        <childnode refid="205753" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205762" relation="include">
        </childnode>
        <childnode refid="205748" relation="include">
        </childnode>
      </node>
      <node id="205734">
        <label>vt/configs/types/types_size.h</label>
        <link refid="types__size_8h"/>
        <childnode refid="205735" relation="include">
        </childnode>
        <childnode refid="205736" relation="include">
        </childnode>
      </node>
      <node id="205752">
        <label>vt/configs/error/common.h</label>
        <link refid="src_2vt_2configs_2error_2common_8h"/>
        <childnode refid="205730" relation="include">
        </childnode>
      </node>
      <node id="205735">
        <label>vt/utils/bits/bits_counter.h</label>
        <link refid="bits__counter_8h"/>
        <childnode refid="205730" relation="include">
        </childnode>
      </node>
      <node id="205749">
        <label>vt/configs/error/error_headers.h</label>
        <link refid="error__headers_8h"/>
        <childnode refid="205750" relation="include">
        </childnode>
        <childnode refid="205754" relation="include">
        </childnode>
        <childnode refid="205757" relation="include">
        </childnode>
      </node>
      <node id="205744">
        <label>string</label>
      </node>
      <node id="205765">
        <label>vt/configs/error/keyval_printer.h</label>
        <link refid="keyval__printer_8h"/>
        <childnode refid="205761" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205745" relation="include">
        </childnode>
        <childnode refid="205766" relation="include">
        </childnode>
      </node>
      <node id="205766">
        <label>vt/configs/error/keyval_printer.impl.h</label>
        <link refid="keyval__printer_8impl_8h"/>
        <childnode refid="205765" relation="include">
        </childnode>
        <childnode refid="205742" relation="include">
        </childnode>
        <childnode refid="205761" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205745" relation="include">
        </childnode>
        <childnode refid="205748" relation="include">
        </childnode>
      </node>
      <node id="205741">
        <label>fmt-vt/format.h</label>
      </node>
      <node id="205722">
        <label>vt/configs/debug/debug_config.h</label>
        <link refid="debug__config_8h"/>
        <childnode refid="205723" relation="include">
        </childnode>
        <childnode refid="205724" relation="include">
        </childnode>
        <childnode refid="205725" relation="include">
        </childnode>
        <childnode refid="205727" relation="include">
        </childnode>
      </node>
      <node id="205737">
        <label>vt/configs/types/types_sentinels.h</label>
        <link refid="types__sentinels_8h"/>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205732" relation="include">
        </childnode>
      </node>
      <node id="205721">
        <label>vt/configs/debug/debug_masterconfig.h</label>
        <link refid="debug__masterconfig_8h"/>
        <childnode refid="205722" relation="include">
        </childnode>
        <childnode refid="205728" relation="include">
        </childnode>
      </node>
      <node id="205751">
        <label>vt/collective/basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="205744" relation="include">
        </childnode>
      </node>
      <node id="205730">
        <label>vt/configs/types/types_type.h</label>
        <link refid="types__type_8h"/>
        <childnode refid="205723" relation="include">
        </childnode>
        <childnode refid="205731" relation="include">
        </childnode>
      </node>
      <node id="205755">
        <label>vt/configs/error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="205729" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205756" relation="include">
        </childnode>
      </node>
      <node id="205746">
        <label>vt/configs/debug/debug_var_unused.h</label>
        <link refid="debug__var__unused_8h"/>
        <childnode refid="205747" relation="include">
        </childnode>
      </node>
      <node id="205750">
        <label>vt/configs/error/soft_error.h</label>
        <link refid="soft__error_8h"/>
        <childnode refid="205751" relation="include">
        </childnode>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205753" relation="include">
        </childnode>
        <childnode refid="205725" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205748" relation="include">
        </childnode>
      </node>
      <node id="205733">
        <label>tuple</label>
      </node>
      <node id="205739">
        <label>vt/utils/strong/strong_type.h</label>
        <link refid="strong__type_8h"/>
        <childnode refid="205731" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
      </node>
      <node id="205728">
        <label>vt/configs/debug/debug_print.h</label>
        <link refid="debug__print_8h"/>
        <childnode refid="205729" relation="include">
        </childnode>
        <childnode refid="205722" relation="include">
        </childnode>
        <childnode refid="205742" relation="include">
        </childnode>
        <childnode refid="205746" relation="include">
        </childnode>
        <childnode refid="205748" relation="include">
        </childnode>
      </node>
      <node id="205745">
        <label>vector</label>
      </node>
      <node id="205747">
        <label>utility</label>
      </node>
      <node id="205767">
        <label>sstream</label>
      </node>
      <node id="205726">
        <label>vt/cmake_config.h</label>
      </node>
      <node id="205760">
        <label>vt/configs/error/stack_out.h</label>
        <link refid="stack__out_8h"/>
        <childnode refid="205761" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205745" relation="include">
        </childnode>
      </node>
      <node id="205725">
        <label>vt/configs/features/features_defines.h</label>
        <link refid="features__defines_8h"/>
        <childnode refid="205726" relation="include">
        </childnode>
      </node>
      <node id="205761">
        <label>cstdlib</label>
      </node>
      <node id="205754">
        <label>vt/configs/error/hard_error.h</label>
        <link refid="hard__error_8h"/>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205755" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
      </node>
      <node id="205729">
        <label>vt/configs/types/types_headers.h</label>
        <link refid="types__headers_8h"/>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205732" relation="include">
        </childnode>
        <childnode refid="205734" relation="include">
        </childnode>
        <childnode refid="205737" relation="include">
        </childnode>
        <childnode refid="205738" relation="include">
        </childnode>
      </node>
      <node id="205758">
        <label>vt/configs/error/assert_out.h</label>
        <link refid="assert__out_8h"/>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205759" relation="include">
        </childnode>
      </node>
      <node id="205732">
        <label>vt/configs/types/types_rdma.h</label>
        <link refid="types__rdma_8h"/>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205723" relation="include">
        </childnode>
        <childnode refid="205731" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
      </node>
      <node id="205740">
        <label>type_traits</label>
      </node>
      <node id="205753">
        <label>vt/configs/error/pretty_print_message.h</label>
        <link refid="pretty__print__message_8h"/>
        <childnode refid="205729" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
      </node>
      <node id="205719">
        <label>src/vt/runnable/invoke.h</label>
        <link refid="invoke_8h"/>
        <childnode refid="205720" relation="include">
        </childnode>
        <childnode refid="205747" relation="include">
        </childnode>
      </node>
      <node id="205720">
        <label>vt/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="205721" relation="include">
        </childnode>
        <childnode refid="205729" relation="include">
        </childnode>
        <childnode refid="205749" relation="include">
        </childnode>
      </node>
      <node id="205727">
        <label>vt/configs/debug/debug_printconst.h</label>
        <link refid="debug__printconst_8h"/>
      </node>
      <node id="205757">
        <label>vt/configs/error/config_assert.h</label>
        <link refid="config__assert_8h"/>
        <childnode refid="205758" relation="include">
        </childnode>
        <childnode refid="205763" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
      </node>
      <node id="205763">
        <label>vt/configs/error/assert_out_info.h</label>
        <link refid="assert__out__info_8h"/>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205730" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205764" relation="include">
        </childnode>
      </node>
      <node id="205756">
        <label>vt/configs/error/error.impl.h</label>
        <link refid="error_8impl_8h"/>
        <childnode refid="205729" relation="include">
        </childnode>
        <childnode refid="205722" relation="include">
        </childnode>
        <childnode refid="205752" relation="include">
        </childnode>
        <childnode refid="205755" relation="include">
        </childnode>
        <childnode refid="205753" relation="include">
        </childnode>
        <childnode refid="205751" relation="include">
        </childnode>
        <childnode refid="205744" relation="include">
        </childnode>
        <childnode refid="205733" relation="include">
        </childnode>
        <childnode refid="205740" relation="include">
        </childnode>
        <childnode refid="205748" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1runnable">vt::runnable</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invoke.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt<sp/>=&gt;<sp/>Virtual<sp/>Transport</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019-2021<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_VT_RUNNABLE_INVOKE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_VT_RUNNABLE_INVOKE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">vt/config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>vt_check_enabled(trace_enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="demangle_8h" kindref="compound">vt/utils/demangle/demangle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="function__ret__check_8h" kindref="compound">vt/utils/static_checks/function_ret_check.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trace__registry_8h" kindref="compound">vt/trace/trace_registry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespacevt_1_1runnable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt" kindref="compound">vt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">runnable<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>vt_check_enabled(trace_enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionType,<sp/>FunctionType<sp/>f&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>CreateEventTypeCStyleFunc()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TE<sp/>=<sp/><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract" kindref="compound">vt::util::demangle::TemplateExtract</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DU<sp/>=<sp/><ref refid="structvt_1_1util_1_1demangle_1_1_demangler_utils" kindref="compound">vt::util::demangle::DemanglerUtils</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ns<sp/>=<sp/>TE::getNamespace(TE::getValueName&lt;std::decay_t&lt;FunctionType&gt;,<sp/>f&gt;());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ns.empty())</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ns<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(none)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DU::removeSpaces(ns);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Class&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>CreateEventTypeMemberFunc()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TE<sp/>=<sp/><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract" kindref="compound">vt::util::demangle::TemplateExtract</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DU<sp/>=<sp/><ref refid="structvt_1_1util_1_1demangle_1_1_demangler_utils" kindref="compound">vt::util::demangle::DemanglerUtils</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>typeName<sp/>=<sp/>TE::getTypeName&lt;std::decay_t&lt;Class&gt;&gt;();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeName.empty())</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>typeName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(none)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DU::removeSpaces(typeName);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionType,<sp/>FunctionType<sp/>f,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>CreateEventName()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TE<sp/>=<sp/><ref refid="structvt_1_1util_1_1demangle_1_1_template_extract" kindref="compound">vt::util::demangle::TemplateExtract</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DU<sp/>=<sp/><ref refid="structvt_1_1util_1_1demangle_1_1_demangler_utils" kindref="compound">vt::util::demangle::DemanglerUtils</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>arg_types<sp/>=<sp/>{TE::getTypeName&lt;Args&gt;()...};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>argsV<sp/>=<sp/>DU::join(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,<sp/>arg_types);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueName<sp/>=<sp/>TE::getValueName&lt;FunctionType,<sp/>f&gt;();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>barename<sp/>=<sp/>TE::getBarename(valueName);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DU::removeSpaces(barename<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>argsV<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>f&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CallableWrapper<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1rdma_1ac848e1d9da43db6294bd06f83e5d3946" kindref="member">Type</ref><sp/>=<sp/>decltype(f);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetEventTypeName()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_member_function_pointer_v&lt;Type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateEventTypeMemberFunc&lt;util::FunctionWrapper&lt;Type&gt;&gt;();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateEventTypeCStyleFunc&lt;Type,<sp/>f&gt;();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>GetEventName()<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateEventName&lt;Type,<sp/>f&gt;();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1trace_1a3c14050715ba9eceaeff51fb3de64f2f" kindref="member">trace::TraceEntryIDType</ref><sp/>GetTraceID()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1trace_1_1_trace_registry_1a557118b7661378a6c74ed693b87c3d83" kindref="member">trace::TraceRegistry::registerEventHashed</ref>(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetEventTypeName(),<sp/>GetEventName());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ScopedInvokeEvent<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>ScopedInvokeEvent()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trace_id<sp/>=<sp/>CallableWrapper&lt;f&gt;::GetTraceID();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trace_event<sp/>=<sp/>theTrace()-&gt;messageCreation(trace_id,<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_node<sp/>=<sp/><ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">theContext</ref>()-&gt;<ref refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" kindref="member">getNode</ref>();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>tag_<sp/>=<sp/>theTrace()-&gt;beginProcessing(</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trace_id,<sp/>0,<sp/>trace_event,<sp/>from_node,<sp/><ref refid="namespacevt_1_1timing_1adb71f74fee337dab5a317e58e7d35b1d" kindref="member">timing::getCurrentTime</ref>()</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>~ScopedInvokeEvent()<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>theTrace()-&gt;endProcessing(tag_,<sp/><ref refid="namespacevt_1_1timing_1adb71f74fee337dab5a317e58e7d35b1d" kindref="member">timing::getCurrentTime</ref>());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>theTrace()-&gt;messageCreation(CallableWrapper&lt;f&gt;::GetTraceID(),<sp/>0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1trace_1_1_trace_processing_tag" kindref="compound">trace::TraceProcessingTag</ref><sp/>tag_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>vt_check_enabled(trace_enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="147" refid="namespacevt_1_1runnable_1a004d4b72c158a64f01404ac5dac24ec6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1runnable_1a004d4b72c158a64f01404ac5dac24ec6" kindref="member">invoke</ref>(Args&amp;&amp;...<sp/>args){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>vt_check_enabled(trace_enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedInvokeEvent&lt;f&gt;<sp/>e;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1runnable_1a767f5673027ff59a60d513209691f5ed" kindref="member">std::invoke</ref>(std::forward&lt;decltype(f)&gt;(f),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Callable,<sp/>Callable<sp/>f,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="156" refid="namespacevt_1_1runnable_1a767f5673027ff59a60d513209691f5ed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1runnable_1a004d4b72c158a64f01404ac5dac24ec6" kindref="member">invoke</ref>(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invoke&lt;f&gt;(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vt::runnable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_VT_RUNNABLE_INVOKE_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/vt/runnable/invoke.h"/>
  </compounddef>
</doxygen>
