<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1term_1_1interval_1_1_interval" kind="struct" language="C++" prot="public">
    <compoundname>vt::term::interval::Interval</compoundname>
    <includes refid="interval_8h" local="no">interval.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>DomainT</declname>
        <defname>DomainT</defname>
      </param>
      <param>
        <type>DomainT</type>
        <declname>sentinel</declname>
        <defname>sentinel</defname>
        <defval>DomainT()</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3" prot="public" static="no">
        <name>PositionEnum</name>
        <enumvalue id="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3a934c79ed6ebd50dae0a3f811f4627d05" prot="public">
          <name>TangentLeft</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3ad2a5d0f2a4b974799f671c29ffc6449c" prot="public">
          <name>NotTangent</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3adca1cfdff00036253f1f3573fc12b98f" prot="public">
          <name>TangentRight</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="105" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1interval_1_1_interval_1a183b53c7344a9aa51c026dfe71b57ad4" prot="public" static="no">
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref>&lt; DomainT, sentinel &gt;</type>
        <definition>using vt::term::interval::Interval&lt; DomainT, sentinel &gt;::IntervalType =  Interval&lt;DomainT, sentinel&gt;</definition>
        <argsstring></argsstring>
        <name>IntervalType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="59" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1term_1_1interval_1_1_interval_1a237ccc9805d839c82151945ad80b796c" prot="public" static="no">
        <type>DomainT</type>
        <definition>using vt::term::interval::Interval&lt; DomainT, sentinel &gt;::DomainType =  DomainT</definition>
        <argsstring></argsstring>
        <name>DomainType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="60" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1term_1_1interval_1_1_interval_1a12aa2c05e55f64d6b83f66fbeabddf47" prot="private" static="no" mutable="no">
        <type>DomainT</type>
        <definition>DomainT vt::term::interval::Interval&lt; DomainT, sentinel &gt;::lb_</definition>
        <argsstring></argsstring>
        <name>lb_</name>
        <initializer>= sentinel</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="199" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1term_1_1interval_1_1_interval_1a74c71b9f525b0f282187490b2cbe3494" prot="private" static="no" mutable="no">
        <type>DomainT</type>
        <definition>DomainT vt::term::interval::Interval&lt; DomainT, sentinel &gt;::ub_</definition>
        <argsstring></argsstring>
        <name>ub_</name>
        <initializer>= sentinel</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="200" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1aa92ceaec8b9d5448c67b8aa39606c91c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::interval::Interval&lt; DomainT, sentinel &gt;::Interval</definition>
        <argsstring>()=default</argsstring>
        <name>Interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a75b627acf7c30e4bb48b49ea323842f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::interval::Interval&lt; DomainT, sentinel &gt;::Interval</definition>
        <argsstring>(Interval const &amp;)=default</argsstring>
        <name>Interval</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1acf0d2f1a988e5afff0a9414ff2340f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::term::interval::Interval&lt; DomainT, sentinel &gt;::Interval</definition>
        <argsstring>(Interval &amp;&amp;)=default</argsstring>
        <name>Interval</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a4077994c7d471be55c10ebbe222f6e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref> &amp;</type>
        <definition>Interval&amp; vt::term::interval::Interval&lt; DomainT, sentinel &gt;::operator=</definition>
        <argsstring>(Interval const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1ac4d9f09fc40777980cb6b7efc3bc2d0d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::term::interval::Interval&lt; DomainT, sentinel &gt;::Interval</definition>
        <argsstring>(DomainT const &amp;val)</argsstring>
        <name>Interval</name>
        <param>
          <type>DomainT const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="67" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a9e1d8a552f0f204c9e391ac47cca7b1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::term::interval::Interval&lt; DomainT, sentinel &gt;::Interval</definition>
        <argsstring>(DomainT const &amp;lb, DomainT const &amp;ub)</argsstring>
        <name>Interval</name>
        <param>
          <type>DomainT const &amp;</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>DomainT const &amp;</type>
          <declname>ub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="68" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a36da58c3174932da9889d973c2940789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DomainT</type>
        <definition>DomainT vt::term::interval::Interval&lt; DomainT, sentinel &gt;::lower</definition>
        <argsstring>() const</argsstring>
        <name>lower</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="71" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1acbe552f15a1f22a89fa43bcba34fe27f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DomainT</type>
        <definition>DomainT vt::term::interval::Interval&lt; DomainT, sentinel &gt;::upper</definition>
        <argsstring>() const</argsstring>
        <name>upper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="72" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1af3222f61f45e1e5a7fdd5a127e300289" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DomainT</type>
        <definition>DomainT vt::term::interval::Interval&lt; DomainT, sentinel &gt;::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="73" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a563160f1b6e405bb9d11255a0b80d187" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::interval::Interval&lt; DomainT, sentinel &gt;::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="74" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1aff4a5032ac979adcc393022e77acffb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DomainT</type>
        <definition>DomainT vt::term::interval::Interval&lt; DomainT, sentinel &gt;::get</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>get</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="76" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1af77c4efbf790b76fcb92bb5db65299f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::interval::Interval&lt; DomainT, sentinel &gt;::setUpper</definition>
        <argsstring>(DomainT const &amp;val)</argsstring>
        <name>setUpper</name>
        <param>
          <type>DomainT const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="84" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a23bacd3eae47ae66f9cf22c1a2fa2567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::interval::Interval&lt; DomainT, sentinel &gt;::setLower</definition>
        <argsstring>(DomainT const &amp;val)</argsstring>
        <name>setLower</name>
        <param>
          <type>DomainT const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="90" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1ad35081ddb8a26d02d9e1bbae722da2ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::interval::Interval&lt; DomainT, sentinel &gt;::set</definition>
        <argsstring>(DomainT const &amp;lo, DomainT const &amp;hi)</argsstring>
        <name>set</name>
        <param>
          <type>DomainT const &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>DomainT const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="96" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a7464cff4f0697f02604868fcf60a8132" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::interval::Interval&lt; DomainT, sentinel &gt;::contains</definition>
        <argsstring>(DomainT const &amp;val) const</argsstring>
        <name>contains</name>
        <param>
          <type>DomainT const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="101" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a5558f4e833a84bed506f4fdc3a386071" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3" kindref="member">PositionEnum</ref></type>
        <definition>PositionEnum vt::term::interval::Interval&lt; DomainT, sentinel &gt;::tangent</definition>
        <argsstring>(IntervalType const &amp;i, DomainT gap=1) const</argsstring>
        <name>tangent</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_1a183b53c7344a9aa51c026dfe71b57ad4" kindref="member">IntervalType</ref> const &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>DomainT</type>
          <declname>gap</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="122" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="122" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1ab39108ee4b0837f74bcbc8fe456dedac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::term::interval::Interval&lt; DomainT, sentinel &gt;::join</definition>
        <argsstring>(IntervalType const &amp;i, PositionEnum pos)</argsstring>
        <name>join</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_1a183b53c7344a9aa51c026dfe71b57ad4" kindref="member">IntervalType</ref> const &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3" kindref="member">PositionEnum</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="132" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="132" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1ae176079522ba7c58e69a55d51f80a4c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::term::interval::Interval&lt; DomainT, sentinel &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="148" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1a16520378af9e1732749f52b8016980b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::interval::Interval&lt; DomainT, sentinel &gt;::operator==</definition>
        <argsstring>(IntervalType const &amp;i) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_1a183b53c7344a9aa51c026dfe71b57ad4" kindref="member">IntervalType</ref> const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="152" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1afedba25db2f425af176d3d2c9219a8fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::term::interval::Interval&lt; DomainT, sentinel &gt;::operator!=</definition>
        <argsstring>(IntervalType const &amp;i) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval_1a183b53c7344a9aa51c026dfe71b57ad4" kindref="member">IntervalType</ref> const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="153" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="153" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1aa9ce87dd0605710869be8d9c12547d2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntT</type>
          </param>
          <param>
            <type>typename IntU</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool vt::term::interval::Interval&lt; DomainT, sentinel &gt;::intersects</definition>
        <argsstring>(IntT &amp;&amp;i1, IntU &amp;&amp;i2)</argsstring>
        <name>intersects</name>
        <param>
          <type>IntT &amp;&amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>IntU &amp;&amp;</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="169" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1term_1_1interval_1_1_interval_1aeceb02f8e69baada4cc1d47bdefc851f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntT</type>
          </param>
          <param>
            <type>typename IntU</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool vt::term::interval::Interval&lt; DomainT, sentinel &gt;::less</definition>
        <argsstring>(IntT &amp;&amp;i1, IntU &amp;&amp;i2)</argsstring>
        <name>less</name>
        <param>
          <type>IntT &amp;&amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>IntU &amp;&amp;</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="183" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="183" bodyend="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1term_1_1interval_1_1_interval_1ac749dc791f49126328a9a8c69e282e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DomainU</type>
          </param>
          <param>
            <type>DomainT</type>
            <declname>sentinel2</declname>
            <defname>sentinel2</defname>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(Interval&lt; DomainU, sentinel2 &gt; const &amp;i1, Interval&lt; DomainU, sentinel2 &gt; const &amp;i2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref>&lt; DomainU, sentinel2 &gt; const &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref>&lt; DomainU, sentinel2 &gt; const &amp;</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1term_1_1interval_1_1_interval_1a764fa3f5ff6c49067c4c36a35b498c8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>DomainT</type>
            <declname>v</declname>
            <defname>v</defname>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Interval&lt; T, v &gt; const &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1term_1_1interval_1_1_interval" kindref="compound">Interval</ref>&lt; T, v &gt; const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/termination/interval/interval.h" line="193" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="193" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/termination/interval/interval.h" line="58" column="1" bodyfile="src/vt/termination/interval/interval.h" bodystart="58" bodyend="201"/>
    <listofallmembers>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a7464cff4f0697f02604868fcf60a8132" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>contains</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a237ccc9805d839c82151945ad80b796c" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>DomainType</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1aff4a5032ac979adcc393022e77acffb6" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>get</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1aa9ce87dd0605710869be8d9c12547d2c" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>intersects</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1aa92ceaec8b9d5448c67b8aa39606c91c" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>Interval</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a75b627acf7c30e4bb48b49ea323842f3" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>Interval</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1acf0d2f1a988e5afff0a9414ff2340f09" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>Interval</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1ac4d9f09fc40777980cb6b7efc3bc2d0d" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>Interval</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a9e1d8a552f0f204c9e391ac47cca7b1b" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>Interval</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a183b53c7344a9aa51c026dfe71b57ad4" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>IntervalType</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1ab39108ee4b0837f74bcbc8fe456dedac" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>join</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a12aa2c05e55f64d6b83f66fbeabddf47" prot="private" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>lb_</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1aeceb02f8e69baada4cc1d47bdefc851f" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>less</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a36da58c3174932da9889d973c2940789" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>lower</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1afedba25db2f425af176d3d2c9219a8fe" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>operator!=</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1ac749dc791f49126328a9a8c69e282e5f" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>operator&lt;</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a764fa3f5ff6c49067c4c36a35b498c8b" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>operator&lt;&lt;</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a4077994c7d471be55c10ebbe222f6e58" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>operator=</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a16520378af9e1732749f52b8016980b4" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>operator==</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1adfdde0c1b12f536189432b168f6df6b3" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>PositionEnum</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1ae176079522ba7c58e69a55d51f80a4c9" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>serialize</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1ad35081ddb8a26d02d9e1bbae722da2ba" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>set</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a23bacd3eae47ae66f9cf22c1a2fa2567" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>setLower</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1af77c4efbf790b76fcb92bb5db65299f5" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>setUpper</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a5558f4e833a84bed506f4fdc3a386071" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>tangent</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a74c71b9f525b0f282187490b2cbe3494" prot="private" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>ub_</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1acbe552f15a1f22a89fa43bcba34fe27f" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>upper</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1a563160f1b6e405bb9d11255a0b80d187" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>valid</name></member>
      <member refid="structvt_1_1term_1_1interval_1_1_interval_1af3222f61f45e1e5a7fdd5a127e300289" prot="public" virt="non-virtual"><scope>vt::term::interval::Interval</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
