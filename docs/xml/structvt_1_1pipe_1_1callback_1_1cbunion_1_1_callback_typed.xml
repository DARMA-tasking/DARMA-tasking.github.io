<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::callback::cbunion::CallbackTyped</compoundname>
    <basecompoundref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" prot="public" virt="non-virtual">vt::pipe::callback::cbunion::CallbackRawBaseSingle</basecompoundref>
    <includes refid="cb__raw__base_8h" local="no">cb_raw_base.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>MsgT</declname>
        <defname>MsgT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afeaa5f774eee46269e64e566b8239c22" prot="public" static="no">
        <type><ref refid="namespacevt_1_1pipe_1_1signal_1acbe257d1ae44f20fa9fd9b6ed3057caf" kindref="member">signal::SigVoidType</ref></type>
        <definition>using vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::VoidSigType =  signal::SigVoidType</definition>
        <argsstring></argsstring>
        <name>VoidSigType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="151" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa23761e1f62f24201d28eed0e85322ac" prot="public" static="no">
        <type>std::enable_if_t&lt; std::is_same&lt; T, <ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afeaa5f774eee46269e64e566b8239c22" kindref="member">VoidSigType</ref> &gt;::value, U &gt;</type>
        <definition>using vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::IsVoidType =  std::enable_if_t&lt;std::is_same&lt;T,VoidSigType&gt;::value,U&gt;</definition>
        <argsstring></argsstring>
        <name>IsVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="153" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a57e15e61b171c50bff2e7a0dd9078f46" prot="public" static="no">
        <type>std::enable_if_t&lt;!std::is_same&lt; T, <ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afeaa5f774eee46269e64e566b8239c22" kindref="member">VoidSigType</ref> &gt;::value, U &gt;</type>
        <definition>using vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::IsNotVoidType =  std::enable_if_t&lt;!std::is_same&lt;T,VoidSigType&gt;::value,U&gt;</definition>
        <argsstring></argsstring>
        <name>IsNotVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="155" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa4f66e11846b531708eb4c51eaca43fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>()=default</argsstring>
        <name>CallbackTyped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a059f829db7b3d792e7ea78f1a2ce24ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(CallbackTyped const &amp;)=default</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">CallbackTyped</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afc499cbc15b193928e02f5ed5c4a98ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(CallbackTyped &amp;&amp;)=default</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">CallbackTyped</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a001cf806e3cd6fec3e07bb698901bacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">CallbackTyped</ref> &amp;</type>
        <definition>CallbackTyped&amp; vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::operator=</definition>
        <argsstring>(CallbackTyped const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">CallbackTyped</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a88901f3301dfcebd7e7210185c1a344f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawSendMsgTagType, PipeType const &amp;in_pipe, HandlerType const &amp;in_handler, NodeType const &amp;in_node)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawSendMsgTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>in_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="163" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="163" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1abee1271009ec78a7f278a8d43a397cc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawBcastMsgTagType, PipeType const &amp;in_pipe, HandlerType const &amp;in_handler, bool const &amp;in_inc)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawBcastMsgTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>in_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="168" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1ac017bd9d99b889d882acb7e9847d0378" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawAnonTagType, PipeType const &amp;in_pipe)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawAnonTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="173" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1ad455eeb861c8abf6bfba2267dd389a7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawSendColMsgTagType, PipeType const &amp;in_pipe)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawSendColMsgTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="176" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a4b5c8df6aa46634bde0318f7b8017123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawBcastColMsgTagType, PipeType const &amp;in_pipe)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawBcastColMsgTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="179" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1af5f0576f3858b3c81ebe3c4a28d3eca9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawBcastColDirTagType, PipeType const &amp;in_pipe, HandlerType const &amp;in_handler, AutoHandlerType const &amp;in_vrt, bool const &amp;in_member, VirtualProxyType const &amp;in_proxy)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawBcastColDirTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a734a9c83099de5bc1cd85f9da8dba7bb" kindref="member">AutoHandlerType</ref> const &amp;</type>
          <declname>in_vrt</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>in_member</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a1b417dd5d684f045bb58a0ede70045ac" kindref="member">VirtualProxyType</ref> const &amp;</type>
          <declname>in_proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="182" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="182" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a9d258a1b9db65ef027a0e1185a9fe92e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawSendColDirTagType, PipeType const &amp;in_pipe, HandlerType const &amp;in_handler, AutoHandlerType const &amp;in_vrt_handler, void *index_bits)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawSendColDirTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref> const &amp;</type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref> const &amp;</type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a734a9c83099de5bc1cd85f9da8dba7bb" kindref="member">AutoHandlerType</ref> const &amp;</type>
          <declname>in_vrt_handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>index_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="190" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="190" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a0be373f1ebb6916b873f329d82dd76ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawBcastObjGrpTagType, PipeType in_pipe, HandlerType in_handler, ObjGroupProxyType in_proxy)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawBcastObjGrpTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
          <declname>in_proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="198" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1ac60ced3929a744b3953b7b96b4185c5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(RawSendObjGrpTagType, PipeType in_pipe, HandlerType in_handler, ObjGroupProxyType in_proxy, NodeType in_node)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type>RawSendObjGrpTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ac9852acda74d1896f48f406cd72c7bd3" kindref="member">PipeType</ref></type>
          <declname>in_pipe</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1af64846b57dfcaf104da3ef6967917573" kindref="member">HandlerType</ref></type>
          <declname>in_handler</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
          <declname>in_proxy</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
          <declname>in_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="205" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="205" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a6b88345f0d05d52a67730ffecaf68917" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::operator==</definition>
        <argsstring>(CallbackTyped&lt; MsgT &gt; const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed" kindref="compound">CallbackTyped</ref>&lt; MsgT &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="213" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a8ce2b5aa8087f7ff59e90c92d4d48c0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::operator==</definition>
        <argsstring>(CallbackRawBaseSingle const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" kindref="compound">CallbackRawBaseSingle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="216" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a2c1b0eea2a4e14dc85a6ab889bd6a644" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::equal</definition>
        <argsstring>(CallbackT const &amp;other) const</argsstring>
        <name>equal</name>
        <param>
          <type>CallbackT const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="221" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a3cb4289b3d7353d03fcdfb6d7c52bb7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(CallbackRawBaseSingle const &amp;other)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" kindref="compound">CallbackRawBaseSingle</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="226" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a51d3fdb7b8b73d077a76d79a52343794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::CallbackTyped</definition>
        <argsstring>(CallbackRawBaseSingle &amp;&amp;other)</argsstring>
        <name>CallbackTyped</name>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single" kindref="compound">CallbackRawBaseSingle</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="230" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afdbf535b3210a84aaaeae0b9b3edc35f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgU</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a57e15e61b171c50bff2e7a0dd9078f46" kindref="member">IsNotVoidType</ref>&lt; MsgU &gt;</type>
        <definition>IsNotVoidType&lt;MsgU&gt; vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::send</definition>
        <argsstring>(MsgU *m)</argsstring>
        <name>send</name>
        <param>
          <type>MsgU *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="236" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa118972d857f12ec7433e01440b2dfd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa23761e1f62f24201d28eed0e85322ac" kindref="member">IsVoidType</ref>&lt;MsgT,T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::send</definition>
        <argsstring>()</argsstring>
        <name>send</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="242" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1adf664b7850b5c89afd0abdac51bba0ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="247" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="247" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="629">
        <label>vt::pipe::callback::cbunion::CallbackRawBaseSingle</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single"/>
      </node>
      <node id="628">
        <label>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed"/>
        <childnode refid="629" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="650">
        <label>vt::pipe::callback::cbunion::BcastColMsgCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_bcast_col_msg_c_b"/>
        <childnode refid="651" relation="public-inheritance">
        </childnode>
      </node>
      <node id="658">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackProxySendTypeless &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="649">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackAnonTypeless &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="641">
        <label>vt::pipe::callback::CallbackProxyBcastDirect</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_proxy_bcast_direct"/>
        <childnode refid="642" relation="public-inheritance">
        </childnode>
      </node>
      <node id="634">
        <label>vt::pipe::callback::cbunion::BcastObjGrpCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_bcast_obj_grp_c_b"/>
        <childnode refid="635" relation="public-inheritance">
        </childnode>
      </node>
      <node id="651">
        <label>vt::pipe::callback::CallbackProxyBcastTypeless</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_proxy_bcast_typeless"/>
        <childnode refid="652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="631">
        <label>vt::pipe::callback::cbunion::CallbackRawBaseSingle</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single"/>
        <childnode refid="632" relation="usage">
          <edgelabel>cb_</edgelabel>
        </childnode>
      </node>
      <node id="643">
        <label>vt::pipe::callback::cbunion::BcastMsgCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_bcast_msg_c_b"/>
        <childnode refid="644" relation="public-inheritance">
        </childnode>
      </node>
      <node id="647">
        <label>vt::pipe::callback::cbunion::AnonCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_anon_c_b"/>
        <childnode refid="648" relation="public-inheritance">
        </childnode>
      </node>
      <node id="653">
        <label>vt::pipe::callback::cbunion::SendObjGrpCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_send_obj_grp_c_b"/>
        <childnode refid="654" relation="public-inheritance">
        </childnode>
      </node>
      <node id="656">
        <label>vt::pipe::callback::cbunion::SendColMsgCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_send_col_msg_c_b"/>
        <childnode refid="657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="632">
        <label>vt::pipe::callback::cbunion::GeneralCallback</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_general_callback"/>
        <childnode refid="633" relation="usage">
          <edgelabel>u_</edgelabel>
        </childnode>
      </node>
      <node id="652">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackProxyBcastTypeless &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="638">
        <label>vt::pipe::callback::CallbackSendTypeless</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_send_typeless"/>
        <childnode refid="639" relation="public-inheritance">
        </childnode>
      </node>
      <node id="630">
        <label>vt::pipe::callback::cbunion::CallbackTyped&lt; MsgT &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed"/>
        <childnode refid="631" relation="public-inheritance">
        </childnode>
      </node>
      <node id="642">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackProxyBcastDirect &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="633">
        <label>vt::pipe::callback::cbunion::CallbackUnion</label>
        <link refid="unionvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_union"/>
        <childnode refid="634" relation="usage">
          <edgelabel>bcast_obj_cb_</edgelabel>
        </childnode>
        <childnode refid="637" relation="usage">
          <edgelabel>send_msg_cb_</edgelabel>
        </childnode>
        <childnode refid="640" relation="usage">
          <edgelabel>bcast_col_dir_cb_</edgelabel>
        </childnode>
        <childnode refid="643" relation="usage">
          <edgelabel>bcast_msg_cb_</edgelabel>
        </childnode>
        <childnode refid="646" relation="usage">
          <edgelabel>send_col_dir_cb_</edgelabel>
        </childnode>
        <childnode refid="647" relation="usage">
          <edgelabel>anon_cb_</edgelabel>
        </childnode>
        <childnode refid="650" relation="usage">
          <edgelabel>bcast_col_msg_cb_</edgelabel>
        </childnode>
        <childnode refid="653" relation="usage">
          <edgelabel>send_obj_cb_</edgelabel>
        </childnode>
        <childnode refid="656" relation="usage">
          <edgelabel>send_col_msg_cb_</edgelabel>
        </childnode>
      </node>
      <node id="648">
        <label>vt::pipe::callback::CallbackAnonTypeless</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_anon_typeless"/>
        <childnode refid="649" relation="public-inheritance">
        </childnode>
      </node>
      <node id="640">
        <label>vt::pipe::callback::cbunion::BcastColDirCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_bcast_col_dir_c_b"/>
        <childnode refid="641" relation="public-inheritance">
        </childnode>
      </node>
      <node id="636">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackObjGroupBcast &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="646">
        <label>vt::pipe::callback::cbunion::SendColDirCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_send_col_dir_c_b"/>
        <childnode refid="641" relation="public-inheritance">
        </childnode>
      </node>
      <node id="657">
        <label>vt::pipe::callback::CallbackProxySendTypeless</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_proxy_send_typeless"/>
        <childnode refid="658" relation="public-inheritance">
        </childnode>
      </node>
      <node id="635">
        <label>vt::pipe::callback::CallbackObjGroupBcast</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_obj_group_bcast"/>
        <childnode refid="636" relation="public-inheritance">
        </childnode>
      </node>
      <node id="645">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackBcastTypeless &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="654">
        <label>vt::pipe::callback::CallbackObjGroupSend</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_obj_group_send"/>
        <childnode refid="655" relation="public-inheritance">
        </childnode>
      </node>
      <node id="655">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackObjGroupSend &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="639">
        <label>vt::pipe::callback::CallbackBaseTL&lt; CallbackSendTypeless &gt;</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_base_t_l"/>
      </node>
      <node id="644">
        <label>vt::pipe::callback::CallbackBcastTypeless</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1_callback_bcast_typeless"/>
        <childnode refid="645" relation="public-inheritance">
        </childnode>
      </node>
      <node id="637">
        <label>vt::pipe::callback::cbunion::SendMsgCB</label>
        <link refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_send_msg_c_b"/>
        <childnode refid="638" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/pipe/callback/cb_union/cb_raw_base.h" line="72" column="1" bodyfile="src/vt/pipe/callback/cb_union/cb_raw_base.h" bodystart="72" bodyend="-1"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a734a9c83099de5bc1cd85f9da8dba7bb" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>AutoHandlerType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a54c1e88b04174314284479d39f31c46a" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a80569ca80e358052d839a15a0bcd287c" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a8b2961b281dbf416f6d2eec2b7c11192" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a00a840a889e6ca98c250d3f663972ade" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a76de7a82f36dcd8dee39036df2e3d0ba" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a7ebe746790c6faff50578af79dc1726e" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a2586495207c03c2fb5247e19ee189984" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1ada70fbd67b17be3a4eb86fd497b2c409" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a1bdc68ca7ce795dc6acbc0b42a97216f" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1aef47cd7027159c0cb7c5910455b0530c" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1af249d8dc02e5b50697f33c35718a8c40" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a2ff2eebe15a6b270473f61cfa2a9804a" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a8db688e82d3fb4d8f7f0a37817a0d929" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackRawBaseSingle</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa4f66e11846b531708eb4c51eaca43fc" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a059f829db7b3d792e7ea78f1a2ce24ab" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afc499cbc15b193928e02f5ed5c4a98ca" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a88901f3301dfcebd7e7210185c1a344f" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1abee1271009ec78a7f278a8d43a397cc5" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1ac017bd9d99b889d882acb7e9847d0378" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1ad455eeb861c8abf6bfba2267dd389a7c" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a4b5c8df6aa46634bde0318f7b8017123" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1af5f0576f3858b3c81ebe3c4a28d3eca9" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a9d258a1b9db65ef027a0e1185a9fe92e" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a0be373f1ebb6916b873f329d82dd76ce" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1ac60ced3929a744b3953b7b96b4185c5b" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a3cb4289b3d7353d03fcdfb6d7c52bb7a" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a51d3fdb7b8b73d077a76d79a52343794" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>CallbackTyped</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a6535ef3d7baf0130dcf2c23f63496f3d" prot="protected" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>cb_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a2c1b0eea2a4e14dc85a6ab889bd6a644" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>equal</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a3422df77d381724e530631720ec9720b" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>getPipe</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a57e15e61b171c50bff2e7a0dd9078f46" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>IsNotVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa23761e1f62f24201d28eed0e85322ac" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>IsVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a69279b16198da6a06c5cfb28203c9819" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>null</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a001cf806e3cd6fec3e07bb698901bacd" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>operator=</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a7037c612d471371061a32dc7b1bdea3a" prot="public" virt="non-virtual" ambiguityscope="vt::pipe::callback::cbunion::CallbackRawBaseSingle::"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>operator=</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a6b88345f0d05d52a67730ffecaf68917" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>operator==</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1a8ce2b5aa8087f7ff59e90c92d4d48c0f" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>operator==</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a7cff39d219279b2075d7db56e6b87944" prot="protected" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>pipe_</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afdbf535b3210a84aaaeae0b9b3edc35f" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>send</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1aa118972d857f12ec7433e01440b2dfd3" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>send</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1a4b09f1ec8917085ba9934764c16b29d6" prot="public" virt="non-virtual" ambiguityscope="vt::pipe::callback::cbunion::CallbackRawBaseSingle::"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>send</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1adf664b7850b5c89afd0abdac51bba0ed" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>serialize</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_raw_base_single_1ae71a381a339f3e46adea8f93a6726bd5" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>valid</name></member>
      <member refid="structvt_1_1pipe_1_1callback_1_1cbunion_1_1_callback_typed_1afeaa5f774eee46269e64e566b8239c22" prot="public" virt="non-virtual"><scope>vt::pipe::callback::cbunion::CallbackTyped</scope><name>VoidSigType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
