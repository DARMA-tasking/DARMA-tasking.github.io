<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__functorsend" kind="group">
    <compoundname>functorsend</compoundname>
    <title>Send Message to Functor Variants</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__functorsend_1gaa5b764aaa06e9c9141b04f6d8a420d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a8a749506cb4813230f9bfeeac1b119c9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsg</definition>
        <argsstring>(MessageT *const msg, TagType const &amp;tag=no_tag)</argsstring>
        <name>broadcastMsg</name>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="789" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1gad896e15fd2c34447ae4cc5b0f6dd211f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a8a749506cb4813230f9bfeeac1b119c9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MessageT *const msg, TagType const &amp;tag=no_tag)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Broadcast a message that may need serialization. </para>        </briefdescription>
        <detaileddescription>
<para>This method automatically dispatches to the serialization framework if required (message has a serialize method) based on examining compile-time traits of the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1gad73652d3cef1ea2ea1df3a2ca38ee7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a8a749506cb4813230f9bfeeac1b119c9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>ActiveMessenger::PendingSendType vt::messaging::ActiveMessenger::broadcastMsgAuto</definition>
        <argsstring>(MessageT *const msg)</argsstring>
        <name>broadcastMsgAuto</name>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Broadcast a message that may need serialization. </para>        </briefdescription>
        <detaileddescription>
<para>This method automatically dispatches to the serialization framework if required (message has a serialize method) based on examining compile-time traits of the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the broadcast </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="828" column="1" bodyfile="src/vt/messaging/active.impl.h" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga13e2d0b763ed5baac91fb86472d39f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a8a749506cb4813230f9bfeeac1b119c9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsg</definition>
        <argsstring>(NodeType const &amp;dest, MessageT *const msg, TagType const &amp;tag=no_tag)</argsstring>
        <name>sendMsg</name>
        <param>
          <type>NodeType const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType const &amp;</type>
          <declname>tag</declname>
          <defval>no_tag</defval>
        </param>
        <briefdescription>
<para>Send a message with a optional tag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga0b627679790c568af6e18132d7ace06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a8a749506cb4813230f9bfeeac1b119c9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType const &amp;dest, MessageT *const msg, TagType const &amp;tag)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type>NodeType const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>TagType const &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Send a message that may need serialization. </para>        </briefdescription>
        <detaileddescription>
<para>This method automatically dispatches to the serialization framework if required (message has a serialize method) based on examining compile-time traits of the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the optional tag to put on the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__functorsend_1ga12dd37753bdb2a09b5e3e2a40aa31868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MessageT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::<ref refid="structvt_1_1messaging_1_1_active_messenger_1a8a749506cb4813230f9bfeeac1b119c9" kindref="member">MessageType</ref></defval>
          </param>
        </templateparamlist>
        <type>PendingSendType</type>
        <definition>PendingSendType vt::messaging::ActiveMessenger::sendMsgAuto</definition>
        <argsstring>(NodeType const &amp;dest, MessageT *const msg)</argsstring>
        <name>sendMsgAuto</name>
        <param>
          <type>NodeType const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MessageT *const</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Send a message that may need serialization. </para>        </briefdescription>
        <detaileddescription>
<para>This method automatically dispatches to the serialization framework if required (message has a serialize method) based on examining compile-time traits of the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination node to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to broadcast</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> for the send </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/active.h" line="884" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Send a message to an auto-registered functor-type handler. </para>    </briefdescription>
    <detaileddescription>
<para>Send message using functor handler. These handlers are type-safe and do not require the user to specify the message because it can be automatically detected.</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyMsg<sp/>:<sp/><ref refid="structvt_1_1messaging_1_1_active_msg" kindref="compound">vt::Message</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyMsg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_a)<sp/>:<sp/>a_(in_a)<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(MyMsg*<sp/>msg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sendCode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>is<sp/>automatically<sp/>registered<sp/>with<sp/>the<sp/>overload<sp/>and<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>automatically<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aeafd31f866aeb4dc6fc2f6ee97136350" kindref="member">theMsg</ref>()-&gt;<ref refid="group__preregister_1ga55c6ea91181ae20c681e73a356750916" kindref="member">sendMsg</ref>&lt;X&gt;(1,<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
