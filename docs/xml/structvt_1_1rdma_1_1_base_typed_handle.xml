<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1rdma_1_1_base_typed_handle" kind="struct" language="C++" prot="public">
    <compoundname>vt::rdma::BaseTypedHandle</compoundname>
    <basecompoundref refid="structvt_1_1rdma_1_1_base_handle" prot="public" virt="non-virtual">vt::rdma::BaseHandle</basecompoundref>
    <derivedcompoundref refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a" prot="public" virt="non-virtual">vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;</derivedcompoundref>
    <includes refid="base__handle_8h" local="no">vt/rdmahandle/base_handle.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type><ref refid="namespacevt_1_1rdma_1a0234ff19cfb3c04718cfdfd36b2d6d88" kindref="member">HandleEnum</ref></type>
        <declname>E</declname>
        <defname>E</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>IndexT</declname>
        <defname>IndexT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1rdma_1_1_base_typed_handle_1a442fed4e2898c2fc2b7e8686283efdde" prot="public" static="no">
        <type>T</type>
        <definition>using vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::DataT =  T</definition>
        <argsstring></argsstring>
        <name>DataT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="77" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" prot="public" static="no">
        <type><ref refid="structvt_1_1rdma_1_1_request_holder" kindref="compound">RequestHolder</ref></type>
        <definition>using vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::RequestType =  RequestHolder</definition>
        <argsstring></argsstring>
        <name>RequestType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="78" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1rdma_1_1_base_typed_handle_1a20c231fb671a38c3bb761d613dd42b3c" prot="public" static="no">
        <type>std::function&lt; void(T *)&gt;</type>
        <definition>using vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::ActionDataType =  std::function&lt;void(T*)&gt;</definition>
        <argsstring></argsstring>
        <name>ActionDataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="79" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1rdma_1_1_base_typed_handle_1aca839871dda1f44f8e59a451174b9a2a" prot="public" static="no">
        <type>IndexT</type>
        <definition>using vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::IndexType =  IndexT</definition>
        <argsstring></argsstring>
        <name>IndexType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="80" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_base_typed_handle_1afdff2a8569424f4b9be14ac0f2daf5ca" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacevt_1_1rdma_1a0234ff19cfb3c04718cfdfd36b2d6d88" kindref="member">HandleEnum</ref></type>
        <definition>constexpr HandleEnum vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::handle_type</definition>
        <argsstring></argsstring>
        <name>handle_type</name>
        <initializer>= E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="82" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1rdma_1_1_base_typed_handle_1a1fd6b9bc3f72bb2b64e602de3982929d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct Manager</definition>
        <argsstring></argsstring>
        <name>Manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="84" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1rdma_1_1_base_typed_handle_1aa597d7381f8793417b0656cbaf1625f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct SubHandle&lt; T, E, IndexT &gt;</definition>
        <argsstring></argsstring>
        <name>SubHandle&lt; T, E, IndexT &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="84" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_base_typed_handle_1ac474123342ec5f8f82d2346b09331fc4" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::count_</definition>
        <argsstring></argsstring>
        <name>count_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The count of the handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="166" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_base_typed_handle_1a448710fab012c50cd4eb02b955d2a240" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a20c231fb671a38c3bb761d613dd42b3c" kindref="member">ActionDataType</ref> &gt;</type>
        <definition>std::vector&lt;ActionDataType&gt; vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::actions_</definition>
        <argsstring></argsstring>
        <name>actions_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The registered actions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="167" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_base_typed_handle_1af48b31b6d8f1319ee58c5544ad251bf9" prot="protected" static="no" mutable="no">
        <type>T *</type>
        <definition>T* vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::user_buffer_</definition>
        <argsstring></argsstring>
        <name>user_buffer_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The registered buffer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="168" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_base_typed_handle_1a009a2f6951b5a3284f1f19bb9b56e4e2" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::hoff_</definition>
        <argsstring></argsstring>
        <name>hoff_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The local handle offset </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="169" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_base_typed_handle_1accff417789be0a3556fdc4695aba5a85" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structvt_1_1rdma_1_1_lock_m_p_i" kindref="compound">LockMPI</ref> &gt;</type>
        <definition>std::shared_ptr&lt;LockMPI&gt; vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::lock_</definition>
        <argsstring></argsstring>
        <name>lock_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The active lock </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="170" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a268fefeb75b88a7642ac14d06b5da963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::BaseTypedHandle</definition>
        <argsstring>()=default</argsstring>
        <name>BaseTypedHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1adfa889759392da4cdcea27e79e81a12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::BaseTypedHandle</definition>
        <argsstring>(BaseTypedHandle const &amp;)=default</argsstring>
        <name>BaseTypedHandle</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a89f1a34092464da223bc474deca0692e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::BaseTypedHandle</definition>
        <argsstring>(BaseTypedHandle &amp;&amp;)=default</argsstring>
        <name>BaseTypedHandle</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1af7897dce38a16c31e3431cf65dec2792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref> &amp;</type>
        <definition>BaseTypedHandle&amp; vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::operator=</definition>
        <argsstring>(BaseTypedHandle const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a4f4dd9c546b56d3fc570500a79b048d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref> &amp;</type>
        <definition>BaseTypedHandle&amp; vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::operator=</definition>
        <argsstring>(BaseTypedHandle &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a465a9836d31034a5f96b5826ae3ba064" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::hasAction</definition>
        <argsstring>() const</argsstring>
        <name>hasAction</name>
        <briefdescription>
<para>Check if the handle has an action registered. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether an action is registered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="117" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a48b8d5baf7532ee63c078d55ee90d6fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::clearActions</definition>
        <argsstring>() const</argsstring>
        <name>clearActions</name>
        <briefdescription>
<para>Clear all registered actions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="122" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a7898a65aac6b27f5265ca3d0c2fa187a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::addAction</definition>
        <argsstring>(ActionDataType in_action)</argsstring>
        <name>addAction</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a20c231fb671a38c3bb761d613dd42b3c" kindref="member">ActionDataType</ref></type>
          <declname>in_action</declname>
        </param>
        <briefdescription>
<para>Add an action to the handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_action</parametername>
</parameternamelist>
<parameterdescription>
<para>action to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="129" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1acd1c1ff4fa00ba44ff7d7d6d92e82e5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::setBuffer</definition>
        <argsstring>(T *in_buffer)</argsstring>
        <name>setBuffer</name>
        <param>
          <type>T *</type>
          <declname>in_buffer</declname>
        </param>
        <briefdescription>
<para>Register a buffer for fetching data into for this handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="136" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a6774922e581a9b8c19eccf749077f577" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::getBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBuffer</name>
        <briefdescription>
<para>Get the registered buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to the buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="143" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a98bab5e776934a84c4415952823f58e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::hoff</definition>
        <argsstring>() const</argsstring>
        <name>hoff</name>
        <briefdescription>
<para>Get the local handle offset. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the handle offset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="150" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
<para>Get the local handle count. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the handle size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="157" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a40156625b7effaa3ba9febceb829e9a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="160" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="160" bodyend="163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1rdma_1_1_base_typed_handle_1a95ecf3e18a04206024380385af06c007" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;::BaseTypedHandle</definition>
        <argsstring>(std::size_t in_count, std::size_t in_hoff=0, std::shared_ptr&lt; LockMPI &gt; in_lock=nullptr)</argsstring>
        <name>BaseTypedHandle</name>
        <param>
          <type>std::size_t</type>
          <declname>in_count</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>in_hoff</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structvt_1_1rdma_1_1_lock_m_p_i" kindref="compound">LockMPI</ref> &gt;</type>
          <declname>in_lock</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Protected construction of a base handle, shared amongst all handle types. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_count</parametername>
</parameternamelist>
<parameterdescription>
<para>count of handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_hoff</parametername>
</parameternamelist>
<parameterdescription>
<para>local offset for handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_lock</parametername>
</parameternamelist>
<parameterdescription>
<para>shared pointer to lock </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/base_handle.h" line="102" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="102" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The typed base class for all types of handles. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="285">
        <label>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;</label>
        <link refid="structvt_1_1rdma_1_1_base_typed_handle"/>
        <childnode refid="286" relation="public-inheritance">
        </childnode>
      </node>
      <node id="287">
        <label>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</label>
        <link refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a"/>
        <childnode refid="285" relation="public-inheritance">
        </childnode>
      </node>
      <node id="286">
        <label>vt::rdma::BaseHandle</label>
        <link refid="structvt_1_1rdma_1_1_base_handle"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="290">
        <label>T</label>
      </node>
      <node id="288">
        <label>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;</label>
        <link refid="structvt_1_1rdma_1_1_base_typed_handle"/>
        <childnode refid="289" relation="public-inheritance">
        </childnode>
        <childnode refid="290" relation="usage">
          <edgelabel>user_buffer_</edgelabel>
        </childnode>
      </node>
      <node id="289">
        <label>vt::rdma::BaseHandle</label>
        <link refid="structvt_1_1rdma_1_1_base_handle"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/rdmahandle/base_handle.h" line="76" column="1" bodyfile="src/vt/rdmahandle/base_handle.h" bodystart="76" bodyend="171"/>
    <listofallmembers>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a20c231fb671a38c3bb761d613dd42b3c" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>ActionDataType</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a448710fab012c50cd4eb02b955d2a240" prot="protected" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>actions_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a7898a65aac6b27f5265ca3d0c2fa187a" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>addAction</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a268fefeb75b88a7642ac14d06b5da963" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1adfa889759392da4cdcea27e79e81a12f" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a89f1a34092464da223bc474deca0692e" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a95ecf3e18a04206024380385af06c007" prot="protected" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a48b8d5baf7532ee63c078d55ee90d6fe" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>clearActions</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>count</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1ac474123342ec5f8f82d2346b09331fc4" prot="protected" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>count_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a442fed4e2898c2fc2b7e8686283efdde" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>DataT</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a6774922e581a9b8c19eccf749077f577" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>getBuffer</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1afdff2a8569424f4b9be14ac0f2daf5ca" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>handle_type</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a465a9836d31034a5f96b5826ae3ba064" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>hasAction</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a98bab5e776934a84c4415952823f58e0" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>hoff</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a009a2f6951b5a3284f1f19bb9b56e4e2" prot="protected" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>hoff_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1aca839871dda1f44f8e59a451174b9a2a" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>IndexType</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1accff417789be0a3556fdc4695aba5a85" prot="protected" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>lock_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a1fd6b9bc3f72bb2b64e602de3982929d" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>Manager</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1af7897dce38a16c31e3431cf65dec2792" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>operator=</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a4f4dd9c546b56d3fc570500a79b048d8" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>operator=</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>RequestType</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a40156625b7effaa3ba9febceb829e9a0" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>serialize</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1acd1c1ff4fa00ba44ff7d7d6d92e82e5b" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>setBuffer</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1aa597d7381f8793417b0656cbaf1625f0" prot="public" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>SubHandle&lt; T, E, IndexT &gt;</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1af48b31b6d8f1319ee58c5544ad251bf9" prot="protected" virt="non-virtual"><scope>vt::rdma::BaseTypedHandle</scope><name>user_buffer_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
