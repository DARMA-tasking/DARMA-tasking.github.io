<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_pending_send" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>vt::messaging::PendingSend</compoundname>
    <includes refid="pending__send_8h" local="no">pending_send.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_pending_send_1aa13248a342d68230048cde8e0756851c" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; &amp;)&gt;</type>
        <definition>using vt::messaging::PendingSend::SendActionType =  std::function&lt;void(MsgSharedPtr&lt;BaseMsgType&gt;&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>SendActionType</name>
        <briefdescription>
<para>Function for complex action on send<mdash/>takes a message to operate on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="73" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1messaging_1_1_pending_send_1a25131dc5a5e003dc65187edc97c23d1c" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using vt::messaging::PendingSend::EpochActionType =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>EpochActionType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="74" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_pending_send_1a6202f4243176b9189d9aef17aa108a36" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a9f5ebd62ee9d6dd8829e3e1cc4f858e9" kindref="member">MsgPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt;</type>
        <definition>MsgPtr&lt;BaseMsgType&gt; vt::messaging::PendingSend::msg_</definition>
        <argsstring></argsstring>
        <name>msg_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="188" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_pending_send_1a194f70cb3b0a136525a78bed573ab3be" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
        <definition>ByteType vt::messaging::PendingSend::msg_size_</definition>
        <argsstring></argsstring>
        <name>msg_size_</name>
        <initializer>= no_byte</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="189" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_pending_send_1a0054d2fec8353438284dc02a28a73294" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send_1aa13248a342d68230048cde8e0756851c" kindref="member">SendActionType</ref></type>
        <definition>SendActionType vt::messaging::PendingSend::send_action_</definition>
        <argsstring></argsstring>
        <name>send_action_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="190" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_pending_send_1a6b53bdc8c1eb674e724fd71bd1065034" prot="private" static="no" mutable="no">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send_1a25131dc5a5e003dc65187edc97c23d1c" kindref="member">EpochActionType</ref></type>
        <definition>EpochActionType vt::messaging::PendingSend::epoch_action_</definition>
        <argsstring></argsstring>
        <name>epoch_action_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="191" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_pending_send_1a77a8ad56dc73c0821c3fa4cef0b4c27a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::PendingSend::epoch_produced_</definition>
        <argsstring></argsstring>
        <name>epoch_produced_</name>
        <initializer>= no_epoch</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="192" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a7ea1d6401329b5f2a1f2f4ca8d4fed40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingSend::PendingSend</definition>
        <argsstring>(MsgSharedPtr&lt; BaseMsgType &gt; &amp;in_msg, ByteType in_msg_size, SendActionType in_action=nullptr)</argsstring>
        <name>PendingSend</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; <ref refid="namespacevt_1a44d0d4e144748f2b19a1cfd962f50338" kindref="member">BaseMsgType</ref> &gt; &amp;</type>
          <declname>in_msg</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1aab8d55968084610ce3b17057981e9300" kindref="member">ByteType</ref></type>
          <declname>in_msg_size</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send_1aa13248a342d68230048cde8e0756851c" kindref="member">SendActionType</ref></type>
          <declname>in_action</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct a pending send. </para>        </briefdescription>
        <detaileddescription>
<para>This is the prefered form, especially for internal constructs. If an action is specified it will be run. Otherwise the default internal message-sending action is applied.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_msg_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the message (type is erased) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;send&quot; action to run, if overridden. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="87" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a3409d31fed95e39a9a829f120cba8650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>vt::messaging::PendingSend::PendingSend</definition>
        <argsstring>(MsgSharedPtr&lt; MsgT &gt; &amp;in_msg, SendActionType in_action)</argsstring>
        <name>PendingSend</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_msg_shared_ptr" kindref="compound">MsgSharedPtr</ref>&lt; MsgT &gt; &amp;</type>
          <declname>in_msg</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send_1aa13248a342d68230048cde8e0756851c" kindref="member">SendActionType</ref></type>
          <declname>in_action</declname>
        </param>
        <briefdescription>
<para>Construct a pending send that invokes a callback. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This form does not implictly send a message. The callback action is responsible for all further work. It is a useful construct to delay the callback and ensure an epoch is produced.</para></simplesect>
This constructor is for a complex <computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> that holds a <computeroutput>std::function</computeroutput> for performing the send (e.g., sending to a collection element). When released, it will run the <computeroutput>in_action</computeroutput> of type <computeroutput>SendActionType</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;send&quot; action to run </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="114" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1afca579cd3975846e5555808fdf7d3f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingSend::PendingSend</definition>
        <argsstring>(EpochType ep, EpochActionType const &amp;in_action)</argsstring>
        <name>PendingSend</name>
        <param>
          <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send_1a25131dc5a5e003dc65187edc97c23d1c" kindref="member">EpochActionType</ref> const &amp;</type>
          <declname>in_action</declname>
        </param>
        <briefdescription>
<para>Construct a pending send to push an epoch. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This form does not implictly send a message.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_action</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;send&quot; action to run </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="132" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a129a9c509eacf26111013105affe5931" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingSend::PendingSend</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>PendingSend</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="134" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1ab791376e86901943595c93cce9cefbf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingSend::PendingSend</definition>
        <argsstring>(PendingSend &amp;&amp;in) noexcept</argsstring>
        <name>PendingSend</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="135" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a951912c336cf3cdaf91f8ccde13092af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingSend::PendingSend</definition>
        <argsstring>(const PendingSend &amp;)=delete</argsstring>
        <name>PendingSend</name>
        <param>
          <type>const <ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1aecef2d10d22564d142b9de52a57d81c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;</type>
        <definition>PendingSend&amp; vt::messaging::PendingSend::operator=</definition>
        <argsstring>(PendingSend &amp;&amp;in)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1addfa1d51e3b8f272b5e711867e893bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;</type>
        <definition>PendingSend&amp; vt::messaging::PendingSend::operator=</definition>
        <argsstring>(PendingSend &amp;in)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1ade803ff2903a92eaf62b6e330593871b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::PendingSend::~PendingSend</definition>
        <argsstring>()</argsstring>
        <name>~PendingSend</name>
        <briefdescription>
<para>Release the pending send on destruction (when this goes out of scope) </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>ps<sp/>=<sp/>vt::theMsg()-&gt;sendMsg&lt;MyMsg,<sp/>handler&gt;(msg);</highlight></codeline>
<codeline><highlight class="normal">}<sp/>//<sp/>Message<sp/>is<sp/>sent<sp/>here<sp/>when<sp/>the<sp/>destructor<sp/>runs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Message<sp/>is<sp/>sent<sp/>right<sp/>away<sp/>on<sp/>this<sp/>following<sp/>line<sp/>as<sp/>the<sp/>PendingSend</highlight></codeline>
<codeline><highlight class="normal">//<sp/>is<sp/>not<sp/>captured</highlight></codeline>
<codeline><highlight class="normal">vt::theMsg()-&gt;sendMsg&lt;MyMsg,<sp/>handler&gt;(msg);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="154" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1ad4b41412f953dcd22b3e3020a812f757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::PendingSend::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
<para>Release the message, run action if needed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="159" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="99" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a8293dffe4d8cdc81de573d2edf0ee4cb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a985a5adf291c34a3ca263b3378388236" kindref="member">EpochType</ref></type>
        <definition>EpochType vt::messaging::PendingSend::getProduceEpochFromMsg</definition>
        <argsstring>() const</argsstring>
        <name>getProduceEpochFromMsg</name>
        <briefdescription>
<para>Get the epoch produced when holder was created. </para>        </briefdescription>
        <detaileddescription>
<para>This is required because the epoch on the envelope can change in some cases in between when this is created and actually released.</para><para><simplesect kind="return"><para>the produce epoch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="171" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1af5961bb21b4a427732be91ac699d570b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::PendingSend::produceMsg</definition>
        <argsstring>()</argsstring>
        <name>produceMsg</name>
        <briefdescription>
<para>Produce on the messages epoch to inhibit early termination. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="176" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a0f249a127a798ba0823fae82c925ed3b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::PendingSend::consumeMsg</definition>
        <argsstring>()</argsstring>
        <name>consumeMsg</name>
        <briefdescription>
<para>Consume on the messages epoch to inhibit early termination. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="181" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_pending_send_1a93da625c74a5d35ca0b7dec3fad86152" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::PendingSend::sendMsg</definition>
        <argsstring>()</argsstring>
        <name>sendMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send the message saved directly or trigger the lambda for specialized sends from the pending holder </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/pending_send.h" line="185" column="1" bodyfile="src/vt/messaging/pending_send.cc" bodystart="66" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A pending send (or other similar operation) that is delayed until this holder goes out of scope. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="structvt_1_1messaging_1_1_pending_send" kindref="compound">PendingSend</ref></computeroutput> holds the message and dispatch function for a send (or broadcast or similar event) to a node, collection, objgroup, etc. This allows VT to expand the DAG before it actually violates a data or control dependency by expanding and prematurely performing the operation. We can then wire future sends up with past ones by associating future events with termination sequencing<mdash/>see <computeroutput><ref refid="classvt_1_1messaging_1_1_collection_chain_set" kindref="compound">CollectionChainSet</ref></computeroutput> </para>    </detaileddescription>
    <collaborationgraph>
      <node id="2742">
        <label>vt::messaging::MsgPtrImplBase</label>
        <link refid="structvt_1_1messaging_1_1_msg_ptr_impl_base"/>
      </node>
      <node id="2741">
        <label>vt::messaging::BaseMsg</label>
        <link refid="structvt_1_1messaging_1_1_base_msg"/>
      </node>
      <node id="2739">
        <label>vt::messaging::PendingSend</label>
        <link refid="structvt_1_1messaging_1_1_pending_send"/>
        <childnode refid="2740" relation="usage">
          <edgelabel>msg_</edgelabel>
        </childnode>
      </node>
      <node id="2740">
        <label>vt::messaging::MsgSharedPtr&lt; vt::messaging::ActiveMsg &gt;</label>
        <link refid="structvt_1_1messaging_1_1_msg_shared_ptr"/>
        <childnode refid="2741" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
        <childnode refid="2742" relation="usage">
          <edgelabel>impl_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/messaging/pending_send.h" line="71" column="1" bodyfile="src/vt/messaging/pending_send.h" bodystart="71" bodyend="193"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a0f249a127a798ba0823fae82c925ed3b" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>consumeMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a6b53bdc8c1eb674e724fd71bd1065034" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>epoch_action_</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a77a8ad56dc73c0821c3fa4cef0b4c27a" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>epoch_produced_</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a25131dc5a5e003dc65187edc97c23d1c" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>EpochActionType</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a8293dffe4d8cdc81de573d2edf0ee4cb" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>getProduceEpochFromMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a6202f4243176b9189d9aef17aa108a36" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>msg_</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a194f70cb3b0a136525a78bed573ab3be" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>msg_size_</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1aecef2d10d22564d142b9de52a57d81c8" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>operator=</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1addfa1d51e3b8f272b5e711867e893bca" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>operator=</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a7ea1d6401329b5f2a1f2f4ca8d4fed40" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>PendingSend</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a3409d31fed95e39a9a829f120cba8650" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>PendingSend</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1afca579cd3975846e5555808fdf7d3f4c" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>PendingSend</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a129a9c509eacf26111013105affe5931" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>PendingSend</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1ab791376e86901943595c93cce9cefbf6" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>PendingSend</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a951912c336cf3cdaf91f8ccde13092af" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>PendingSend</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1af5961bb21b4a427732be91ac699d570b" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>produceMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1ad4b41412f953dcd22b3e3020a812f757" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>release</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a0054d2fec8353438284dc02a28a73294" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>send_action_</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1aa13248a342d68230048cde8e0756851c" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>SendActionType</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1a93da625c74a5d35ca0b7dec3fad86152" prot="private" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>sendMsg</name></member>
      <member refid="structvt_1_1messaging_1_1_pending_send_1ade803ff2903a92eaf62b6e330593871b" prot="public" virt="non-virtual"><scope>vt::messaging::PendingSend</scope><name>~PendingSend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
