<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1messaging_1_1_async_op_wrapper" kind="struct" language="C++" prot="public">
    <compoundname>vt::messaging::AsyncOpWrapper</compoundname>
    <includes refid="async__op__wrapper_8h" local="no">async_op_wrapper.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_async_op_wrapper_1a040e00648d1bb44428dac609671ef2ae" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::messaging::AsyncOpWrapper::valid</definition>
        <argsstring></argsstring>
        <name>valid</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether op is valid </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="110" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_async_op_wrapper_1a9b297f0a0e7852ec34b51937da04fc10" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structvt_1_1messaging_1_1_async_op" kindref="compound">AsyncOp</ref> &gt;</type>
        <definition>std::unique_ptr&lt;AsyncOp&gt; vt::messaging::AsyncOpWrapper::op_</definition>
        <argsstring></argsstring>
        <name>op_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The enclosed operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="113" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1messaging_1_1_async_op_wrapper_1a92f7ad82efd0a249db46ee7ade6eb7ca" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" kindref="member">ThreadIDType</ref></type>
        <definition>ThreadIDType vt::messaging::AsyncOpWrapper::tid_</definition>
        <argsstring></argsstring>
        <name>tid_</name>
        <initializer>= no_thread_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The thread ID to resume </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="114" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1messaging_1_1_async_op_wrapper_1a06c7dd199e7b2c252e23c8d81950feed" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::AsyncOpWrapper::AsyncOpWrapper</definition>
        <argsstring>(std::unique_ptr&lt; AsyncOp &gt; ptr)</argsstring>
        <name>AsyncOpWrapper</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structvt_1_1messaging_1_1_async_op" kindref="compound">AsyncOp</ref> &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Construct with unique pointer to operation. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="67" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_async_op_wrapper_1a0f24b66147eac512eefec8f5f86dd5ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::messaging::AsyncOpWrapper::AsyncOpWrapper</definition>
        <argsstring>(std::unique_ptr&lt; AsyncOp &gt; ptr, ThreadIDType in_tid)</argsstring>
        <name>AsyncOpWrapper</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structvt_1_1messaging_1_1_async_op" kindref="compound">AsyncOp</ref> &gt;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a9b887d814dd25ff495a0c8270304ac02" kindref="member">ThreadIDType</ref></type>
          <declname>in_tid</declname>
        </param>
        <briefdescription>
<para>Construct with unique pointer to operation and a thread ID to resume when it completes. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tid</parametername>
</parameternamelist>
<parameterdescription>
<para>the thread ID to resume after completion </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="79" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_async_op_wrapper_1a09ca2119c78c9b3663ad6a3708d3a3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::messaging::AsyncOpWrapper::test</definition>
        <argsstring>(int &amp;num_tests)</argsstring>
        <name>test</name>
        <param>
          <type>int &amp;</type>
          <declname>num_tests</declname>
        </param>
        <briefdescription>
<para>Test completion of the operation. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_tests</parametername>
</parameternamelist>
<parameterdescription>
<para>how many tests were executed (diagnostics)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the operation is complete </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="92" column="1" bodyfile="src/vt/messaging/async_op_wrapper.cc" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_async_op_wrapper_1afe1b0def9a79849baa18373787440714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::messaging::AsyncOpWrapper::done</definition>
        <argsstring>()</argsstring>
        <name>done</name>
        <briefdescription>
<para>Trigger continuation after operation completes. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="97" column="1" bodyfile="src/vt/messaging/async_op_wrapper.cc" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1messaging_1_1_async_op_wrapper_1a219a6d0d317bd75c0d559dbb91838166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::messaging::AsyncOpWrapper::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Serializer for footprinting. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/messaging/async_op_wrapper.h" line="105" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="105" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for a general asynchronous operation that holds a pointer to base class. </para>    </briefdescription>
    <detaileddescription>
<internal></internal>
    </detaileddescription>
    <location file="src/vt/messaging/async_op_wrapper.h" line="60" column="1" bodyfile="src/vt/messaging/async_op_wrapper.h" bodystart="60" bodyend="115"/>
    <listofallmembers>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a06c7dd199e7b2c252e23c8d81950feed" prot="public" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>AsyncOpWrapper</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a0f24b66147eac512eefec8f5f86dd5ac" prot="public" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>AsyncOpWrapper</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1afe1b0def9a79849baa18373787440714" prot="public" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>done</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a9b297f0a0e7852ec34b51937da04fc10" prot="private" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>op_</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a219a6d0d317bd75c0d559dbb91838166" prot="public" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>serialize</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a09ca2119c78c9b3663ad6a3708d3a3c7" prot="public" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>test</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a92f7ad82efd0a249db46ee7ade6eb7ca" prot="private" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>tid_</name></member>
      <member refid="structvt_1_1messaging_1_1_async_op_wrapper_1a040e00648d1bb44428dac609671ef2ae" prot="public" virt="non-virtual"><scope>vt::messaging::AsyncOpWrapper</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
