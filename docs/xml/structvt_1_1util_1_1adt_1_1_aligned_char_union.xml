<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1util_1_1adt_1_1_aligned_char_union" kind="struct" language="C++" prot="public">
    <compoundname>vt::util::adt::AlignedCharUnion</compoundname>
    <basecompoundref refid="structvt_1_1util_1_1adt_1_1_union_copy" prot="public" virt="non-virtual">vt::util::adt::UnionCopy&lt; T, void, Ts... &gt;</basecompoundref>
    <includes refid="union_8h" local="no">union.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename...</type>
        <declname>Ts</declname>
        <defname>Ts</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a8d0afe238f4a44735bb37be847f55c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::AlignedCharUnion</definition>
        <argsstring>()=default</argsstring>
        <name>AlignedCharUnion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a5cdce588713b9d1e65b0be90bbeaa771" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::hash</definition>
        <argsstring>() const</argsstring>
        <name>hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="515" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a30e1323df5870ce0763e90a3d3caa0c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::operator==</definition>
        <argsstring>(AlignedCharUnion const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_aligned_char_union" kindref="compound">AlignedCharUnion</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="523" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="523" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a50f97a051cd59537528d6b5879f88a53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::init</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>init</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Initialize as <computeroutput>U</computeroutput> with arguments to constructor <computeroutput>Args</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>constructor arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="539" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="539" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1af78cf3c2f5b904d1f49ee19f0ac7871f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <briefdescription>
<para>Check if union has active type <computeroutput>U</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether <computeroutput>U</computeroutput> is active </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="553" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1acd5ebe14c0990b3edacf9aeea031499f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U &amp;</type>
        <definition>U&amp; vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Get a reference as a certain type <computeroutput>U</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="562" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="562" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a4dfd0f51d2c58aa8af33e50e82fe98fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U const  &amp;</type>
        <definition>U const&amp; vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Get a const reference as a certain type <computeroutput>U</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="571" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="571" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1af9bd3e00a355dca08d88103852f716ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U &amp;</type>
        <definition>U&amp; vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::viewAs</definition>
        <argsstring>()</argsstring>
        <name>viewAs</name>
        <briefdescription>
<para>View as a certain type, unsafe unless union is used across basic types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="581" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a3b7862db1eb10fc16c66aa09a4e3fec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Serialize as the right underlying type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="592" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="592" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a1278b482c837c11fd2f6f41b7f8b0f33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::serializeAs</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serializeAs</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="601" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="601" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1ac2ba0a705e45724c9882b904b5c1231b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::compareAs</definition>
        <argsstring>(AlignedCharUnion const *other) const</argsstring>
        <name>compareAs</name>
        <param>
          <type><ref refid="structvt_1_1util_1_1adt_1_1_aligned_char_union" kindref="compound">AlignedCharUnion</ref> const *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="607" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="607" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a7c7bfb6979d827a602e4aba1f6886cb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::hashAs</definition>
        <argsstring>() const</argsstring>
        <name>hashAs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="614" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="614" bodyend="617"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a58c0d0aaf061c92a89b33da6e84ea5d7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U *</type>
        <definition>U* vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::getSafe</definition>
        <argsstring>()</argsstring>
        <name>getSafe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="621" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="621" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a188460ee37c49aa3134d84ae728a2783" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U const  *</type>
        <definition>U const* vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::getSafe</definition>
        <argsstring>() const</argsstring>
        <name>getSafe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="631" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="631" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a8440cff62cda9dcffc9e86de39d23d8f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U *</type>
        <definition>U* vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::getUnsafe</definition>
        <argsstring>()</argsstring>
        <name>getUnsafe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="641" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="641" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1abfa5497bfe92bb4bda432da80c31137d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U const  *</type>
        <definition>U const* vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::getUnsafe</definition>
        <argsstring>() const</argsstring>
        <name>getUnsafe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="647" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a5be41aefcdc73b5f10102991b2aa8bfc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;::staticAssertCorrectness</definition>
        <argsstring>() const</argsstring>
        <name>staticAssertCorrectness</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/utils/adt/union.h" line="653" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="653" bodyend="658"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An aligned type-safe union that remembers its last type and runtime checks to ensure correctness. </para>    </briefdescription>
    <detaileddescription>
<para>Example of use:</para><para><programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Test1<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Test1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_a)<sp/>:<sp/>a_(in_a)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">AlignedCharUnion&lt;int,<sp/>float,<sp/>Test1&gt;<sp/>x;</highlight></codeline>
<codeline><highlight class="normal">x.init&lt;Test1&gt;(100);</highlight></codeline>
<codeline><highlight class="normal">x.get&lt;Test1&gt;.a_<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">x.reset();</highlight></codeline>
<codeline><highlight class="normal">x.init&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline><highlight class="normal">x.get&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>10;</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="93">
        <label>vt::util::adt::UnionCopy&lt; T, void, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_copy"/>
      </node>
      <node id="92">
        <label>vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_aligned_char_union"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="95">
        <label>vt::util::adt::UnionCopy&lt; T, void, Ts... &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_union_copy"/>
      </node>
      <node id="94">
        <label>vt::util::adt::AlignedCharUnion&lt; T, Ts &gt;</label>
        <link refid="structvt_1_1util_1_1adt_1_1_aligned_char_union"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/utils/adt/union.h" line="511" column="1" bodyfile="src/vt/utils/adt/union.h" bodystart="511" bodyend="659"/>
    <listofallmembers>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a8d0afe238f4a44735bb37be847f55c45" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>AlignedCharUnion</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1ac2ba0a705e45724c9882b904b5c1231b" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>compareAs</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1acd5ebe14c0990b3edacf9aeea031499f" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a4dfd0f51d2c58aa8af33e50e82fe98fa" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>get</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a58c0d0aaf061c92a89b33da6e84ea5d7" prot="private" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>getSafe</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a188460ee37c49aa3134d84ae728a2783" prot="private" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>getSafe</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a8440cff62cda9dcffc9e86de39d23d8f" prot="private" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>getUnsafe</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1abfa5497bfe92bb4bda432da80c31137d" prot="private" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>getUnsafe</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a5cdce588713b9d1e65b0be90bbeaa771" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>hash</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a7c7bfb6979d827a602e4aba1f6886cb8" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>hashAs</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a50f97a051cd59537528d6b5879f88a53" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>init</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1af78cf3c2f5b904d1f49ee19f0ac7871f" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>is</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a30e1323df5870ce0763e90a3d3caa0c9" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>operator==</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a3b7862db1eb10fc16c66aa09a4e3fec6" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>serialize</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a1278b482c837c11fd2f6f41b7f8b0f33" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>serializeAs</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1a5be41aefcdc73b5f10102991b2aa8bfc" prot="private" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>staticAssertCorrectness</name></member>
      <member refid="structvt_1_1util_1_1adt_1_1_aligned_char_union_1af9bd3e00a355dca08d88103852f716ce" prot="public" virt="non-virtual"><scope>vt::util::adt::AlignedCharUnion</scope><name>viewAs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
