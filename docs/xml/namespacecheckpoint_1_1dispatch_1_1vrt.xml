<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacecheckpoint_1_1dispatch_1_1vrt" kind="namespace" language="C++">
    <compoundname>checkpoint::dispatch::vrt</compoundname>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" prot="public">checkpoint::dispatch::vrt::InstantiateIfPossible</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" prot="public">checkpoint::dispatch::vrt::InstantiateTupleHelper</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper_3_01_obj_t_01_4" prot="public">checkpoint::dispatch::vrt::InstantiateTupleHelper&lt; ObjT &gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper_3_01_obj_t_00_01_t_00_01_ts_8_8_8_01_4" prot="public">checkpoint::dispatch::vrt::InstantiateTupleHelper&lt; ObjT, T, Ts... &gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible_3_01_obj_t_00_01_serializer_t_00f2328765646be8355fd88552c7d20478" prot="public">checkpoint::dispatch::vrt::InstantiateIfPossible&lt; ObjT, SerializerT, typename std::enable_if_t&lt; SerializableTraits&lt; ObjT, SerializerT &gt;::is_serializable &gt;&gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible_3_01_obj_t_00_01_serializer_t_00e6cea7afc6d3212786593c9e3a69da69" prot="public">checkpoint::dispatch::vrt::InstantiateIfPossible&lt; ObjT, SerializerT, typename std::enable_if_t&lt; not SerializableTraits&lt; ObjT, SerializerT &gt;::is_serializable &gt;&gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_serializable_base" prot="public">checkpoint::dispatch::vrt::SerializableBase</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_serializable_derived" prot="public">checkpoint::dispatch::vrt::SerializableDerived</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_virtual_serialize_traits" prot="public">checkpoint::dispatch::vrt::VirtualSerializeTraits</innerclass>
    <innernamespace refid="namespacecheckpoint_1_1dispatch_1_1vrt_1_1objregistry">checkpoint::dispatch::vrt::objregistry</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1dispatch_1_1vrt_1_1serializer__registry">checkpoint::dispatch::vrt::serializer_registry</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecheckpoint_1_1dispatch_1_1vrt_1acd3f9e6b091bcfbc23dc35ea8ef45d3b" prot="public" static="no">
        <type>int</type>
        <definition>using checkpoint::dispatch::vrt::TypeIdx = typedef int</definition>
        <argsstring></argsstring>
        <name>TypeIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/registry_common.h" line="50" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/registry_common.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecheckpoint_1_1dispatch_1_1vrt_1a58c383a5e13121d661f8fa58ab8b725e" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="namespacecheckpoint_1_1dispatch_1_1vrt_1acd3f9e6b091bcfbc23dc35ea8ef45d3b" kindref="member">TypeIdx</ref> const</type>
        <definition>constexpr TypeIdx const checkpoint::dispatch::vrt::no_type_idx</definition>
        <argsstring></argsstring>
        <name>no_type_idx</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/registry_common.h" line="52" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/registry_common.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecheckpoint_1_1dispatch_1_1vrt_1a1edd0d1d99a9d53058715b72e8aa7f38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::vrt::assertTypeIdxMatch</definition>
        <argsstring>(TypeIdx const expected_idx)</argsstring>
        <name>assertTypeIdxMatch</name>
        <param>
          <type><ref refid="namespacecheckpoint_1_1dispatch_1_1vrt_1acd3f9e6b091bcfbc23dc35ea8ef45d3b" kindref="member">TypeIdx</ref> const</type>
          <declname>expected_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/inheritance_assert_helpers.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/inheritance_assert_helpers.h" bodystart="55" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1_1dispatch_1_1vrt_1a386bc0347756889ae1d3849cf351110e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename DerivedT</type>
          </param>
          <param>
            <type>typename BaseT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::vrt::linkDerivedToBase</definition>
        <argsstring>()</argsstring>
        <name>linkDerivedToBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/link_derived_to_base_idx.h" line="53" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/link_derived_to_base_idx.h" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1_1dispatch_1_1vrt_1ab865abca98caddc6e77329fa227fba6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void checkpoint::dispatch::vrt::instantiateObjSerializerImpl</definition>
        <argsstring>()</argsstring>
        <name>instantiateObjSerializerImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/serialize_instantiator.h" line="94" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/serialize_instantiator.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacecheckpoint_1_1dispatch_1_1vrt_1ab62fa4e32b27853f6b57caf24b6a77cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::vrt::virtualSerialize</definition>
        <argsstring>(T *&amp;base, SerializerT &amp;s)</argsstring>
        <name>virtualSerialize</name>
        <param>
          <type>T *&amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>A function to handle serialization of objects of a mix of types in a virtual inheritance hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>This will automatically record the exact derived type at serialization, and reconstruct objects accordingly at deserialization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/virtual_serialize.h" line="62" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/vrt/virtual_serialize.h" bodystart="62" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/dispatch/vrt/base.h" line="74" column="1"/>
  </compounddef>
</doxygen>
