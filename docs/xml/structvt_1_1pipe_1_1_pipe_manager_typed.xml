<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1pipe_1_1_pipe_manager_typed" kind="struct" language="C++" prot="public">
    <compoundname>vt::pipe::PipeManagerTyped</compoundname>
    <basecompoundref refid="structvt_1_1pipe_1_1_pipe_manager_base" prot="public" virt="virtual">vt::pipe::PipeManagerBase</basecompoundref>
    <derivedcompoundref refid="structvt_1_1pipe_1_1_pipe_manager" prot="public" virt="non-virtual">vt::pipe::PipeManager</derivedcompoundref>
    <includes refid="pipe__manager__typed_8h" local="no">pipe_manager_typed.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1interface_1_1_callback_types" kindref="compound">interface::CallbackTypes</ref>&lt; T &gt;</type>
        <definition>using vt::pipe::PipeManagerTyped::CBTypes =  interface::CallbackTypes&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>CBTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="68" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a306c7c126ed7fb6c5b53bfcf38726291" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" kindref="member">CBTypes</ref>&lt; T &gt;::CallbackDirectSend</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackSendType =  typename CBTypes&lt;T&gt;::CallbackDirectSend</definition>
        <argsstring></argsstring>
        <name>CallbackSendType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="70" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a3723a2c74fb38e4ad6d7aa546e720ae8" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" kindref="member">CBTypes</ref>&lt; T &gt;::CallbackAnon</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackAnonType =  typename CBTypes&lt;T&gt;::CallbackAnon</definition>
        <argsstring></argsstring>
        <name>CallbackAnonType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="72" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a4176395e8a35ec2a809890a9aad5b29e" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" kindref="member">CBTypes</ref>&lt; T &gt;::CallbackDirectBcast</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackBcastType =  typename CBTypes&lt;T&gt;::CallbackDirectBcast</definition>
        <argsstring></argsstring>
        <name>CallbackBcastType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="74" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a09eb51f50878116c3b0867fad5f9aab0" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" kindref="member">CBTypes</ref>&lt; void &gt;::CallbackDirectVoidSend</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackSendVoidType =  typename CBTypes&lt;void&gt;::CallbackDirectVoidSend</definition>
        <argsstring></argsstring>
        <name>CallbackSendVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="75" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1ab028a342e37daeacc38acbfc185e0997" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" kindref="member">CBTypes</ref>&lt; void &gt;::CallbackDirectVoidBcast</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackBcastVoidType =  typename CBTypes&lt;void&gt;::CallbackDirectVoidBcast</definition>
        <argsstring></argsstring>
        <name>CallbackBcastVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="76" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1ac17133b080980cbe0bc29b285666b2be" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" kindref="member">CBTypes</ref>&lt; void &gt;::CallbackAnonVoid</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackAnonVoidType =  typename CBTypes&lt;void&gt;::CallbackAnonVoid</definition>
        <argsstring></argsstring>
        <name>CallbackAnonVoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="77" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1abb75b2bfdb23ebfa7f4f677a7f4bcb77" prot="public" static="no">
        <type><ref refid="structvt_1_1pipe_1_1interface_1_1_callback_vrt_types" kindref="compound">interface::CallbackVrtTypes</ref>&lt; C, T &gt;</type>
        <definition>using vt::pipe::PipeManagerTyped::CBVrtTypes =  interface::CallbackVrtTypes&lt;C,T&gt;</definition>
        <argsstring></argsstring>
        <name>CBVrtTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="80" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a74e5f1a359ab32259f855998f867d93a" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1abb75b2bfdb23ebfa7f4f677a7f4bcb77" kindref="member">CBVrtTypes</ref>&lt; C, T &gt;::CallbackProxyBcast</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackProxyBcastType =  typename CBVrtTypes&lt;C,T&gt;::CallbackProxyBcast</definition>
        <argsstring></argsstring>
        <name>CallbackProxyBcastType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="82" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a9259903ba569c54c4e4bc6ad7888e059" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1abb75b2bfdb23ebfa7f4f677a7f4bcb77" kindref="member">CBVrtTypes</ref>&lt; C, T &gt;::CallbackProxySend</type>
        <definition>using vt::pipe::PipeManagerTyped::CallbackProxySendType =  typename CBVrtTypes&lt;C,T&gt;::CallbackProxySend</definition>
        <argsstring></argsstring>
        <name>CallbackProxySendType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="84" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a1b4f3f5a713ebec4fff1189021ff501b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *...</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1interface_1_1_callback_direct_send_multi" kindref="compound">interface::CallbackDirectSendMulti</ref>&lt; MsgT, typename <ref refid="structvt_1_1pipe_1_1_repeat_n_impl" kindref="compound">RepeatNImpl</ref>&lt; sizeof...(f), <ref refid="structvt_1_1pipe_1_1callback_1_1_callback_send" kindref="compound">callback::CallbackSend</ref>&lt; MsgT &gt; &gt;::ResultType &gt;</type>
        <definition>interface::CallbackDirectSendMulti&lt; MsgT, typename RepeatNImpl&lt; sizeof...(f), callback::CallbackSend&lt; MsgT &gt; &gt;::ResultType &gt; vt::pipe::PipeManagerTyped::makeCallbackMultiSendTyped</definition>
        <argsstring>(bool const is_persist, NodeType const &amp;send_to_node)</argsstring>
        <name>makeCallbackMultiSendTyped</name>
        <param>
          <type>bool const</type>
          <declname>is_persist</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>send_to_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="95" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="207" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1ae6dbfc18f6dc280c007d02c25bee38dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTyped::pushTargetBcast</definition>
        <argsstring>(bool const &amp;inc)</argsstring>
        <name>pushTargetBcast</name>
        <param>
          <type>bool const &amp;</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="100" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a89e6ea6de5c6723b1cef14657ba588ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTyped::pushTargetBcast</definition>
        <argsstring>(CallbackT in, bool const &amp;inc)</argsstring>
        <name>pushTargetBcast</name>
        <param>
          <type>CallbackT</type>
          <declname>in</declname>
        </param>
        <param>
          <type>bool const &amp;</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="103" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a33bb7d066b2ca629c000d15c05323e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTyped::pushTarget</definition>
        <argsstring>(NodeType const &amp;send_to_node)</argsstring>
        <name>pushTarget</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>send_to_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="106" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a2f793d591d216dfa38f8c95cf42e25f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTyped::pushTarget</definition>
        <argsstring>(CallbackT in, NodeType const &amp;send_to_node)</argsstring>
        <name>pushTarget</name>
        <param>
          <type>CallbackT</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>send_to_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="109" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1aace7b9169efa610aa1d006eef4e68510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CallbackT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vt::pipe::PipeManagerTyped::buildMultiCB</definition>
        <argsstring>(CallbackT in)</argsstring>
        <name>buildMultiCB</name>
        <param>
          <type>CallbackT</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="112" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="256" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1ac39b55392dbfc09be9f2abe1c68a0e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a306c7c126ed7fb6c5b53bfcf38726291" kindref="member">CallbackSendType</ref>&lt; MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackSendType&lt; MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleSendTyped</definition>
        <argsstring>(bool const is_persist, NodeType const &amp;send_to_node)</argsstring>
        <name>makeCallbackSingleSendTyped</name>
        <param>
          <type>bool const</type>
          <declname>is_persist</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>send_to_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="119" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="102" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a1e7b6839175c1234110288b549e99145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::MessageType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a306c7c126ed7fb6c5b53bfcf38726291" kindref="member">CallbackSendType</ref>&lt; MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackSendType&lt; MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleSendFunctorTyped</definition>
        <argsstring>(bool const is_persist, NodeType const &amp;send_to_node)</argsstring>
        <name>makeCallbackSingleSendFunctorTyped</name>
        <param>
          <type>bool const</type>
          <declname>is_persist</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>send_to_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="127" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a2bb010b0f35b6587eb65a637443e5243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a09eb51f50878116c3b0867fad5f9aab0" kindref="member">CallbackSendVoidType</ref></type>
        <definition>PipeManagerTyped::CallbackSendVoidType vt::pipe::PipeManagerTyped::makeCallbackSingleSendFunctorVoidTyped</definition>
        <argsstring>(bool const is_persist, NodeType const &amp;send_to_node)</argsstring>
        <name>makeCallbackSingleSendFunctorVoidTyped</name>
        <param>
          <type>bool const</type>
          <declname>is_persist</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref> const &amp;</type>
          <declname>send_to_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="132" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="127" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1ab09de6a0f8400e1668d4134d24f51bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a3723a2c74fb38e4ad6d7aa546e720ae8" kindref="member">CallbackAnonType</ref>&lt; MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackAnonType&lt; MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleAnonTyped</definition>
        <argsstring>(bool const persist, FuncMsgType&lt; MsgT &gt; fn)</argsstring>
        <name>makeCallbackSingleAnonTyped</name>
        <param>
          <type>bool const</type>
          <declname>persist</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" kindref="member">FuncMsgType</ref>&lt; MsgT &gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="140" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="68" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a306040a3eaa54799594e9a39d8d0a191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ac17133b080980cbe0bc29b285666b2be" kindref="member">CallbackAnonVoidType</ref></type>
        <definition>PipeManagerTyped::CallbackAnonVoidType vt::pipe::PipeManagerTyped::makeCallbackSingleAnonVoidTyped</definition>
        <argsstring>(bool const persist, FuncVoidType fn)</argsstring>
        <name>makeCallbackSingleAnonVoidTyped</name>
        <param>
          <type>bool const</type>
          <declname>persist</declname>
        </param>
        <param>
          <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" kindref="member">FuncVoidType</ref></type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="145" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="85" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a2ad082461a47d098fa5dadb7aca517e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1a54eefd5373739c7365058b0d22fea6e2" kindref="member">ActiveTypedFnType</ref>&lt; MsgT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a4176395e8a35ec2a809890a9aad5b29e" kindref="member">CallbackBcastType</ref>&lt; MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackBcastType&lt; MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleBcastTyped</definition>
        <argsstring>(bool const inc)</argsstring>
        <name>makeCallbackSingleBcastTyped</name>
        <param>
          <type>bool const</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="153" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a74135c6c11f5cd49bf560be506056a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
          <param>
            <type>typename MsgT</type>
            <defval>typename <ref refid="structvt_1_1util_1_1_functor_extractor" kindref="compound">util::FunctorExtractor</ref>&lt;FunctorT&gt;::MessageType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a4176395e8a35ec2a809890a9aad5b29e" kindref="member">CallbackBcastType</ref>&lt; MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackBcastType&lt; MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleBcastFunctorTyped</definition>
        <argsstring>(bool const inc)</argsstring>
        <name>makeCallbackSingleBcastFunctorTyped</name>
        <param>
          <type>bool const</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="159" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a9392cfaa2787f28fd1193421eff4e837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctorT</type>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ab028a342e37daeacc38acbfc185e0997" kindref="member">CallbackBcastVoidType</ref></type>
        <definition>PipeManagerTyped::CallbackBcastVoidType vt::pipe::PipeManagerTyped::makeCallbackSingleBcastFunctorVoidTyped</definition>
        <argsstring>(bool const inc)</argsstring>
        <name>makeCallbackSingleBcastFunctorVoidTyped</name>
        <param>
          <type>bool const</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="162" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1a4709469e02dda4bbe02cf5f5e18e36d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">vrt::collection::ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a74e5f1a359ab32259f855998f867d93a" kindref="member">CallbackProxyBcastType</ref>&lt; ColT, MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackProxyBcastType&lt; ColT, MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleProxyBcastTyped</definition>
        <argsstring>(CollectionProxy&lt; ColT, typename ColT::IndexType &gt; proxy)</argsstring>
        <name>makeCallbackSingleProxyBcastTyped</name>
        <param>
          <type><ref refid="namespacevt_1a0d58a693bfb96e0ce5d145692a1a1f98" kindref="member">CollectionProxy</ref>&lt; ColT, typename ColT::IndexType &gt;</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="172" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1pipe_1_1_pipe_manager_typed_1abc80f7c6999d009ddd2a531cc858698e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ColT</type>
          </param>
          <param>
            <type>typename MsgT</type>
          </param>
          <param>
            <type><ref refid="namespacevt_1_1vrt_1_1collection_1a1f4b9c5fe895842f49952a29592bc206" kindref="member">vrt::collection::ActiveColTypedFnType</ref>&lt; MsgT, ColT &gt; *</type>
            <declname>f</declname>
            <defname>f</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a9259903ba569c54c4e4bc6ad7888e059" kindref="member">CallbackProxySendType</ref>&lt; ColT, MsgT &gt;</type>
        <definition>PipeManagerTyped::CallbackProxySendType&lt; ColT, MsgT &gt; vt::pipe::PipeManagerTyped::makeCallbackSingleProxySendTyped</definition>
        <argsstring>(typename ColT::ProxyType proxy)</argsstring>
        <name>makeCallbackSingleProxySendTyped</name>
        <param>
          <type>typename ColT::ProxyType</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/pipe/pipe_manager_typed.h" line="184" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.impl.h" bodystart="191" bodyend="200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3055">
        <label>vt::pipe::PipeManager</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager"/>
        <childnode refid="3053" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3053">
        <label>vt::pipe::PipeManagerTyped</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_typed"/>
        <childnode refid="3054" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3054">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3056">
        <label>vt::pipe::PipeManagerTyped</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_typed"/>
        <childnode refid="3057" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3057">
        <label>vt::pipe::PipeManagerBase</label>
        <link refid="structvt_1_1pipe_1_1_pipe_manager_base"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/pipe/pipe_manager_typed.h" line="66" column="1" bodyfile="src/vt/pipe/pipe_manager_typed.h" bodystart="66" bodyend="187"/>
    <listofallmembers>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa878aef84540ec6c2ca89096683d407e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>addListener</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aee28bc7a33e3a0b796aa8fcdd6f72bd9" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>addListenerAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ae486f94f76733fd3d97ff393c35d0e5e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>addListenerVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1aace7b9169efa610aa1d006eef4e68510" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>buildMultiCB</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a3723a2c74fb38e4ad6d7aa546e720ae8" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackAnonType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ac17133b080980cbe0bc29b285666b2be" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackAnonVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a4176395e8a35ec2a809890a9aad5b29e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackBcastType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ab028a342e37daeacc38acbfc185e0997" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackBcastVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a74e5f1a359ab32259f855998f867d93a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackProxyBcastType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a9259903ba569c54c4e4bc6ad7888e059" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackProxySendType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a306c7c126ed7fb6c5b53bfcf38726291" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackSendType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a09eb51f50878116c3b0867fad5f9aab0" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CallbackSendVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a62dfc4fabe734915f3ec2544e225b6b3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CBTypes</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1abb75b2bfdb23ebfa7f4f677a7f4bcb77" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>CBVrtTypes</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a983e301505317c5ba2041461e7dec84a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>DispatchFuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad8463823b6b4cfdb67c119d6d22e3bac" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>FuncCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a73fdf82ece0411b3dc644c99b763f7a9" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>FuncMsgCtxType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1aa54eee64ab32a27777a672d49eb861f4" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>FuncMsgType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7ddc75a14fa50cd8521641ef6f9ea78d" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>FuncType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acd6f0c71f38f08d53f85e83b65406d77" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>FuncVoidType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27d24548529db938aeeb6fe11af985a1" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>generalSignalTrigger</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a6fec17887d5cae03c513088ccb4ce3db" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackAny</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a7fbd6f5b88e5cca79f8588ea67ce6161" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackFunc</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a20bf85e7494b5d018ed24b052f56fc28" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackFuncVoid</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a1b4f3f5a713ebec4fff1189021ff501b" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackMultiSendTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ab09de6a0f8400e1668d4134d24f51bf3" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleAnonTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a306040a3eaa54799594e9a39d8d0a191" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleAnonVoidTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a74135c6c11f5cd49bf560be506056a03" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleBcastFunctorTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a9392cfaa2787f28fd1193421eff4e837" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleBcastFunctorVoidTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a2ad082461a47d098fa5dadb7aca517e7" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleBcastTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a4709469e02dda4bbe02cf5f5e18e36d6" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleProxyBcastTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1abc80f7c6999d009ddd2a531cc858698e" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleProxySendTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a1e7b6839175c1234110288b549e99145" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleSendFunctorTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a2bb010b0f35b6587eb65a637443e5243" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleSendFunctorVoidTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ac39b55392dbfc09be9f2abe1c68a0e2a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makeCallbackSingleSendTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af1ba11407837cb69b4d205dd7ba880b0" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>makePipeID</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a458f8135ed2a44ec51afb21676c5db50" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>newPipeState</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a6b3b1e6d6bfe21308090d2dc62743961" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>PipeManagerBase</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a1364798bda487c9fb04879599f96c507" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>PipeStateType</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a33bb7d066b2ca629c000d15c05323e4a" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>pushTarget</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a2f793d591d216dfa38f8c95cf42e25f1" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>pushTarget</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1ae6dbfc18f6dc280c007d02c25bee38dc" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>pushTargetBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_typed_1a89e6ea6de5c6723b1cef14657ba588ab" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>pushTargetBcast</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a27f1aea903f8e05655eb84ae1474c729" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>registerCallback</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1acae150f3cb2f27a84f39186ad4dd1a37" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>triggerCallbackHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a56855a2a2c55decbb79971f51fb9dcce" prot="public" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>triggerCallbackMsgHan</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a32f82a02196fe42e98ae3b628b73ae6d" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>triggerPipe</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1a34492ef027a92525ca5acc4e86b360ce" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>triggerPipeTyped</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1ad21185d07e9c3a0206d3d5a791f668a3" prot="protected" virt="non-virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>triggerPipeUnknown</name></member>
      <member refid="structvt_1_1pipe_1_1_pipe_manager_base_1af7b66141f69a485c6fce5e02bbbd3f89" prot="public" virt="virtual"><scope>vt::pipe::PipeManagerTyped</scope><name>~PipeManagerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
