<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1dispatch_1_1_clean_type" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::dispatch::CleanType</compoundname>
    <includes refid="clean__type_8h" local="no">clean_type.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_clean_type_1a8edf98e1e2cbcd55b0b0a57d563be9e7" prot="public" static="no">
        <type>typename std::enable_if&lt; std::is_const&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::CleanType&lt; T &gt;::isConst =  typename std::enable_if&lt;std::is_const&lt;U&gt;::value, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="55" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_clean_type_1a87436675be4aca146c0ff68911684634" prot="public" static="no">
        <type>typename std::enable_if&lt;!std::is_const&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::CleanType&lt; T &gt;::isNotConst =  typename std::enable_if&lt;!std::is_const&lt;U&gt;::value, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isNotConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="57" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_clean_type_1af8cc50327016b4a8410504e245edeb6f" prot="public" static="no">
        <type>typename std::remove_const&lt; T &gt;::type</type>
        <definition>using checkpoint::dispatch::CleanType&lt; T &gt;::NonConstT =  typename std::remove_const&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>NonConstT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="59" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_clean_type_1a22ac8ae19000187cd7d3d218f3efa46e" prot="public" static="no">
        <type>typename std::decay&lt; T &gt;::type</type>
        <definition>using checkpoint::dispatch::CleanType&lt; T &gt;::NonConstRefT =  typename std::decay&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>NonConstRefT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="60" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_clean_type_1a5ca6cd4c73773e29c340901d3e6864d2" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a22ac8ae19000187cd7d3d218f3efa46e" kindref="member">NonConstRefT</ref></type>
        <definition>using checkpoint::dispatch::CleanType&lt; T &gt;::CleanT =  NonConstRefT</definition>
        <argsstring></argsstring>
        <name>CleanT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="61" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_clean_type_1a3cae7a0e99d5ad8455d449b564a6e420" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a22ac8ae19000187cd7d3d218f3efa46e" kindref="member">NonConstRefT</ref> *</type>
        <definition>static NonConstRefT* checkpoint::dispatch::CleanType&lt; T &gt;::clean</definition>
        <argsstring>(T *val)</argsstring>
        <name>clean</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="64" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_clean_type_1ac72dd0e6578ffb7bf75099f432271254" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a22ac8ae19000187cd7d3d218f3efa46e" kindref="member">NonConstRefT</ref> *</type>
        <definition>static NonConstRefT* checkpoint::dispatch::CleanType&lt; T &gt;::apply1</definition>
        <argsstring>(T *val, isConst&lt; U &gt; *=nullptr)</argsstring>
        <name>apply1</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a8edf98e1e2cbcd55b0b0a57d563be9e7" kindref="member">isConst</ref>&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="69" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_clean_type_1ac29a0f7671b127852a6244c0e9f1919a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a22ac8ae19000187cd7d3d218f3efa46e" kindref="member">NonConstRefT</ref> *</type>
        <definition>static NonConstRefT* checkpoint::dispatch::CleanType&lt; T &gt;::apply1</definition>
        <argsstring>(T *val, isNotConst&lt; U &gt; *=nullptr)</argsstring>
        <name>apply1</name>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a87436675be4aca146c0ff68911684634" kindref="member">isNotConst</ref>&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="74" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="74" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" line="52" column="1" bodyfile="lib/checkpoint/src/checkpoint/dispatch/clean_type.h" bodystart="52" bodyend="77"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1ac72dd0e6578ffb7bf75099f432271254" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>apply1</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1ac29a0f7671b127852a6244c0e9f1919a" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>apply1</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a3cae7a0e99d5ad8455d449b564a6e420" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>clean</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a5ca6cd4c73773e29c340901d3e6864d2" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>CleanT</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a8edf98e1e2cbcd55b0b0a57d563be9e7" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>isConst</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a87436675be4aca146c0ff68911684634" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>isNotConst</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1a22ac8ae19000187cd7d3d218f3efa46e" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>NonConstRefT</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_clean_type_1af8cc50327016b4a8410504e245edeb6f" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::CleanType</scope><name>NonConstT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
