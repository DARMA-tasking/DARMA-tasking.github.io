<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a" kind="struct" language="C++" prot="public">
    <compoundname>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</compoundname>
    <basecompoundref refid="structvt_1_1rdma_1_1_base_typed_handle" prot="public" virt="non-virtual">vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;</basecompoundref>
    <includes refid="handle_8index_8h" local="no">handle.index.h</includes>
    <innerclass refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_1ceedd6f8d829061f3897a02dba9ce2d" prot="public">vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;::IndexTagType</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type><ref refid="namespacevt_1_1rdma_1a0234ff19cfb3c04718cfdfd36b2d6d88" kindref="member">HandleEnum</ref></type>
        <declname>E</declname>
        <defname>E</defname>
      </param>
      <param>
        <type>typename IndexT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a7b884d1c3b2be49b47899ad24757710a" prot="public" static="no">
        <type>typename <ref refid="structvt_1_1rdma_1_1_base_typed_handle" kindref="compound">BaseTypedHandle</ref>&lt; T, E, IndexT &gt;::<ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" kindref="member">RequestType</ref></type>
        <definition>using vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::RequestType =  typename BaseTypedHandle&lt;T, E, IndexT&gt;::RequestType</definition>
        <argsstring></argsstring>
        <name>RequestType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="75" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a1fd6b9bc3f72bb2b64e602de3982929d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct Manager</definition>
        <argsstring></argsstring>
        <name>Manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="83" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aa597d7381f8793417b0656cbaf1625f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct SubHandle&lt; T, E, IndexT &gt;</definition>
        <argsstring></argsstring>
        <name>SubHandle&lt; T, E, IndexT &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="83" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a22334887cacdf3256127600c50c9d2b1" prot="protected" static="no" mutable="no">
        <type>IndexT</type>
        <definition>IndexT vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The index for the handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="353" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a050f5dac1123979f6286ca6f99bfbe21" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
        <definition>ObjGroupProxyType vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::proxy_</definition>
        <argsstring></argsstring>
        <name>proxy_</name>
        <initializer>= no_obj_group</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The managing objgroup proxy </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="354" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1abdfe9dcf8a155c7e2bd91dabf6472702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::Handle</definition>
        <argsstring>()=default</argsstring>
        <name>Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a9362a80316cbbc4527bc1b93f24a5a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::Handle</definition>
        <argsstring>(Handle const &amp;)=default</argsstring>
        <name>Handle</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">Handle</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a730e0d6dab39e85472500ad7e04add58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::Handle</definition>
        <argsstring>(Handle &amp;&amp;)=default</argsstring>
        <name>Handle</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">Handle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a9ebc139217531d3fe1d6d1cc1b824daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">Handle</ref> &amp;</type>
        <definition>Handle&amp; vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::operator=</definition>
        <argsstring>(Handle const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">Handle</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a29355ec3a0a21b03da7b2b2098b5ad88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">Handle</ref> &amp;</type>
        <definition>Handle&amp; vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::operator=</definition>
        <argsstring>(Handle &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structvt_1_1rdma_1_1_handle" kindref="compound">Handle</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aa7de4d0e334b4c69c316f57d003d2429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::Handle</definition>
        <argsstring>(IndexTagType, ObjGroupProxyType in_proxy, IndexT const &amp;in_index, std::size_t in_size, std::size_t in_hoff=0)</argsstring>
        <name>Handle</name>
        <param>
          <type>IndexTagType</type>
        </param>
        <param>
          <type><ref refid="namespacevt_1ad7cae989df485fccca57f0792a880a8e" kindref="member">ObjGroupProxyType</ref></type>
          <declname>in_proxy</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>in_index</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>in_hoff</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Private constructor used the system factory method to construct a new index-level handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_proxy</parametername>
</parameternamelist>
<parameterdescription>
<para>the proxy for managing the indexed handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index for this handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of local handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_hoff</parametername>
</parameternamelist>
<parameterdescription>
<para>local offset for handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="98" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="98" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a8757ffe8f60317fccb422db99ee048e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::isInit</definition>
        <argsstring>() const</argsstring>
        <name>isInit</name>
        <briefdescription>
<para>Check if the handle is initialized. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the handle is initialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="117" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a37e164e4eb34320551c7641c5e2f123b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IndexT const  &amp;</type>
        <definition>IndexT const&amp; vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::getIndex</definition>
        <argsstring>() const</argsstring>
        <name>getIndex</name>
        <briefdescription>
<para>Get the index for this handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="124" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a860f35e2562f8ab0e5606281315d2e17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::ready</definition>
        <argsstring>() const</argsstring>
        <name>ready</name>
        <briefdescription>
<para>Check if the handle is ready to be used; implies that all MPI windows are constructed across the machine. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether its ready </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1adc7b1058678ece326e044eac9d4c83cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::readExclusive</definition>
        <argsstring>(std::function&lt; void(T const *, std::size_t count)&gt; fn)</argsstring>
        <name>readExclusive</name>
        <param>
          <type>std::function&lt; void(T const *, std::size_t <ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" kindref="member">count</ref>)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Read the local data for the handle with an exclusive lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>lambda to read the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a20ad220782a771d3b4b1a63b963f7adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::readShared</definition>
        <argsstring>(std::function&lt; void(T const *, std::size_t count)&gt; fn)</argsstring>
        <name>readShared</name>
        <param>
          <type>std::function&lt; void(T const *, std::size_t <ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" kindref="member">count</ref>)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Read the local data for the handle with an shared lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>lambda to read the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a193a769321ba99cb7c999118d195d158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::modifyExclusive</definition>
        <argsstring>(std::function&lt; void(T *, std::size_t count)&gt; fn)</argsstring>
        <name>modifyExclusive</name>
        <param>
          <type>std::function&lt; void(T *, std::size_t <ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" kindref="member">count</ref>)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Modify the local data for the handle with an exclusive lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>lambda to modify the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a1e54b62400f4e12e2e7e4862851352c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::modifyShared</definition>
        <argsstring>(std::function&lt; void(T *, std::size_t count)&gt; fn)</argsstring>
        <name>modifyShared</name>
        <param>
          <type>std::function&lt; void(T *, std::size_t <ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" kindref="member">count</ref>)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Modify the local data for the handle with an shared lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>lambda to modify the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a700818b012865e7c8523abe143dc37e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::get</definition>
        <argsstring>(IndexT const &amp;idx, std::size_t len, int offset, Lock l=Lock::None)</argsstring>
        <name>get</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Get data from the underlying MPI window on a remote index, calls down to <computeroutput>MPI_Get</computeroutput> or <computeroutput>MPI_Rget</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This variant of <computeroutput>get</computeroutput> fetches into the buffer that is associated with the the handle. See <computeroutput>setBuffer</computeroutput> and <computeroutput>getBuffer</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1ac1f836e8530774b590430504e747c901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::get</definition>
        <argsstring>(IndexT const &amp;idx, T *ptr, std::size_t len, int offset, Lock l=Lock::None)</argsstring>
        <name>get</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Get data from the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Get</computeroutput> or <computeroutput>MPI_Rget</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to write the fetched bytes to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a7b6743e3f3bace08a1c6fce3b19f27c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::put</definition>
        <argsstring>(IndexT const &amp;idx, T *ptr, std::size_t len, int offset, Lock l=Lock::None)</argsstring>
        <name>put</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Put data using the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Put</computeroutput> or <computeroutput>MPI_Rput</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer of data to put </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to put </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the put </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a8182aefb99d33b103c671addb6bb28c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::accum</definition>
        <argsstring>(IndexT const &amp;idx, T *ptr, std::size_t len, int offset, MPI_Op op, Lock l=Lock::None)</argsstring>
        <name>accum</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>MPI_Op</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Accumulate data using the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Accumulate</computeroutput> or <computeroutput>MPI_Raccumulate</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer of data to accumulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to accumulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation <computeroutput>MPI_Op</computeroutput> to apply for accumulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the accumulate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1ae48628cffbfa47fe7cd171426e1a76b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" kindref="member">RequestType</ref></type>
        <definition>RequestType vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::rget</definition>
        <argsstring>(IndexT const &amp;idx, T *ptr, std::size_t len, int offset, Lock l=Lock::None)</argsstring>
        <name>rget</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Get data asynchronously from the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Rget</computeroutput> when MPI 3 is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If MPI 3 is not enabled, it attaches a regular <computeroutput>MPI_Get</computeroutput> to the <computeroutput><ref refid="structvt_1_1rdma_1_1_request_holder" kindref="compound">RequestHolder</ref></computeroutput> that is dispatched when waited on. This variant of <computeroutput>get</computeroutput> fetches into the buffer that is associated with the the handle. See <computeroutput>setBuffer</computeroutput> and <computeroutput>getBuffer</computeroutput> </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the get</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the request holder to wait on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aa944bb8230caf7e0852c21099f5d8cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" kindref="member">RequestType</ref></type>
        <definition>RequestType vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::rget</definition>
        <argsstring>(IndexT const &amp;idx, std::size_t len, int offset, Lock l=Lock::None)</argsstring>
        <name>rget</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Get data asynchronously from the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Rget</computeroutput> when MPI 3 is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If MPI 3 is not enabled, it attaches a regular <computeroutput>MPI_Get</computeroutput> to the <computeroutput><ref refid="structvt_1_1rdma_1_1_request_holder" kindref="compound">RequestHolder</ref></computeroutput> that is dispatched when waited on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to write the fetched bytes to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the get</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the request holder to wait on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a71ab9bf9b26aa1db0d6d5cc7a712f3ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" kindref="member">RequestType</ref></type>
        <definition>RequestType vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::rput</definition>
        <argsstring>(IndexT const &amp;idx, T *ptr, std::size_t len, int offset, Lock l=Lock::None)</argsstring>
        <name>rput</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Put data asynchronously from the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Rput</computeroutput> when MPI 3 is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If MPI 3 is not enabled, it attaches a regular <computeroutput>MPI_Put</computeroutput> to the <computeroutput><ref refid="structvt_1_1rdma_1_1_request_holder" kindref="compound">RequestHolder</ref></computeroutput> that is dispatched when waited on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer of data to put </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to put </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the put </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a14e800f21489334ed91f3ad40412565d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1rdma_1_1_base_typed_handle_1a449c2c1948f5793c3fdfb1aba5801ed7" kindref="member">RequestType</ref></type>
        <definition>RequestType vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::raccum</definition>
        <argsstring>(IndexT const &amp;idx, T *ptr, std::size_t len, int offset, MPI_Op op, Lock l=Lock::None)</argsstring>
        <name>raccum</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>MPI_Op</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Accumulate data asynchronously using the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Raccumulate</computeroutput> when MPI 3 is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If MPI 3 is not enabled, it attaches a regular <computeroutput>MPI_Accumulate</computeroutput> to the <computeroutput><ref refid="structvt_1_1rdma_1_1_request_holder" kindref="compound">RequestHolder</ref></computeroutput> that is dispatched when waited on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer of data to accumulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length to accumulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation <computeroutput>MPI_Op</computeroutput> to apply for accumulate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the accumulate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1add9aa1811c10aa54376a682f6c7be847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::fetchOp</definition>
        <argsstring>(IndexT const &amp;idx, T val, int offset, MPI_Op op, Lock l=Lock::None)</argsstring>
        <name>fetchOp</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>MPI_Op</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
          <defval><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Lock::None</ref></defval>
        </param>
        <briefdescription>
<para>Perform one-sided read-modify-write using the underlying MPI window on a remote process, calls down to <computeroutput>MPI_Fetch_and_op</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the handle index to target </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to fetch-op </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation <computeroutput>MPI_Op</computeroutput> to apply for fetch-op </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>the lock to apply for the fetch-op</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value fetched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1ad2cc71ceb8a965a56a6cd16181b00071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::getCount</definition>
        <argsstring>(IndexT const &amp;idx)</argsstring>
        <name>getCount</name>
        <param>
          <type>IndexT const &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get the count of the data window for a certain index. If the count is non-uniform, it will remotely fetch the count from that node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to request the count</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the handle&apos;s data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a417746a96f30d65dc941ba3904a612cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::lock</definition>
        <argsstring>(Lock l, IndexT const &amp;node)</argsstring>
        <name>lock</name>
        <param>
          <type><ref refid="namespacevt_1_1rdma_1ac5c20b41a653e520b6305d4d454ecb70" kindref="member">Lock</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>IndexT const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Lock the handle to apply multiple operations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">l</parametername>
</parameternamelist>
<parameterdescription>
<para>lock to apply </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>which idx to lock </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aeb8b31602a46bc22042360280ef88b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
<para>Unlock the handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a861a97549fb4aaa9880401dbdf2e0a23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Serializer for the handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/rdmahandle/handle.index.h" line="346" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="346" bodyend="350"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4401">
        <label>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;</label>
        <link refid="structvt_1_1rdma_1_1_base_typed_handle"/>
        <childnode refid="4402" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4400">
        <label>vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;</label>
        <link refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a"/>
        <childnode refid="4401" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4402">
        <label>vt::rdma::BaseHandle</label>
        <link refid="structvt_1_1rdma_1_1_base_handle"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4406">
        <label>T</label>
      </node>
      <node id="4404">
        <label>vt::rdma::BaseTypedHandle&lt; T, E, IndexT &gt;</label>
        <link refid="structvt_1_1rdma_1_1_base_typed_handle"/>
        <childnode refid="4405" relation="public-inheritance">
        </childnode>
        <childnode refid="4406" relation="usage">
          <edgelabel>user_buffer_</edgelabel>
        </childnode>
      </node>
      <node id="4403">
        <label>vt::rdma::value &gt;&gt;&lt; T, E, IndexT &gt;</label>
        <link refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a"/>
        <childnode refid="4404" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4405">
        <label>vt::rdma::BaseHandle</label>
        <link refid="structvt_1_1rdma_1_1_base_handle"/>
      </node>
    </collaborationgraph>
    <location file="src/vt/rdmahandle/handle.index.h" line="74" column="1" bodyfile="src/vt/rdmahandle/handle.index.h" bodystart="68" bodyend="355"/>
    <listofallmembers>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a8182aefb99d33b103c671addb6bb28c2" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>accum</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a20c231fb671a38c3bb761d613dd42b3c" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>ActionDataType</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a448710fab012c50cd4eb02b955d2a240" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>actions_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a7898a65aac6b27f5265ca3d0c2fa187a" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>addAction</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a268fefeb75b88a7642ac14d06b5da963" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1adfa889759392da4cdcea27e79e81a12f" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a89f1a34092464da223bc474deca0692e" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a95ecf3e18a04206024380385af06c007" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>BaseTypedHandle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a48b8d5baf7532ee63c078d55ee90d6fe" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>clearActions</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a1e7937b5cf4b641a783c37675ae2cc35" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>count</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1ac474123342ec5f8f82d2346b09331fc4" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>count_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a442fed4e2898c2fc2b7e8686283efdde" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>DataT</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1add9aa1811c10aa54376a682f6c7be847" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>fetchOp</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a700818b012865e7c8523abe143dc37e5" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>get</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1ac1f836e8530774b590430504e747c901" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>get</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a6774922e581a9b8c19eccf749077f577" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>getBuffer</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1ad2cc71ceb8a965a56a6cd16181b00071" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>getCount</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a37e164e4eb34320551c7641c5e2f123b" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>getIndex</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1abdfe9dcf8a155c7e2bd91dabf6472702" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>Handle</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a9362a80316cbbc4527bc1b93f24a5a0b" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>Handle</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a730e0d6dab39e85472500ad7e04add58" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>Handle</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aa7de4d0e334b4c69c316f57d003d2429" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>Handle</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1afdff2a8569424f4b9be14ac0f2daf5ca" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>handle_type</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a465a9836d31034a5f96b5826ae3ba064" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>hasAction</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a98bab5e776934a84c4415952823f58e0" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>hoff</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a009a2f6951b5a3284f1f19bb9b56e4e2" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>hoff_</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a22334887cacdf3256127600c50c9d2b1" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>index_</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1aca839871dda1f44f8e59a451174b9a2a" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>IndexType</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a8757ffe8f60317fccb422db99ee048e5" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>isInit</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a417746a96f30d65dc941ba3904a612cd" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>lock</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1accff417789be0a3556fdc4695aba5a85" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>lock_</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a1fd6b9bc3f72bb2b64e602de3982929d" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>Manager</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a193a769321ba99cb7c999118d195d158" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>modifyExclusive</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a1e54b62400f4e12e2e7e4862851352c9" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>modifyShared</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a9ebc139217531d3fe1d6d1cc1b824daf" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>operator=</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a29355ec3a0a21b03da7b2b2098b5ad88" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>operator=</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1af7897dce38a16c31e3431cf65dec2792" prot="public" virt="non-virtual" ambiguityscope="vt::rdma::BaseTypedHandle::"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>operator=</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1a4f4dd9c546b56d3fc570500a79b048d8" prot="public" virt="non-virtual" ambiguityscope="vt::rdma::BaseTypedHandle::"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>operator=</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a050f5dac1123979f6286ca6f99bfbe21" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>proxy_</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a7b6743e3f3bace08a1c6fce3b19f27c6" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>put</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a14e800f21489334ed91f3ad40412565d" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>raccum</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1adc7b1058678ece326e044eac9d4c83cf" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>readExclusive</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a20ad220782a771d3b4b1a63b963f7adf" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>readShared</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a860f35e2562f8ab0e5606281315d2e17" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>ready</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a7b884d1c3b2be49b47899ad24757710a" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>RequestType</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1ae48628cffbfa47fe7cd171426e1a76b6" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>rget</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aa944bb8230caf7e0852c21099f5d8cab" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>rget</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a71ab9bf9b26aa1db0d6d5cc7a712f3ce" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>rput</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1a861a97549fb4aaa9880401dbdf2e0a23" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>serialize</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1acd1c1ff4fa00ba44ff7d7d6d92e82e5b" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>setBuffer</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aa597d7381f8793417b0656cbaf1625f0" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>SubHandle&lt; T, E, IndexT &gt;</name></member>
      <member refid="structvt_1_1rdma_1_1_handle_3_01_t_00_01_e_00_01_index_t_00_01typename_01std_1_1enable__if__t_3_f66c3940d9f3649c3a5c3e77d63c658a_1aeb8b31602a46bc22042360280ef88b01" prot="public" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>unlock</name></member>
      <member refid="structvt_1_1rdma_1_1_base_typed_handle_1af48b31b6d8f1319ee58c5544ad251bf9" prot="protected" virt="non-virtual"><scope>vt::rdma::Handle&lt; T, E, IndexT, typename std::enable_if_t&lt; not std::is_same&lt; IndexT, vt::NodeType &gt;::value &gt;&gt;</scope><name>user_buffer_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
