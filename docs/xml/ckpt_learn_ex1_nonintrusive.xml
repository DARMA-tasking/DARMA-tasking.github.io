<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ckpt_learn_ex1_nonintrusive" kind="page">
    <compoundname>ckpt_learn_ex1_nonintrusive</compoundname>
    <title>Non-Intrusive Program Example 1</title>
    <detaileddescription>
<para><simplesect kind="attention"><para>All Non-Intrusive serialize methods <bold>MUST</bold> be placed in the namespace of type which they serialize.</para></simplesect>
The full code for this <emphasis>checkpoint</emphasis> example can be found here: <computeroutput>examples/checkpoint_example_1_nonintrusive.cc</computeroutput></para><para><programlisting><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="checkpoint_8h" kindref="compound">checkpoint/checkpoint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>\brief<sp/>Namespace<sp/>containing<sp/>type<sp/>which<sp/>will<sp/>be<sp/>serialized</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">magistrate<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonintrusive<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">examples<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>\brief<sp/>Simple<sp/>structure<sp/>with<sp/>three<sp/>variables<sp/>of<sp/>built-in<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyTest3<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>1,<sp/>b<sp/>=<sp/>2<sp/>,<sp/>c<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\brief<sp/>Printing<sp/>function<sp/>unto<sp/>the<sp/>standard<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;MyTest3:<sp/>a=%d,<sp/>b=%d,<sp/>c=%d\n&quot;</highlight><highlight class="normal">,<sp/>a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>magistrate::nonintrusive::examples</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>\brief<sp/>Function<sp/>to<sp/>serialize<sp/>the<sp/>MyTest3<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Non-Intrusive<sp/>way,<sp/>this<sp/>function<sp/>needs<sp/>to<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>type<sp/>which<sp/>will<sp/>be<sp/>serialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">magistrate<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonintrusive<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">examples<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\brief<sp/>Templated<sp/>function<sp/>for<sp/>serializing/deserializing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>variable<sp/>of<sp/>type<sp/>`MyTest3`.<sp/>Non-nonintrusive<sp/>version<sp/>of<sp/>the<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>placed<sp/>outside<sp/>of<sp/>`MyTest3`<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\tparam<sp/>&lt;Serializer&gt;<sp/>The<sp/>type<sp/>of<sp/>serializer<sp/>depending<sp/>on<sp/>the<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\param[in,out]<sp/>s<sp/>the<sp/>serializer<sp/>for<sp/>traversing<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\note<sp/>The<sp/>serialize<sp/>method<sp/>is<sp/>typically<sp/>called<sp/>three<sp/>times<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(de-)serializing<sp/>to<sp/>a<sp/>byte<sp/>buffer:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>Sizing:<sp/>The<sp/>first<sp/>time<sp/>its<sp/>called,<sp/>it<sp/>sizes<sp/>all<sp/>the<sp/>data<sp/>it<sp/>recursively</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>traverses<sp/>to<sp/>generate<sp/>a<sp/>final<sp/>size<sp/>for<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>Packing:<sp/>As<sp/>the<sp/>traversal<sp/>occurs,<sp/>it<sp/>copies<sp/>the<sp/>data<sp/>traversed<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>byte<sp/>buffer<sp/>in<sp/>the<sp/>appropriate<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3)<sp/>Unpacking:<sp/>As<sp/>the<sp/>byte<sp/>buffer<sp/>is<sp/>traversed,<sp/>it<sp/>extracts<sp/>the<sp/>bytes<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>buffer<sp/>to<sp/>recursively<sp/>reconstruct<sp/>the<sp/>types<sp/>and<sp/>setup<sp/>the<sp/>class<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Serializer&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">serialize</ref>(Serializer&amp;<sp/>s,<sp/>MyTest3&amp;<sp/>my_test3)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a,<sp/>b,<sp/>c<sp/>-<sp/>variable<sp/>of<sp/>type<sp/>`int`<sp/>(built-in<sp/>type)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>my_test3.a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>my_test3.b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/>my_test3.c;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>magistrate::nonintrusive::examples</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">magistrate::nonintrusive::examples;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>variable<sp/>of<sp/>custom<sp/>type<sp/>`MyTest3`</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyTest3<sp/>my_test3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_test3.print();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>serialization<sp/>routine<sp/>for<sp/>the<sp/>variable<sp/>`my_test3`</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>is<sp/>a<sp/>unique<sp/>pointer:<sp/>`std::unique_ptr&lt;SerializedInfo&gt;`</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(defined<sp/>in<sp/>`src/checkpoint_api.h`)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="namespacecheckpoint_1a075da4e7344cf037943362517e606c3a" kindref="member">checkpoint::serialize</ref>(my_test3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>buf<sp/>=<sp/>ret-&gt;getBuffer();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>buf_size<sp/>=<sp/>ret-&gt;getSize();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>buffer<sp/>address<sp/>and<sp/>its<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ptr=%p,<sp/>size=%ld\n&quot;</highlight><highlight class="normal">,<sp/>static_cast&lt;void*&gt;(buf),<sp/>buf_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deserialize<sp/>the<sp/>variable<sp/>`my_test3`<sp/>from<sp/>the<sp/>serialized<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>checkpoint::deserialize&lt;MyTest3&gt;(buf);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>de-serialized<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>t-&gt;print();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para>    </detaileddescription>
  </compounddef>
</doxygen>
