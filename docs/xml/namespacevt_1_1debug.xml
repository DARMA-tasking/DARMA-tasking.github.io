<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacevt_1_1debug" kind="namespace" language="C++">
    <compoundname>vt::debug</compoundname>
    <innernamespace refid="namespacevt_1_1debug_1_1assert">vt::debug::assert</innernamespace>
    <innernamespace refid="namespacevt_1_1debug_1_1stack">vt::debug::stack</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacevt_1_1debug_1a8ec370eb4d911d577303136b1dbc8286" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string vt::debug::s_hostname</definition>
        <argsstring></argsstring>
        <name>s_hostname</name>
        <initializer>= std::string()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/pretty_print_message.cc" line="57" column="1" bodyfile="src/vt/configs/error/pretty_print_message.cc" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacevt_1_1debug_1ac95600a6dd09454d8296f080af0074dd" prot="public" static="yes" mutable="no">
        <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref></type>
        <definition>arguments::AppConfig vt::debug::preInitAppConfig</definition>
        <argsstring></argsstring>
        <name>preInitAppConfig</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/runtime/runtime_get.cc" line="159" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacevt_1_1debug_1af579167c636c87a9832bba4e05867031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> *</type>
        <definition>arguments::AppConfig * vt::debug::preConfigRef</definition>
        <argsstring>()</argsstring>
        <name>preConfigRef</name>
        <briefdescription>
<para>Returns the preConfig, accessible OUTSIDE of VT initialization. </para>        </briefdescription>
        <detaileddescription>
<internal><para>This non-const version is used by &apos;nompi&apos; tests, in order to customize the app config (mostly vt_throw_on_abort)</para><para><simplesect kind="return"><para>A modifiable configuration </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="53" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a852027d87cfb65bb21dd8ce1e8c23c61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvt_1_1arguments_1_1_app_config" kindref="compound">arguments::AppConfig</ref> const  *</type>
        <definition>arguments::AppConfig const  * vt::debug::preConfig</definition>
        <argsstring>()</argsstring>
        <name>preConfig</name>
        <briefdescription>
<para>Returns the config, accessible OUTSIDE of VT initialization. </para>        </briefdescription>
        <detaileddescription>
<internal><para>Much as preNode, this can be accessed safely in debug* methods. This allows such methods to be used in code that is unit-test OK.</para><para><simplesect kind="return"><para>A configuration; possible a default configuration. </para></simplesect>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="54" column="1" bodyfile="src/vt/runtime/runtime_get.cc" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1adf5702c2e0469340d30ee8882848f304" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::debug::colorizeOutput</definition>
        <argsstring>()</argsstring>
        <name>colorizeOutput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="59" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1ac88d2f3171c5f622861b5c8ea986f281" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::green</definition>
        <argsstring>()</argsstring>
        <name>green</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="63" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a7a1e7bc4a250917d20840a4d48e27388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::bold</definition>
        <argsstring>()</argsstring>
        <name>bold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="64" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a1617ac1c602fb27518f6ab8fd4bf99c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::magenta</definition>
        <argsstring>()</argsstring>
        <name>magenta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="65" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a6b162f2ca1d964d7cf05c4079d5554a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::red</definition>
        <argsstring>()</argsstring>
        <name>red</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="66" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1ae03a761958b929eaa82f356059f71a46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::bred</definition>
        <argsstring>()</argsstring>
        <name>bred</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="67" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a4456c051bd468fe024334f24887867af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="68" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a26f95b8d5da98fa54a335789b18fb3d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::bd_green</definition>
        <argsstring>()</argsstring>
        <name>bd_green</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="69" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a749c31dee324cac600ec442f9f39eb7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::it_green</definition>
        <argsstring>()</argsstring>
        <name>it_green</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="70" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1aa449a2c29c030d8cd267fd19c0511d5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::un_green</definition>
        <argsstring>()</argsstring>
        <name>un_green</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="71" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1afb3aac4faf63d7f2aac0d6d142d0b599" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::byellow</definition>
        <argsstring>()</argsstring>
        <name>byellow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="72" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1ad85c9e5ee0f986151a01212647d2b60d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::yellow</definition>
        <argsstring>()</argsstring>
        <name>yellow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="73" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a26b73aa7586b78f4c148b26e5414ebe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::blue</definition>
        <argsstring>()</argsstring>
        <name>blue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="74" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::emph</definition>
        <argsstring>(std::string str)</argsstring>
        <name>emph</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="76" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a394711b7d26f45a51bf46c86032742f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::reg</definition>
        <argsstring>(std::string str)</argsstring>
        <name>reg</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="79" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1acfaac527e91984bde40775eb9b4372ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::vtPre</definition>
        <argsstring>()</argsstring>
        <name>vtPre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="82" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a13a11e278ff8e5a4093396437511aeb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::proc</definition>
        <argsstring>(vt::NodeType const &amp;node)</argsstring>
        <name>proc</name>
        <param>
          <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">vt::NodeType</ref> const &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_colorize.h" line="85" column="1" bodyfile="src/vt/configs/debug/debug_colorize.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1afaa2c8383e718071689dfea2c959a467" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnumT</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; vt::debug::printEnum</definition>
        <argsstring>(std::ostream &amp;os, EnumT const &amp;val)</argsstring>
        <name>printEnum</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>EnumT const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_fmt.h" line="56" column="1" bodyfile="src/vt/configs/debug/debug_fmt.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a0f9acc324c2b3308760aa13b29dd9736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::debug::preNode</definition>
        <argsstring>()</argsstring>
        <name>preNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_print.h" line="280" column="1" bodyfile="src/vt/context/context.cc" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a4417ee390fd826c2135e06abe59719dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int vt::debug::useVarsDummy</definition>
        <argsstring>(T t)</argsstring>
        <name>useVarsDummy</name>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_var_unused.h" line="54" column="1" bodyfile="src/vt/configs/debug/debug_var_unused.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1aeff93f73b5ac173a53dcf778ff771c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::debug::useVars</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>useVars</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempt to ensure the argument (pack) is used. This may be optimized away by compilers. C++17 has cleaner methods. ref. <ulink url="https://stackoverflow.com/questions/25680461/variadic-template-pack-expansion/25683817">https://stackoverflow.com/questions/25680461/variadic-template-pack-expansion/25683817</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/debug/debug_var_unused.h" line="62" column="1" bodyfile="src/vt/configs/debug/debug_var_unused.h" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1ab9a204b679ea705a255d3cb4dcce02f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::debug::preNodes</definition>
        <argsstring>()</argsstring>
        <name>preNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/common.h" line="57" column="1" bodyfile="src/vt/context/context.cc" bodystart="150" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a24ece85f97b2cbc60968d3cf21b36be6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string&amp; vt::debug::getCachedHostname</definition>
        <argsstring>()</argsstring>
        <name>getCachedHostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/pretty_print_message.cc" line="59" column="1" bodyfile="src/vt/configs/error/pretty_print_message.cc" bodystart="59" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacevt_1_1debug_1a63b47ef166cce2fe27d4fbc366a2e23c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string vt::debug::stringizeMessage</definition>
        <argsstring>(std::string const &amp;msg, std::string const &amp;reason, std::string const &amp;cond, std::string const &amp;file, int const line, std::string const &amp;func, ErrorCodeType error)</argsstring>
        <name>stringizeMessage</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacevt_1a793764d753923abc3d32929870beb485" kindref="member">ErrorCodeType</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/configs/error/pretty_print_message.cc" line="68" column="1" bodyfile="src/vt/configs/error/pretty_print_message.cc" bodystart="68" bodyend="136"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/vt/configs/debug/debug_colorize.h" line="52" column="1"/>
  </compounddef>
</doxygen>
