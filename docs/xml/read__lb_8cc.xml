<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="read__lb_8cc" kind="file" language="C++">
    <compoundname>read_lb.cc</compoundname>
    <includes refid="config_8h" local="yes">vt/config.h</includes>
    <includes refid="context_8h" local="yes">vt/context/context.h</includes>
    <includes refid="read__lb_8h" local="yes">vt/vrt/collection/balance/read_lb.h</includes>
    <includes refid="lb__type_8h" local="yes">vt/vrt/collection/balance/lb_type.h</includes>
    <includes refid="app__config_8h" local="yes">vt/configs/arguments/app_config.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">fstream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="304023">
        <label>list</label>
      </node>
      <node id="303906">
        <label>vt/configs/features/features_featureswitch.h</label>
        <link refid="features__featureswitch_8h"/>
      </node>
      <node id="304016">
        <label>atomic</label>
      </node>
      <node id="303970">
        <label>checkpoint/common.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2common_8h"/>
        <childnode refid="303971" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303905" relation="include">
        </childnode>
        <childnode refid="303972" relation="include">
        </childnode>
        <childnode refid="303973" relation="include">
        </childnode>
        <childnode refid="303939" relation="include">
        </childnode>
      </node>
      <node id="303948">
        <label>vt/runtime/component/component_pack.h</label>
        <link refid="component__pack_8h"/>
        <childnode refid="303949" relation="include">
        </childnode>
        <childnode refid="304055" relation="include">
        </childnode>
        <childnode refid="304023" relation="include">
        </childnode>
        <childnode refid="304011" relation="include">
        </childnode>
        <childnode refid="303951" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="304056" relation="include">
        </childnode>
      </node>
      <node id="304055">
        <label>vt/runtime/component/movable_fn.h</label>
        <link refid="movable__fn_8h"/>
      </node>
      <node id="303916">
        <label>functional</label>
      </node>
      <node id="304029">
        <label>queue</label>
      </node>
      <node id="303952">
        <label>vt/runtime/component/component_dep.h</label>
        <link refid="component__dep_8h"/>
        <childnode refid="303950" relation="include">
        </childnode>
      </node>
      <node id="304006">
        <label>checkpoint/dispatch/vrt/derived.h</label>
        <link refid="derived_8h"/>
        <childnode refid="303997" relation="include">
        </childnode>
        <childnode refid="304000" relation="include">
        </childnode>
        <childnode refid="304002" relation="include">
        </childnode>
        <childnode refid="304003" relation="include">
        </childnode>
        <childnode refid="304004" relation="include">
        </childnode>
      </node>
      <node id="303964">
        <label>limits</label>
      </node>
      <node id="304033">
        <label>checkpoint/container/string_serialize.h</label>
        <link refid="string__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="304017">
        <label>checkpoint/container/chrono_serialize.h</label>
        <link refid="chrono__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="304018" relation="include">
        </childnode>
      </node>
      <node id="303922">
        <label>vt/configs/debug/debug_colorize.h</label>
        <link refid="debug__colorize_8h"/>
        <childnode refid="303911" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303911">
        <label>vt/configs/arguments/app_config.h</label>
        <link refid="app__config_8h"/>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
      </node>
      <node id="304050">
        <label>vt/timing/timing_type.h</label>
        <link refid="timing__type_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
      </node>
      <node id="304048">
        <label>vt/runtime/component/meter/timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304046" relation="include">
        </childnode>
        <childnode refid="304049" relation="include">
        </childnode>
      </node>
      <node id="304039">
        <label>checkpoint/container/view_serialize.h</label>
        <link refid="view__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="304040" relation="include">
        </childnode>
        <childnode refid="304041" relation="include">
        </childnode>
        <childnode refid="304042" relation="include">
        </childnode>
      </node>
      <node id="304000">
        <label>checkpoint/dispatch/vrt/object_registry.h</label>
        <link refid="object__registry_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303997" relation="include">
        </childnode>
        <childnode refid="304001" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
      </node>
      <node id="304049">
        <label>vt/timing/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304050" relation="include">
        </childnode>
      </node>
      <node id="303969">
        <label>checkpoint/serializers/serializers_headers.h</label>
        <link refid="serializers__headers_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303974" relation="include">
        </childnode>
        <childnode refid="303975" relation="include">
        </childnode>
        <childnode refid="303976" relation="include">
        </childnode>
        <childnode refid="303977" relation="include">
        </childnode>
        <childnode refid="303986" relation="include">
        </childnode>
      </node>
      <node id="303976">
        <label>checkpoint/serializers/sizer.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2serializers_2sizer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303974" relation="include">
        </childnode>
      </node>
      <node id="304019">
        <label>checkpoint/container/enum_serialize.h</label>
        <link refid="enum__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
      </node>
      <node id="303971">
        <label>checkpoint/cmake_config.h</label>
      </node>
      <node id="303963">
        <label>vt/utils/adt/histogram_approx.h</label>
        <link refid="histogram__approx_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303964" relation="include">
        </childnode>
        <childnode refid="303965" relation="include">
        </childnode>
        <childnode refid="303966" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
      <node id="303974">
        <label>checkpoint/serializers/base_serializer.h</label>
        <link refid="base__serializer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
      </node>
      <node id="303905">
        <label>cstdint</label>
      </node>
      <node id="304013">
        <label>checkpoint/container/array_serialize.h</label>
        <link refid="array__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="304014" relation="include">
        </childnode>
      </node>
      <node id="303962">
        <label>vt/utils/adt/union.h</label>
        <link refid="union_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
      </node>
      <node id="304054">
        <label>vt/runtime/component/progressable.h</label>
        <link refid="progressable_8h"/>
      </node>
      <node id="304053">
        <label>vt/runtime/component/bufferable.h</label>
        <link refid="bufferable_8h"/>
      </node>
      <node id="303941">
        <label>vt/configs/error/assert_out_info.impl.h</label>
        <link refid="assert__out__info_8impl_8h"/>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303935" relation="include">
        </childnode>
        <childnode refid="303940" relation="include">
        </childnode>
        <childnode refid="303942" relation="include">
        </childnode>
        <childnode refid="303922" relation="include">
        </childnode>
        <childnode refid="303939" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303944" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
      <node id="303990">
        <label>checkpoint/dispatch/dispatch_serializer.h</label>
        <link refid="dispatch__serializer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303991" relation="include">
        </childnode>
        <childnode refid="303994" relation="include">
        </childnode>
        <childnode refid="303995" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
      </node>
      <node id="304031">
        <label>checkpoint/container/raw_ptr_serialize.h</label>
        <link refid="raw__ptr__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
      </node>
      <node id="303965">
        <label>cmath</label>
      </node>
      <node id="303939">
        <label>cassert</label>
      </node>
      <node id="303936">
        <label>vt/configs/error/assert_out.impl.h</label>
        <link refid="assert__out_8impl_8h"/>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303935" relation="include">
        </childnode>
        <childnode refid="303937" relation="include">
        </childnode>
        <childnode refid="303922" relation="include">
        </childnode>
        <childnode refid="303929" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303939" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
      <node id="303919">
        <label>vt/configs/types/types_size.h</label>
        <link refid="types__size_8h"/>
        <childnode refid="303920" relation="include">
        </childnode>
      </node>
      <node id="304012">
        <label>stdexcept</label>
      </node>
      <node id="303927">
        <label>vt/configs/error/common.h</label>
        <link refid="src_2vt_2configs_2error_2common_8h"/>
        <childnode refid="303914" relation="include">
        </childnode>
        <childnode refid="303928" relation="include">
        </childnode>
      </node>
      <node id="304020">
        <label>checkpoint/container/function_serialize.h</label>
        <link refid="function__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
      </node>
      <node id="304001">
        <label>checkpoint/dispatch/reconstructor.h</label>
        <link refid="reconstructor_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303991" relation="include">
        </childnode>
        <childnode refid="303992" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
      </node>
      <node id="304043">
        <label>checkpoint/checkpoint_api.impl.h</label>
        <link refid="checkpoint__api_8impl_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303968" relation="include">
        </childnode>
        <childnode refid="303980" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
      </node>
      <node id="303920">
        <label>vt/utils/bits/bits_counter.h</label>
        <link refid="bits__counter_8h"/>
      </node>
      <node id="303977">
        <label>checkpoint/serializers/packer.h</label>
        <link refid="packer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303978" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
        <childnode refid="303981" relation="include">
        </childnode>
        <childnode refid="303982" relation="include">
        </childnode>
        <childnode refid="303983" relation="include">
        </childnode>
        <childnode refid="303984" relation="include">
        </childnode>
      </node>
      <node id="303925">
        <label>vt/configs/error/error_headers.h</label>
        <link refid="error__headers_8h"/>
        <childnode refid="303926" relation="include">
        </childnode>
        <childnode refid="303930" relation="include">
        </childnode>
        <childnode refid="303934" relation="include">
        </childnode>
      </node>
      <node id="303912">
        <label>string</label>
      </node>
      <node id="303982">
        <label>checkpoint/buffer/user_buffer.h</label>
        <link refid="user__buffer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
      </node>
      <node id="304038">
        <label>checkpoint/container/unique_ptr_serialize.h</label>
        <link refid="unique__ptr__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="304001" relation="include">
        </childnode>
        <childnode refid="303998" relation="include">
        </childnode>
      </node>
      <node id="303954">
        <label>vt/runtime/component/base.h</label>
        <link refid="src_2vt_2runtime_2component_2base_8h"/>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303955" relation="include">
        </childnode>
        <childnode refid="304053" relation="include">
        </childnode>
        <childnode refid="304054" relation="include">
        </childnode>
      </node>
      <node id="304063">
        <label>vt/vrt/collection/balance/lb_type.h</label>
        <link refid="lb__type_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304011" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
      </node>
      <node id="303979">
        <label>checkpoint/buffer/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303980" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
      </node>
      <node id="304042">
        <label>checkpoint/container/view_traverse_ndim.h</label>
        <link refid="view__traverse__ndim_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="304040" relation="include">
        </childnode>
      </node>
      <node id="304026">
        <label>map</label>
      </node>
      <node id="303995">
        <label>checkpoint/dispatch/dispatch_serializer_nonbyte.h</label>
        <link refid="dispatch__serializer__nonbyte_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303991" relation="include">
        </childnode>
        <childnode refid="303996" relation="include">
        </childnode>
        <childnode refid="303998" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303939" relation="include">
        </childnode>
      </node>
      <node id="304007">
        <label>checkpoint/dispatch/dispatch_byte_macro.h</label>
        <link refid="dispatch__byte__macro_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
      </node>
      <node id="303942">
        <label>vt/configs/error/keyval_printer.h</label>
        <link refid="keyval__printer_8h"/>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303904" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303943" relation="include">
        </childnode>
      </node>
      <node id="303943">
        <label>vt/configs/error/keyval_printer.impl.h</label>
        <link refid="keyval__printer_8impl_8h"/>
        <childnode refid="303942" relation="include">
        </childnode>
        <childnode refid="303922" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
      <node id="303951">
        <label>unordered_set</label>
      </node>
      <node id="303908">
        <label>vt/configs/features/features_enableif.h</label>
        <link refid="features__enableif_8h"/>
        <childnode refid="303907" relation="include">
        </childnode>
      </node>
      <node id="303992">
        <label>checkpoint/dispatch/reconstructor_tag.h</label>
        <link refid="reconstructor__tag_8h"/>
      </node>
      <node id="303997">
        <label>checkpoint/dispatch/vrt/registry_common.h</label>
        <link refid="registry__common_8h"/>
        <childnode refid="303932" relation="include">
        </childnode>
      </node>
      <node id="304064">
        <label>fstream</label>
      </node>
      <node id="304044">
        <label>vt/runtime/component/diagnostic_meter.h</label>
        <link refid="diagnostic__meter_8h"/>
        <childnode refid="304045" relation="include">
        </childnode>
        <childnode refid="304047" relation="include">
        </childnode>
        <childnode refid="304048" relation="include">
        </childnode>
        <childnode refid="304051" relation="include">
        </childnode>
        <childnode refid="304050" relation="include">
        </childnode>
      </node>
      <node id="304022">
        <label>checkpoint/container/container_serialize.h</label>
        <link refid="container__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
      </node>
      <node id="303904">
        <label>vt/configs/debug/debug_config.h</label>
        <link refid="debug__config_8h"/>
        <childnode refid="303905" relation="include">
        </childnode>
        <childnode refid="303906" relation="include">
        </childnode>
        <childnode refid="303907" relation="include">
        </childnode>
        <childnode refid="303908" relation="include">
        </childnode>
        <childnode refid="303909" relation="include">
        </childnode>
      </node>
      <node id="303991">
        <label>checkpoint/traits/serializable_traits.h</label>
        <link refid="serializable__traits_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="303992" relation="include">
        </childnode>
        <childnode refid="303993" relation="include">
        </childnode>
        <childnode refid="303905" relation="include">
        </childnode>
        <childnode refid="303939" relation="include">
        </childnode>
      </node>
      <node id="304002">
        <label>checkpoint/dispatch/vrt/serializer_registry.h</label>
        <link refid="serializer__registry_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303997" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
      </node>
      <node id="304045">
        <label>vt/runtime/component/meter/counter.h</label>
        <link refid="counter_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304046" relation="include">
        </childnode>
      </node>
      <node id="303921">
        <label>vt/configs/types/types_sentinels.h</label>
        <link refid="types__sentinels_8h"/>
        <childnode refid="303902" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303917" relation="include">
        </childnode>
      </node>
      <node id="303924">
        <label>fmt/core.h</label>
      </node>
      <node id="304036">
        <label>checkpoint/container/tuple_serialize.h</label>
        <link refid="tuple__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303973" relation="include">
        </childnode>
      </node>
      <node id="303987">
        <label>checkpoint/serializers/unpacker.impl.h</label>
        <link refid="unpacker_8impl_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303978" relation="include">
        </childnode>
        <childnode refid="303986" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303985" relation="include">
        </childnode>
      </node>
      <node id="304034">
        <label>checkpoint/container/thread_serialize.h</label>
        <link refid="thread__serialize_8h"/>
        <childnode refid="304035" relation="include">
        </childnode>
        <childnode refid="303970" relation="include">
        </childnode>
      </node>
      <node id="303998">
        <label>checkpoint/dispatch/vrt/virtual_serialize.h</label>
        <link refid="virtual__serialize_8h"/>
        <childnode refid="303999" relation="include">
        </childnode>
        <childnode refid="304006" relation="include">
        </childnode>
      </node>
      <node id="303953">
        <label>vt/runtime/component/component_traits.h</label>
        <link refid="component__traits_8h"/>
        <childnode refid="303932" relation="include">
        </childnode>
      </node>
      <node id="304009">
        <label>checkpoint/dispatch/type_registry.h</label>
        <link refid="type__registry_8h"/>
        <childnode refid="304010" relation="include">
        </childnode>
        <childnode refid="303905" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="304011" relation="include">
        </childnode>
      </node>
      <node id="303957">
        <label>vt/runtime/component/component_reduce.h</label>
        <link refid="component__reduce_8h"/>
        <childnode refid="303915" relation="include">
        </childnode>
      </node>
      <node id="303950">
        <label>vt/runtime/component/component_registry.h</label>
        <link refid="component__registry_8h"/>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303951" relation="include">
        </childnode>
      </node>
      <node id="303902">
        <label>vt/configs/debug/debug_masterconfig.h</label>
        <link refid="debug__masterconfig_8h"/>
        <childnode refid="303903" relation="include">
        </childnode>
        <childnode refid="303904" relation="include">
        </childnode>
        <childnode refid="303910" relation="include">
        </childnode>
      </node>
      <node id="303928">
        <label>vt/collective/basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303915">
        <label>vt/configs/types/types_type.h</label>
        <link refid="types__type_8h"/>
        <childnode refid="303905" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
      </node>
      <node id="303931">
        <label>vt/configs/error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="303914" relation="include">
        </childnode>
        <childnode refid="303904" relation="include">
        </childnode>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303933" relation="include">
        </childnode>
      </node>
      <node id="304004">
        <label>checkpoint/dispatch/vrt/serialize_instantiator.h</label>
        <link refid="serialize__instantiator_8h"/>
        <childnode refid="304002" relation="include">
        </childnode>
        <childnode refid="304005" relation="include">
        </childnode>
      </node>
      <node id="303980">
        <label>checkpoint/checkpoint_api.h</label>
        <link refid="checkpoint__api_8h"/>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
      </node>
      <node id="303923">
        <label>vt/configs/debug/debug_var_unused.h</label>
        <link refid="debug__var__unused_8h"/>
      </node>
      <node id="304051">
        <label>vt/runtime/component/meter/counter_gauge.h</label>
        <link refid="counter__gauge_8h"/>
        <childnode refid="304045" relation="include">
        </childnode>
        <childnode refid="304047" relation="include">
        </childnode>
      </node>
      <node id="303926">
        <label>vt/configs/error/soft_error.h</label>
        <link refid="soft__error_8h"/>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303929" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
      <node id="303958">
        <label>vt/runtime/component/diagnostic_types.h</label>
        <link refid="diagnostic__types_8h"/>
        <childnode refid="303905" relation="include">
        </childnode>
      </node>
      <node id="303972">
        <label>cstdio</label>
      </node>
      <node id="303996">
        <label>checkpoint/dispatch/vrt/virtual_serialize_traits.h</label>
        <link refid="virtual__serialize__traits_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303997" relation="include">
        </childnode>
        <childnode refid="303993" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
      </node>
      <node id="304032">
        <label>checkpoint/container/shared_ptr_serialize.h</label>
        <link refid="shared__ptr__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
      </node>
      <node id="303918">
        <label>tuple</label>
      </node>
      <node id="303984">
        <label>checkpoint/serializers/packer.impl.h</label>
        <link refid="packer_8impl_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303978" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
        <childnode refid="303985" relation="include">
        </childnode>
      </node>
      <node id="304005">
        <label>checkpoint/dispatch/vrt/link_derived_to_base_idx.h</label>
        <link refid="link__derived__to__base__idx_8h"/>
        <childnode refid="304002" relation="include">
        </childnode>
      </node>
      <node id="304060">
        <label>vt/utils/tls/tls.impl.h</label>
        <link refid="tls_8impl_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
      </node>
      <node id="304046">
        <label>vt/runtime/component/meter/stats_pack.h</label>
        <link refid="stats__pack_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
      </node>
      <node id="303910">
        <label>vt/configs/debug/debug_print.h</label>
        <link refid="debug__print_8h"/>
        <childnode refid="303911" relation="include">
        </childnode>
        <childnode refid="303914" relation="include">
        </childnode>
        <childnode refid="303904" relation="include">
        </childnode>
        <childnode refid="303922" relation="include">
        </childnode>
        <childnode refid="303923" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
      <node id="304047">
        <label>vt/runtime/component/meter/gauge.h</label>
        <link refid="gauge_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304046" relation="include">
        </childnode>
      </node>
      <node id="304030">
        <label>stack</label>
      </node>
      <node id="303913">
        <label>vector</label>
      </node>
      <node id="303945">
        <label>vt/context/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="303946" relation="include">
        </childnode>
        <childnode refid="303947" relation="include">
        </childnode>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="303948" relation="include">
        </childnode>
        <childnode refid="304057" relation="include">
        </childnode>
        <childnode refid="304058" relation="include">
        </childnode>
        <childnode refid="304061" relation="include">
        </childnode>
      </node>
      <node id="303989">
        <label>checkpoint/dispatch/clean_type.h</label>
        <link refid="clean__type_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
      </node>
      <node id="303994">
        <label>checkpoint/dispatch/dispatch_serializer_byte.h</label>
        <link refid="dispatch__serializer__byte_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303991" relation="include">
        </childnode>
        <childnode refid="303995" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
      </node>
      <node id="304015">
        <label>checkpoint/container/atomic_serialize.h</label>
        <link refid="atomic__serialize_8h"/>
        <childnode refid="304016" relation="include">
        </childnode>
        <childnode refid="303970" relation="include">
        </childnode>
      </node>
      <node id="303973">
        <label>utility</label>
      </node>
      <node id="304037">
        <label>checkpoint/container/vector_serialize.h</label>
        <link refid="vector__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
      </node>
      <node id="304014">
        <label>array</label>
      </node>
      <node id="303944">
        <label>sstream</label>
      </node>
      <node id="304028">
        <label>checkpoint/container/queue_serialize.h</label>
        <link refid="queue__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="304029" relation="include">
        </childnode>
        <childnode refid="304030" relation="include">
        </childnode>
      </node>
      <node id="303999">
        <label>checkpoint/dispatch/vrt/base.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2vrt_2base_8h"/>
        <childnode refid="303997" relation="include">
        </childnode>
        <childnode refid="304000" relation="include">
        </childnode>
        <childnode refid="304002" relation="include">
        </childnode>
        <childnode refid="304003" relation="include">
        </childnode>
        <childnode refid="304004" relation="include">
        </childnode>
      </node>
      <node id="303956">
        <label>vt/runtime/component/component_name.h</label>
        <link refid="component__name_8h"/>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303960">
        <label>vt/runtime/component/diagnostic_value.h</label>
        <link refid="diagnostic__value_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="303958" relation="include">
        </childnode>
        <childnode refid="303961" relation="include">
        </childnode>
        <childnode refid="303967" relation="include">
        </childnode>
        <childnode refid="303963" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303965" relation="include">
        </childnode>
      </node>
      <node id="304062">
        <label>vt/vrt/collection/balance/read_lb.h</label>
        <link refid="read__lb_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304063" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="304064" relation="include">
        </childnode>
        <childnode refid="304026" relation="include">
        </childnode>
        <childnode refid="303938" relation="include">
        </childnode>
      </node>
      <node id="303903">
        <label>vt/cmake_config.h</label>
      </node>
      <node id="303993">
        <label>detector_headers.h</label>
      </node>
      <node id="303937">
        <label>vt/configs/error/stack_out.h</label>
        <link refid="stack__out_8h"/>
        <childnode refid="303938" relation="include">
        </childnode>
        <childnode refid="303913" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
      </node>
      <node id="303907">
        <label>vt/configs/features/features_defines.h</label>
        <link refid="features__defines_8h"/>
      </node>
      <node id="303981">
        <label>checkpoint/buffer/managed_buffer.h</label>
        <link refid="managed__buffer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
      </node>
      <node id="303938">
        <label>cstdlib</label>
      </node>
      <node id="303988">
        <label>checkpoint/dispatch/dispatch.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2dispatch_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
        <childnode refid="303989" relation="include">
        </childnode>
        <childnode refid="303990" relation="include">
        </childnode>
        <childnode refid="304007" relation="include">
        </childnode>
        <childnode refid="304001" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="304008" relation="include">
        </childnode>
      </node>
      <node id="303930">
        <label>vt/configs/error/hard_error.h</label>
        <link refid="hard__error_8h"/>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303931" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
      </node>
      <node id="304065">
        <label>cctype</label>
      </node>
      <node id="304008">
        <label>checkpoint/dispatch/dispatch.impl.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2dispatch_8impl_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303988" relation="include">
        </childnode>
        <childnode refid="304009" relation="include">
        </childnode>
        <childnode refid="304012" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303968">
        <label>checkpoint/checkpoint.h</label>
        <link refid="checkpoint_8h"/>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="303988" relation="include">
        </childnode>
        <childnode refid="303991" relation="include">
        </childnode>
        <childnode refid="304013" relation="include">
        </childnode>
        <childnode refid="304015" relation="include">
        </childnode>
        <childnode refid="304017" relation="include">
        </childnode>
        <childnode refid="304019" relation="include">
        </childnode>
        <childnode refid="304020" relation="include">
        </childnode>
        <childnode refid="304021" relation="include">
        </childnode>
        <childnode refid="304025" relation="include">
        </childnode>
        <childnode refid="304028" relation="include">
        </childnode>
        <childnode refid="304031" relation="include">
        </childnode>
        <childnode refid="304032" relation="include">
        </childnode>
        <childnode refid="304033" relation="include">
        </childnode>
        <childnode refid="304034" relation="include">
        </childnode>
        <childnode refid="304036" relation="include">
        </childnode>
        <childnode refid="304037" relation="include">
        </childnode>
        <childnode refid="304038" relation="include">
        </childnode>
        <childnode refid="304039" relation="include">
        </childnode>
        <childnode refid="303980" relation="include">
        </childnode>
        <childnode refid="304043" relation="include">
        </childnode>
      </node>
      <node id="304057">
        <label>vt/context/context_attorney_fwd.h</label>
        <link refid="context__attorney__fwd_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
      </node>
      <node id="304010">
        <label>cstddef</label>
      </node>
      <node id="304025">
        <label>checkpoint/container/map_serialize.h</label>
        <link refid="map__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="304022" relation="include">
        </childnode>
        <childnode refid="304026" relation="include">
        </childnode>
        <childnode refid="304011" relation="include">
        </childnode>
        <childnode refid="304027" relation="include">
        </childnode>
        <childnode refid="303951" relation="include">
        </childnode>
      </node>
      <node id="304024">
        <label>deque</label>
      </node>
      <node id="304011">
        <label>unordered_map</label>
      </node>
      <node id="304021">
        <label>checkpoint/container/list_serialize.h</label>
        <link refid="list__serialize_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="304022" relation="include">
        </childnode>
        <childnode refid="304023" relation="include">
        </childnode>
        <childnode refid="304024" relation="include">
        </childnode>
      </node>
      <node id="303983">
        <label>checkpoint/buffer/io_buffer.h</label>
        <link refid="io__buffer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303979" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303914">
        <label>vt/configs/types/types_headers.h</label>
        <link refid="types__headers_8h"/>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303917" relation="include">
        </childnode>
        <childnode refid="303919" relation="include">
        </childnode>
        <childnode refid="303921" relation="include">
        </childnode>
      </node>
      <node id="303986">
        <label>checkpoint/serializers/unpacker.h</label>
        <link refid="unpacker_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303978" relation="include">
        </childnode>
        <childnode refid="303982" relation="include">
        </childnode>
        <childnode refid="303987" relation="include">
        </childnode>
      </node>
      <node id="304018">
        <label>chrono</label>
      </node>
      <node id="303935">
        <label>vt/configs/error/assert_out.h</label>
        <link refid="assert__out_8h"/>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303936" relation="include">
        </childnode>
      </node>
      <node id="303947">
        <label>mpi.h</label>
      </node>
      <node id="303900">
        <label>src/vt/vrt/collection/balance/read_lb.cc</label>
        <link refid="read__lb_8cc"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="303945" relation="include">
        </childnode>
        <childnode refid="304062" relation="include">
        </childnode>
        <childnode refid="304063" relation="include">
        </childnode>
        <childnode refid="303911" relation="include">
        </childnode>
        <childnode refid="303944" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="304064" relation="include">
        </childnode>
        <childnode refid="303939" relation="include">
        </childnode>
        <childnode refid="304065" relation="include">
        </childnode>
        <childnode refid="303965" relation="include">
        </childnode>
      </node>
      <node id="304035">
        <label>thread</label>
      </node>
      <node id="304040">
        <label>checkpoint/container/view_traits_extract.h</label>
        <link refid="view__traits__extract_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
      </node>
      <node id="304058">
        <label>vt/utils/tls/tls.h</label>
        <link refid="tls_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="304059" relation="include">
        </childnode>
        <childnode refid="304060" relation="include">
        </childnode>
      </node>
      <node id="304056">
        <label>vt/runtime/component/component_pack.impl.h</label>
        <link refid="component__pack_8impl_8h"/>
        <childnode refid="303948" relation="include">
        </childnode>
      </node>
      <node id="303917">
        <label>vt/configs/types/types_rdma.h</label>
        <link refid="types__rdma_8h"/>
        <childnode refid="303902" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303905" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
      </node>
      <node id="303961">
        <label>vt/runtime/component/diagnostic_erased_value.h</label>
        <link refid="diagnostic__erased__value_8h"/>
        <childnode refid="303958" relation="include">
        </childnode>
        <childnode refid="303962" relation="include">
        </childnode>
        <childnode refid="303963" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303955">
        <label>vt/runtime/component/diagnostic.h</label>
        <link refid="diagnostic_8h"/>
        <childnode refid="303956" relation="include">
        </childnode>
        <childnode refid="303957" relation="include">
        </childnode>
        <childnode refid="303958" relation="include">
        </childnode>
        <childnode refid="303959" relation="include">
        </childnode>
        <childnode refid="303960" relation="include">
        </childnode>
        <childnode refid="304044" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
        <childnode refid="304011" relation="include">
        </childnode>
        <childnode refid="303916" relation="include">
        </childnode>
        <childnode refid="304052" relation="include">
        </childnode>
      </node>
      <node id="303932">
        <label>type_traits</label>
      </node>
      <node id="304027">
        <label>set</label>
      </node>
      <node id="303929">
        <label>vt/configs/error/pretty_print_message.h</label>
        <link refid="pretty__print__message_8h"/>
        <childnode refid="303914" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="304059">
        <label>vt/utils/tls/null_tls.h</label>
        <link refid="null__tls_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
      </node>
      <node id="303901">
        <label>vt/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="303902" relation="include">
        </childnode>
        <childnode refid="303914" relation="include">
        </childnode>
        <childnode refid="303925" relation="include">
        </childnode>
      </node>
      <node id="303967">
        <label>vt/runtime/component/diagnostic_value_base.h</label>
        <link refid="diagnostic__value__base_8h"/>
        <childnode refid="303958" relation="include">
        </childnode>
        <childnode refid="303959" relation="include">
        </childnode>
        <childnode refid="303961" relation="include">
        </childnode>
        <childnode refid="303968" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303966">
        <label>algorithm</label>
      </node>
      <node id="304041">
        <label>checkpoint/container/view_traverse_manual.h</label>
        <link refid="view__traverse__manual_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303969" relation="include">
        </childnode>
        <childnode refid="304040" relation="include">
        </childnode>
      </node>
      <node id="304003">
        <label>checkpoint/dispatch/vrt/inheritance_assert_helpers.h</label>
        <link refid="inheritance__assert__helpers_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
      </node>
      <node id="303978">
        <label>checkpoint/serializers/memory_serializer.h</label>
        <link refid="memory__serializer_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303974" relation="include">
        </childnode>
      </node>
      <node id="303949">
        <label>vt/runtime/component/component.h</label>
        <link refid="component_8h"/>
        <childnode refid="303930" relation="include">
        </childnode>
        <childnode refid="303950" relation="include">
        </childnode>
        <childnode refid="303952" relation="include">
        </childnode>
        <childnode refid="303953" relation="include">
        </childnode>
        <childnode refid="303954" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
      </node>
      <node id="303909">
        <label>vt/configs/debug/debug_printconst.h</label>
        <link refid="debug__printconst_8h"/>
      </node>
      <node id="303985">
        <label>cstring</label>
      </node>
      <node id="304061">
        <label>vt/runnable/runnable.fwd.h</label>
        <link refid="runnable_8fwd_8h"/>
      </node>
      <node id="304052">
        <label>vt/runtime/component/diagnostic.impl.h</label>
        <link refid="diagnostic_8impl_8h"/>
        <childnode refid="303901" relation="include">
        </childnode>
        <childnode refid="303955" relation="include">
        </childnode>
        <childnode refid="303960" relation="include">
        </childnode>
        <childnode refid="303946" relation="include">
        </childnode>
        <childnode refid="303964" relation="include">
        </childnode>
      </node>
      <node id="303959">
        <label>vt/runtime/component/diagnostic_units.h</label>
        <link refid="diagnostic__units_8h"/>
      </node>
      <node id="303946">
        <label>memory</label>
      </node>
      <node id="303934">
        <label>vt/configs/error/config_assert.h</label>
        <link refid="config__assert_8h"/>
        <childnode refid="303904" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303935" relation="include">
        </childnode>
        <childnode refid="303940" relation="include">
        </childnode>
        <childnode refid="303942" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
      </node>
      <node id="303940">
        <label>vt/configs/error/assert_out_info.h</label>
        <link refid="assert__out__info_8h"/>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303915" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303941" relation="include">
        </childnode>
      </node>
      <node id="303975">
        <label>checkpoint/serializers/footprinter.h</label>
        <link refid="footprinter_8h"/>
        <childnode refid="303970" relation="include">
        </childnode>
        <childnode refid="303974" relation="include">
        </childnode>
      </node>
      <node id="303933">
        <label>vt/configs/error/error.impl.h</label>
        <link refid="error_8impl_8h"/>
        <childnode refid="303914" relation="include">
        </childnode>
        <childnode refid="303904" relation="include">
        </childnode>
        <childnode refid="303927" relation="include">
        </childnode>
        <childnode refid="303931" relation="include">
        </childnode>
        <childnode refid="303929" relation="include">
        </childnode>
        <childnode refid="303912" relation="include">
        </childnode>
        <childnode refid="303918" relation="include">
        </childnode>
        <childnode refid="303932" relation="include">
        </childnode>
        <childnode refid="303924" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1vrt">vt::vrt</innernamespace>
    <innernamespace refid="namespacevt_1_1vrt_1_1collection">vt::vrt::collection</innernamespace>
    <innernamespace refid="namespacevt_1_1vrt_1_1collection_1_1balance">vt::vrt::collection::balance</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_lb.cc</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt<sp/>=&gt;<sp/>Virtual<sp/>Transport</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019-2021<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">vt/config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="context_8h" kindref="compound">vt/context/context.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="read__lb_8h" kindref="compound">vt/vrt/collection/balance/read_lb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lb__type_8h" kindref="compound">vt/vrt/collection/balance/lb_type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="app__config_8h" kindref="compound">vt/configs/arguments/app_config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt" kindref="compound">vt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689a012d139c89a14e56a85f32fd82e7c7d3" kindref="member">vrt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">collection<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">balance<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af801f1e2bc280248d841f74d6afe012f" kindref="member">ReadLBSpec::open_filename_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1aa73c3611c615832402eeeed6fb7b8049" kindref="member">ReadLBSpec::SpecMapType</ref><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">ReadLBSpec::spec_mod_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1aa73c3611c615832402eeeed6fb7b8049" kindref="member">ReadLBSpec::SpecMapType</ref><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a40226a2163e4cc03bc48f766df0bb78d" kindref="member">ReadLBSpec::spec_exact_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::vector&lt;SpecIndex&gt;<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a53d7c8950db9d6b4d8b7d895d0a264d0" kindref="member">ReadLBSpec::spec_prec_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af5c8b5f02b64bb47b59351d6facf465e" kindref="member">ReadLBSpec::read_complete_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a7da8702619a292b50188ff15c6e88c71" kindref="member">ReadLBSpec::openSpec</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No-op<sp/>if<sp/>no<sp/>file<sp/>specified.<sp/>Can&apos;t<sp/>be<sp/>used<sp/>to<sp/>clear.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename.empty())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>attempt<sp/>to<sp/>open<sp/>same<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af801f1e2bc280248d841f74d6afe012f" kindref="member">open_filename_</ref>.empty()<sp/>and<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af801f1e2bc280248d841f74d6afe012f" kindref="member">open_filename_</ref><sp/>==<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>open_filename_.empty(),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Spec<sp/>already<sp/>opened.<sp/>Use<sp/>clear<sp/>first<sp/>to<sp/>load<sp/>again.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>file<sp/>can<sp/>be<sp/>opened.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>file(filename);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>file.good())<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>spec<sp/>file:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hard__error_8h_1afc4cdafa6d3b99f94c26a5d4290999a9" kindref="member">vtAbort</ref>(str);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>loaded<sp/>file<sp/>-<sp/>multiple<sp/>calls<sp/>to<sp/>same<sp/>file<sp/>are<sp/>idempotent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>open_filename_<sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a3e3d82556062c51ce3977727884400a4" kindref="member">readFile</ref>(filename);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1ac4f99693509affcc67db182d4aad9b5c" kindref="member">LBType</ref><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a55d8e971ad0821c272aeb3c20455c389" kindref="member">ReadLBSpec::getLB</ref>(<ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a72a5e0d9936ddf57f8e6c64e0e9fd123" kindref="member">SpecIndex</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689aecb25779c74e06cc3e6baf03ed8289ed" kindref="member">lb</ref><sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af9e1e7f7ea03e6a7bc06d38c2ca28544" kindref="member">entry</ref>(idx);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689aecb25779c74e06cc3e6baf03ed8289ed" kindref="member">lb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689aecb25779c74e06cc3e6baf03ed8289ed" kindref="member">lb</ref>-&gt;getLB();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1ac4f99693509affcc67db182d4aad9b5cad12268b59a4f1098aee001f9a1750020" kindref="member">LBType::NoLB</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>SpecEntry*<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af9e1e7f7ea03e6a7bc06d38c2ca28544" kindref="member">ReadLBSpec::entry</ref>(<ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a72a5e0d9936ddf57f8e6c64e0e9fd123" kindref="member">SpecIndex</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>search<sp/>the<sp/>exact<sp/>iter<sp/>spec<sp/>for<sp/>this<sp/>iteration:<sp/>it<sp/>has<sp/>the<sp/>highest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>precedence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spec_iter<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a40226a2163e4cc03bc48f766df0bb78d" kindref="member">spec_exact_</ref>.find(idx);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec_iter<sp/>!=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a40226a2163e4cc03bc48f766df0bb78d" kindref="member">spec_exact_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;spec_iter-&gt;second;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second,<sp/>walk<sp/>through<sp/>the<sp/>spec<sp/>precedence<sp/>map<sp/>for<sp/>the<sp/>mod<sp/>overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mod<sp/>:<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a53d7c8950db9d6b4d8b7d895d0a264d0" kindref="member">spec_prec_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">spec_mod_</ref>.find(mod);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">spec_mod_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>mod<sp/>is<sp/>applicable<sp/>to<sp/>the<sp/>idx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>%<sp/>mod<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_mod<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">spec_mod_</ref>.find(mod);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter_mod<sp/>!=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">spec_mod_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;iter_mod-&gt;second;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Else,<sp/>return<sp/>nullptr---no<sp/>applicable<sp/>entry<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a605ea184edf7f99b0022f960f71bf4d4" kindref="member">eatWhitespace</ref>(std::ifstream&amp;<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(not<sp/>file.eof()<sp/>and<sp/>std::isspace(file.peek())<sp/>and<sp/>file.peek()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>file.get();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file.eof()<sp/>?<sp/>0<sp/>:<sp/>file.peek();</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a3e3d82556062c51ce3977727884400a4" kindref="member">ReadLBSpec::readFile</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>file(filename);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="config__assert_8h_1aeddd4990a496e91a0ca5d6c16437359b" kindref="member">vtAssert</ref>(file.good(),<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!file.eof())<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_mod<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>mod<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lb_name;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>params;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a605ea184edf7f99b0022f960f71bf4d4" kindref="member">eatWhitespace</ref>(file);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parse<sp/>an<sp/>entry<sp/>that<sp/>starts<sp/>with<sp/>an<sp/>LB:<sp/>&quot;%<sp/>...&quot;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;char&gt;(c)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_mod<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eat<sp/>up<sp/>the<sp/>&apos;%&apos;,<sp/>move<sp/>to<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file.get();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a605ea184edf7f99b0022f960f71bf4d4" kindref="member">eatWhitespace</ref>(file);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parse<sp/>entry<sp/>starting<sp/>LB<sp/>iter/mod:<sp/>&quot;[%]<sp/>10<sp/>GreedyLB<sp/>...&quot;</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isdigit(c))<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&gt;&gt;<sp/>mod;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a605ea184edf7f99b0022f960f71bf4d4" kindref="member">eatWhitespace</ref>(file);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parse<sp/>the<sp/>name<sp/>of<sp/>the<sp/>LB:<sp/>&quot;GreedyLB<sp/>...&quot;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isalpha(c))<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&gt;&gt;<sp/>lb_name;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a605ea184edf7f99b0022f960f71bf4d4" kindref="member">eatWhitespace</ref>(file);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Parse<sp/>out<sp/>all<sp/>the<sp/>parameters<sp/>for<sp/>the<sp/>LB:<sp/>&quot;x=1<sp/>y=2<sp/>test=3<sp/>...&quot;</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(file.peek()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>and<sp/>not<sp/>file.eof())<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689ab9f079503fc8bbc11679d6dd6d2a2d16" kindref="member">param</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>&gt;&gt;<sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689ab9f079503fc8bbc11679d6dd6d2a2d16" kindref="member">param</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params.push_back(param);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a605ea184edf7f99b0022f960f71bf4d4" kindref="member">eatWhitespace</ref>(file);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(file.peek()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file.get();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Split<sp/>params<sp/>into<sp/>&apos;key=value&apos;</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>param_map<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a69993cae4576e25d70929e95dad81d7e" kindref="member">parseParams</ref>(params);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>LB<sp/>name</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_lb_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>elm<sp/>:<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a25f2d26f8832c24be922ebbb2cd7c119" kindref="member">lb_names_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb_name<sp/>==<sp/>elm.second)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_lb_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>valid_lb_found)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_msg<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Valid<sp/>LB<sp/>not<sp/>found:<sp/>\&quot;name={}\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>lb_name);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hard__error_8h_1afc4cdafa6d3b99f94c26a5d4290999a9" kindref="member">vtAbort</ref>(err_msg);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>line<sp/>is<sp/>specified<sp/>as<sp/>a<sp/>mod<sp/>&apos;%&apos;<sp/>or<sp/>not<sp/>line<sp/>is<sp/>specified<sp/>(assume</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>mod<sp/>1)</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1aa73c3611c615832402eeeed6fb7b8049" kindref="member">SpecMapType</ref>*<sp/>map<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mod<sp/>or<sp/>mod<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mod<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mod<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spec_prec_.push_back(mod);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map<sp/>=<sp/>&amp;<ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">spec_mod_</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map<sp/>=<sp/>&amp;<ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a40226a2163e4cc03bc48f766df0bb78d" kindref="member">spec_exact_</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map-&gt;find(mod)<sp/>!=<sp/>map-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err_msg<sp/>=<sp/>fmt::format(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Iter<sp/>{}<sp/>specified<sp/>twice:<sp/>name={},<sp/>mod={}\n&quot;</highlight><highlight class="normal">,<sp/>mod,<sp/>lb_name,<sp/>is_mod</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hard__error_8h_1afc4cdafa6d3b99f94c26a5d4290999a9" kindref="member">vtAbort</ref>(err_msg);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>map-&gt;emplace(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(mod),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::forward_as_tuple(SpecEntry{mod,<sp/>lb_name,<sp/>param_map})</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af5c8b5f02b64bb47b59351d6facf465e" kindref="member">read_complete_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1aa92db6434f6eb0839312f914139d296c" kindref="member">ReadLBSpec::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af5c8b5f02b64bb47b59351d6facf465e" kindref="member">read_complete_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>open_filename_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a72033347ba73a23dd3494ead118e44d1" kindref="member">spec_mod_</ref>.clear();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a40226a2163e4cc03bc48f766df0bb78d" kindref="member">spec_exact_</ref>.clear();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>spec_prec_.clear();</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a05e30b32f0ca5df2cb160514fa0eeb41" kindref="member">ReadLBSpec::ParamMapType</ref></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a69993cae4576e25d70929e95dad81d7e" kindref="member">ReadLBSpec::parseParams</ref>(std::vector&lt;std::string&gt;<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a05e30b32f0ca5df2cb160514fa0eeb41" kindref="member">ParamMapType</ref><sp/>param_map;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Split<sp/>params<sp/>into<sp/>&apos;key=value&apos;</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>p<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>key,<sp/>value;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>p.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>p.substr(0,<sp/>i);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>p.substr(i<sp/>+<sp/>1,<sp/>p.length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_map[key]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>found)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;LB<sp/>file<sp/>reader:<sp/>could<sp/>not<sp/>parse<sp/>param:<sp/>\&quot;{}\&quot;&quot;</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hard__error_8h_1afc4cdafa6d3b99f94c26a5d4290999a9" kindref="member">vtAbort</ref>(err);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>param_map;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>SpecEntry<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a4a3fc33794511c6d74d6e4a70eb72682" kindref="member">ReadLBSpec::makeSpecFromParams</ref>(std::string<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1aaed7e09146a45c2932ca185a55161723" kindref="member">param_str</ref>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>stream(param_str);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>params;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(not<sp/>stream.eof())<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689ab9f079503fc8bbc11679d6dd6d2a2d16" kindref="member">param</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&gt;&gt;<sp/><ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689ab9f079503fc8bbc11679d6dd6d2a2d16" kindref="member">param</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>params.push_back(param);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>param_map<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a69993cae4576e25d70929e95dad81d7e" kindref="member">parseParams</ref>(params);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SpecEntry{0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>param_map};</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>param_str<sp/>=<sp/>[](</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>params</highlight></codeline>
<codeline lineno="298"><highlight class="normal">)<sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params.empty())<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>arguments<sp/>`&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}={}<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">vt::debug::emph</ref>(param.first),</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">vt::debug::emph</ref>(param.second));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>ss.seekp(-1,<sp/>ss.cur);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1af2f6674ecc7191ddbfe31e87569fe334" kindref="member">excluded_str</ref><sp/>=<sp/>[](<ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1a72a5e0d9936ddf57f8e6c64e0e9fd123" kindref="member">SpecIndex</ref><sp/>idx)<sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exact_entries<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a9a982a88b574472a21a3e574cc6c27ba" kindref="member">ReadLBSpec::getExactEntries</ref>();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_idx<sp/>=<sp/>exact_entries.empty()<sp/>?<sp/>0<sp/>:<sp/>exact_entries.rbegin()-&gt;first;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k*idx<sp/>&lt;=<sp/>max_idx;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_entry<sp/>=<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1af9e1e7f7ea03e6a7bc06d38c2ca28544" kindref="member">ReadLBSpec::entry</ref>(k*idx);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_entry<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>and<sp/>next_entry-&gt;getIdx()<sp/>!=<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{},<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">debug::emph</ref>(std::to_string(k*idx)));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>std::string<sp/>s<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.empty()<sp/>?<sp/>s<sp/>:<sp/>s.substr(0,<sp/>s.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="328"><highlight class="normal">};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a2953391fdad20794e17de23b39ee2fad" kindref="member">ReadLBSpec::toString</ref>()<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(open_filename_.empty())<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[No<sp/>LB<sp/>Spec<sp/>open]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a9a982a88b574472a21a3e574cc6c27ba" kindref="member">ReadLBSpec::getExactEntries</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}\tExact<sp/>specification<sp/>lines:\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacevt_1_1debug_1acfaac527e91984bde40775eb9b4372ef" kindref="member">vt::debug::vtPre</ref>());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>exact_entry<sp/>:<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a9a982a88b574472a21a3e574cc6c27ba" kindref="member">ReadLBSpec::getExactEntries</ref>())<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}\tRun<sp/>`{}`<sp/>on<sp/>phase<sp/>{}{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1acfaac527e91984bde40775eb9b4372ef" kindref="member">vt::debug::vtPre</ref>(),</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">vt::debug::emph</ref>(exact_entry.second.getName()),</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">vt::debug::emph</ref>(std::to_string(exact_entry.first)),</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1aaed7e09146a45c2932ca185a55161723" kindref="member">param_str</ref>(exact_entry.second.getParams()));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a8fbbc8343a79844abdfd16536ff4ea2b" kindref="member">ReadLBSpec::getModEntries</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fmt::format(</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{}\tMod<sp/>(%)<sp/>specification<sp/>lines:\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacevt_1_1debug_1acfaac527e91984bde40775eb9b4372ef" kindref="member">vt::debug::vtPre</ref>()</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>mod_entry<sp/>:<sp/><ref refid="structvt_1_1vrt_1_1collection_1_1balance_1_1_read_l_b_spec_1a8fbbc8343a79844abdfd16536ff4ea2b" kindref="member">ReadLBSpec::getModEntries</ref>())<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;{}\tRun<sp/>`{}`<sp/>every<sp/>{}<sp/>phases{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1acfaac527e91984bde40775eb9b4372ef" kindref="member">vt::debug::vtPre</ref>(),</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">vt::debug::emph</ref>(mod_entry.second.getName()),</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1debug_1add365336d7aa2053b5b7588ccad48ac7" kindref="member">vt::debug::emph</ref>(std::to_string(mod_entry.first)),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1aaed7e09146a45c2932ca185a55161723" kindref="member">param_str</ref>(mod_entry.second.getParams()));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>excluded_phases<sp/>=<sp/><ref refid="namespacevt_1_1vrt_1_1collection_1_1balance_1af2f6674ecc7191ddbfe31e87569fe334" kindref="member">excluded_str</ref>(mod_entry.first);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>excluded_phases.empty())<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>excluding<sp/>phases<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>excluded_phases;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">}}}}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>vt::vrt::collection::balance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/vt/vrt/collection/balance/read_lb.cc"/>
  </compounddef>
</doxygen>
