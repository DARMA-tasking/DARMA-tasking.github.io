<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tutorial" kind="page">
    <compoundname>tutorial</compoundname>
    <title>Tutorial</title>
    <innerpage refid="tutorial-1a">Learning about context</innerpage>
    <innerpage refid="tutorial-1b">Learning about active handlers</innerpage>
    <innerpage refid="tutorial-1c">Learning about serialization</innerpage>
    <innerpage refid="tutorial-1d">Learning about broadcasts</innerpage>
    <innerpage refid="tutorial-1e">Learning about rooted groups</innerpage>
    <innerpage refid="tutorial-1f">Learning about collective groups</innerpage>
    <innerpage refid="tutorial-1g">Learning about callbacks</innerpage>
    <innerpage refid="tutorial-1h">Learning about reductions</innerpage>
    <innerpage refid="tutorial-2a">Learning about collections</innerpage>
    <innerpage refid="tutorial-2b">Learning about collection reductions</innerpage>
    <innerpage refid="tutorial-3a">Learning about collective epochs</innerpage>
    <detaileddescription>
<para>Tutorial of how to use <bold><emphasis>vt</emphasis></bold></para><sect1 id="tutorial_1tutorial-init-finalize-vt">
<title>Initializing/Finalizing</title>
<para>To initialize <bold><emphasis>vt</emphasis></bold> all you must do is invoke the <computeroutput><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref></computeroutput> call with the program arguments, which creates and initializes a new <bold><emphasis>vt</emphasis></bold> runtime. The initialize call reads the <bold><emphasis>vt</emphasis></bold> arguments and removes them, leaving the remaining for the program.</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref>(argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a540d90dbd6e97b69f1dcbc9ee9314cff" kindref="member">vt::finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>If you are already using MPI in your program already, you don&apos;t want to call initialize like this because <bold><emphasis>vt</emphasis></bold> will initialize MPI itself. Instead, you should pass a pointer to the live MPI communicator to <bold><emphasis>vt</emphasis></bold> for it to clone, as so:</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MPI_Init(&amp;argc,<sp/>&amp;argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref>(argc,<sp/>argv,<sp/>&amp;MPI_COMM_WORLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a540d90dbd6e97b69f1dcbc9ee9314cff" kindref="member">vt::finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MPI_Finalize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>If, for any reason, you want to predefine configuration, you can do it by creating <computeroutput>AppConfig</computeroutput> object, setting its members as you wish, and passing it to <computeroutput><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref></computeroutput>:</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arguments::AppConfig<sp/>appConfig{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>appConfig.vt_lb_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RotateLB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>appConfig.vt_lb_data<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref>(argc,<sp/>argv,<sp/>&amp;appConfig);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a540d90dbd6e97b69f1dcbc9ee9314cff" kindref="member">vt::finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>You can do also do it if you initialized MPI on your own:</para><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MPI_Init(&amp;argc,<sp/>&amp;argv);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arguments::AppConfig<sp/>appConfig{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>appConfig.vt_lb_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RotateLB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>appConfig.vt_lb_data<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref>(argc,<sp/>argv,<sp/>&amp;MPI_COMM_WORLD,<sp/>&amp;appConfig);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespacevt_1a540d90dbd6e97b69f1dcbc9ee9314cff" kindref="member">vt::finalize</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MPI_Finalize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>It is worth noting that if you run your application with any of vt&apos;s command-line arguments and at the same time you define and pass <computeroutput>AppConfig</computeroutput> to <computeroutput><ref refid="namespacevt_1aae6ab5af3e11886ce73c4c3ffa008201" kindref="member">vt::initialize</ref></computeroutput>, CLI arguments have a higher priority. In other words, if you predefine in source code and give from the command line the same vt&apos;s argument, but with a different value, the program will use the CLI one.</para><para>There is also an option to use configuration file. Refer to CLI11 documentation for details <ulink url="https://cliutils.github.io/CLI11/book/chapters/config.html">https://cliutils.github.io/CLI11/book/chapters/config.html</ulink>. Important thing to remember - CLI11 processes configuration file before command line arguments, so in the end command line arguments might overwrite values defined in configuration file.</para></sect1>
<sect1 id="tutorial_1tutorial-walkthrough">
<title>Tutorial Code Snippets</title>
<para>This page walks through the tutorial that exists in the source code. See <computeroutput>vt/tutorial/*.h</computeroutput> for the tutorial pieces in the repository. The main tutorial example code that stitches the pieces together is located in example: <computeroutput>vt/tutorial/tutorial_main.h</computeroutput>. The actual code that compiles into an example is in <computeroutput>vt/examples/tutorial.cc</computeroutput>.</para><para><itemizedlist>
<listitem><para>Tutorial 1<mdash/>Basic Concepts<itemizedlist>
<listitem><para>1a: <ref refid="tutorial-1a" kindref="compound">Learning about context</ref></para></listitem><listitem><para>1b: <ref refid="tutorial-1b" kindref="compound">Learning about active handlers</ref></para></listitem><listitem><para>1c: <ref refid="tutorial-1c" kindref="compound">Learning about serialization</ref></para></listitem><listitem><para>1d: <ref refid="tutorial-1d" kindref="compound">Learning about broadcasts</ref></para></listitem><listitem><para>1e: <ref refid="tutorial-1e" kindref="compound">Learning about rooted groups</ref></para></listitem><listitem><para>1f: <ref refid="tutorial-1f" kindref="compound">Learning about collective groups</ref></para></listitem><listitem><para>1g: <ref refid="tutorial-1g" kindref="compound">Learning about callbacks</ref></para></listitem><listitem><para>1h: <ref refid="tutorial-1h" kindref="compound">Learning about reductions</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>Tutorial 2<mdash/>Collections<itemizedlist>
<listitem><para>2a: <ref refid="tutorial-2a" kindref="compound">Learning about collections</ref></para></listitem><listitem><para>2b: <ref refid="tutorial-2b" kindref="compound">Learning about collection reductions</ref></para></listitem></itemizedlist>
</para></listitem><listitem><para>Tutorial 3<mdash/>Epochs<itemizedlist>
<listitem><para>3a: <ref refid="tutorial-3a" kindref="compound">Learning about collective epochs</ref> </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
