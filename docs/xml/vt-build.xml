<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="vt-build" kind="page">
    <compoundname>vt-build</compoundname>
    <title>How to Build</title>
    <detaileddescription>
<para>Building DARMA/vt with cmake</para><para><bold><emphasis>vt</emphasis></bold> can be built with <computeroutput>cmake</computeroutput> or built inside a <computeroutput>docker</computeroutput> container. Most of the external dependencies come bundled with <bold><emphasis>vt</emphasis></bold> for ease of compiling.</para><sect1 id="vt-build_1how-to-build">
<title>Building</title>
<para>To build <bold><emphasis>vt</emphasis></bold>, one must obtain the following dependencies:</para><sect2 id="vt-build_1required-deps">
<title>Required</title>
<para><itemizedlist>
<listitem><para>detector, (<emphasis>vt</emphasis> ecosystem)</para></listitem><listitem><para>checkpoint, (<emphasis>vt</emphasis> ecosystem)</para></listitem><listitem><para>MPI (mpich/openmpi/mvapich/IBM Spectrum MPI/Cray MPICH/etc.)</para></listitem></itemizedlist>
</para></sect2>
<sect2 id="vt-build_1optional-deps">
<title>Optional (if threading enabled)</title>
<para><itemizedlist>
<listitem><para>OpenMP <emphasis>or</emphasis></para></listitem><listitem><para>Default to <computeroutput>std::thread</computeroutput></para></listitem></itemizedlist>
</para></sect2>
<sect2 id="vt-build_1automatic-build-deps">
<title>Automatically build dependencies</title>
<para>Assuming MPI is installed and accessible via CC/CXX, the only other dependencies that are required are checkpoint and detector. The easiest way to get these built are to clone them inside <computeroutput>vt/lib</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>git@github.com:DARMA-tasking/vt</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>vt/lib</highlight></codeline>
<codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>git@github.com:DARMA-tasking/checkpoint</highlight></codeline>
<codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>git@github.com:DARMA-tasking/detector</highlight></codeline>
</programlisting></para><para>With these in <computeroutput>vt/lib</computeroutput>, cmake will automatically build them and stitch them into <emphasis>vt</emphasis>&apos;s linking process.</para></sect2>
<sect2 id="vt-build_1use-cmake-directly-vars">
<title>Using cmake directly</title>
<para>One may use <computeroutput>cmake</computeroutput> as normal on <emphasis>vt</emphasis>, with checkpoint and detector cloned in <computeroutput>vt/lib</computeroutput> to compile them all together as explained above. The following are some custom configuration build options that can be provided to <computeroutput>cmake</computeroutput> to change the build configuration:</para><para><table rows="28" cols="3"><row>
<entry thead="yes"><para>CMake Variable </para></entry><entry thead="yes"><para>Default Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_lb_enabled</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Compile with support for runtime load balancing </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_trace_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Compile with support for runtime tracing (Projections-format) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_trace_only</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Compile vt in trace-only mode (stripped down version for tracing MPI calls) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_test_trace_runtime_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force tracing on at runtime for VT tests </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_doxygen_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable doxygen generation </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_mimalloc_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable <computeroutput>mimalloc</computeroutput>, alternative allocator for debugging memory usage/frees/corruption </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_asan_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable building with address sanitizer </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_werror_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Treat all warnings as errors </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_pool_enabled</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Use memory pool in <emphasis>vt</emphasis> for message allocation </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_zoltan_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Build with Zoltan enabled for <computeroutput>ZoltanLB</computeroutput> support </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_mpi_guards</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Guards against mis-use of MPI calls in code using <emphasis>vt</emphasis> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_priorities_enabled</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Enable prioritization of work (adds bits in envelope) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_diagnostics_enabled</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Enable VT component diagnostics for performance analysis </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_diagnostics_runtime_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable VT component diagnostics at runtime by default </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_priority_bits_per_level</computeroutput> </para></entry><entry thead="no"><para>3 </para></entry><entry thead="no"><para>Number of bits per level of priority in envelope </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_build_extended_tests</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Build with full, extended testing </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_production_build_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Disable assertions and debug prints at compile time </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_unity_build_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Build with Unity/Jumbo mode enabled (requires CMake &gt;= 3.16) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_fcontext_enabled</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force use of fcontext for threading </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_tests_num_nodes</computeroutput> </para></entry><entry thead="no"><para>- </para></entry><entry thead="no"><para>Maximum number of nodes used for tests. If empty, then the default value detected by CMake is used </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CODE_COVERAGE</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable code coverage for VT examples/tests </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_OPENMP</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force use of OpenMP for threading </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>USE_STD_THREAD</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force use of std::thread for threading </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_BUILD_TESTS</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Build all VT tests </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_BUILD_EXAMPLES</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Build all VT examples </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_debug_verbose</computeroutput> </para></entry><entry thead="no"><para>1 (not Release) </para></entry><entry thead="no"><para>Enable VT verbose debug prints at compile-time </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>vt_throw_on_abort</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Throw an exception instead of calling <computeroutput>MPI_Abort</computeroutput> on <computeroutput>vtAbort</computeroutput> </para></entry></row>
</table>
</para></sect2>
<sect2 id="vt-build_1using-the-build-script">
<title>Using the Build Script</title>
<para>Instead of running <computeroutput>cmake</computeroutput>, one may invoke the <computeroutput>vt/ci/build_cpp.sh</computeroutput> script which will run <computeroutput>cmake</computeroutput> for <emphasis>vt</emphasis> with environment variables for most configuration parameters.</para><sect3 id="vt-build_1building-environment-variables">
<title>Build Script Environment Variables</title>
<para><table rows="25" cols="3"><row>
<entry thead="yes"><para>Variable </para></entry><entry thead="yes"><para>Default Value </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>CMAKE_BUILD_TYPE</computeroutput> </para></entry><entry thead="no"><para>Release </para></entry><entry thead="no"><para>The <computeroutput>cmake</computeroutput> build type </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_LB_ENABLED</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Compile with support for runtime load balancing </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_TRACE_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Compile with support for runtime tracing (Projections-format) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_TRACE_ONLY</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Compile vt in trace-only mode (stripped down version for tracing MPI calls) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_TRACE_RUNTIME_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force tracing on at runtime (used in CI for automatically testing tracing on all tests/examples) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_DOXYGEN_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable doxygen generation </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_MIMALLOC_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable <computeroutput>mimalloc</computeroutput>, alternative allocator for debugging memory usage/frees/corruption </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_ASAN_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable building with address sanitizer </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_WERROR_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Treat all warnings as errors </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_POOL_ENABLED</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Use memory pool in <emphasis>vt</emphasis> for message allocation </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_FCONTEXT_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force use of fcontext for threading </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_USE_OPENMP</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force use of OpenMP for threading </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_USE_STD_THREAD</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Force use of std::thread for threading </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_ZOLTAN_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Build with Zoltan enabled for <computeroutput>ZoltanLB</computeroutput> support </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ZOLTAN_DIR</computeroutput> </para></entry><entry thead="no"><para>&lt;empty&gt; </para></entry><entry thead="no"><para>Directory pointing to Zoltan installation </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_MPI_GUARD_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Guards against mis-use of MPI calls in code using <emphasis>vt</emphasis> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_EXTENDED_TESTS_ENABLED</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Build with full, extended testing </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_UNITY_BUILD_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Build with Unity/Jumbo mode enabled (requires CMake &gt;= 3.16) </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_PRODUCTION_BUILD_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Disable assertions and debug prints at compile time </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_DIAGNOSTICS_ENABLED</computeroutput> </para></entry><entry thead="no"><para>1 </para></entry><entry thead="no"><para>Enable VT component diagnostics for performance analysis </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_DIAGNOSTICS_RUNTIME_ENABLED</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Enable VT component diagnostics at runtime by default </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_DEBUG_VERBOSE</computeroutput> </para></entry><entry thead="no"><para>&lt;empty&gt; </para></entry><entry thead="no"><para>Enable VT verbose debug prints at compile-time </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_TESTS_NUM_NODES</computeroutput> </para></entry><entry thead="no"><para>&lt;empty&gt; </para></entry><entry thead="no"><para>Maximum number of nodes used for tests. If empty, then the default value detected by CMake is used </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>VT_THROW_ON_ABORT</computeroutput> </para></entry><entry thead="no"><para>0 </para></entry><entry thead="no"><para>Throw an exception instead of calling <computeroutput>MPI_Abort</computeroutput> on <computeroutput>vtAbort</computeroutput> </para></entry></row>
</table>
With these set, invoke the script with two arguments: the path to the <emphasis>vt</emphasis> root directory and the build path. Here&apos;s an example assuming that <emphasis>vt</emphasis> is cloned into <computeroutput>/usr/src/vt</computeroutput> with trace enabled in debug mode.</para><para><bold>Usage for building:</bold></para><para><programlisting><codeline><highlight class="normal">$<sp/>vt/ci/build_cpp.sh<sp/>&lt;full-path-to-vt-source&gt;<sp/>&lt;full-path-to-build-dir&gt;</highlight></codeline>
</programlisting></para><para><bold>Example:</bold></para><para><programlisting><codeline><highlight class="normal">$<sp/>cd<sp/>/usr/src</highlight></codeline>
<codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>git@github.com:DARMA-tasking/vt</highlight></codeline>
<codeline><highlight class="normal">$<sp/>VT_TRACE_ENABLED=1<sp/>CMAKE_BUILD_TYPE=Debug<sp/>/usr/src/vt/ci/build_cpp.sh<sp/>/usr/src/vt<sp/>/usr/build/vt</highlight></codeline>
</programlisting></para></sect3>
</sect2>
<sect2 id="vt-build_1docker-build">
<title>Building with `docker` containerization</title>
<para>The easiest way to build <emphasis>vt</emphasis> is by using <computeroutput>docker</computeroutput> with the available containers that contain the proper compilers, MPI, and all other dependencies. First, install <computeroutput>docker</computeroutput> on the system. On some systems, <computeroutput>docker-compose</computeroutput> might also need to be installed.</para><para>The <computeroutput>docker</computeroutput> builds are configured through <computeroutput>docker-compose</computeroutput> to use a shared, cached filesystem mount with the host for <computeroutput>ccache</computeroutput> to enable fast re-builds.</para><para>For <computeroutput>docker-compose</computeroutput>, the following variables can be set to configure the build. One may configure the architecture, compiler type (GNU, Clang, Intel, Nvidia) and compiler version, Linux distro (ubuntu or alpine), and distro version.</para><para>The default set of the docker configuration options is located in <computeroutput>vt/.env</computeroutput>, which <computeroutput>docker-compose</computeroutput> will read.</para><para><programlisting><codeline><highlight class="normal">#<sp/>Variables:</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>ARCH={amd64,<sp/>arm64v8,<sp/>...}</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>COMPILER_TYPE={gnu,<sp/>clang,<sp/>intel,<sp/>nvidia}</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>COMPILER={gcc-5,<sp/>gcc-6,<sp/>gcc-7,<sp/>gcc-8,<sp/>gcc-9,<sp/>gcc-10,</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clang-3.9,<sp/>clang-4.0,<sp/>clang-5.0,<sp/>clang-6.0,<sp/>clang-7,<sp/>clang-8,</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clang-9,<sp/>clang-10,</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>icc-18,<sp/>icc-19,</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvcc-10,<sp/>nvcc-11}</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>REPO=lifflander1/vt</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>UBUNTU={18.04,<sp/>20.04}</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>ULIMIT_CORE=0</highlight></codeline>
<codeline><highlight class="normal">#</highlight></codeline>
<codeline><highlight class="normal">#<sp/>DARMA/vt<sp/>Configuration<sp/>Variables:</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_LB=1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>load<sp/>balancing</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_TRACE=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>tracing</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_MIMALLOC=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>mimalloc<sp/>memory<sp/>allocator</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_DOCS=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>doxygen<sp/>build</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_TRACE_RT=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>tracing<sp/>at<sp/>runtime<sp/>(for<sp/>testing)</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_ASAN=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>address<sp/>sanitizer</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_WERROR=1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Treat<sp/>all<sp/>warnings<sp/>as<sp/>errors</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_EXTENDED_TESTS=1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Build<sp/>all<sp/>the<sp/>extended<sp/>testing</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_ZOLTAN=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Build<sp/>with<sp/>Zoltan<sp/>enabled</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_UNITY_BUILD=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Build<sp/>with<sp/>Unity/Jumbo<sp/>mode<sp/>enabled</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_FCONTEXT=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Force<sp/>use<sp/>of<sp/>fcontext<sp/>for<sp/>threading</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_USE_OPENMP=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Force<sp/>use<sp/>of<sp/>OpenMP<sp/>for<sp/>threading</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_USE_STD_THREAD=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Force<sp/>use<sp/>of<sp/>std::thread<sp/>for<sp/>threading</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_DIAGNOSTICS=1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Build<sp/>with<sp/>diagnostics<sp/>enabled</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_DIAGNOSTICS_RUNTIME=0<sp/><sp/>#<sp/>Enable<sp/>diagnostics<sp/>at<sp/>runtime<sp/>by<sp/>default</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>BUILD_TYPE=release<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>CMake<sp/>build<sp/>type</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>CODE_COVERAGE=0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>generation<sp/>of<sp/>code<sp/>coverage<sp/>reports</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/>VT_DEBUG_VERBOSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Enable<sp/>verbose<sp/>debug<sp/>prints<sp/>at<sp/>compile-time</highlight></codeline>
</programlisting></para><para>With these set, one may run the following for a non-interactive build with ubuntu. Or, to speed up the build process, the base container can be pulled for many of the common configurations: <computeroutput>docker-compose pull ubuntu-cpp</computeroutput>.</para><para><programlisting><codeline><highlight class="normal">$<sp/>cd<sp/>vt</highlight></codeline>
<codeline><highlight class="normal">$<sp/>docker-compose<sp/>run<sp/>-e<sp/>BUILD_TYPE=debug<sp/>-e<sp/>VT_TRACE=1<sp/>ubuntu-cpp</highlight></codeline>
</programlisting></para><para>Or, alternatively, run a non-interactive build with alpine:</para><para><programlisting><codeline><highlight class="normal">$<sp/>cd<sp/>vt</highlight></codeline>
<codeline><highlight class="normal">$<sp/>docker-compose<sp/>run<sp/>-e<sp/>BUILD_TYPE=debug<sp/>-e<sp/>VT_TRACE=1<sp/>alpine-cpp</highlight></codeline>
</programlisting></para><para>For an interactive build with ubuntu, where one can build, debug, and run <computeroutput>valgrind</computeroutput>, etc:</para><para><programlisting><codeline><highlight class="normal">$<sp/>cd<sp/>vt</highlight></codeline>
<codeline><highlight class="normal">$<sp/>docker-compose<sp/>run<sp/>-e<sp/>BUILD_TYPE=debug<sp/>-e<sp/>VT_TRACE=1<sp/>ubuntu-cpp-interactive</highlight></codeline>
<codeline><highlight class="normal">#<sp/>/vt/ci/build_cpp.sh<sp/>/vt<sp/>/build</highlight></codeline>
<codeline><highlight class="normal">#<sp/>/vt/ci/test_cpp.sh<sp/>/vt<sp/>/build</highlight></codeline>
</programlisting></para><para>The same call applies to alpine distro builds if you swap <computeroutput>ubuntu-cpp-interactive</computeroutput> for <computeroutput>alpine-cpp-interactive</computeroutput>.</para><para>For more detailed information on configuring the docker build, read the documentation in <computeroutput>vt/docker-compose.yml</computeroutput>.</para></sect2>
</sect1>
<sect1 id="vt-build_1test-vt">
<title>Testing</title>
<para>After <emphasis>vt</emphasis> is built succesfully, one may invoke the tests several ways. One may run <computeroutput>make test</computeroutput> or <computeroutput>ninja test</computeroutput> (depending on the generator used) or <computeroutput>ctest</computeroutput>, to run all the tests. Alternatively, the tests can be run automatically from the CI script:</para><para><programlisting><codeline><highlight class="normal">$<sp/>vt/ci/test_cpp.sh<sp/>&lt;full-path-to-vt-source&gt;<sp/>&lt;full-path-to-build-dir&gt;</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
