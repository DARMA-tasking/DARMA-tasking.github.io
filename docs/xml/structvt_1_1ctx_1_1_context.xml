<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1ctx_1_1_context" kind="struct" language="C++" prot="public">
    <compoundname>vt::ctx::Context</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; Context &gt;</basecompoundref>
    <includes refid="context_8h" local="no">vt/context/context.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1ctx_1_1_context_1a75c33a90ea59b21ab5375343af0f8e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct ContextAttorney</definition>
        <argsstring></argsstring>
        <name>ContextAttorney</name>
        <briefdescription>
<para>Used to manage protected access for other VT runtime components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="143" column="1" bodyfile="src/vt/context/context.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1a5fcea79d2fede6e9945433621894624c" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::thisNode_</definition>
        <argsstring></argsstring>
        <name>thisNode_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="162" column="1" bodyfile="src/vt/context/context.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1a58cc20215314e915f43b829ad0470299" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::numNodes_</definition>
        <argsstring></argsstring>
        <name>numNodes_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="163" column="1" bodyfile="src/vt/context/context.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1a16e8488c6e6ad26c387ad6ef19f726b9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref></type>
        <definition>WorkerCountType vt::ctx::Context::numWorkers_</definition>
        <argsstring></argsstring>
        <name>numWorkers_</name>
        <initializer>= no_workers</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="164" column="1" bodyfile="src/vt/context/context.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1afe6c05b957670f03ef2a278da031a5c4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool vt::ctx::Context::is_comm_world_</definition>
        <argsstring></argsstring>
        <name>is_comm_world_</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="165" column="1" bodyfile="src/vt/context/context.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1ac9f5afa2cb9a6c06c8570bbf25cde926" prot="private" static="no" mutable="no">
        <type>MPI_Comm</type>
        <definition>MPI_Comm vt::ctx::Context::communicator_</definition>
        <argsstring></argsstring>
        <name>communicator_</name>
        <initializer>= MPI_COMM_WORLD</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="166" column="1" bodyfile="src/vt/context/context.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a860016b34ca68006a733314f970216b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::ctx::Context::Context</definition>
        <argsstring>(int argc, char **argv, bool const interop, MPI_Comm *comm=nullptr)</argsstring>
        <name>Context</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>bool const</type>
          <declname>interop</declname>
        </param>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Constructor with interop and args, not called by the user directly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="73" column="1" bodyfile="src/vt/context/context.cc" bodystart="59" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a9f5b0fcad61a79f18fdaf7d757b52b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::ctx::Context::Context</definition>
        <argsstring>(bool const interop, MPI_Comm *comm=nullptr)</argsstring>
        <name>Context</name>
        <param>
          <type>bool const</type>
          <declname>interop</declname>
        </param>
        <param>
          <type>MPI_Comm *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Constructor with only interop, not called by the user directly. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="76" column="1" bodyfile="src/vt/context/context.cc" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::getNode</definition>
        <argsstring>() const</argsstring>
        <name>getNode</name>
        <briefdescription>
<para>Gets the current node (analagous to MPI&apos;s rank) currently being used. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">vt::NodeType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>the node currently being run on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="86" column="1" bodyfile="src/vt/context/context.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a7f41071aadf6d5fa9e1b6c703c5ff19d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::getNumNodes</definition>
        <argsstring>() const</argsstring>
        <name>getNumNodes</name>
        <briefdescription>
<para>Get the number of nodes (analagous to MPI&apos;s num ranks) being used. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">vt::NodeType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>the number of nodes currently being run on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="95" column="1" bodyfile="src/vt/context/context.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a2d4378c97824792991a3410449cf19db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MPI_Comm</type>
        <definition>MPI_Comm vt::ctx::Context::getComm</definition>
        <argsstring>() const</argsstring>
        <name>getComm</name>
        <briefdescription>
<para>Get the MPI communicator being used by VT in a given runtime instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <computeroutput>MPI_Comm</computeroutput> being used by VT for communication </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="103" column="1" bodyfile="src/vt/context/context.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a78d9926c3f75b1296e81607fd303f8f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::ctx::Context::isCommWorld</definition>
        <argsstring>() const</argsstring>
        <name>isCommWorld</name>
        <briefdescription>
<para>Informs whether the MPI_Comm being used by the runtime is <computeroutput>MPI_COMM_WORLD</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether <computeroutput>MPI_COMM_WORLD</computeroutput> is being used </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="111" column="1" bodyfile="src/vt/context/context.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a0ea881fa8c4d8fee74e85d8a6c52a6f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref></type>
        <definition>WorkerCountType vt::ctx::Context::getNumWorkers</definition>
        <argsstring>() const</argsstring>
        <name>getNumWorkers</name>
        <briefdescription>
<para>Relevant only in threaded mode (e.g., <computeroutput>std::thread</computeroutput>, or OpenMP threads), gets the number of worker threads being used on a given node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">vt::WorkerCountType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>the number of worker threads </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="121" column="1" bodyfile="src/vt/context/context.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a17b1fd9fd7bfc2afdd55707d1f321f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::ctx::Context::hasWorkers</definition>
        <argsstring>() const</argsstring>
        <name>hasWorkers</name>
        <briefdescription>
<para>Informs whether VT is running threaded mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the VT runtime has workers enabled on a given node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="128" column="1" bodyfile="src/vt/context/context.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a1e39e0561109fd30b45a427ddb055cd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref></type>
        <definition>WorkerIDType vt::ctx::Context::getWorker</definition>
        <argsstring>() const</argsstring>
        <name>getWorker</name>
        <briefdescription>
<para>Relevant only in threaded mode (e.g., <computeroutput>std::thread</computeroutput>, or OpenMP threads), gets the current worker thread being used to execute a handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">vt::WorkerIDType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>whether the worker thread ID being used, sequentially numbered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="138" column="1" bodyfile="src/vt/context/context.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a6bef35c171d45feb409d7b6aa6168996" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::ctx::Context::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_base_component_1a7701485f3539f78d42e6bad47fc7eb78">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="145" column="1" bodyfile="src/vt/context/context.h" bodystart="145" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1afc4549ac9cdae67301613613b9381d1c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setNumWorkers</definition>
        <argsstring>(WorkerCountType const worker_count)</argsstring>
        <name>setNumWorkers</name>
        <param>
          <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const</type>
          <declname>worker_count</declname>
        </param>
        <briefdescription>
<para>Set the number of workers through the attorney (internal) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="149" column="1" bodyfile="src/vt/context/context.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a32f62f26b7a6977c91186f8c2aa2b16a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setWorker</definition>
        <argsstring>(WorkerIDType const worker)</argsstring>
        <name>setWorker</name>
        <param>
          <type><ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref> const</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
<para>Set the worker through the attorney (internal) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="153" column="1" bodyfile="src/vt/context/context.h" bodystart="153" bodyend="155"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1ab61a961c47c8fc6393df8c121ade3aa2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setDefaultWorker</definition>
        <argsstring>()</argsstring>
        <name>setDefaultWorker</name>
        <briefdescription>
<para>Set the default worker that runs in threaded mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="159" column="1" bodyfile="src/vt/context/context.cc" bodystart="100" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used to obtain the current node and other context where a handler executes. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="structvt_1_1ctx_1_1_context" kindref="compound">Context</ref> is a core VT component that provides the ability to pass initialization arguments (through the <computeroutput>vt::Runtime</computeroutput>) and obtain info about the node on which a handler is executing or the number of nodes. It provides functionality analogous to <computeroutput>MPI_Comm_size</computeroutput> and <computeroutput>MPI_Comm_rank</computeroutput>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="886">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="887" relation="public-inheritance">
        </childnode>
        <childnode refid="888" relation="public-inheritance">
        </childnode>
        <childnode refid="889" relation="public-inheritance">
        </childnode>
      </node>
      <node id="884">
        <label>vt::ctx::Context</label>
        <link refid="structvt_1_1ctx_1_1_context"/>
        <childnode refid="885" relation="public-inheritance">
        </childnode>
      </node>
      <node id="887">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
      </node>
      <node id="888">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="889">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="885">
        <label>vt::runtime::component::Component&lt; Context &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="886" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="892">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="893" relation="public-inheritance">
        </childnode>
        <childnode refid="894" relation="public-inheritance">
        </childnode>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="890">
        <label>vt::ctx::Context</label>
        <link refid="structvt_1_1ctx_1_1_context"/>
        <childnode refid="891" relation="public-inheritance">
        </childnode>
      </node>
      <node id="893">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
      </node>
      <node id="894">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="895">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="891">
        <label>vt::runtime::component::Component&lt; Context &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="892" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/context/context.h" line="71" column="1" bodyfile="src/vt/context/context.h" bodystart="71" bodyend="168"/>
    <listofallmembers>
      <member refid="structvt_1_1ctx_1_1_context_1ac9f5afa2cb9a6c06c8570bbf25cde926" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>communicator_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Component</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a860016b34ca68006a733314f970216b8" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Context</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a9f5b0fcad61a79f18fdaf7d757b52b6a" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Context</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a75c33a90ea59b21ab5375343af0f8e26" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>ContextAttorney</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>dumpState</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>finalize</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a2d4378c97824792991a3410449cf19db" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getComm</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getNode</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a7f41071aadf6d5fa9e1b6c703c5ff19d" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getNumNodes</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a0ea881fa8c4d8fee74e85d8a6c52a6f0" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getNumWorkers</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a1e39e0561109fd30b45a427ddb055cd2" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getWorker</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aca5f3a7c1db697b6d0ba70de7ff8b887" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>hasCons</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a389e53dbfc20013d66ef09d4f42c0a53" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>hasNoCons</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a17b1fd9fd7bfc2afdd55707d1f321f76" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>hasWorkers</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>initialize</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1afe6c05b957670f03ef2a278da031a5c4" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>is_comm_world_</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a78d9926c3f75b1296e81607fd303f8f1" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>isCommWorld</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a6bef35c171d45feb409d7b6aa6168996" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>name</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a58cc20215314e915f43b829ad0470299" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>numNodes_</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a16e8488c6e6ad26c387ad6ef19f726b9" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>numWorkers_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>progress</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1ab61a961c47c8fc6393df8c121ade3aa2" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setDefaultWorker</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1afc4549ac9cdae67301613613b9381d1c" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setNumWorkers</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a32f62f26b7a6977c91186f8c2aa2b16a" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setWorker</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7d82b061566ef21d6438f4701ae6b733" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>staticInit</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aaada4d04e8adf4cc5556bed2fdcdb321" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>staticInit</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a5fcea79d2fede6e9945433621894624c" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>thisNode_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>~BaseComponent</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
