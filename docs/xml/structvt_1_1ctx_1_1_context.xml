<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structvt_1_1ctx_1_1_context" kind="struct" language="C++" prot="public">
    <compoundname>vt::ctx::Context</compoundname>
    <basecompoundref refid="structvt_1_1runtime_1_1component_1_1_component" prot="public" virt="non-virtual">vt::runtime::component::Component&lt; Context &gt;</basecompoundref>
    <includes refid="context_8h" local="no">vt/context/context.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structvt_1_1ctx_1_1_context_1a75c33a90ea59b21ab5375343af0f8e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct ContextAttorney</definition>
        <argsstring></argsstring>
        <name>ContextAttorney</name>
        <briefdescription>
<para>Used to manage protected access for other VT runtime components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="153" column="1" bodyfile="src/vt/context/context.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1a5fcea79d2fede6e9945433621894624c" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::thisNode_</definition>
        <argsstring></argsstring>
        <name>thisNode_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="221" column="1" bodyfile="src/vt/context/context.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1a58cc20215314e915f43b829ad0470299" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::numNodes_</definition>
        <argsstring></argsstring>
        <name>numNodes_</name>
        <initializer>= uninitialized_destination</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="222" column="1" bodyfile="src/vt/context/context.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1a16e8488c6e6ad26c387ad6ef19f726b9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref></type>
        <definition>WorkerCountType vt::ctx::Context::numWorkers_</definition>
        <argsstring></argsstring>
        <name>numWorkers_</name>
        <initializer>= no_workers</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="223" column="1" bodyfile="src/vt/context/context.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvt_1_1ctx_1_1_context_1ac9f5afa2cb9a6c06c8570bbf25cde926" prot="private" static="no" mutable="no">
        <type>MPI_Comm</type>
        <definition>MPI_Comm vt::ctx::Context::communicator_</definition>
        <argsstring></argsstring>
        <name>communicator_</name>
        <initializer>= MPI_COMM_WORLD</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="224" column="1" bodyfile="src/vt/context/context.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1aa00297fe6a9bde8202b4099ede6069fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::ctx::Context::Context</definition>
        <argsstring>(bool const interop, MPI_Comm comm)</argsstring>
        <name>Context</name>
        <param>
          <type>bool const</type>
          <declname>interop</declname>
        </param>
        <param>
          <type>MPI_Comm</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
<para>Construct the context. </para>        </briefdescription>
        <detaileddescription>
<internal><para><simplesect kind="note"><para>MPI must already have been appropriately initialized.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">interop</parametername>
</parameternamelist>
<parameterdescription>
<para>running in interop mode? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comm</parametername>
</parameternamelist>
<parameterdescription>
<para>the communicator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="92" column="1" bodyfile="src/vt/context/context.cc" bodystart="74" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1aa916f841807f2a1b913df33f782715af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>vt::ctx::Context::~Context</definition>
        <argsstring>()</argsstring>
        <name>~Context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="94" column="1" bodyfile="src/vt/context/context.cc" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::getNode</definition>
        <argsstring>() const</argsstring>
        <name>getNode</name>
        <briefdescription>
<para>Gets the current node (analagous to MPI&apos;s rank) currently being used. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">vt::NodeType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>the node currently being run on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="104" column="1" bodyfile="src/vt/context/context.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a7f41071aadf6d5fa9e1b6c703c5ff19d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::getNumNodes</definition>
        <argsstring>() const</argsstring>
        <name>getNumNodes</name>
        <briefdescription>
<para>Get the number of nodes (analagous to MPI&apos;s num ranks) being used. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">vt::NodeType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>the number of nodes currently being run on </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="113" column="1" bodyfile="src/vt/context/context.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a2d4378c97824792991a3410449cf19db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MPI_Comm</type>
        <definition>MPI_Comm vt::ctx::Context::getComm</definition>
        <argsstring>() const</argsstring>
        <name>getComm</name>
        <briefdescription>
<para>Get the MPI communicator being used by VT in a given runtime instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <computeroutput>MPI_Comm</computeroutput> being used by VT for communication </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="121" column="1" bodyfile="src/vt/context/context.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a0ea881fa8c4d8fee74e85d8a6c52a6f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref></type>
        <definition>WorkerCountType vt::ctx::Context::getNumWorkers</definition>
        <argsstring>() const</argsstring>
        <name>getNumWorkers</name>
        <briefdescription>
<para>Relevant only in threaded mode (e.g., <computeroutput>std::thread</computeroutput>, or OpenMP threads), gets the number of worker threads being used on a given node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">vt::WorkerCountType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>the number of worker threads </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="131" column="1" bodyfile="src/vt/context/context.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a17b1fd9fd7bfc2afdd55707d1f321f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::ctx::Context::hasWorkers</definition>
        <argsstring>() const</argsstring>
        <name>hasWorkers</name>
        <briefdescription>
<para>Informs whether VT is running threaded mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the VT runtime has workers enabled on a given node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="138" column="1" bodyfile="src/vt/context/context.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a1e39e0561109fd30b45a427ddb055cd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref></type>
        <definition>WorkerIDType vt::ctx::Context::getWorker</definition>
        <argsstring>() const</argsstring>
        <name>getWorker</name>
        <briefdescription>
<para>Relevant only in threaded mode (e.g., <computeroutput>std::thread</computeroutput>, or OpenMP threads), gets the current worker thread being used to execute a handler. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput><ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">vt::WorkerIDType</ref></computeroutput> </para></simplesect>
<simplesect kind="return"><para>whether the worker thread ID being used, sequentially numbered </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="148" column="1" bodyfile="src/vt/context/context.h" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a6bef35c171d45feb409d7b6aa6168996" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string vt::ctx::Context::name</definition>
        <argsstring>() override</argsstring>
        <name>name</name>
        <reimplements refid="structvt_1_1runtime_1_1component_1_1_component_name_1a33c06229bb605a2b2ceff68830d6d773">name</reimplements>
        <briefdescription>
<para>Get the name of the component. </para>        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="155" column="1" bodyfile="src/vt/context/context.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a510b7a30a4e10b95528a8a9c2306a075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vt::ctx::Context::serialize</definition>
        <argsstring>(SerializerT &amp;s)</argsstring>
        <name>serialize</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="158" column="1" bodyfile="src/vt/context/context.h" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a4e78f77717329369173daf1b270a25b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">runnable::RunnableNew</ref> *</type>
        <definition>runnable::RunnableNew* vt::ctx::Context::getTask</definition>
        <argsstring>() const</argsstring>
        <name>getTask</name>
        <briefdescription>
<para>Get the current running task. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current running task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="170" column="1" bodyfile="src/vt/context/context.h" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1abde7b4c10accf2b8c2bc68210a15590d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacevt_1a866da9d0efc19c0a1ce79e9e492f47e2" kindref="member">NodeType</ref></type>
        <definition>NodeType vt::ctx::Context::getFromNodeCurrentTask</definition>
        <argsstring>() const</argsstring>
        <name>getFromNodeCurrentTask</name>
        <briefdescription>
<para>Get the node that caused the current running task to execute; i.e., the node that sent the message to trigger the current runnable. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If a task is not currently running, this will return the this node <mdash/>equivalent to <computeroutput><ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">theContext()</ref>-&gt;<ref refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" kindref="member">getNode()</ref></computeroutput> </para></simplesect>
For the current task that is executing, get the node that sent the message that caused this runnable to execute. Note, for collection handlers this will not be the logical node that sent the message. It will be the node that last forwarded the message during location discovery.</para><para><simplesect kind="return"><para>the node that sent the message that triggered the current task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="186" column="1" bodyfile="src/vt/context/context.cc" bodystart="111" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a81b5dbccaaca10fcce4ed7c89ceca38c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setTask</definition>
        <argsstring>(runnable::RunnableNew *in_task)</argsstring>
        <name>setTask</name>
        <param>
          <type><ref refid="structvt_1_1runnable_1_1_runnable_new" kindref="compound">runnable::RunnableNew</ref> *</type>
          <declname>in_task</declname>
        </param>
        <briefdescription>
<para>Set the current running task. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_task</parametername>
</parameternamelist>
<parameterdescription>
<para>the current running task </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1afc4549ac9cdae67301613613b9381d1c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setNumWorkers</definition>
        <argsstring>(WorkerCountType const worker_count)</argsstring>
        <name>setNumWorkers</name>
        <param>
          <type><ref refid="namespacevt_1aa93398ea48f2cb6c188512250f7cc248" kindref="member">WorkerCountType</ref> const</type>
          <declname>worker_count</declname>
        </param>
        <briefdescription>
<para>Set the number of workers through the attorney (internal) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="208" column="1" bodyfile="src/vt/context/context.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1a32f62f26b7a6977c91186f8c2aa2b16a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setWorker</definition>
        <argsstring>(WorkerIDType const worker)</argsstring>
        <name>setWorker</name>
        <param>
          <type><ref refid="namespacevt_1a656e362091da17b9b93d0655b36e3392" kindref="member">WorkerIDType</ref> const</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
<para>Set the worker through the attorney (internal) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="212" column="1" bodyfile="src/vt/context/context.h" bodystart="212" bodyend="214"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structvt_1_1ctx_1_1_context_1ab61a961c47c8fc6393df8c121ade3aa2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::ctx::Context::setDefaultWorker</definition>
        <argsstring>()</argsstring>
        <name>setDefaultWorker</name>
        <briefdescription>
<para>Set the default worker that runs in threaded mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vt/context/context.h" line="218" column="1" bodyfile="src/vt/context/context.cc" bodystart="101" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used to obtain the current node and other context where a handler executes. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="structvt_1_1ctx_1_1_context" kindref="compound">Context</ref> is a core VT component that provides the ability to pass initialization arguments (through the <computeroutput>vt::Runtime</computeroutput>) and obtain info about the node on which a handler is executing or the number of nodes. It provides functionality analogous to <computeroutput>MPI_Comm_size</computeroutput> and <computeroutput>MPI_Comm_rank</computeroutput>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1273">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="1274" relation="public-inheritance">
        </childnode>
        <childnode refid="1277" relation="public-inheritance">
        </childnode>
        <childnode refid="1278" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1271">
        <label>vt::ctx::Context</label>
        <link refid="structvt_1_1ctx_1_1_context"/>
        <childnode refid="1272" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1276">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="1274">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="1275" relation="public-inheritance">
        </childnode>
        <childnode refid="1276" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1275">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="1277">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="1278">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="1272">
        <label>vt::runtime::component::Component&lt; Context &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="1273" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1281">
        <label>vt::runtime::component::BaseComponent</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_base_component"/>
        <childnode refid="1282" relation="public-inheritance">
        </childnode>
        <childnode refid="1285" relation="public-inheritance">
        </childnode>
        <childnode refid="1286" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1279">
        <label>vt::ctx::Context</label>
        <link refid="structvt_1_1ctx_1_1_context"/>
        <childnode refid="1280" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1284">
        <label>vt::runtime::component::ComponentReducer</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_reducer"/>
      </node>
      <node id="1282">
        <label>vt::runtime::component::Diagnostic</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_diagnostic"/>
        <childnode refid="1283" relation="public-inheritance">
        </childnode>
        <childnode refid="1284" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1283">
        <label>vt::runtime::component::ComponentName</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component_name"/>
      </node>
      <node id="1285">
        <label>vt::runtime::component::Bufferable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_bufferable"/>
      </node>
      <node id="1286">
        <label>vt::runtime::component::Progressable</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_progressable"/>
      </node>
      <node id="1280">
        <label>vt::runtime::component::Component&lt; Context &gt;</label>
        <link refid="structvt_1_1runtime_1_1component_1_1_component"/>
        <childnode refid="1281" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/vt/context/context.h" line="82" column="1" bodyfile="src/vt/context/context.h" bodystart="82" bodyend="227"/>
    <listofallmembers>
      <member refid="structvt_1_1ctx_1_1_context_1ac9f5afa2cb9a6c06c8570bbf25cde926" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>communicator_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ab954824329584814bb652ea810cd62e3" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1a94c1d493860adff6ae69c5eb31bb3f" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Component</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1ac9c39c6eafc72a1a240ed67ea12b3e66" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>component_id_</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1aa00297fe6a9bde8202b4099ede6069fc" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>Context</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a75c33a90ea59b21ab5375343af0f8e26" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>ContextAttorney</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ad95ea698535524d0f82c5da9beaaaf37" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>DiagnosticBasePtrType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1adaf8bd995d4c91702e2ff7806ad9e695" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>dumpState</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a43eeed44aa64c77f5491abb4f5a39e9a" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>fatalError</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a098e362de01af6054e5491fba671a959" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>finalize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a1d6951af40ad0b4020860c0b21b1a85c" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>foreachDiagnostic</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a2d4378c97824792991a3410449cf19db" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getComm</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1a45ab90398777ffdbb2ad5b62fe183d99" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getComponentID</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a9c1f4174ac87bb6ae0ec186a08adbbbb" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getDiagnosticsFootprint</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1abde7b4c10accf2b8c2bc68210a15590d" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getFromNodeCurrentTask</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getNode</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a7f41071aadf6d5fa9e1b6c703c5ff19d" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getNumNodes</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a0ea881fa8c4d8fee74e85d8a6c52a6f0" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getNumWorkers</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a4e78f77717329369173daf1b270a25b0" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getTask</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a1e39e0561109fd30b45a427ddb055cd2" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>getWorker</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a17b1fd9fd7bfc2afdd55707d1f321f76" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>hasWorkers</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a7f07384d294e59796add9ce6be2d6410" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>initialize</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a6bef35c171d45feb409d7b6aa6168996" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>name</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a58cc20215314e915f43b829ad0470299" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>numNodes_</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a16e8488c6e6ad26c387ad6ef19f726b9" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>numWorkers_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a5a15bd0369a9d3765a6c70249bada96f" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>pollable</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a4e64b5a12ffc1874065aa8b09e6309a9" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>preDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1a1dab11d9eb5bed8dfd5a3bb8fdf67f5a" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>progress</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_reducer_1af9d694f9d62d973a2cde6e52c55bef14" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>reducer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa2cd54632710e7cdf1b20dfb676c752c" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerCounter</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1abb1ee7f09f05c143dbdfd3346f6cdcba" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerCounterT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1ab71509224f5716107ef5c781ba5ff487" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a20417bbb4fe4c4d7648aef3a2699b787" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerGauge</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1aa220905292aeb726254d3dff2e672b00" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerGaugeT</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a5c6035a56d54cc3de270efedad3f026e" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerTimer</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a328ecca78c6aa309bb764f3dde083c3e" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>registerTimerT</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a510b7a30a4e10b95528a8a9c2306a075" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>serialize</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1abe85836f57c42a695fdc292cd78b10cb" prot="public" virt="non-virtual" ambiguityscope="Component&lt; Context &gt;::"><scope>vt::ctx::Context</scope><name>serialize</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1ab61a961c47c8fc6393df8c121ade3aa2" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setDefaultWorker</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1afc4549ac9cdae67301613613b9381d1c" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setNumWorkers</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a81b5dbccaaca10fcce4ed7c89ceca38c" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setTask</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a32f62f26b7a6977c91186f8c2aa2b16a" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>setWorker</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1aad3974307ab3b2e1df389a91310f68c2" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>startup</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_component_1ac969a635e579cf7be3af696f500bf260" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>staticInit</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1a5fcea79d2fede6e9945433621894624c" prot="private" virt="non-virtual"><scope>vt::ctx::Context</scope><name>thisNode_</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a2bcd1016fcdb6395844d4fd15d84a570" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>UnitType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a97b0e8ff394c8aa04035ff15165eb087" prot="protected" virt="non-virtual"><scope>vt::ctx::Context</scope><name>updateDiagnostic</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_diagnostic_1a75e737294bb63e1898d9ac4515f0cf63" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>UpdateType</name></member>
      <member refid="structvt_1_1runtime_1_1component_1_1_base_component_1a9190b5cb499f9cfdacc1e0bd98a1805a" prot="public" virt="virtual"><scope>vt::ctx::Context</scope><name>~BaseComponent</name></member>
      <member refid="structvt_1_1ctx_1_1_context_1aa916f841807f2a1b913df33f782715af" prot="public" virt="non-virtual"><scope>vt::ctx::Context</scope><name>~Context</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
