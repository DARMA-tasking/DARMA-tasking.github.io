<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1_serializer" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::Serializer</compoundname>
    <derivedcompoundref refid="structcheckpoint_1_1_footprinter" prot="public" virt="non-virtual">checkpoint::Footprinter</derivedcompoundref>
    <derivedcompoundref refid="structcheckpoint_1_1_memory_serializer" prot="public" virt="non-virtual">checkpoint::MemorySerializer</derivedcompoundref>
    <derivedcompoundref refid="structcheckpoint_1_1_sizer" prot="public" virt="non-virtual">checkpoint::Sizer</derivedcompoundref>
    <includes refid="base__serializer_8h" local="no">base_serializer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_1a4c307e2592dc4224d8a13148109c5764" prot="public" static="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">eSerializationMode</ref></type>
        <definition>using checkpoint::Serializer::ModeType =  eSerializationMode</definition>
        <argsstring></argsstring>
        <name>ModeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="72" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_1ad8effc5884f1ed37b6b4507422f6d72c" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_basic_dispatcher" kindref="compound">dispatch::BasicDispatcher</ref>&lt; SerializerT, T &gt;</type>
        <definition>using checkpoint::Serializer::DispatcherType =  dispatch::BasicDispatcher&lt;SerializerT, T&gt;</definition>
        <argsstring></argsstring>
        <name>DispatcherType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="75" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_serializer_1a89a1f207ad5ff75654cb6d48f432be37" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::Serializer::cur_mode_</definition>
        <argsstring></argsstring>
        <name>cur_mode_</name>
        <initializer>= <ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a4bbb8f967da6d1a610596d7257179c2b" kindref="member">ModeType::Invalid</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="101" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializer_1a46ef3c0da77d80853882a7cad641c2af" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::virtual_disabled_</definition>
        <argsstring></argsstring>
        <name>virtual_disabled_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="102" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a4007a463384ec96a4c21bd7f049f0be5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>checkpoint::Serializer::Serializer</definition>
        <argsstring>(ModeType const &amp;in_mode)</argsstring>
        <name>Serializer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref> const &amp;</type>
          <declname>in_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="77" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a2b22a87a81fb9ff1b00dd96bbe4debe2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::Serializer::getMode</definition>
        <argsstring>() const</argsstring>
        <name>getMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="79" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a27e3304ca8c9de113675b7692e5aa65f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isSizing</definition>
        <argsstring>() const</argsstring>
        <name>isSizing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="80" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1aee9d2701f508fff94bad836576443cd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isPacking</definition>
        <argsstring>() const</argsstring>
        <name>isPacking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="81" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a3a09ea026ff2c6ddf863f9c1a6463466" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isUnpacking</definition>
        <argsstring>() const</argsstring>
        <name>isUnpacking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="82" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a01f395bfaa39a8311925c71537877378" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isFootprinting</definition>
        <argsstring>() const</argsstring>
        <name>isFootprinting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="83" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a805ae9ce395614512dfb6b0bd2c22881" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::Serializer::countBytes</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>countBytes</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="86" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a52cd27806c3b821605d723900ec7d2e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::Serializer::addBytes</definition>
        <argsstring>(std::size_t s)</argsstring>
        <name>addBytes</name>
        <param>
          <type>std::size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="87" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af2f453fc63424918a16ea6024d576a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::Serializer::contiguousTyped</definition>
        <argsstring>(SerializerT &amp;serdes, T *ptr, SerialSizeType num_elms)</argsstring>
        <name>contiguousTyped</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>serdes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="90" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a6231bd380e02ee8668e7a6efebca2664" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::Serializer::getBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="94" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af2fc82901c31232b7549b20a8732de30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::Serializer::getSpotIncrement</definition>
        <argsstring>(SerialSizeType const inc)</argsstring>
        <name>getSpotIncrement</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="95" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af45e225cdb3a750a06de80a8cd5c6c37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isVirtualDisabled</definition>
        <argsstring>() const</argsstring>
        <name>isVirtualDisabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="97" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af57d7cd51e94dd44a5be184456c2d59f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::Serializer::setVirtualDisabled</definition>
        <argsstring>(bool val)</argsstring>
        <name>setVirtualDisabled</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="98" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="98" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3556">
        <label>checkpoint::Sizer</label>
        <link refid="structcheckpoint_1_1_sizer"/>
        <childnode refid="3551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3555">
        <label>checkpoint::UnpackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_unpacker_buffer"/>
        <childnode refid="3553" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3551">
        <label>checkpoint::Serializer</label>
        <link refid="structcheckpoint_1_1_serializer"/>
      </node>
      <node id="3554">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="3553" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3553">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="3551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3552">
        <label>checkpoint::Footprinter</label>
        <link refid="structcheckpoint_1_1_footprinter"/>
        <childnode refid="3551" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="71" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="71" bodyend="103"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializer_1a52cd27806c3b821605d723900ec7d2e5" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af2f453fc63424918a16ea6024d576a3e" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a805ae9ce395614512dfb6b0bd2c22881" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a89a1f207ad5ff75654cb6d48f432be37" prot="protected" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>cur_mode_</name></member>
      <member refid="structcheckpoint_1_1_serializer_1ad8effc5884f1ed37b6b4507422f6d72c" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a6231bd380e02ee8668e7a6efebca2664" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a2b22a87a81fb9ff1b00dd96bbe4debe2" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af2fc82901c31232b7549b20a8732de30" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a01f395bfaa39a8311925c71537877378" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_serializer_1aee9d2701f508fff94bad836576443cd9" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a27e3304ca8c9de113675b7692e5aa65f" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a3a09ea026ff2c6ddf863f9c1a6463466" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af45e225cdb3a750a06de80a8cd5c6c37" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a4c307e2592dc4224d8a13148109c5764" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a4007a463384ec96a4c21bd7f049f0be5" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>Serializer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af57d7cd51e94dd44a5be184456c2d59f" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a46ef3c0da77d80853882a7cad641c2af" prot="protected" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>virtual_disabled_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
