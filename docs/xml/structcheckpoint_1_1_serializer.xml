<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcheckpoint_1_1_serializer" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::Serializer</compoundname>
    <derivedcompoundref refid="structcheckpoint_1_1_footprinter" prot="public" virt="non-virtual">checkpoint::Footprinter</derivedcompoundref>
    <derivedcompoundref refid="structcheckpoint_1_1_memory_serializer" prot="public" virt="non-virtual">checkpoint::MemorySerializer</derivedcompoundref>
    <derivedcompoundref refid="structcheckpoint_1_1_sizer" prot="public" virt="non-virtual">checkpoint::Sizer</derivedcompoundref>
    <includes refid="base__serializer_8h" local="no">base_serializer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_1a4c307e2592dc4224d8a13148109c5764" prot="public" static="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">eSerializationMode</ref></type>
        <definition>using checkpoint::Serializer::ModeType =  eSerializationMode</definition>
        <argsstring></argsstring>
        <name>ModeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="76" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializer_1ad8effc5884f1ed37b6b4507422f6d72c" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1dispatch_1_1_basic_dispatcher" kindref="compound">dispatch::BasicDispatcher</ref>&lt; SerializerT, T &gt;</type>
        <definition>using checkpoint::Serializer::DispatcherType =  dispatch::BasicDispatcher&lt;SerializerT, T&gt;</definition>
        <argsstring></argsstring>
        <name>DispatcherType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="79" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_serializer_1a89a1f207ad5ff75654cb6d48f432be37" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::Serializer::cur_mode_</definition>
        <argsstring></argsstring>
        <name>cur_mode_</name>
        <initializer>= <ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059a4bbb8f967da6d1a610596d7257179c2b" kindref="member">ModeType::Invalid</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The current mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="198" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializer_1a46ef3c0da77d80853882a7cad641c2af" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::virtual_disabled_</definition>
        <argsstring></argsstring>
        <name>virtual_disabled_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual serialization disabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="199" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a4007a463384ec96a4c21bd7f049f0be5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>checkpoint::Serializer::Serializer</definition>
        <argsstring>(ModeType const &amp;in_mode)</argsstring>
        <name>Serializer</name>
        <param>
          <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref> const &amp;</type>
          <declname>in_mode</declname>
        </param>
        <briefdescription>
<para>Construct a base serializer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The serializer mode </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="86" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a2b22a87a81fb9ff1b00dd96bbe4debe2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae2509499ccd8b1dc48fb535bf8aa3059" kindref="member">ModeType</ref></type>
        <definition>ModeType checkpoint::Serializer::getMode</definition>
        <argsstring>() const</argsstring>
        <name>getMode</name>
        <briefdescription>
<para>Get the serializer mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the serializer mode </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="93" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a27e3304ca8c9de113675b7692e5aa65f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isSizing</definition>
        <argsstring>() const</argsstring>
        <name>isSizing</name>
        <briefdescription>
<para>Check if the serializer is sizing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is sizing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="100" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1aee9d2701f508fff94bad836576443cd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isPacking</definition>
        <argsstring>() const</argsstring>
        <name>isPacking</name>
        <briefdescription>
<para>Check if the serializer is packing. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is packing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="107" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a3a09ea026ff2c6ddf863f9c1a6463466" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isUnpacking</definition>
        <argsstring>() const</argsstring>
        <name>isUnpacking</name>
        <briefdescription>
<para>Check if the serializer is unpacking. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is unpacking </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="114" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a01f395bfaa39a8311925c71537877378" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isFootprinting</definition>
        <argsstring>() const</argsstring>
        <name>isFootprinting</name>
        <briefdescription>
<para>Check if the serializer is footprinting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>if it is footprinting </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="121" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a805ae9ce395614512dfb6b0bd2c22881" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::Serializer::countBytes</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>countBytes</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Count bytes for footprinting<mdash/>default empty implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>an element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="129" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a52cd27806c3b821605d723900ec7d2e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::Serializer::addBytes</definition>
        <argsstring>(std::size_t s)</argsstring>
        <name>addBytes</name>
        <param>
          <type>std::size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Add bytes for footprinting<mdash/>default empty implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of bytes to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="136" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a9193aca9404eadbb6617273d0fb1343b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
        <definition>SerialSizeType checkpoint::Serializer::usedBufferSize</definition>
        <argsstring>()</argsstring>
        <name>usedBufferSize</name>
        <briefdescription>
<para>Returns size of buffer (in bytes) used during given serialization step. By default it returns 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>an element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="144" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af2f453fc63424918a16ea6024d576a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SerializerT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::Serializer::contiguousTyped</definition>
        <argsstring>(SerializerT &amp;serdes, T *ptr, SerialSizeType num_elms)</argsstring>
        <name>contiguousTyped</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>serdes</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref></type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
<para>Serialize a contiguous set of typed bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serdes</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a typed element <computeroutput>T</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_elms</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="154" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1ae0224c5bad49a1bd2af178987adb84f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::Serializer::skip</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>skip</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Tell the serializer that some data is skipped in the traversal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Used/implemented in serialization sanitizer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="164" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1a6231bd380e02ee8668e7a6efebca2664" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::Serializer::getBuffer</definition>
        <argsstring>() const</argsstring>
        <name>getBuffer</name>
        <briefdescription>
<para>Get a buffer if it is associated with the serializer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to the <computeroutput>char*</computeroutput> buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="171" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af2fc82901c31232b7549b20a8732de30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecheckpoint_1ae57f01cdc0b81776c23b6c7c934c58f5" kindref="member">SerialByteType</ref> *</type>
        <definition>SerialByteType* checkpoint::Serializer::getSpotIncrement</definition>
        <argsstring>(SerialSizeType const inc)</argsstring>
        <name>getSpotIncrement</name>
        <param>
          <type><ref refid="namespacecheckpoint_1a083f6674da3f94c2901b18c6d238217c" kindref="member">SerialSizeType</ref> const</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
<para>Get the current spot in the buffer and then increment by some number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">inc</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to incremenet</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current spot </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="181" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af45e225cdb3a750a06de80a8cd5c6c37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkpoint::Serializer::isVirtualDisabled</definition>
        <argsstring>() const</argsstring>
        <name>isVirtualDisabled</name>
        <briefdescription>
<para>Check if virtual serialization is disabled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether virtual serialization is disabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="188" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_serializer_1af57d7cd51e94dd44a5be184456c2d59f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::Serializer::setVirtualDisabled</definition>
        <argsstring>(bool val)</argsstring>
        <name>setVirtualDisabled</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set whether virtual serialization is enabled/disabled. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>whether virtual serialization is disabled </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="195" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="195" bodyend="195"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>General base class for serialiers. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3757">
        <label>checkpoint::Sizer</label>
        <link refid="structcheckpoint_1_1_sizer"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3756">
        <label>checkpoint::UnpackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_unpacker_buffer"/>
        <childnode refid="3754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3752">
        <label>checkpoint::Serializer</label>
        <link refid="structcheckpoint_1_1_serializer"/>
      </node>
      <node id="3755">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="3754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3754">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3753">
        <label>checkpoint::Footprinter</label>
        <link refid="structcheckpoint_1_1_footprinter"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" line="75" column="1" bodyfile="lib/checkpoint/src/checkpoint/serializers/base_serializer.h" bodystart="75" bodyend="200"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializer_1a52cd27806c3b821605d723900ec7d2e5" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af2f453fc63424918a16ea6024d576a3e" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a805ae9ce395614512dfb6b0bd2c22881" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a89a1f207ad5ff75654cb6d48f432be37" prot="protected" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>cur_mode_</name></member>
      <member refid="structcheckpoint_1_1_serializer_1ad8effc5884f1ed37b6b4507422f6d72c" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a6231bd380e02ee8668e7a6efebca2664" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a2b22a87a81fb9ff1b00dd96bbe4debe2" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af2fc82901c31232b7549b20a8732de30" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a01f395bfaa39a8311925c71537877378" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_serializer_1aee9d2701f508fff94bad836576443cd9" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a27e3304ca8c9de113675b7692e5aa65f" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a3a09ea026ff2c6ddf863f9c1a6463466" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af45e225cdb3a750a06de80a8cd5c6c37" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a4c307e2592dc4224d8a13148109c5764" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a4007a463384ec96a4c21bd7f049f0be5" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>Serializer</name></member>
      <member refid="structcheckpoint_1_1_serializer_1af57d7cd51e94dd44a5be184456c2d59f" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_serializer_1ae0224c5bad49a1bd2af178987adb84f9" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>skip</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a9193aca9404eadbb6617273d0fb1343b" prot="public" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_serializer_1a46ef3c0da77d80853882a7cad641c2af" prot="protected" virt="non-virtual"><scope>checkpoint::Serializer</scope><name>virtual_disabled_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
