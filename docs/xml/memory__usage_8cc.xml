<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="memory__usage_8cc" kind="file" language="C++">
    <compoundname>memory_usage.cc</compoundname>
    <includes refid="config_8h" local="yes">vt/config.h</includes>
    <includes refid="app__config_8h" local="yes">vt/configs/arguments/app_config.h</includes>
    <includes refid="memory__usage_8h" local="yes">vt/utils/memory/memory_usage.h</includes>
    <includes refid="phase__manager_8h" local="yes">vt/phase/phase_manager.h</includes>
    <includes refid="context_8h" local="yes">vt/context/context.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">istream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">cstdio</includes>
    <incdepgraph>
      <node id="280246">
        <label>list</label>
      </node>
      <node id="280124">
        <label>vt/configs/features/features_featureswitch.h</label>
        <link refid="features__featureswitch_8h"/>
      </node>
      <node id="280238">
        <label>atomic</label>
      </node>
      <node id="280191">
        <label>checkpoint/common.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2common_8h"/>
        <childnode refid="280192" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280193" relation="include">
        </childnode>
        <childnode refid="280147" relation="include">
        </childnode>
        <childnode refid="280162" relation="include">
        </childnode>
      </node>
      <node id="280169">
        <label>vt/runtime/component/component_pack.h</label>
        <link refid="component__pack_8h"/>
        <childnode refid="280170" relation="include">
        </childnode>
        <childnode refid="280285" relation="include">
        </childnode>
        <childnode refid="280246" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
        <childnode refid="280172" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280286" relation="include">
        </childnode>
      </node>
      <node id="280285">
        <label>vt/runtime/component/movable_fn.h</label>
        <link refid="movable__fn_8h"/>
      </node>
      <node id="280288">
        <label>vt/utils/memory/memory_reporter.h</label>
        <link refid="memory__reporter_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
      </node>
      <node id="280131">
        <label>functional</label>
      </node>
      <node id="280271">
        <label>checkpoint/container/kokkos_complex_serialize.h</label>
        <link refid="kokkos__complex__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
      </node>
      <node id="280252">
        <label>queue</label>
      </node>
      <node id="280173">
        <label>vt/runtime/component/component_dep.h</label>
        <link refid="component__dep_8h"/>
        <childnode refid="280171" relation="include">
        </childnode>
      </node>
      <node id="280136">
        <label>vt/epoch/epoch_impl_type.h</label>
        <link refid="epoch__impl__type_8h"/>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280137" relation="include">
        </childnode>
      </node>
      <node id="280228">
        <label>checkpoint/dispatch/vrt/derived.h</label>
        <link refid="derived_8h"/>
        <childnode refid="280218" relation="include">
        </childnode>
        <childnode refid="280221" relation="include">
        </childnode>
        <childnode refid="280224" relation="include">
        </childnode>
        <childnode refid="280225" relation="include">
        </childnode>
        <childnode refid="280226" relation="include">
        </childnode>
      </node>
      <node id="280185">
        <label>limits</label>
      </node>
      <node id="280256">
        <label>checkpoint/container/string_serialize.h</label>
        <link refid="string__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280239">
        <label>checkpoint/container/chrono_serialize.h</label>
        <link refid="chrono__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280240" relation="include">
        </childnode>
      </node>
      <node id="280142">
        <label>vt/configs/debug/debug_colorize.h</label>
        <link refid="debug__colorize_8h"/>
        <childnode refid="280143" relation="include">
        </childnode>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280143">
        <label>vt/configs/arguments/app_config.h</label>
        <link refid="app__config_8h"/>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
      </node>
      <node id="280280">
        <label>vt/timing/timing_type.h</label>
        <link refid="timing__type_8h"/>
      </node>
      <node id="280277">
        <label>vt/runtime/component/meter/timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280275" relation="include">
        </childnode>
        <childnode refid="280278" relation="include">
        </childnode>
      </node>
      <node id="280263">
        <label>checkpoint/container/view_serialize.h</label>
        <link refid="view__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280264" relation="include">
        </childnode>
        <childnode refid="280265" relation="include">
        </childnode>
        <childnode refid="280266" relation="include">
        </childnode>
      </node>
      <node id="280221">
        <label>checkpoint/dispatch/vrt/object_registry.h</label>
        <link refid="object__registry_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280218" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
      </node>
      <node id="280278">
        <label>vt/timing/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280279" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
        <childnode refid="280280" relation="include">
        </childnode>
      </node>
      <node id="280190">
        <label>checkpoint/serializers/serializers_headers.h</label>
        <link refid="serializers__headers_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280194" relation="include">
        </childnode>
        <childnode refid="280195" relation="include">
        </childnode>
        <childnode refid="280196" relation="include">
        </childnode>
        <childnode refid="280197" relation="include">
        </childnode>
        <childnode refid="280207" relation="include">
        </childnode>
      </node>
      <node id="280196">
        <label>checkpoint/serializers/sizer.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2serializers_2sizer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280194" relation="include">
        </childnode>
      </node>
      <node id="280241">
        <label>checkpoint/container/enum_serialize.h</label>
        <link refid="enum__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280192">
        <label>checkpoint/cmake_config.h</label>
      </node>
      <node id="280168">
        <label>vt/utils/memory/memory_usage.h</label>
        <link refid="memory__usage_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280169" relation="include">
        </childnode>
        <childnode refid="280287" relation="include">
        </childnode>
        <childnode refid="280288" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280184">
        <label>vt/utils/adt/histogram_approx.h</label>
        <link refid="histogram__approx_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280185" relation="include">
        </childnode>
        <childnode refid="280186" relation="include">
        </childnode>
        <childnode refid="280187" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
      <node id="280194">
        <label>checkpoint/serializers/base_serializer.h</label>
        <link refid="base__serializer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
      </node>
      <node id="280287">
        <label>vt/utils/memory/memory_units.h</label>
        <link refid="memory__units_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280223">
        <label>checkpoint/traits/reconstructor_traits.h</label>
        <link refid="reconstructor__traits_8h"/>
        <childnode refid="280212" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280123">
        <label>cstdint</label>
      </node>
      <node id="280292">
        <label>vt/vrt/collection/balance/lb_invoke/phase_info.h</label>
        <link refid="phase__info_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280293" relation="include">
        </childnode>
      </node>
      <node id="280214">
        <label>checkpoint/detector.h</label>
        <link refid="detector_8h"/>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280235">
        <label>checkpoint/container/array_serialize.h</label>
        <link refid="array__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280236" relation="include">
        </childnode>
      </node>
      <node id="280183">
        <label>vt/utils/adt/union.h</label>
        <link refid="union_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
      </node>
      <node id="280284">
        <label>vt/runtime/component/progressable.h</label>
        <link refid="progressable_8h"/>
      </node>
      <node id="280283">
        <label>vt/runtime/component/bufferable.h</label>
        <link refid="bufferable_8h"/>
      </node>
      <node id="280268">
        <label>variant</label>
      </node>
      <node id="280164">
        <label>vt/configs/error/assert_out_info.impl.h</label>
        <link refid="assert__out__info_8impl_8h"/>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280158" relation="include">
        </childnode>
        <childnode refid="280163" relation="include">
        </childnode>
        <childnode refid="280165" relation="include">
        </childnode>
        <childnode refid="280142" relation="include">
        </childnode>
        <childnode refid="280162" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280167" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
      <node id="280138">
        <label>vt/epoch/epoch_type.h</label>
        <link refid="epoch__type_8h"/>
        <childnode refid="280139" relation="include">
        </childnode>
        <childnode refid="280136" relation="include">
        </childnode>
        <childnode refid="280141" relation="include">
        </childnode>
      </node>
      <node id="280269">
        <label>checkpoint/container/kokkos_unordered_map_serialize.h</label>
        <link refid="kokkos__unordered__map__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
      </node>
      <node id="280211">
        <label>checkpoint/dispatch/dispatch_serializer.h</label>
        <link refid="dispatch__serializer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280212" relation="include">
        </childnode>
        <childnode refid="280215" relation="include">
        </childnode>
        <childnode refid="280216" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
      </node>
      <node id="280148">
        <label>fmt-vt/core.h</label>
      </node>
      <node id="280254">
        <label>checkpoint/container/raw_ptr_serialize.h</label>
        <link refid="raw__ptr__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
      </node>
      <node id="280244">
        <label>checkpoint/dispatch/allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280186">
        <label>cmath</label>
      </node>
      <node id="280162">
        <label>cassert</label>
      </node>
      <node id="280159">
        <label>vt/configs/error/assert_out.impl.h</label>
        <link refid="assert__out_8impl_8h"/>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280158" relation="include">
        </childnode>
        <childnode refid="280160" relation="include">
        </childnode>
        <childnode refid="280142" relation="include">
        </childnode>
        <childnode refid="280153" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280162" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
      <node id="280134">
        <label>vt/configs/types/types_size.h</label>
        <link refid="types__size_8h"/>
        <childnode refid="280135" relation="include">
        </childnode>
        <childnode refid="280136" relation="include">
        </childnode>
      </node>
      <node id="280270">
        <label>checkpoint/container/kokkos_pair_serialize.h</label>
        <link refid="kokkos__pair__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
      </node>
      <node id="280234">
        <label>stdexcept</label>
      </node>
      <node id="280152">
        <label>vt/configs/error/common.h</label>
        <link refid="src_2vt_2configs_2error_2common_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
      </node>
      <node id="280242">
        <label>checkpoint/container/function_serialize.h</label>
        <link refid="function__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
      </node>
      <node id="280222">
        <label>checkpoint/dispatch/reconstructor.h</label>
        <link refid="reconstructor_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280223" relation="include">
        </childnode>
        <childnode refid="280213" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
      </node>
      <node id="280272">
        <label>checkpoint/checkpoint_api.impl.h</label>
        <link refid="checkpoint__api_8impl_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280189" relation="include">
        </childnode>
        <childnode refid="280200" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280290">
        <label>vt/phase/phase_hook_enum.h</label>
        <link refid="phase__hook__enum_8h"/>
      </node>
      <node id="280135">
        <label>vt/utils/bits/bits_counter.h</label>
        <link refid="bits__counter_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
      </node>
      <node id="280197">
        <label>checkpoint/serializers/packer.h</label>
        <link refid="packer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280198" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
        <childnode refid="280202" relation="include">
        </childnode>
        <childnode refid="280203" relation="include">
        </childnode>
        <childnode refid="280204" relation="include">
        </childnode>
        <childnode refid="280205" relation="include">
        </childnode>
      </node>
      <node id="280149">
        <label>vt/configs/error/error_headers.h</label>
        <link refid="error__headers_8h"/>
        <childnode refid="280150" relation="include">
        </childnode>
        <childnode refid="280154" relation="include">
        </childnode>
        <childnode refid="280157" relation="include">
        </childnode>
      </node>
      <node id="280144">
        <label>string</label>
      </node>
      <node id="280203">
        <label>checkpoint/buffer/user_buffer.h</label>
        <link refid="user__buffer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
      </node>
      <node id="280262">
        <label>checkpoint/container/unique_ptr_serialize.h</label>
        <link refid="unique__ptr__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
        <childnode refid="280219" relation="include">
        </childnode>
      </node>
      <node id="280175">
        <label>vt/runtime/component/base.h</label>
        <link refid="src_2vt_2runtime_2component_2base_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280176" relation="include">
        </childnode>
        <childnode refid="280283" relation="include">
        </childnode>
        <childnode refid="280284" relation="include">
        </childnode>
      </node>
      <node id="280293">
        <label>vt/vrt/collection/balance/lb_type.h</label>
        <link refid="lb__type_8h"/>
        <childnode refid="280125" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
      </node>
      <node id="280199">
        <label>checkpoint/buffer/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280200" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280266">
        <label>checkpoint/container/view_traverse_ndim.h</label>
        <link refid="view__traverse__ndim_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280264" relation="include">
        </childnode>
      </node>
      <node id="280249">
        <label>map</label>
      </node>
      <node id="280279">
        <label>EngFormat-Cpp/eng_format.hpp</label>
      </node>
      <node id="280216">
        <label>checkpoint/dispatch/dispatch_serializer_nonbyte.h</label>
        <link refid="dispatch__serializer__nonbyte_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280212" relation="include">
        </childnode>
        <childnode refid="280217" relation="include">
        </childnode>
        <childnode refid="280219" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280162" relation="include">
        </childnode>
      </node>
      <node id="280229">
        <label>checkpoint/dispatch/dispatch_byte_macro.h</label>
        <link refid="dispatch__byte__macro_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
      </node>
      <node id="280165">
        <label>vt/configs/error/keyval_printer.h</label>
        <link refid="keyval__printer_8h"/>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280166" relation="include">
        </childnode>
      </node>
      <node id="280166">
        <label>vt/configs/error/keyval_printer.impl.h</label>
        <link refid="keyval__printer_8impl_8h"/>
        <childnode refid="280165" relation="include">
        </childnode>
        <childnode refid="280142" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
      <node id="280172">
        <label>unordered_set</label>
      </node>
      <node id="280289">
        <label>vt/phase/phase_manager.h</label>
        <link refid="phase__manager_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280169" relation="include">
        </childnode>
        <childnode refid="280290" relation="include">
        </childnode>
        <childnode refid="280291" relation="include">
        </childnode>
        <childnode refid="280292" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
        <childnode refid="280249" relation="include">
        </childnode>
      </node>
      <node id="280141">
        <label>fmt-vt/format.h</label>
      </node>
      <node id="280213">
        <label>checkpoint/dispatch/reconstructor_tag.h</label>
        <link refid="reconstructor__tag_8h"/>
      </node>
      <node id="280218">
        <label>checkpoint/dispatch/vrt/registry_common.h</label>
        <link refid="registry__common_8h"/>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280299">
        <label>fstream</label>
      </node>
      <node id="280273">
        <label>vt/runtime/component/diagnostic_meter.h</label>
        <link refid="diagnostic__meter_8h"/>
        <childnode refid="280274" relation="include">
        </childnode>
        <childnode refid="280276" relation="include">
        </childnode>
        <childnode refid="280277" relation="include">
        </childnode>
        <childnode refid="280281" relation="include">
        </childnode>
        <childnode refid="280280" relation="include">
        </childnode>
      </node>
      <node id="280245">
        <label>checkpoint/container/container_serialize.h</label>
        <link refid="container__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
      </node>
      <node id="280122">
        <label>vt/configs/debug/debug_config.h</label>
        <link refid="debug__config_8h"/>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280124" relation="include">
        </childnode>
        <childnode refid="280125" relation="include">
        </childnode>
        <childnode refid="280127" relation="include">
        </childnode>
      </node>
      <node id="280212">
        <label>checkpoint/traits/serializable_traits.h</label>
        <link refid="serializable__traits_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280213" relation="include">
        </childnode>
        <childnode refid="280214" relation="include">
        </childnode>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280162" relation="include">
        </childnode>
      </node>
      <node id="280224">
        <label>checkpoint/dispatch/vrt/serializer_registry.h</label>
        <link refid="serializer__registry_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280218" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
      </node>
      <node id="280274">
        <label>vt/runtime/component/meter/counter.h</label>
        <link refid="counter_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280275" relation="include">
        </childnode>
      </node>
      <node id="280137">
        <label>vt/configs/types/types_sentinels.h</label>
        <link refid="types__sentinels_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280132" relation="include">
        </childnode>
      </node>
      <node id="280259">
        <label>checkpoint/container/tuple_serialize.h</label>
        <link refid="tuple__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280147" relation="include">
        </childnode>
        <childnode refid="280260" relation="include">
        </childnode>
      </node>
      <node id="280119">
        <label>src/vt/utils/memory/memory_usage.cc</label>
        <link refid="memory__usage_8cc"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280143" relation="include">
        </childnode>
        <childnode refid="280168" relation="include">
        </childnode>
        <childnode refid="280289" relation="include">
        </childnode>
        <childnode refid="280294" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
        <childnode refid="280298" relation="include">
        </childnode>
        <childnode refid="280299" relation="include">
        </childnode>
        <childnode refid="280193" relation="include">
        </childnode>
      </node>
      <node id="280208">
        <label>checkpoint/serializers/unpacker.impl.h</label>
        <link refid="unpacker_8impl_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280198" relation="include">
        </childnode>
        <childnode refid="280207" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280206" relation="include">
        </childnode>
      </node>
      <node id="280257">
        <label>checkpoint/container/thread_serialize.h</label>
        <link refid="thread__serialize_8h"/>
        <childnode refid="280258" relation="include">
        </childnode>
        <childnode refid="280191" relation="include">
        </childnode>
      </node>
      <node id="280219">
        <label>checkpoint/dispatch/vrt/virtual_serialize.h</label>
        <link refid="virtual__serialize_8h"/>
        <childnode refid="280220" relation="include">
        </childnode>
        <childnode refid="280228" relation="include">
        </childnode>
      </node>
      <node id="280174">
        <label>vt/runtime/component/component_traits.h</label>
        <link refid="component__traits_8h"/>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280231">
        <label>checkpoint/dispatch/type_registry.h</label>
        <link refid="type__registry_8h"/>
        <childnode refid="280232" relation="include">
        </childnode>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
      </node>
      <node id="280178">
        <label>vt/runtime/component/component_reduce.h</label>
        <link refid="component__reduce_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
      </node>
      <node id="280171">
        <label>vt/runtime/component/component_registry.h</label>
        <link refid="component__registry_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280172" relation="include">
        </childnode>
      </node>
      <node id="280121">
        <label>vt/configs/debug/debug_masterconfig.h</label>
        <link refid="debug__masterconfig_8h"/>
        <childnode refid="280122" relation="include">
        </childnode>
        <childnode refid="280128" relation="include">
        </childnode>
      </node>
      <node id="280151">
        <label>vt/collective/basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280130">
        <label>vt/configs/types/types_type.h</label>
        <link refid="types__type_8h"/>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
      </node>
      <node id="280155">
        <label>vt/configs/error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="280129" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280156" relation="include">
        </childnode>
      </node>
      <node id="280226">
        <label>checkpoint/dispatch/vrt/serialize_instantiator.h</label>
        <link refid="serialize__instantiator_8h"/>
        <childnode refid="280224" relation="include">
        </childnode>
        <childnode refid="280227" relation="include">
        </childnode>
      </node>
      <node id="280200">
        <label>checkpoint/checkpoint_api.h</label>
        <link refid="checkpoint__api_8h"/>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280146">
        <label>vt/configs/debug/debug_var_unused.h</label>
        <link refid="debug__var__unused_8h"/>
        <childnode refid="280147" relation="include">
        </childnode>
      </node>
      <node id="280281">
        <label>vt/runtime/component/meter/counter_gauge.h</label>
        <link refid="counter__gauge_8h"/>
        <childnode refid="280274" relation="include">
        </childnode>
        <childnode refid="280276" relation="include">
        </childnode>
      </node>
      <node id="280150">
        <label>vt/configs/error/soft_error.h</label>
        <link refid="soft__error_8h"/>
        <childnode refid="280151" relation="include">
        </childnode>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280153" relation="include">
        </childnode>
        <childnode refid="280125" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
      <node id="280179">
        <label>vt/runtime/component/diagnostic_types.h</label>
        <link refid="diagnostic__types_8h"/>
        <childnode refid="280123" relation="include">
        </childnode>
      </node>
      <node id="280193">
        <label>cstdio</label>
      </node>
      <node id="280217">
        <label>checkpoint/dispatch/vrt/virtual_serialize_traits.h</label>
        <link refid="virtual__serialize__traits_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280218" relation="include">
        </childnode>
        <childnode refid="280214" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280255">
        <label>checkpoint/container/shared_ptr_serialize.h</label>
        <link refid="shared__ptr__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
      </node>
      <node id="280133">
        <label>tuple</label>
      </node>
      <node id="280205">
        <label>checkpoint/serializers/packer.impl.h</label>
        <link refid="packer_8impl_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280198" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
        <childnode refid="280206" relation="include">
        </childnode>
      </node>
      <node id="280227">
        <label>checkpoint/dispatch/vrt/link_derived_to_base_idx.h</label>
        <link refid="link__derived__to__base__idx_8h"/>
        <childnode refid="280224" relation="include">
        </childnode>
      </node>
      <node id="280139">
        <label>vt/utils/strong/strong_type.h</label>
        <link refid="strong__type_8h"/>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280275">
        <label>vt/runtime/component/meter/stats_pack.h</label>
        <link refid="stats__pack_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
      </node>
      <node id="280128">
        <label>vt/configs/debug/debug_print.h</label>
        <link refid="debug__print_8h"/>
        <childnode refid="280129" relation="include">
        </childnode>
        <childnode refid="280122" relation="include">
        </childnode>
        <childnode refid="280142" relation="include">
        </childnode>
        <childnode refid="280146" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
      <node id="280276">
        <label>vt/runtime/component/meter/gauge.h</label>
        <link refid="gauge_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280275" relation="include">
        </childnode>
      </node>
      <node id="280253">
        <label>stack</label>
      </node>
      <node id="280145">
        <label>vector</label>
      </node>
      <node id="280294">
        <label>vt/context/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="280201" relation="include">
        </childnode>
        <childnode refid="280295" relation="include">
        </childnode>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280169" relation="include">
        </childnode>
        <childnode refid="280296" relation="include">
        </childnode>
        <childnode refid="280297" relation="include">
        </childnode>
      </node>
      <node id="280260">
        <label>new</label>
      </node>
      <node id="280210">
        <label>checkpoint/dispatch/clean_type.h</label>
        <link refid="clean__type_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
      </node>
      <node id="280215">
        <label>checkpoint/dispatch/dispatch_serializer_byte.h</label>
        <link refid="dispatch__serializer__byte_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280212" relation="include">
        </childnode>
        <childnode refid="280216" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280161" relation="include">
        </childnode>
      </node>
      <node id="280237">
        <label>checkpoint/container/atomic_serialize.h</label>
        <link refid="atomic__serialize_8h"/>
        <childnode refid="280238" relation="include">
        </childnode>
        <childnode refid="280191" relation="include">
        </childnode>
      </node>
      <node id="280147">
        <label>utility</label>
      </node>
      <node id="280261">
        <label>checkpoint/container/vector_serialize.h</label>
        <link refid="vector__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
      </node>
      <node id="280236">
        <label>array</label>
      </node>
      <node id="280167">
        <label>sstream</label>
      </node>
      <node id="280251">
        <label>checkpoint/container/queue_serialize.h</label>
        <link refid="queue__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280252" relation="include">
        </childnode>
        <childnode refid="280253" relation="include">
        </childnode>
      </node>
      <node id="280220">
        <label>checkpoint/dispatch/vrt/base.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2vrt_2base_8h"/>
        <childnode refid="280218" relation="include">
        </childnode>
        <childnode refid="280221" relation="include">
        </childnode>
        <childnode refid="280224" relation="include">
        </childnode>
        <childnode refid="280225" relation="include">
        </childnode>
        <childnode refid="280226" relation="include">
        </childnode>
      </node>
      <node id="280177">
        <label>vt/runtime/component/component_name.h</label>
        <link refid="component__name_8h"/>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280181">
        <label>vt/runtime/component/diagnostic_value.h</label>
        <link refid="diagnostic__value_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280179" relation="include">
        </childnode>
        <childnode refid="280182" relation="include">
        </childnode>
        <childnode refid="280188" relation="include">
        </childnode>
        <childnode refid="280184" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280186" relation="include">
        </childnode>
      </node>
      <node id="280126">
        <label>vt/cmake_config.h</label>
      </node>
      <node id="280160">
        <label>vt/configs/error/stack_out.h</label>
        <link refid="stack__out_8h"/>
        <childnode refid="280161" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280145" relation="include">
        </childnode>
      </node>
      <node id="280125">
        <label>vt/configs/features/features_defines.h</label>
        <link refid="features__defines_8h"/>
        <childnode refid="280126" relation="include">
        </childnode>
      </node>
      <node id="280202">
        <label>checkpoint/buffer/managed_buffer.h</label>
        <link refid="managed__buffer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280161">
        <label>cstdlib</label>
      </node>
      <node id="280209">
        <label>checkpoint/dispatch/dispatch.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2dispatch_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
        <childnode refid="280210" relation="include">
        </childnode>
        <childnode refid="280211" relation="include">
        </childnode>
        <childnode refid="280229" relation="include">
        </childnode>
        <childnode refid="280222" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280230" relation="include">
        </childnode>
      </node>
      <node id="280154">
        <label>vt/configs/error/hard_error.h</label>
        <link refid="hard__error_8h"/>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280155" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
      </node>
      <node id="280230">
        <label>checkpoint/dispatch/dispatch.impl.h</label>
        <link refid="lib_2checkpoint_2src_2checkpoint_2dispatch_2dispatch_8impl_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280231" relation="include">
        </childnode>
        <childnode refid="280234" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280189">
        <label>checkpoint/checkpoint.h</label>
        <link refid="checkpoint_8h"/>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280209" relation="include">
        </childnode>
        <childnode refid="280212" relation="include">
        </childnode>
        <childnode refid="280235" relation="include">
        </childnode>
        <childnode refid="280237" relation="include">
        </childnode>
        <childnode refid="280239" relation="include">
        </childnode>
        <childnode refid="280241" relation="include">
        </childnode>
        <childnode refid="280242" relation="include">
        </childnode>
        <childnode refid="280243" relation="include">
        </childnode>
        <childnode refid="280248" relation="include">
        </childnode>
        <childnode refid="280251" relation="include">
        </childnode>
        <childnode refid="280254" relation="include">
        </childnode>
        <childnode refid="280255" relation="include">
        </childnode>
        <childnode refid="280256" relation="include">
        </childnode>
        <childnode refid="280257" relation="include">
        </childnode>
        <childnode refid="280259" relation="include">
        </childnode>
        <childnode refid="280261" relation="include">
        </childnode>
        <childnode refid="280262" relation="include">
        </childnode>
        <childnode refid="280263" relation="include">
        </childnode>
        <childnode refid="280267" relation="include">
        </childnode>
        <childnode refid="280269" relation="include">
        </childnode>
        <childnode refid="280270" relation="include">
        </childnode>
        <childnode refid="280271" relation="include">
        </childnode>
        <childnode refid="280200" relation="include">
        </childnode>
        <childnode refid="280272" relation="include">
        </childnode>
      </node>
      <node id="280296">
        <label>vt/context/context_attorney_fwd.h</label>
        <link refid="context__attorney__fwd_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
      </node>
      <node id="280232">
        <label>cstddef</label>
      </node>
      <node id="280248">
        <label>checkpoint/container/map_serialize.h</label>
        <link refid="map__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280245" relation="include">
        </childnode>
        <childnode refid="280249" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
        <childnode refid="280250" relation="include">
        </childnode>
        <childnode refid="280172" relation="include">
        </childnode>
      </node>
      <node id="280247">
        <label>deque</label>
      </node>
      <node id="280233">
        <label>unordered_map</label>
      </node>
      <node id="280243">
        <label>checkpoint/container/list_serialize.h</label>
        <link refid="list__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280245" relation="include">
        </childnode>
        <childnode refid="280246" relation="include">
        </childnode>
        <childnode refid="280247" relation="include">
        </childnode>
      </node>
      <node id="280291">
        <label>vt/phase/phase_hook_id.h</label>
        <link refid="phase__hook__id_8h"/>
        <childnode refid="280290" relation="include">
        </childnode>
      </node>
      <node id="280204">
        <label>checkpoint/buffer/io_buffer.h</label>
        <link refid="io__buffer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280199" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280129">
        <label>vt/configs/types/types_headers.h</label>
        <link refid="types__headers_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280132" relation="include">
        </childnode>
        <childnode refid="280134" relation="include">
        </childnode>
        <childnode refid="280137" relation="include">
        </childnode>
        <childnode refid="280138" relation="include">
        </childnode>
      </node>
      <node id="280207">
        <label>checkpoint/serializers/unpacker.h</label>
        <link refid="unpacker_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280198" relation="include">
        </childnode>
        <childnode refid="280203" relation="include">
        </childnode>
        <childnode refid="280208" relation="include">
        </childnode>
      </node>
      <node id="280240">
        <label>chrono</label>
      </node>
      <node id="280158">
        <label>vt/configs/error/assert_out.h</label>
        <link refid="assert__out_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280159" relation="include">
        </childnode>
      </node>
      <node id="280295">
        <label>mpi.h</label>
      </node>
      <node id="280258">
        <label>thread</label>
      </node>
      <node id="280264">
        <label>checkpoint/container/view_traits_extract.h</label>
        <link refid="view__traits__extract_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
      </node>
      <node id="280286">
        <label>vt/runtime/component/component_pack.impl.h</label>
        <link refid="component__pack_8impl_8h"/>
        <childnode refid="280169" relation="include">
        </childnode>
      </node>
      <node id="280132">
        <label>vt/configs/types/types_rdma.h</label>
        <link refid="types__rdma_8h"/>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280123" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
      </node>
      <node id="280182">
        <label>vt/runtime/component/diagnostic_erased_value.h</label>
        <link refid="diagnostic__erased__value_8h"/>
        <childnode refid="280179" relation="include">
        </childnode>
        <childnode refid="280183" relation="include">
        </childnode>
        <childnode refid="280184" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280176">
        <label>vt/runtime/component/diagnostic.h</label>
        <link refid="diagnostic_8h"/>
        <childnode refid="280177" relation="include">
        </childnode>
        <childnode refid="280178" relation="include">
        </childnode>
        <childnode refid="280179" relation="include">
        </childnode>
        <childnode refid="280180" relation="include">
        </childnode>
        <childnode refid="280181" relation="include">
        </childnode>
        <childnode refid="280273" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
        <childnode refid="280233" relation="include">
        </childnode>
        <childnode refid="280131" relation="include">
        </childnode>
        <childnode refid="280282" relation="include">
        </childnode>
      </node>
      <node id="280140">
        <label>type_traits</label>
      </node>
      <node id="280250">
        <label>set</label>
      </node>
      <node id="280267">
        <label>checkpoint/container/variant_serialize.h</label>
        <link refid="variant__serialize_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280244" relation="include">
        </childnode>
        <childnode refid="280268" relation="include">
        </childnode>
      </node>
      <node id="280153">
        <label>vt/configs/error/pretty_print_message.h</label>
        <link refid="pretty__print__message_8h"/>
        <childnode refid="280129" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280120">
        <label>vt/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="280121" relation="include">
        </childnode>
        <childnode refid="280129" relation="include">
        </childnode>
        <childnode refid="280149" relation="include">
        </childnode>
      </node>
      <node id="280188">
        <label>vt/runtime/component/diagnostic_value_base.h</label>
        <link refid="diagnostic__value__base_8h"/>
        <childnode refid="280179" relation="include">
        </childnode>
        <childnode refid="280180" relation="include">
        </childnode>
        <childnode refid="280182" relation="include">
        </childnode>
        <childnode refid="280189" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280187">
        <label>algorithm</label>
      </node>
      <node id="280265">
        <label>checkpoint/container/view_traverse_manual.h</label>
        <link refid="view__traverse__manual_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280190" relation="include">
        </childnode>
        <childnode refid="280264" relation="include">
        </childnode>
      </node>
      <node id="280225">
        <label>checkpoint/dispatch/vrt/inheritance_assert_helpers.h</label>
        <link refid="inheritance__assert__helpers_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
      </node>
      <node id="280198">
        <label>checkpoint/serializers/memory_serializer.h</label>
        <link refid="memory__serializer_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280194" relation="include">
        </childnode>
      </node>
      <node id="280170">
        <label>vt/runtime/component/component.h</label>
        <link refid="component_8h"/>
        <childnode refid="280154" relation="include">
        </childnode>
        <childnode refid="280171" relation="include">
        </childnode>
        <childnode refid="280173" relation="include">
        </childnode>
        <childnode refid="280174" relation="include">
        </childnode>
        <childnode refid="280175" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
      </node>
      <node id="280127">
        <label>vt/configs/debug/debug_printconst.h</label>
        <link refid="debug__printconst_8h"/>
      </node>
      <node id="280206">
        <label>cstring</label>
      </node>
      <node id="280297">
        <label>vt/runnable/runnable.fwd.h</label>
        <link refid="runnable_8fwd_8h"/>
      </node>
      <node id="280282">
        <label>vt/runtime/component/diagnostic.impl.h</label>
        <link refid="diagnostic_8impl_8h"/>
        <childnode refid="280120" relation="include">
        </childnode>
        <childnode refid="280176" relation="include">
        </childnode>
        <childnode refid="280181" relation="include">
        </childnode>
        <childnode refid="280201" relation="include">
        </childnode>
        <childnode refid="280185" relation="include">
        </childnode>
      </node>
      <node id="280180">
        <label>vt/runtime/component/diagnostic_units.h</label>
        <link refid="diagnostic__units_8h"/>
      </node>
      <node id="280201">
        <label>memory</label>
      </node>
      <node id="280298">
        <label>istream</label>
      </node>
      <node id="280157">
        <label>vt/configs/error/config_assert.h</label>
        <link refid="config__assert_8h"/>
        <childnode refid="280158" relation="include">
        </childnode>
        <childnode refid="280163" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
      </node>
      <node id="280163">
        <label>vt/configs/error/assert_out_info.h</label>
        <link refid="assert__out__info_8h"/>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280130" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280164" relation="include">
        </childnode>
      </node>
      <node id="280195">
        <label>checkpoint/serializers/footprinter.h</label>
        <link refid="footprinter_8h"/>
        <childnode refid="280191" relation="include">
        </childnode>
        <childnode refid="280194" relation="include">
        </childnode>
      </node>
      <node id="280156">
        <label>vt/configs/error/error.impl.h</label>
        <link refid="error_8impl_8h"/>
        <childnode refid="280129" relation="include">
        </childnode>
        <childnode refid="280122" relation="include">
        </childnode>
        <childnode refid="280152" relation="include">
        </childnode>
        <childnode refid="280155" relation="include">
        </childnode>
        <childnode refid="280153" relation="include">
        </childnode>
        <childnode refid="280151" relation="include">
        </childnode>
        <childnode refid="280144" relation="include">
        </childnode>
        <childnode refid="280133" relation="include">
        </childnode>
        <childnode refid="280140" relation="include">
        </childnode>
        <childnode refid="280148" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structvt_1_1util_1_1memory_1_1_comma_delimit" prot="public">vt::util::memory::CommaDelimit</innerclass>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1util">vt::util</innernamespace>
    <innernamespace refid="namespacevt_1_1util_1_1memory">vt::util::memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_usage.cc</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt<sp/>=&gt;<sp/>Virtual<sp/>Transport</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019-2021<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">vt/config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="app__config_8h" kindref="compound">vt/configs/arguments/app_config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memory__usage_8h" kindref="compound">vt/utils/memory/memory_usage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="phase__manager_8h" kindref="compound">vt/phase/phase_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="context_8h" kindref="compound">vt/context/context.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;istream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_malloc_h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;malloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_malloc_malloc_h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;malloc/malloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_mach_mach_h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;mach/mach.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_sys_resource_h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/resource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_unistd_h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_inttypes_h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>vt_check_enabled(mimalloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;mimalloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacevt" kindref="compound">vt</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">memory<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mstats_1aa3ba12317492d6f3c95f6b2bbb20f831" kindref="member">Mstats::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(vt_has_mstats)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mstats<sp/>ms<sp/>=<sp/>mstats();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ms.bytes_used;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mstats_1a4718704523896839b8c7955d1098b647" kindref="member">Mstats::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mstats&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_sbrk_1af4df47e41f60e7f2da7a6b47c8b4a046" kindref="member">Sbrk::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(vt_has_sbrk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdeprecated-declarations&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inited_)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sbrkinit_<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sbrk(0));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inited_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>sbrknow<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sbrk(0));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sbrknow<sp/>-<sp/>sbrkinit_);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_sbrk_1a21fc8bafbdf0a4bb92184474dae1d0f1" kindref="member">Sbrk::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;sbrk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_p_s_1a8637d08841cd23f361e83be9cc15e2b4" kindref="member">PS::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(vt_has_popen)<sp/>&amp;&amp;<sp/>defined(vt_has_pclose)<sp/>&amp;&amp;<sp/>defined(vt_has_getpid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" kindref="member">theConfig</ref>()-&gt;vt_allow_memory_report_with_ps)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cmd<sp/>=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;/bin/ps<sp/>-o<sp/>vsz=<sp/>-p<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>getpid());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>p<sp/>=<sp/>popen(cmd.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>vsz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(p,<sp/></highlight><highlight class="stringliteral">&quot;%zu&quot;</highlight><highlight class="normal">,<sp/>&amp;vsz);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pclose(p);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>not_eq<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vsz<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_p_s_1a011bb0261eefffa53110ba35243c4c8b" kindref="member">PS::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mallinfo_1a872e568b6266e301844dbc252886794f" kindref="member">Mallinfo::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>vt_check_enabled(mimalloc)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/>(!defined(vt_has_mallinfo)<sp/>&amp;&amp;<sp/>!defined(vt_has_mallinfo2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(vt_has_mallinfo2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>mallinfo2();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(vt_has_mallinfo)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>mallinfo();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mi.uordblks);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mallinfo_1a0e916973e080d93677e2e4f4cbf63580" kindref="member">Mallinfo::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mallinfo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_getrusage_1a976a842feb631dfb19c2f4ecda2398ab" kindref="member">Getrusage::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(vt_has_getrusage)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rusage<sp/>usage;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>getrusage(RUSAGE_SELF,<sp/>&amp;usage);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>BSD,<sp/>units<sp/>are<sp/>in<sp/>KiB,<sp/>on<sp/>mach<sp/>it&apos;s<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>defined(__APPLE__)<sp/>&amp;&amp;<sp/>defined(__MACH__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usage.ru_maxrss;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usage.ru_maxrss<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_getrusage_1ae1261aca38feffabbbc8b8a510556d8b" kindref="member">Getrusage::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;getrusage&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mach_task_info_1a8d610d4ca50ad62ef2dc623713a67b7d" kindref="member">MachTaskInfo::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(vt_has_mach_task_self)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mach_task_basic_info<sp/>info;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>mach_msg_type_number_t<sp/>info_count<sp/>=<sp/>MACH_TASK_BASIC_INFO_COUNT;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_info(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mach_task_self(),<sp/>MACH_TASK_BASIC_INFO,<sp/>(task_info_t)&amp;info,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;info_count</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>!=<sp/>KERN_SUCCESS</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(info.resident_size);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mach_task_info_1a4800048748574a7d57799c442aa2c390" kindref="member">MachTaskInfo::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;machinfo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_stat_1aa14297e6605a523e4164597d45fba06f" kindref="member">Stat::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed_)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::size_t<sp/>vsz<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>should<sp/>remain<sp/>0<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/self/stat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>failed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>22;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>fscanf(f,<sp/></highlight><highlight class="stringliteral">&quot;%*s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret_vsz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>failed_)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_vsz<sp/>=<sp/>fscanf(f,<sp/></highlight><highlight class="stringliteral">&quot;%zu&quot;</highlight><highlight class="normal">,<sp/>&amp;vsz);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vsz<sp/>or<sp/>ret_vsz<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>failed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vsz;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_stat_1a2a29912688c89bcb98d6132ecda6070f" kindref="member">Stat::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;selfstat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_stat_m_1a066c740a52e05e7184dfff530ed07173" kindref="member">StatM::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(vt_has_sysconf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed_)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>buffer(</highlight><highlight class="stringliteral">&quot;/proc/self/statm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer.good())<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>to_ignore<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>npages<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>&gt;&gt;<sp/>to_ignore<sp/>&gt;&gt;<sp/>npages;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.close();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>huge_pages<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>huge_page_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>meminfo(</highlight><highlight class="stringliteral">&quot;/proc/meminfo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(meminfo.good())<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(not<sp/>meminfo.eof())<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(meminfo,<sp/>line);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss(line);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>name;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;HugePages_Total:&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>huge_pages;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hugepagesize:&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>huge_page_bytes;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>huge<sp/>page<sp/>size<sp/>recorded<sp/>in<sp/>KiB<sp/>to<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huge_page_bytes<sp/>*=<sp/>1024;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((npages<sp/>-<sp/>huge_pages)<sp/>*<sp/>sysconf(_SC_PAGE_SIZE))<sp/>+</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(huge_pages<sp/>*<sp/>huge_page_bytes);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>failed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>(void)failed_;<sp/></highlight><highlight class="comment">//<sp/>Suppress<sp/>unused<sp/>private<sp/>variable<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_stat_m_1ad8ea55e89ec3c591348a26b670048814" kindref="member">StatM::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;selfstatm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mimalloc_1ab404700265f120eedb4cf06e4ae0b602" kindref="member">Mimalloc::getUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>vt_check_enabled(mimalloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>total_size<sp/>=<sp/>mi_get_allocated_size();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_size;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_mimalloc_1a94ad64b69062aeae79fa2d2067cf27f1" kindref="member">Mimalloc::getName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mimalloc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="structvt_1_1util_1_1memory_1_1_comma_delimit" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_1_1util_1_1memory_1_1_comma_delimit" kindref="compound">CommaDelimit</ref><sp/>:<sp/>std::string<sp/>{};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespacevt_1_1util_1_1memory_1afe1acbbca9aa1bd7310548cefd40045c" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>is,<sp/><ref refid="structvt_1_1util_1_1memory_1_1_comma_delimit" kindref="compound">CommaDelimit</ref>&amp;<sp/><ref refid="namespacevt_1ad3ca3e8710dd3c8badff897f8de3c858" kindref="member">output</ref>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>std::getline(is,<sp/>output,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a5838280c7b2b24ab8ed2aff450b5e98f" kindref="member">MemoryUsage::MemoryUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;Reporter&gt;&gt;<sp/>all_reporters;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>all<sp/>the<sp/>memory<sp/>reporters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>vt_check_enabled(mimalloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;Mimalloc&gt;());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;Mstats&gt;());</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;MachTaskInfo&gt;());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;Stat&gt;());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;StatM&gt;());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;Sbrk&gt;());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;Mallinfo&gt;());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;Getrusage&gt;());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>all_reporters.emplace_back(std::make_unique&lt;PS&gt;());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>std::string<sp/>pred<sp/>=<sp/><ref refid="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" kindref="member">theConfig</ref>()-&gt;<ref refid="structvt_1_1arguments_1_1_app_config_1acb03c37af0097278fddcdd456e5312de" kindref="member">vt_memory_reporters</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>iss(pred);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>results(</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istream_iterator&lt;CommaDelimit&gt;{iss},</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istream_iterator&lt;CommaDelimit&gt;{}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>int&gt;<sp/>name_map;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>all_reporters)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>name_map[r-&gt;getName()]<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>cur++;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>results)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>name_map.find(r);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>name_map.end())<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reporters_.emplace_back(std::move(all_reporters[iter-&gt;second]));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">theContext</ref>()-&gt;getNode()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacevt_1af11de63df5da8fa58bd668f4e5026a72" kindref="member">warning</ref><sp/>=<sp/>fmt::format(</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>memory<sp/>reporter<sp/>specified:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>r</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="soft__error_8h_1a84b604f69a1a0f1d7d914af24c606a61" kindref="member">vtWarn</ref>(<ref refid="namespacevt_1af11de63df5da8fa58bd668f4e5026a72" kindref="member">warning</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prime<sp/>each<sp/>reporter,<sp/>determine<sp/>if<sp/>we<sp/>have<sp/>a<sp/>working<sp/>reporter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>reporters_)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;getUsage();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>getFirstUsage();</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1add66c6cdabed24194310380c5a28951a" kindref="member">MemoryUsage::initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" kindref="member">theConfig</ref>()-&gt;vt_print_memory_each_phase)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>this_node<sp/>=<sp/><ref refid="namespacevt_1a26551fe0e6e6a1371111df5b12c7e92c" kindref="member">theContext</ref>()-&gt;<ref refid="structvt_1_1ctx_1_1_context_1a0d52c263ce8516546a67443d9a86fa5f" kindref="member">getNode</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal"><sp/>==<sp/><ref refid="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" kindref="member">theConfig</ref>()-&gt;vt_print_memory_node<sp/>or</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::to_string(this_node)<sp/>==<sp/><ref refid="namespacevt_1aa17c6eae35e7e41a8b11d4047b7c0839" kindref="member">theConfig</ref>()-&gt;vt_print_memory_node</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacevt_1a38d485d3cf840b9a623e47e7754ef72e" kindref="member">theMemUsage</ref>()-&gt;hasWorkingReporter())<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1a3799d6b51fb71d7b6505760aad457e61" kindref="member">thePhase</ref>()-&gt;<ref refid="structvt_1_1phase_1_1_phase_manager_1a76cf36135d228374c5ce1f6da5ea10b1" kindref="member">registerHookUnsynchronized</ref>(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1_1phase_1aec9a63fdd99680d7a7fe99d321193811a92bbcee517f28808f9795872094c0f08" kindref="member">phase::PhaseHook::EndPostMigration</ref>,<sp/>[]{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur_phase<sp/>=<sp/><ref refid="namespacevt_1a3799d6b51fb71d7b6505760aad457e61" kindref="member">thePhase</ref>()-&gt;<ref refid="structvt_1_1phase_1_1_phase_manager_1a217ff68fb553eedf12c9f4947a977ebd" kindref="member">getCurrentPhase</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>memory_usage_str<sp/>=<sp/>fmt::format(</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>Usage:<sp/>phase={}:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>cur_phase,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacevt_1a38d485d3cf840b9a623e47e7754ef72e" kindref="member">theMemUsage</ref>()-&gt;getUsageAll()</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="debug__print_8h_1ad4964b98cfd2a0b5665f3a481a1a61fe" kindref="member">vt_print</ref>(<ref refid="namespacevt_1_1config_1a6bd1d6215bda0d8ca02811798399f689a5b2fa777115f03c6d550ec721c0a93a5" kindref="member">gen</ref>,<sp/>memory_usage_str);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a59d87ec931fe37d4300ba72b00e63d8e" kindref="member">MemoryUsage::getAverageUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>std::size_t<sp/>usage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>std::size_t<sp/>num_valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>reporters_)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rusage<sp/>=<sp/>r-&gt;getUsage();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rusage<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usage<sp/>+=<sp/>rusage;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_valid++;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_valid<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usage<sp/>/<sp/>num_valid;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1ab02282aab80eb52e5f8f43095af05304" kindref="member">MemoryUsage::getFirstUsage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>std::size_t<sp/>usage<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_valid_reporter_<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur_elm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>reporters_)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usage<sp/>=<sp/>r-&gt;getUsage();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fmt::print(&quot;reporter:<sp/>{}<sp/>usage:<sp/>{}\n&quot;,<sp/>r-&gt;getName(),<sp/>usage);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usage)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_valid_reporter_<sp/>=<sp/>cur_elm;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_elm++;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>usage<sp/>=<sp/>reporters_[first_valid_reporter_]-&gt;getUsage();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usage;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a5baf0fd6bf753755c4602fcb91a7c268" kindref="member">MemoryUsage::getFirstReporter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>getFirstUsage();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_valid_reporter_<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reporters_[first_valid_reporter_]-&gt;getName();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;no-valid-reporter&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">std::string<sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1aa37f5b634fb87151fc1688cdba759298" kindref="member">MemoryUsage::getUsageAll</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pretty,<sp/><ref refid="namespacevt_1_1util_1_1memory_1a64df3d84293b34009f78e2a1db2f9bb6" kindref="member">MemoryUnitEnum</ref><sp/>unit)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>std::string<sp/>builder<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>std::size_t<sp/>num_valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>reporters_)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rusage<sp/>=<sp/>r-&gt;getUsage();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rusage<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dusage<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rusage);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int8_t&gt;(unit);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dusage<sp/>/=<sp/>1024.0;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>builder<sp/>+=<sp/>fmt::format(</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{}{}{}={}{:.6g}{}<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pretty<sp/>?<sp/><ref refid="namespacevt_1_1debug_1ac88d2f3171c5f622861b5c8ea986f281" kindref="member">debug::green</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;getName(),</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pretty<sp/>?<sp/><ref refid="namespacevt_1_1debug_1a4456c051bd468fe024334f24887867af" kindref="member">debug::reset</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pretty<sp/>?<sp/><ref refid="namespacevt_1_1debug_1a1617ac1c602fb27518f6ab8fd4bf99c1" kindref="member">debug::magenta</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dusage,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pretty<sp/>?<sp/><ref refid="namespacevt_1_1debug_1a4456c051bd468fe024334f24887867af" kindref="member">debug::reset</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_valid++;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_valid<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>builder<sp/>+=<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;({})&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacevt_1_1util_1_1memory_1a6a1de4e8806e74e6e0ef92e4262b654b" kindref="member">getMemoryUnitName</ref>(unit));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1a23bded824e4360e4389d9869c3bd7f18" kindref="member">MemoryUsage::getWorkingReporters</ref>()<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>working;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>:<sp/>reporters_)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;getUsage()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>working.push_back(r-&gt;getName());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>working;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">std::size_t<sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1ad047c8acc218403b53ec97c82fa7d7e3" kindref="member">MemoryUsage::convertBytesFromString</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>std::string<sp/>units<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>iss(in);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>iss<sp/>&gt;&gt;<sp/>val<sp/>&gt;&gt;<sp/>units;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unit<sp/>=<sp/><ref refid="namespacevt_1_1util_1_1memory_1aeceb7d7ac924dd3d88a58eab5ebf64f7" kindref="member">getUnitFromString</ref>(units);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int8_t&gt;(unit);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>*=<sp/>1024.0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1util_1_1memory_1_1_memory_usage_1aee12dfad3c08673967dd1fcd6a6adfb5" kindref="member">MemoryUsage::hasWorkingReporter</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first_valid_reporter_<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>vt::util::memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/vt/utils/memory/memory_usage.cc"/>
  </compounddef>
</doxygen>
