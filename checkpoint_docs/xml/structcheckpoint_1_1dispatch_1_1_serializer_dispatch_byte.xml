<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::dispatch::SerializerDispatchByte</compoundname>
    <templateparamlist>
      <param>
        <type>typename SerializerT</type>
      </param>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename Dispatcher</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1a7fd331c3b3693e8e69ae5cf7f5aeab93" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; std::is_arithmetic&lt; U &gt;::value or <ref refid="structcheckpoint_1_1dispatch_1_1has_byte_copy" kindref="compound">hasByteCopy</ref>&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchByte&lt; SerializerT, T, Dispatcher &gt;::isByteCopyType =  typename std::enable_if&lt; std::is_arithmetic&lt;U&gt;::value or hasByteCopy&lt;U&gt;::value, T &gt;::type</definition>
        <argsstring></argsstring>
        <name>isByteCopyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_byte.h" line="83" column="5" bodyfile="src/checkpoint/dispatch/dispatch_serializer_byte.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1af7214bae56db9cc342bc01fc61a8f403" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; not std::is_arithmetic&lt; U &gt;::value and not <ref refid="structcheckpoint_1_1dispatch_1_1has_byte_copy" kindref="compound">hasByteCopy</ref>&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchByte&lt; SerializerT, T, Dispatcher &gt;::isNotByteCopyType =  typename std::enable_if&lt; not std::is_arithmetic&lt;U&gt;::value and not hasByteCopy&lt;U&gt;::value, T &gt;::type</definition>
        <argsstring></argsstring>
        <name>isNotByteCopyType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_byte.h" line="89" column="5" bodyfile="src/checkpoint/dispatch/dispatch_serializer_byte.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1ab45639bcd8124d1057e074358f5ccc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchByte&lt; SerializerT, T, Dispatcher &gt;::operator()</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, isByteCopyType&lt; U &gt; *x=nullptr)</argsstring>
        <name>operator()</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>isByteCopyType&lt; U &gt; *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_byte.h" line="96" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_byte.h" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1ae94c1edf6bab8281506605824c95b3b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchByte&lt; SerializerT, T, Dispatcher &gt;::operator()</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, isNotByteCopyType&lt; U &gt; *x=nullptr)</argsstring>
        <name>operator()</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>isNotByteCopyType&lt; U &gt; *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_byte.h" line="103" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_byte.h" bodystart="103" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/checkpoint/dispatch/dispatch_serializer_byte.h" line="72" column="29" bodyfile="src/checkpoint/dispatch/dispatch_serializer_byte.h" bodystart="72" bodyend="109"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1a7fd331c3b3693e8e69ae5cf7f5aeab93" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchByte</scope><name>isByteCopyType</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1af7214bae56db9cc342bc01fc61a8f403" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchByte</scope><name>isNotByteCopyType</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1ab45639bcd8124d1057e074358f5ccc90" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchByte</scope><name>operator()</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_byte_1ae94c1edf6bab8281506605824c95b3b1" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchByte</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
