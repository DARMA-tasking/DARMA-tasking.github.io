<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structcheckpoint_1_1_serializable_traits" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::SerializableTraits</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename S</type>
        <defval><ref refid="structcheckpoint_1_1_serializer" kindref="compound">checkpoint::Serializer</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; U &gt;().serialize(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serialize_t =  decltype( std::declval&lt;U&gt;().serialize(std::declval&lt;V&amp;&gt;()) )</definition>
        <argsstring></argsstring>
        <name>serialize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start with detection of &quot;serialize&quot; overloads, intrusive and non-intrusive.</para>
<para>NOTE: Detection of <computeroutput>serializeParent</computeroutput> and <computeroutput>serializeThis</computeroutput> are no longer used on &quot;develop&quot; in VT (eliminated with message serialization refactoring), but remain on the release branch for 1.0.0. Thus, they must stay for now. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="96" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1ab565b1e56509babb16ea5525ed4a3ebf" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" kindref="member">serialize_t</ref>, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize =  detection::is_detected&lt;serialize_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="99" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(serialize(std::declval&lt; V &amp; &gt;(), std::declval&lt; U &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::nonintrustive_serialize_t =  decltype(serialize( std::declval&lt;V&amp;&gt;(), std::declval&lt;U&amp;&gt;() ))</definition>
        <argsstring></argsstring>
        <name>nonintrustive_serialize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="102" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1abc3628bc485acd98b08840fb99450850" prot="public" static="no">
        <type>detection::is_detected&lt; nonintrustive_serialize_t, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_nonintrustive_serialize =  detection::is_detected&lt;nonintrustive_serialize_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_nonintrustive_serialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="106" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; U &gt;().serializeParent(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serializeParent_t =  decltype(std::declval&lt;U&gt;().serializeParent(std::declval&lt;V&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>serializeParent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="111" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a4785b7f54369ec889ac5a25a8256a578" prot="public" static="no">
        <type>detection::is_detected&lt; serializeParent_t, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serializeParent =  detection::is_detected&lt;serializeParent_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serializeParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="113" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; U &gt;().serializeThis(std::declval&lt; V &amp; &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::serializeThis_t =  decltype(std::declval&lt;U&gt;().serializeThis(std::declval&lt;V&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>serializeThis_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="116" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1adc99520813c22cf61ab70ba2fea3cdc6" prot="public" static="no">
        <type>detection::is_detected&lt; serializeThis_t, T, S &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_serializeThis =  detection::is_detected&lt;serializeThis_t, T, S&gt;</definition>
        <argsstring></argsstring>
        <name>has_serializeThis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="118" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" prot="public" static="no">
        <type><ref refid="structcheckpoint_1_1is_byte_copyable" kindref="compound">isByteCopyable</ref>&lt; T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_byteCopyTraitTrue =  isByteCopyable&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>has_byteCopyTraitTrue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detect byte-copyability trait and std::is_arithmetic, used for types that do not have a serialize method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="145" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::is_arithmetic&lt; U &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_isArith =  std::is_arithmetic&lt;U&gt;</definition>
        <argsstring></argsstring>
        <name>has_isArith</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="148" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(U())</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::constructor_t =  decltype(U())</definition>
        <argsstring></argsstring>
        <name>constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detect different types of re-constructibility: default constructors, explicitly tagged constructors for serializers, and reconstruct methods. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="159" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a824afd2953233388cbc3223a82c75df8" prot="public" static="no">
        <type>detection::is_detected&lt; <ref refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" kindref="member">constructor_t</ref>, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_default_constructor =  detection::is_detected&lt;constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_default_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="160" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(U(std::declval&lt; <ref refid="structcheckpoint_1_1dispatch_1_1_s_e_r_i_a_l_i_z_e___c_o_n_s_t_r_u_c_t___t_a_g" kindref="compound">SERIALIZE_CONSTRUCT_TAG</ref> &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::tagged_constructor_t =  decltype(U(std::declval&lt;SERIALIZE_CONSTRUCT_TAG&gt;()))</definition>
        <argsstring></argsstring>
        <name>tagged_constructor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="163" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a3388d17f4748bf899e063b3d05e0dbe4" prot="public" static="no">
        <type>detection::is_detected&lt; tagged_constructor_t, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_tagged_constructor =  detection::is_detected&lt;tagged_constructor_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_tagged_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="164" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(U::reconstruct(std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::reconstruct_t =  decltype(U::reconstruct(std::declval&lt;void*&gt;()))</definition>
        <argsstring></argsstring>
        <name>reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="167" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1a1c37f2f1a317fdd0d198c3d6ad2d35c4" prot="public" static="no">
        <type>detection::is_detected_exact&lt; T &amp;, reconstruct_t, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_reconstruct =  detection::is_detected_exact&lt;T&amp;, reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="168" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(reconstruct(std::declval&lt; U *&amp; &gt;(), std::declval&lt; void * &gt;()))</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::nonintrustive_reconstruct_t =  decltype( reconstruct( std::declval&lt;U*&amp;&gt;(), std::declval&lt;void*&gt;() ) )</definition>
        <argsstring></argsstring>
        <name>nonintrustive_reconstruct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="171" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_serializable_traits_1aeaa2e5459d2910f2ed6a8e423b45552b" prot="public" static="no">
        <type>detection::is_detected&lt; nonintrustive_reconstruct_t, T &gt;</type>
        <definition>using checkpoint::SerializableTraits&lt; T, S &gt;::has_nonintrusive_reconstruct =  detection::is_detected&lt;nonintrustive_reconstruct_t, T&gt;</definition>
        <argsstring></argsstring>
        <name>has_nonintrusive_reconstruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="177" column="3" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1ac398852c9ac167f1e922d98f91d1ec01" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_instrusive</definition>
        <argsstring></argsstring>
        <name>has_serialize_instrusive</name>
        <initializer>= has_serialize::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="121" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a837a521991fb741610de1c5847576f7f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_noninstrusive</definition>
        <argsstring></argsstring>
        <name>has_serialize_noninstrusive</name>
        <initializer>=
    has_nonintrustive_serialize::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="124" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a404f0e26b0e8c29335a13133ec5b2d7b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_serialize_function</definition>
        <argsstring></argsstring>
        <name>has_serialize_function</name>
        <initializer>=
    has_serialize_instrusive or has_serialize_noninstrusive</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="128" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a34f523b2264a750ee3a8380da6388b15" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_parent_serialize</definition>
        <argsstring></argsstring>
        <name>has_parent_serialize</name>
        <initializer>= has_serializeParent::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="132" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a4cffc082900896781bb6a9d3e9aa91df" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_this_serialize</definition>
        <argsstring></argsstring>
        <name>has_this_serialize</name>
        <initializer>= has_serializeThis::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="135" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a79d952745fde047cca2c221c5db1c221" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::has_split_serialize</definition>
        <argsstring></argsstring>
        <name>has_split_serialize</name>
        <initializer>=
    has_parent_serialize and has_this_serialize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="138" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1aeffbf834f99665626f91e511145a19ba" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_bytecopyable</definition>
        <argsstring></argsstring>
        <name>is_bytecopyable</name>
        <initializer>=
    has_byteCopyTraitTrue::value or has_isArith&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="151" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1af4fd4725b2fbcf8948d667040a2d365d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_default_constructible</definition>
        <argsstring></argsstring>
        <name>is_default_constructible</name>
        <initializer>=
    has_default_constructor::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="181" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a4e4f340db88ec3c6649ea5b36bf53710" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_tagged_constructible</definition>
        <argsstring></argsstring>
        <name>is_tagged_constructible</name>
        <initializer>=
    has_tagged_constructor::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="185" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a42e4be78b19a646b214c02cac1c3d962" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_intrusive_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_intrusive_reconstructible</name>
        <initializer>= has_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="189" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a6bc5927c8686c7f66ab6d4cd15782d15" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_nonintrusive_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_nonintrusive_reconstructible</name>
        <initializer>=
    has_nonintrusive_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="192" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1af117da0901a9359e0032b633f27f16c0" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_reconstructible</definition>
        <argsstring></argsstring>
        <name>is_reconstructible</name>
        <initializer>=
    has_nonintrusive_reconstruct::value or has_reconstruct::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="196" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1aba6a71b6ec368dfddf66385dbc3e2f31" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_constructible</definition>
        <argsstring></argsstring>
        <name>is_constructible</name>
        <initializer>=
    is_default_constructible or is_reconstructible or is_tagged_constructible</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="201" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a53aa8e541439d66d9c42ca4f31f6e9f7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_serializable</definition>
        <argsstring></argsstring>
        <name>is_serializable</name>
        <initializer>=
    has_serialize_function and is_constructible</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finally, combine all these into a single definition of is_serializable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="207" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_serializable_traits_1a7c2f8732d58b3dd59130a157f09926ad" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const auto</type>
        <definition>constexpr const auto checkpoint::SerializableTraits&lt; T, S &gt;::is_traversable</definition>
        <argsstring></argsstring>
        <name>is_traversable</name>
        <initializer>=
    has_serialize_function or is_bytecopyable</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="210" column="31" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/checkpoint/traits/serializable_traits.h" line="84" column="25" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="84" bodyend="212"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>constructor_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_byteCopyTraitTrue</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a824afd2953233388cbc3223a82c75df8" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_default_constructor</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a8a8b20be974e219f4fb39b4346be0536" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_isArith</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aeaa2e5459d2910f2ed6a8e423b45552b" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_nonintrusive_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1abc3628bc485acd98b08840fb99450850" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_nonintrustive_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a34f523b2264a750ee3a8380da6388b15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_parent_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a1c37f2f1a317fdd0d198c3d6ad2d35c4" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_reconstruct</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ab565b1e56509babb16ea5525ed4a3ebf" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a404f0e26b0e8c29335a13133ec5b2d7b" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_function</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ac398852c9ac167f1e922d98f91d1ec01" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_instrusive</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a837a521991fb741610de1c5847576f7f" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serialize_noninstrusive</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4785b7f54369ec889ac5a25a8256a578" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serializeParent</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1adc99520813c22cf61ab70ba2fea3cdc6" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_serializeThis</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a79d952745fde047cca2c221c5db1c221" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_split_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3388d17f4748bf899e063b3d05e0dbe4" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_tagged_constructor</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4cffc082900896781bb6a9d3e9aa91df" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>has_this_serialize</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aeffbf834f99665626f91e511145a19ba" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_bytecopyable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1aba6a71b6ec368dfddf66385dbc3e2f31" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1af4fd4725b2fbcf8948d667040a2d365d" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_default_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a42e4be78b19a646b214c02cac1c3d962" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_intrusive_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a6bc5927c8686c7f66ab6d4cd15782d15" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_nonintrusive_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1af117da0901a9359e0032b633f27f16c0" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_reconstructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a53aa8e541439d66d9c42ca4f31f6e9f7" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_serializable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a4e4f340db88ec3c6649ea5b36bf53710" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_tagged_constructible</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a7c2f8732d58b3dd59130a157f09926ad" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>is_traversable</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1abe5231bdf561e55fd9e0673e42a8a96c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>nonintrustive_reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a3284d2cfd29cfe429d5cf76186d3fe3c" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>nonintrustive_serialize_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a9f161977ecf1aed8a4ccd5d63768399a" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>reconstruct_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serialize_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a38585e5b9aa0653c08ff48504e922ad5" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serializeParent_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1ac81eb64532a65d97dc995e582ef708ad" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>serializeThis_t</name></member>
      <member refid="structcheckpoint_1_1_serializable_traits_1a5a1f289a5008468335f22e288a96d861" prot="public" virt="non-virtual"><scope>checkpoint::SerializableTraits</scope><name>tagged_constructor_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
