<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structcheckpoint_1_1_packer_buffer" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::PackerBuffer</compoundname>
    <basecompoundref refid="structcheckpoint_1_1_memory_serializer" prot="public" virt="non-virtual">checkpoint::MemorySerializer</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename BufferT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" prot="public" static="no">
        <type>std::unique_ptr&lt; BufferT &gt;</type>
        <definition>using checkpoint::PackerBuffer&lt; BufferT &gt;::BufferTPtrType =  std::unique_ptr&lt;BufferT&gt;</definition>
        <argsstring></argsstring>
        <name>BufferTPtrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="58" column="3" bodyfile="src/checkpoint/serializers/packer.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1_packer_buffer_1ad7b75618e01af437ab75a4099c2cf696" prot="public" static="no">
        <type>std::tuple&lt; BufferTPtrType, SerialSizeType &gt;</type>
        <definition>using checkpoint::PackerBuffer&lt; BufferT &gt;::PackerReturnType =  std::tuple&lt;BufferTPtrType, SerialSizeType&gt;</definition>
        <argsstring></argsstring>
        <name>PackerReturnType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="59" column="3" bodyfile="src/checkpoint/serializers/packer.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structcheckpoint_1_1_packer_buffer_1a813e68f302e473e93df5f15e01c2783c" prot="private" static="no" mutable="no">
        <type>const SerialSizeType</type>
        <definition>const SerialSizeType checkpoint::PackerBuffer&lt; BufferT &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="73" column="24" bodyfile="src/checkpoint/serializers/packer.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_packer_buffer_1ae20a1bc8f41e3af7e5b8ee3951f31353" prot="private" static="no" mutable="no">
        <type>SerialSizeType</type>
        <definition>SerialSizeType checkpoint::PackerBuffer&lt; BufferT &gt;::usedSize_</definition>
        <argsstring></argsstring>
        <name>usedSize_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="76" column="18" bodyfile="src/checkpoint/serializers/packer.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcheckpoint_1_1_packer_buffer_1ab07bd403ce6f2e644ff92532f9e363cb" prot="private" static="no" mutable="no">
        <type>BufferTPtrType</type>
        <definition>BufferTPtrType checkpoint::PackerBuffer&lt; BufferT &gt;::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="79" column="18" bodyfile="src/checkpoint/serializers/packer.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1abd97aedeba81d8570fa047f3efb4220d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>checkpoint::PackerBuffer&lt; BufferT &gt;::PackerBuffer</definition>
        <argsstring>(SerialSizeType const &amp;in_size)</argsstring>
        <name>PackerBuffer</name>
        <param>
          <type>SerialSizeType const &amp;</type>
          <declname>in_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="61" column="12" bodyfile="src/checkpoint/serializers/packer.impl.h" bodystart="56" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1a4bdbbf8f84eb065c5c0b02d39a480308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>checkpoint::PackerBuffer&lt; BufferT &gt;::PackerBuffer</definition>
        <argsstring>(SerialSizeType const &amp;in_size, BufferTPtrType buf_ptr)</argsstring>
        <name>PackerBuffer</name>
        <param>
          <type>SerialSizeType const &amp;</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type>BufferTPtrType</type>
          <declname>buf_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="62" column="3" bodyfile="src/checkpoint/serializers/packer.impl.h" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1aded90d4aacc6376a95579d249751496d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>checkpoint::PackerBuffer&lt; BufferT &gt;::PackerBuffer</definition>
        <argsstring>(SerialSizeType const &amp;in_size, Args &amp;&amp;... args)</argsstring>
        <name>PackerBuffer</name>
        <param>
          <type>SerialSizeType const &amp;</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="65" column="12" bodyfile="src/checkpoint/serializers/packer.impl.h" bodystart="88" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1aa8bf2d721f834a607a48164086aec078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkpoint::PackerBuffer&lt; BufferT &gt;::contiguousBytes</definition>
        <argsstring>(void *ptr, SerialSizeType size, SerialSizeType num_elms)</argsstring>
        <name>contiguousBytes</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>size</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num_elms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="67" column="8" bodyfile="src/checkpoint/serializers/packer.impl.h" bodystart="113" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1abc144f3a5d61a7eb886bd57241e7ed7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BufferTPtrType</type>
        <definition>PackerBuffer&lt; BufferT &gt;::BufferTPtrType checkpoint::PackerBuffer&lt; BufferT &gt;::extractPackedBuffer</definition>
        <argsstring>()</argsstring>
        <name>extractPackedBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="68" column="18" bodyfile="src/checkpoint/serializers/packer.impl.h" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1_packer_buffer_1a15b3ac40c21710da2f9813579c9a9c0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SerialSizeType</type>
        <definition>SerialSizeType checkpoint::PackerBuffer&lt; BufferT &gt;::usedBufferSize</definition>
        <argsstring>() const</argsstring>
        <name>usedBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/serializers/packer.h" line="69" column="18" bodyfile="src/checkpoint/serializers/packer.impl.h" bodystart="136" bodyend="138"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>checkpoint::BaseSerializer</label>
        <link refid="structcheckpoint_1_1_base_serializer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>checkpoint::PackerBuffer&lt; BufferT &gt;</label>
        <link refid="structcheckpoint_1_1_packer_buffer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>checkpoint::MemorySerializer</label>
        <link refid="structcheckpoint_1_1_memory_serializer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>checkpoint::BaseSerializer</label>
        <link refid="structcheckpoint_1_1_base_serializer"/>
      </node>
    </collaborationgraph>
    <location file="src/checkpoint/serializers/packer.h" line="57" column="36" bodyfile="src/checkpoint/serializers/packer.h" bodystart="57" bodyend="80"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_base_serializer_1a9c9d32a50074084f78f7c5e049227f25" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>addBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a54ef6d9ab0a03d637822dcdacd146763" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>BaseSerializer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1ab07bd403ce6f2e644ff92532f9e363cb" prot="private" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>buffer_</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1a081ec628050e8b173e413271fa070c26" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>BufferTPtrType</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1aa8bf2d721f834a607a48164086aec078" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>contiguousBytes</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a7a18f4ba50fcfd8b37c8a6efc459ccde" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>contiguousTyped</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a70ac6f61c442ade1a0179e353f866333" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>countBytes</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1ab1f121effff21997447187346bbd8237" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>cur_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a1755296c5fbd3cdc5df3390d20c80fae" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>cur_mode_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a6e98a837a89de1750749e4ef8742489c" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>DispatcherType</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1abc144f3a5d61a7eb886bd57241e7ed7e" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>extractPackedBuffer</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a075fce46e6d6bcfef43591cf26498d70" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>getBuffer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ad9a3bf9aa8081b6efdf8a45ba92ef641" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>getMode</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a1c6b21009223b371ec79d679448f8319" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>getSpotIncrement</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a449eb24e2136febd621983d26e21a4ed" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>initializeBuffer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a76960f01f04457bca6a40d91d2c4b486" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isFootprinting</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a1a91b7c0fc85cbd31356791bbf288b0e" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isPacking</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a2d28600a09495b5b9d9b90ae27caa708" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isSizing</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a36efbc9aa78bd2d4b017ac40dacfe9b7" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isUnpacking</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a5325585631201d413d7992e8916d6f57" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>isVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a9c748be7a41c032f2a33fbdc0dbd3611" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>MemorySerializer</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1ae1532a75ce6849ad1f1ceb7a379e56da" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>MemorySerializer</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1aaa856a02f204d9c3892810b87671b3e9" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>ModeType</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1abd97aedeba81d8570fa047f3efb4220d" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1a4bdbbf8f84eb065c5c0b02d39a480308" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1aded90d4aacc6376a95579d249751496d" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerBuffer</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1ad7b75618e01af437ab75a4099c2cf696" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>PackerReturnType</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1ab16e2ffa62f03f8410b116c637bd4adc" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>setVirtualDisabled</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1a813e68f302e473e93df5f15e01c2783c" prot="private" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>size_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a7e3575fbbd4bf5bc39d8efb67c014e07" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>skip</name></member>
      <member refid="structcheckpoint_1_1_memory_serializer_1a6285e7e9821a996f6da9f2e6e59b00c2" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>start_</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1a15b3ac40c21710da2f9813579c9a9c0e" prot="public" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1a6ccb8bb1430ac5665aac995b6330bc8a" prot="public" virt="non-virtual" ambiguityscope="checkpoint::MemorySerializer::"><scope>checkpoint::PackerBuffer</scope><name>usedBufferSize</name></member>
      <member refid="structcheckpoint_1_1_packer_buffer_1ae20a1bc8f41e3af7e5b8ee3951f31353" prot="private" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>usedSize_</name></member>
      <member refid="structcheckpoint_1_1_base_serializer_1acdffc3101eb51baafe4a13939ba23e70" prot="protected" virt="non-virtual"><scope>checkpoint::PackerBuffer</scope><name>virtual_disabled_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
