<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="serializable__traits_8h" kind="file" language="C++">
    <compoundname>serializable_traits.h</compoundname>
    <includes refid="common_8h" local="yes">checkpoint/common.h</includes>
    <includes refid="serializers__headers_8h" local="yes">checkpoint/serializers/serializers_headers.h</includes>
    <includes refid="reconstructor__tag_8h" local="yes">checkpoint/dispatch/reconstructor_tag.h</includes>
    <includes local="yes">detector_headers.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cassert</includes>
    <includedby refid="checkpoint_8h" local="yes">src/checkpoint/checkpoint.h</includedby>
    <includedby refid="dispatch__serializer_8h" local="yes">src/checkpoint/dispatch/dispatch_serializer.h</includedby>
    <includedby refid="dispatch__serializer__byte_8h" local="yes">src/checkpoint/dispatch/dispatch_serializer_byte.h</includedby>
    <includedby refid="dispatch__serializer__nonbyte_8h" local="yes">src/checkpoint/dispatch/dispatch_serializer_nonbyte.h</includedby>
    <includedby refid="reconstructor__traits_8h" local="yes">src/checkpoint/traits/reconstructor_traits.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>checkpoint/serializers/base_serializer.h</label>
        <link refid="base__serializer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>functional</label>
      </node>
      <node id="24">
        <label>checkpoint/serializers/packer.impl.h</label>
        <link refid="packer_8impl_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>checkpoint/cmake_config.h</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="28">
        <label>checkpoint/dispatch/reconstructor_tag.h</label>
        <link refid="reconstructor__tag_8h_source"/>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="27">
        <label>checkpoint/serializers/unpacker.impl.h</label>
        <link refid="unpacker_8impl_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>checkpoint/buffer/buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>checkpoint/serializers/serializers_headers.h</label>
        <link refid="serializers__headers_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdio</label>
      </node>
      <node id="17">
        <label>checkpoint/checkpoint_api.h</label>
        <link refid="checkpoint__api_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>checkpoint/buffer/user_buffer.h</label>
        <link refid="user__buffer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>checkpoint/serializers/memory_serializer.h</label>
        <link refid="memory__serializer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>checkpoint/serializers/footprinter.h</label>
        <link refid="footprinter_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="26">
        <label>checkpoint/serializers/unpacker.h</label>
        <link refid="unpacker_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>detector_headers.h</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="1">
        <label>src/checkpoint/traits/serializable_traits.h</label>
        <link refid="serializable__traits_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>checkpoint/common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>checkpoint/serializers/packer.h</label>
        <link refid="packer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cstring</label>
      </node>
      <node id="22">
        <label>checkpoint/buffer/io_buffer.h</label>
        <link refid="io__buffer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="20">
        <label>checkpoint/buffer/managed_buffer.h</label>
        <link refid="managed__buffer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>checkpoint/serializers/sizer.h</label>
        <link refid="sizer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>src/checkpoint/dispatch/allocator.h</label>
        <link refid="allocator_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/checkpoint/dispatch/vrt/base.h</label>
        <link refid="base_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>src/checkpoint/dispatch/vrt/derived.h</label>
        <link refid="derived_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/checkpoint/container/kokkos_complex_serialize.h</label>
        <link refid="kokkos__complex__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/checkpoint/container/kokkos_unordered_map_serialize.h</label>
        <link refid="kokkos__unordered__map__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/checkpoint/checkpoint.h</label>
        <link refid="checkpoint_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>src/checkpoint/traits/reconstructor_traits.h</label>
        <link refid="reconstructor__traits_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>src/checkpoint/dispatch/vrt/virtual_serialize.h</label>
        <link refid="virtual__serialize_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/checkpoint/dispatch/reconstructor.h</label>
        <link refid="reconstructor_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/checkpoint/dispatch/vrt/object_registry.h</label>
        <link refid="object__registry_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/checkpoint/container/list_serialize.h</label>
        <link refid="list__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/checkpoint/container/map_serialize.h</label>
        <link refid="map__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/checkpoint/container/unique_ptr_serialize.h</label>
        <link refid="unique__ptr__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/checkpoint/dispatch/dispatch_virtual.h</label>
        <link refid="dispatch__virtual_8h_source"/>
      </node>
      <node id="13">
        <label>src/checkpoint/dispatch/dispatch.impl.h</label>
        <link refid="dispatch_8impl_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/checkpoint/traits/serializable_traits.h</label>
        <link refid="serializable__traits_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/checkpoint/checkpoint_api.impl.h</label>
        <link refid="checkpoint__api_8impl_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/checkpoint/dispatch/dispatch_serializer_byte.h</label>
        <link refid="dispatch__serializer__byte_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/checkpoint/dispatch/dispatch.h</label>
        <link refid="dispatch_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/checkpoint/dispatch/dispatch_serializer_nonbyte.h</label>
        <link refid="dispatch__serializer__nonbyte_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/checkpoint/container/kokkos_pair_serialize.h</label>
        <link refid="kokkos__pair__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/checkpoint/dispatch/dispatch_serializer.h</label>
        <link refid="dispatch__serializer_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/checkpoint/container/vector_serialize.h</label>
        <link refid="vector__serialize_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcheckpoint_1_1_serdes_byte_copy" prot="public">checkpoint::SerdesByteCopy</innerclass>
    <innerclass refid="structcheckpoint_1_1detail_1_1is_byte_copyable_impl" prot="public">checkpoint::detail::isByteCopyableImpl</innerclass>
    <innerclass refid="structcheckpoint_1_1is_byte_copyable" prot="public">checkpoint::isByteCopyable</innerclass>
    <innerclass refid="structcheckpoint_1_1_serializable_traits" prot="public">checkpoint::SerializableTraits</innerclass>
    <innernamespace refid="namespacecheckpoint">checkpoint</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1detail">checkpoint::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="serializable__traits_8h_1a6254f2e220f905a2b0c797c08092a7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::reconstruct</definition>
        <argsstring>(T)</argsstring>
        <name>reconstruct</name>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/traits/serializable_traits.h" line="64" column="6" bodyfile="src/checkpoint/traits/serializable_traits.h" bodystart="64" bodyend="64"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serializable_traits.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/checkpoint<sp/>=&gt;<sp/>Serialization<sp/>Library</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_CHECKPOINT_TRAITS_SERIALIZABLE_TRAITS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_CHECKPOINT_TRAITS_SERIALIZABLE_TRAITS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;checkpoint/common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;checkpoint/serializers/serializers_headers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;checkpoint/dispatch/reconstructor_tag.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;detector_headers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>Start<sp/>the<sp/>traits<sp/>class<sp/>with<sp/>all<sp/>the<sp/>archetypes<sp/>that<sp/>can<sp/>be<sp/>detected<sp/>for</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>serialization</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">checkpoint<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reconstruct(T)<sp/>{<sp/>checkpointAssert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>code<sp/>should<sp/>be<sp/>unreachable&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structcheckpoint_1_1_serdes_byte_copy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1_serdes_byte_copy" kindref="compound">SerdesByteCopy</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>isByteCopyable<sp/>=<sp/>std::true_type;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="72" refid="structcheckpoint_1_1detail_1_1is_byte_copyable_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1detail_1_1is_byte_copyable_impl" kindref="compound">isByteCopyableImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>byteCopyTrait_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U::isByteCopyable;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_byteCopyTraitTrue<sp/>=<sp/>detection::is_detected_convertible&lt;std::true_type,<sp/>byteCopyTrait_t,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="80" refid="structcheckpoint_1_1is_byte_copyable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1is_byte_copyable" kindref="compound">isByteCopyable</ref><sp/>:<sp/><ref refid="structcheckpoint_1_1detail_1_1is_byte_copyable_impl" kindref="compound">detail::isByteCopyableImpl</ref>&lt;T&gt;::has_byteCopyTraitTrue<sp/>{};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>checkpo</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">::Serializer&gt;</highlight></codeline>
<codeline lineno="83" refid="structcheckpoint_1_1_serializable_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1_serializable_traits" kindref="compound">SerializableTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Regular<sp/>serialize<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" kindref="member">serialize_t</ref><sp/>=<sp/>decltype(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::declval&lt;U&gt;().serialize(std::declval&lt;V&amp;&gt;())</highlight></codeline>
<codeline lineno="97" refid="structcheckpoint_1_1_serializable_traits_1a416ff19cd1038279ace5cb49e3a9fb7d" refkind="member"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_serialize<sp/>=<sp/>detection::is_detected&lt;serialize_t,<sp/>T,<sp/>S&gt;;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>nonintrustive_serialize_t<sp/>=<sp/>decltype(serialize(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::declval&lt;V&amp;&gt;(),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::declval&lt;U&amp;&gt;()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_nonintrustive_serialize<sp/>=</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>detection::is_detected&lt;nonintrustive_serialize_t,<sp/>T,<sp/>S&gt;;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize{Parent,This}<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>serializeParent_t<sp/>=</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(std::declval&lt;U&gt;().serializeParent(std::declval&lt;V&amp;&gt;()));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_serializeParent<sp/>=<sp/>detection::is_detected&lt;serializeParent_t,<sp/>T,<sp/>S&gt;;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>serializeThis_t<sp/>=</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(std::declval&lt;U&gt;().serializeThis(std::declval&lt;V&amp;&gt;()));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_serializeThis<sp/>=<sp/>detection::is_detected&lt;serializeThis_t,<sp/>T,<sp/>S&gt;;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>have<sp/>an<sp/>intrusive<sp/>serialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>has_serialize_instrusive<sp/>=<sp/>has_serialize::value;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>have<sp/>a<sp/>non-intrusive<sp/>serialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>has_serialize_noninstrusive<sp/>=</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>has_nonintrustive_serialize::value;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>have<sp/>some<sp/>type<sp/>of<sp/>serialize<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>has_serialize_function<sp/>=</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>has_serialize_instrusive<sp/>or<sp/>has_serialize_noninstrusive;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>have<sp/>parent<sp/>serializability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>has_parent_serialize<sp/>=<sp/>has_serializeParent::value;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>have<sp/>&quot;this&quot;<sp/>serializability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>has_this_serialize<sp/>=<sp/>has_serializeThis::value;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>have<sp/>both<sp/>parent<sp/>and<sp/>&quot;this&quot;<sp/>serializability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>has_split_serialize<sp/>=</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>has_parent_serialize<sp/>and<sp/>has_this_serialize;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structcheckpoint_1_1_serializable_traits_1a8e42305be1264b105f525ae7dff36c15" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1is_byte_copyable" kindref="compound">has_byteCopyTraitTrue</ref><sp/>=<sp/><ref refid="structcheckpoint_1_1is_byte_copyable" kindref="compound">isByteCopyable&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_isArith<sp/>=<sp/>std::is_arithmetic&lt;U&gt;;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>be<sp/>serializable<sp/>without<sp/>a<sp/>serialize<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_bytecopyable<sp/>=</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>has_byteCopyTraitTrue::value<sp/>or<sp/>has_isArith&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="158" refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializable_traits_1aa0430155930461d346b90681db234d84" kindref="member">constructor_t</ref><sp/>=<sp/>decltype(U());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_default_constructor<sp/>=<sp/>detection::is_detected&lt;constructor_t,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tagged_constructor_t<sp/>=<sp/>decltype(U(std::declval&lt;SERIALIZE_CONSTRUCT_TAG&gt;()));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_tagged_constructor<sp/>=<sp/>detection::is_detected&lt;tagged_constructor_t,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reconstruct_t<sp/>=<sp/>decltype(U::reconstruct(std::declval&lt;void*&gt;()));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_reconstruct<sp/>=<sp/>detection::is_detected_exact&lt;T&amp;,<sp/>reconstruct_t,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>nonintrustive_reconstruct_t<sp/>=<sp/>decltype(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>reconstruct(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;U*&amp;&gt;(),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;void*&gt;()</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_nonintrusive_reconstruct<sp/>=</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>detection::is_detected&lt;nonintrustive_reconstruct_t,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>be<sp/>default<sp/>constructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_default_constructible<sp/>=</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>has_default_constructor::value;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>class<sp/>has<sp/>tagged<sp/>constructor<sp/>especially<sp/>for<sp/>constructing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_tagged_constructible<sp/>=</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>has_tagged_constructor::value;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>be<sp/>intrusively<sp/>reconstructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_intrusive_reconstructible<sp/>=<sp/>has_reconstruct::value;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>be<sp/>non-intrusively<sp/>reconstructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_nonintrusive_reconstructible<sp/>=</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>has_nonintrusive_reconstruct::value<sp/></highlight><highlight class="comment">/*and<sp/>not<sp/>has_reconstruct::value*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>it<sp/>means<sp/>to<sp/>be<sp/>reconstructible<sp/>in<sp/>general</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_reconstructible<sp/>=</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>has_nonintrusive_reconstruct::value<sp/>or<sp/>has_reconstruct::value;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>defines<sp/>what<sp/>is<sp/>means<sp/>to<sp/>be<sp/>generally<sp/>constructible<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>de-serialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_constructible<sp/>=</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>is_default_constructible<sp/>or<sp/>is_reconstructible<sp/>or<sp/>is_tagged_constructible;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="structcheckpoint_1_1_serializable_traits_1a53aa8e541439d66d9c42ca4f31f6e9f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcheckpoint_1_1_serializable_traits_1a53aa8e541439d66d9c42ca4f31f6e9f7" kindref="member">is_serializable</ref><sp/>=</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>has_serialize_function<sp/>and<sp/>is_constructible;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>is_traversable<sp/>=</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>has_serialize_function<sp/>or<sp/>is_bytecopyable;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>checkpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_CHECKPOINT_TRAITS_SERIALIZABLE_TRAITS_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/checkpoint/traits/serializable_traits.h"/>
  </compounddef>
</doxygen>
