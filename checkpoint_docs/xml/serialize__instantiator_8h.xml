<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="serialize__instantiator_8h" kind="file" language="C++">
    <compoundname>serialize_instantiator.h</compoundname>
    <includes refid="serializer__registry_8h" local="yes">checkpoint/dispatch/vrt/serializer_registry.h</includes>
    <includes refid="link__derived__to__base__idx_8h" local="yes">checkpoint/dispatch/vrt/link_derived_to_base_idx.h</includes>
    <includedby refid="base_8h" local="yes">src/checkpoint/dispatch/vrt/base.h</includedby>
    <includedby refid="derived_8h" local="yes">src/checkpoint/dispatch/vrt/derived.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>checkpoint/dispatch/vrt/serializer_registry.h</label>
        <link refid="serializer__registry_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="4">
        <label>checkpoint/cmake_config.h</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>checkpoint/dispatch/vrt/registry_common.h</label>
        <link refid="registry__common_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstdio</label>
      </node>
      <node id="14">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="15">
        <label>checkpoint/dispatch/vrt/link_derived_to_base_idx.h</label>
        <link refid="link__derived__to__base__idx_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="1">
        <label>src/checkpoint/dispatch/vrt/serialize_instantiator.h</label>
        <link refid="serialize__instantiator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>checkpoint/common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/checkpoint/dispatch/vrt/base.h</label>
        <link refid="base_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>src/checkpoint/dispatch/vrt/derived.h</label>
        <link refid="derived_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/checkpoint/checkpoint.h</label>
        <link refid="checkpoint_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/checkpoint/dispatch/vrt/virtual_serialize.h</label>
        <link refid="virtual__serialize_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/checkpoint/container/unique_ptr_serialize.h</label>
        <link refid="unique__ptr__serialize_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/checkpoint/dispatch/dispatch_virtual.h</label>
        <link refid="dispatch__virtual_8h_source"/>
      </node>
      <node id="1">
        <label>src/checkpoint/dispatch/vrt/serialize_instantiator.h</label>
        <link refid="serialize__instantiator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/checkpoint/dispatch/dispatch.impl.h</label>
        <link refid="dispatch_8impl_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/checkpoint/checkpoint_api.impl.h</label>
        <link refid="checkpoint__api_8impl_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/checkpoint/dispatch/dispatch_serializer_byte.h</label>
        <link refid="dispatch__serializer__byte_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/checkpoint/dispatch/dispatch.h</label>
        <link refid="dispatch_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/checkpoint/dispatch/dispatch_serializer_nonbyte.h</label>
        <link refid="dispatch__serializer__nonbyte_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/checkpoint/dispatch/dispatch_serializer.h</label>
        <link refid="dispatch__serializer_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" prot="public">checkpoint::dispatch::vrt::InstantiateIfPossible</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible_3_01_obj_t_00_01_serializer_t_001f08bb798ccb49f9c53f303cf6b979fb" prot="public">checkpoint::dispatch::vrt::InstantiateIfPossible&lt; ObjT, SerializerT, typename std::enable_if_t&lt; SerializableTraits&lt; ObjT, SerializerT &gt;::has_serialize_function or SerializableTraits&lt; ObjT, SerializerT &gt;::is_bytecopyable &gt;&gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible_3_01_obj_t_00_01_serializer_t_004e0f4f52ca81416658a563b81b03387d" prot="public">checkpoint::dispatch::vrt::InstantiateIfPossible&lt; ObjT, SerializerT, typename std::enable_if_t&lt; not(SerializableTraits&lt; ObjT, SerializerT &gt;::has_serialize_function or SerializableTraits&lt; ObjT, SerializerT &gt;::is_bytecopyable) &gt;&gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" prot="public">checkpoint::dispatch::vrt::InstantiateTupleHelper</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper_3_01_obj_t_00_01_t_00_01_ts_8_8_8_01_4" prot="public">checkpoint::dispatch::vrt::InstantiateTupleHelper&lt; ObjT, T, Ts... &gt;</innerclass>
    <innerclass refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper_3_01_obj_t_01_4" prot="public">checkpoint::dispatch::vrt::InstantiateTupleHelper&lt; ObjT &gt;</innerclass>
    <innernamespace refid="namespacecheckpoint">checkpoint</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1dispatch">checkpoint::dispatch</innernamespace>
    <innernamespace refid="namespacecheckpoint_1_1dispatch_1_1vrt">checkpoint::dispatch::vrt</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="serialize__instantiator_8h_1ab865abca98caddc6e77329fa227fba6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
          <param>
            <type>typename SerializerT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void checkpoint::dispatch::vrt::instantiateObjSerializerImpl</definition>
        <argsstring>()</argsstring>
        <name>instantiateObjSerializerImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/vrt/serialize_instantiator.h" line="95" column="20" bodyfile="src/checkpoint/dispatch/vrt/serialize_instantiator.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="serialize__instantiator_8h_1a09875c2d3c012be868f3fd88b3ed55be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ObjT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>SerializerTs</declname>
            <defname>SerializerTs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::instantiateObjSerializer</definition>
        <argsstring>()</argsstring>
        <name>instantiateObjSerializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/vrt/serialize_instantiator.h" line="122" column="13" bodyfile="src/checkpoint/dispatch/vrt/serialize_instantiator.h" bodystart="122" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serialize_instantiator.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/checkpoint<sp/>=&gt;<sp/>Serialization<sp/>Library</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_CHECKPOINT_DISPATCH_VRT_SERIALIZE_INSTANTIATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_CHECKPOINT_DISPATCH_VRT_SERIALIZE_INSTANTIATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;checkpoint/dispatch/vrt/serializer_registry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;checkpoint/dispatch/vrt/link_derived_to_base_idx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">checkpoint<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dispatch<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vrt<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="53" refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" kindref="compound">InstantiateIfPossible</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline lineno="56" refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible_3_01_obj_t_00_01_serializer_t_001f08bb798ccb49f9c53f303cf6b979fb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" kindref="compound">InstantiateIfPossible</ref>&lt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ObjT,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>SerializerT,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>typename<sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>SerializableTraits&lt;ObjT,<sp/>SerializerT&gt;::has_serialize_function<sp/>or</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>SerializableTraits&lt;ObjT,<sp/>SerializerT&gt;::is_bytecopyable</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerIt()<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>dispatch::vrt::serializer_registry::makeObjIdx&lt;ObjT,<sp/>SerializerT&gt;();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>\c<sp/>SerializerT<sp/>static<sp/>registrations<sp/>order<sp/>happen<sp/>differently<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>\c<sp/>BaseT<sp/>and<sp/>\c<sp/>DerviedT<sp/>,<sp/>you<sp/>will<sp/>get<sp/>the<sp/>wrong<sp/>serializer<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>base_idx<sp/>in<sp/>the<sp/>derived<sp/>class.<sp/>Thus,<sp/>link<sp/>the<sp/>correct<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>type<sp/>idx<sp/>with<sp/>a<sp/>given<sp/>derived<sp/>type<sp/>idx<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sizing/packing.<sp/>Then,<sp/>when<sp/>it<sp/>unpacks,<sp/>it<sp/>can<sp/>find<sp/>the<sp/>right<sp/>one<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>on<sp/>the<sp/>derived<sp/>type<sp/>using<sp/>the<sp/>base<sp/>idx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>BaseType<sp/>=<sp/>typename<sp/>ObjT::_CheckpointVirtualSerializerBaseType;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>linkDerivedToBase&lt;SerializerT,<sp/>ObjT,<sp/>BaseType&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>BaseType<sp/>=<sp/>::checkpoint::dispatch::vrt::checkpoint_base_type_t&lt;ObjT&gt;;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>linkDerivedToBase&lt;SerializerT,<sp/>ObjT,<sp/>BaseType&gt;();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline lineno="81" refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible_3_01_obj_t_00_01_serializer_t_004e0f4f52ca81416658a563b81b03387d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" kindref="compound">InstantiateIfPossible</ref>&lt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ObjT,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>SerializerT,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>typename<sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>not<sp/>(SerializableTraits&lt;ObjT,<sp/>SerializerT&gt;::has_serialize_function<sp/>or</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SerializableTraits&lt;ObjT,<sp/>SerializerT&gt;::is_bytecopyable)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerIt()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing;<sp/>this<sp/>object<sp/>is<sp/>not<sp/>compatible<sp/>with<sp/>this<sp/>serializer!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>instantiateObjSerializerImpl()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_if_possible" kindref="compound">InstantiateIfPossible&lt;ObjT, SerializerT&gt;::registerIt</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="100" refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" kindref="compound">InstantiateTupleHelper</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="103" refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper_3_01_obj_t_00_01_t_00_01_ts_8_8_8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" kindref="compound">InstantiateTupleHelper</ref>&lt;ObjT,<sp/>T,<sp/>Ts...&gt;<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_recur_register()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>instantiateObjSerializerImpl&lt;ObjT,<sp/>T&gt;();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" kindref="compound">InstantiateTupleHelper&lt;ObjT, Ts...&gt;::_recur_register</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT&gt;</highlight></codeline>
<codeline lineno="111" refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper_3_01_obj_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_instantiate_tuple_helper" kindref="compound">InstantiateTupleHelper</ref>&lt;ObjT&gt;<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_recur_register()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recursion<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>checkpoint::dispatch::vrt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">checkpoint<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>SerializerTs&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>instantiateObjSerializer()<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>dispatch::vrt::InstantiateTupleHelper&lt;ObjT,<sp/>SerializerTs...&gt;::_recur_register();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>checkpoint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_CHECKPOINT_DISPATCH_VRT_SERIALIZE_INSTANTIATOR_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/checkpoint/dispatch/vrt/serialize_instantiator.h"/>
  </compounddef>
</doxygen>
