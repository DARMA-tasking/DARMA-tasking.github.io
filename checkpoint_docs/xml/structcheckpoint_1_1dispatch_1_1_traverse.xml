<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structcheckpoint_1_1dispatch_1_1_traverse" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::dispatch::Traverse</compoundname>
    <includes refid="dispatch_8h" local="no">dispatch.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_traverse_1a179ea8a80a3cf9a50091b70da785eb83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TraverserT</type>
          </param>
        </templateparamlist>
        <type>TraverserT &amp;</type>
        <definition>TraverserT &amp; checkpoint::dispatch::Traverse::with</definition>
        <argsstring>(T &amp;target, TraverserT &amp;t, SerialSizeType len=1)</argsstring>
        <name>with</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>TraverserT &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para><ref refid="structcheckpoint_1_1dispatch_1_1_traverse" kindref="compound">Traverse</ref> a <computeroutput>target</computeroutput> of type <computeroutput>T</computeroutput> recursively with a general <computeroutput>TraverserT</computeroutput> that gets applied to each element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target to traverse </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">t</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the traverser </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>the len of the target. If &gt; 1, <computeroutput>target</computeroutput> is an array</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the traverser after traversal is complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch.h" line="91" column="21" bodyfile="src/checkpoint/dispatch/dispatch.impl.h" bodystart="110" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_traverse_1a52e345aa5da6b8d7866a15993356788c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TraverserT</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>TraverserT</type>
        <definition>TraverserT checkpoint::dispatch::Traverse::with</definition>
        <argsstring>(T &amp;target, Args &amp;&amp;... args)</argsstring>
        <name>with</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para><ref refid="structcheckpoint_1_1dispatch_1_1_traverse" kindref="compound">Traverse</ref> a <computeroutput>target</computeroutput> of type <computeroutput>T</computeroutput> recursively after constructing a <computeroutput>TraverserT</computeroutput> from <computeroutput>args</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target to traverse </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>the args to pass to the traverser for construction</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the constructed traverser after traversal is complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch.h" line="103" column="21" bodyfile="src/checkpoint/dispatch/dispatch.impl.h" bodystart="139" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_traverse_1ad043c9e132aeb99049d0d3ff8df6b876" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * checkpoint::dispatch::Traverse::reconstruct</definition>
        <argsstring>(SerialByteType *mem)</argsstring>
        <name>reconstruct</name>
        <param>
          <type>SerialByteType *</type>
          <declname>mem</declname>
        </param>
        <briefdescription>
<para>Reconstruct in place a <computeroutput>T</computeroutput> on allocated memory <computeroutput>mem</computeroutput>. The buffer <computeroutput>mem</computeroutput> must contain enough memory to hold <computeroutput>sizeof(T)</computeroutput>. This calls the reconstruction strategy based on trait detection which will detect the user&apos;s method of reconstructing the class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mem</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory to in-place construct on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch.h" line="116" column="12" bodyfile="src/checkpoint/dispatch/dispatch.impl.h" bodystart="181" bodyend="183"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structcheckpoint_1_1dispatch_1_1_traverse" kindref="compound">Traverse</ref> a target recursively<computeroutput>T</computeroutput> with a traverser object (typically inheriting from <computeroutput><ref refid="structcheckpoint_1_1_serializer" kindref="compound">Serializer</ref></computeroutput>). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/checkpoint/dispatch/dispatch.h" line="78" column="15" bodyfile="src/checkpoint/dispatch/dispatch.h" bodystart="78" bodyend="118"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1dispatch_1_1_traverse_1ad043c9e132aeb99049d0d3ff8df6b876" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Traverse</scope><name>reconstruct</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_traverse_1a179ea8a80a3cf9a50091b70da785eb83" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Traverse</scope><name>with</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_traverse_1a52e345aa5da6b8d7866a15993356788c" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::Traverse</scope><name>with</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
