<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::dispatch::SerializerDispatchNonByte</compoundname>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>SerializerT</declname>
        <defname>SerializerT</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Dispatcher</declname>
        <defname>Dispatcher</defname>
        <defval><ref refid="structcheckpoint_1_1dispatch_1_1_basic_dispatcher" kindref="compound">BasicDispatcher</ref>&lt;SerializerT, T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a456d0c02fc35667989d79ddbb0393776" prot="public" static="no">
        <type>SerializerT</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::S =  SerializerT</definition>
        <argsstring></argsstring>
        <name>S</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="76" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a36fe4f2245004d2daa486a9e47b98b71" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; <ref refid="structcheckpoint_1_1_serializable_traits" kindref="compound">SerializableTraits</ref>&lt; U, S &gt;::has_split_serialize, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::hasSplitSerialize =  typename std::enable_if&lt;SerializableTraits&lt;U,S&gt;::has_split_serialize, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>hasSplitSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="85" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a596c2f6081cc55d5ff0b7486f50b227b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt;!<ref refid="structcheckpoint_1_1_serializable_traits" kindref="compound">SerializableTraits</ref>&lt; U, S &gt;::has_split_serialize &amp;&amp;!std::is_enum&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::hasNotSplitSerialize =  typename std::enable_if&lt;!SerializableTraits&lt;U,S&gt;::has_split_serialize &amp;&amp; !std::is_enum&lt;U&gt;::value, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>hasNotSplitSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="89" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1aee0190efdd8f0239a09883a9f59a4dd1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; <ref refid="structcheckpoint_1_1_serializable_traits" kindref="compound">SerializableTraits</ref>&lt; U, S &gt;::has_serialize_instrusive, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::hasInSerialize =  typename std::enable_if&lt;SerializableTraits&lt;U,S&gt;::has_serialize_instrusive, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>hasInSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="93" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1aee9d815f18b48855fefbecbbbf60436b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; <ref refid="structcheckpoint_1_1_serializable_traits" kindref="compound">SerializableTraits</ref>&lt; U, S &gt;::has_serialize_noninstrusive, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::hasNoninSerialize =  typename std::enable_if&lt;SerializableTraits&lt;U,S&gt;::has_serialize_noninstrusive, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>hasNoninSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="97" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a51b98addaa52e3e576c48c150aa66583" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; <ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_virtual_serialize_traits" kindref="compound">vrt::VirtualSerializeTraits</ref>&lt; U &gt;::has_virtual_serialize, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::hasVirtualSerialize =  typename std::enable_if&lt;vrt::VirtualSerializeTraits&lt;U&gt;::has_virtual_serialize, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>hasVirtualSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="101" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1aa9c0d5e9e139a9d922b1ce4adf339465" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; <ref refid="structcheckpoint_1_1dispatch_1_1vrt_1_1_virtual_serialize_traits" kindref="compound">vrt::VirtualSerializeTraits</ref>&lt; U &gt;::has_not_virtual_serialize, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::hasNotVirtualSerialize =  typename std::enable_if&lt;vrt::VirtualSerializeTraits&lt;U&gt;::has_not_virtual_serialize, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>hasNotVirtualSerialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="105" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1ac47ded9971a3ed3d8d1824d1ff12031a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; std::is_enum&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::isEnum =  typename std::enable_if&lt;std::is_enum&lt;U&gt;::value, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>isEnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="109" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a162005f14e0a0cf2f3df64c2d9ec4d9e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; std::is_same&lt; S, <ref refid="structcheckpoint_1_1_footprinter" kindref="compound">checkpoint::Footprinter</ref> &gt;::value and not <ref refid="structcheckpoint_1_1_serializable_traits" kindref="compound">SerializableTraits</ref>&lt; U, S &gt;::is_traversable and not std::is_enum&lt; U &gt;::value, T &gt;::type</type>
        <definition>using checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::justFootprint =  typename std::enable_if&lt; std::is_same&lt;S, checkpoint::Footprinter&gt;::value and not SerializableTraits&lt;U, S&gt;::is_traversable and not std::is_enum&lt;U&gt;::value, T &gt;::type</definition>
        <argsstring></argsstring>
        <name>justFootprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="113" column="3" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a6cf01feb8acb29ef56c37d3180b63671" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::operator()</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num)</argsstring>
        <name>operator()</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="80" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a3bbb12db16d00e1c76e51b52452187aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyElm</definition>
        <argsstring>(SerializerT &amp;s, T *val, hasSplitSerialize&lt; U &gt; *=nullptr)</argsstring>
        <name>applyElm</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>hasSplitSerialize&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="122" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a9cf229e9134337734a8d8f06919b012c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyElm</definition>
        <argsstring>(SerializerT &amp;, T *, hasNotSplitSerialize&lt; U &gt; *=nullptr)</argsstring>
        <name>applyElm</name>
        <param>
          <type>SerializerT &amp;</type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>hasNotSplitSerialize&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="130" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a7cd7decd9c65f3f5d68a2e593275f8d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyElm</definition>
        <argsstring>(SerializerT &amp;s, T *val, isEnum&lt; U &gt; *=nullptr)</argsstring>
        <name>applyElm</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>isEnum&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="135" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a38d952156a857c4eba994db912725590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyStatic</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, justFootprint&lt; U &gt; *=nullptr)</argsstring>
        <name>applyStatic</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>justFootprint&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Dispatch non-serializable types when footprinting. </para>
        </briefdescription>
        <detaileddescription>
<para>Allow simplified footprinting of classes that do not support serialization by just applying &apos;sizeof&apos; operator on them. Note: this means that complex objects will not be traversed further.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>serializer to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the array of objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num</parametername>
</parameternamelist>
<parameterdescription>
<para>number of objects in the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="153" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="153" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a5c76cadd528c3d2348a3963d44402aea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyStatic</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, hasInSerialize&lt; U &gt; *=nullptr)</argsstring>
        <name>applyStatic</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>hasInSerialize&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="175" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="175" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a1bdb0ab1fae98f7c72d5770d0803494b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyStatic</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, hasNoninSerialize&lt; U &gt; *=nullptr)</argsstring>
        <name>applyStatic</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>hasNoninSerialize&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="190" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="190" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a0aec94a0c69c27fc13f6dc0f923d2f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::applyStatic</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, isEnum&lt; U &gt; *=nullptr)</argsstring>
        <name>applyStatic</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>isEnum&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="204" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="204" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a12e7e180be642ec9eaaac93972e28856" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::apply</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, hasVirtualSerialize&lt; U &gt; *=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>hasVirtualSerialize&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="218" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="218" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1ae6e291caec4d650a7d91e78a209a1964" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::dispatch::SerializerDispatchNonByte&lt; SerializerT, T, Dispatcher &gt;::apply</definition>
        <argsstring>(SerializerT &amp;s, T *val, SerialSizeType num, hasNotVirtualSerialize&lt; U &gt; *=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>SerializerT &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>SerialSizeType</type>
          <declname>num</declname>
        </param>
        <param>
          <type>hasNotVirtualSerialize&lt; U &gt; *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="230" column="8" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="230" bodyend="234"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" line="75" column="32" bodyfile="src/checkpoint/dispatch/dispatch_serializer_nonbyte.h" bodystart="75" bodyend="235"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a12e7e180be642ec9eaaac93972e28856" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>apply</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1ae6e291caec4d650a7d91e78a209a1964" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>apply</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a3bbb12db16d00e1c76e51b52452187aa" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyElm</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a9cf229e9134337734a8d8f06919b012c" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyElm</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a7cd7decd9c65f3f5d68a2e593275f8d1" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyElm</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a38d952156a857c4eba994db912725590" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyStatic</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a5c76cadd528c3d2348a3963d44402aea" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyStatic</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a1bdb0ab1fae98f7c72d5770d0803494b" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyStatic</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a0aec94a0c69c27fc13f6dc0f923d2f50" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>applyStatic</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1aee0190efdd8f0239a09883a9f59a4dd1" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>hasInSerialize</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1aee9d815f18b48855fefbecbbbf60436b" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>hasNoninSerialize</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a596c2f6081cc55d5ff0b7486f50b227b" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>hasNotSplitSerialize</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1aa9c0d5e9e139a9d922b1ce4adf339465" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>hasNotVirtualSerialize</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a36fe4f2245004d2daa486a9e47b98b71" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>hasSplitSerialize</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a51b98addaa52e3e576c48c150aa66583" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>hasVirtualSerialize</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1ac47ded9971a3ed3d8d1824d1ff12031a" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>isEnum</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a162005f14e0a0cf2f3df64c2d9ec4d9e" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>justFootprint</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a6cf01feb8acb29ef56c37d3180b63671" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>operator()</name></member>
      <member refid="structcheckpoint_1_1dispatch_1_1_serializer_dispatch_non_byte_1a456d0c02fc35667989d79ddbb0393776" prot="public" virt="non-virtual"><scope>checkpoint::dispatch::SerializerDispatchNonByte</scope><name>S</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
