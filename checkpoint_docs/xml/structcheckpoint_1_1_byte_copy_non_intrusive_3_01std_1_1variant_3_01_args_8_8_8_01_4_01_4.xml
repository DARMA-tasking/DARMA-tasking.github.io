<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structcheckpoint_1_1_byte_copy_non_intrusive_3_01std_1_1variant_3_01_args_8_8_8_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>checkpoint::ByteCopyNonIntrusive&lt; std::variant&lt; Args... &gt; &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcheckpoint_1_1_byte_copy_non_intrusive_3_01std_1_1variant_3_01_args_8_8_8_01_4_01_4_1aaa31399bbfe05a8437a8ef5b17ea2243" prot="public" static="no">
        <type>std::bool_constant&lt; <ref refid="structcheckpoint_1_1detail_1_1_byte_copyable_variant" kindref="compound">detail::ByteCopyableVariant</ref>&lt; Args... &gt;::byte_copyable &gt;</type>
        <definition>using checkpoint::ByteCopyNonIntrusive&lt; std::variant&lt; Args... &gt; &gt;::isByteCopyable =  std::bool_constant&lt;detail::ByteCopyableVariant&lt;Args...&gt;::byte_copyable&gt;</definition>
        <argsstring></argsstring>
        <name>isByteCopyable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/container/variant_serialize.h" line="114" column="3" bodyfile="src/checkpoint/container/variant_serialize.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/checkpoint/container/variant_serialize.h" line="113" column="29" bodyfile="src/checkpoint/container/variant_serialize.h" bodystart="113" bodyend="116"/>
    <listofallmembers>
      <member refid="structcheckpoint_1_1_byte_copy_non_intrusive_3_01std_1_1variant_3_01_args_8_8_8_01_4_01_4_1aaa31399bbfe05a8437a8ef5b17ea2243" prot="public" virt="non-virtual"><scope>checkpoint::ByteCopyNonIntrusive&lt; std::variant&lt; Args... &gt; &gt;</scope><name>isByteCopyable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
