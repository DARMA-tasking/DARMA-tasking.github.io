<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="checkpoint__api_8h" kind="file" language="C++">
    <compoundname>checkpoint_api.h</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includedby refid="buffer_8h" local="yes">src/checkpoint/buffer/buffer.h</includedby>
    <includedby refid="checkpoint_8h" local="yes">src/checkpoint/checkpoint.h</includedby>
    <includedby refid="checkpoint__api_8impl_8h" local="yes">src/checkpoint/checkpoint_api.impl.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="1">
        <label>src/checkpoint/checkpoint_api.h</label>
        <link refid="checkpoint__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="29">
        <label>src/checkpoint/dispatch/allocator.h</label>
        <link refid="allocator_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>src/checkpoint/dispatch/vrt/base.h</label>
        <link refid="base_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>src/checkpoint/serializers/packer.impl.h</label>
        <link refid="packer_8impl_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>src/checkpoint/container/enum_serialize.h</label>
        <link refid="enum__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>src/checkpoint/container/view_traverse_ndim.h</label>
        <link refid="view__traverse__ndim_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>src/checkpoint/dispatch/vrt/derived.h</label>
        <link refid="derived_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/checkpoint/container/kokkos_complex_serialize.h</label>
        <link refid="kokkos__complex__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/checkpoint/container/kokkos_unordered_map_serialize.h</label>
        <link refid="kokkos__unordered__map__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/checkpoint/checkpoint.h</label>
        <link refid="checkpoint_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>src/checkpoint/traits/reconstructor_traits.h</label>
        <link refid="reconstructor__traits_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>src/checkpoint/dispatch/vrt/virtual_serialize.h</label>
        <link refid="virtual__serialize_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/checkpoint/container/container_serialize.h</label>
        <link refid="container__serialize_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>src/checkpoint/dispatch/reconstructor.h</label>
        <link refid="reconstructor_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/checkpoint/container/view_serialize.h</label>
        <link refid="view__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/checkpoint/container/array_serialize.h</label>
        <link refid="array__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>src/checkpoint/serializers/unpacker.impl.h</label>
        <link refid="unpacker_8impl_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>src/checkpoint/container/tuple_serialize.h</label>
        <link refid="tuple__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>src/checkpoint/dispatch/vrt/object_registry.h</label>
        <link refid="object__registry_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/checkpoint/buffer/buffer.h</label>
        <link refid="buffer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/checkpoint/container/list_serialize.h</label>
        <link refid="list__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>src/checkpoint/serializers_all.h</label>
        <link refid="serializers__all_8h_source"/>
      </node>
      <node id="22">
        <label>src/checkpoint/container/view_traits_extract.h</label>
        <link refid="view__traits__extract_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>src/checkpoint/container/map_serialize.h</label>
        <link refid="map__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/checkpoint/serializers/serializers_headers.h</label>
        <link refid="serializers__headers_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/checkpoint/checkpoint_api.h</label>
        <link refid="checkpoint__api_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>src/checkpoint/buffer/user_buffer.h</label>
        <link refid="user__buffer_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>src/checkpoint/container/unique_ptr_serialize.h</label>
        <link refid="unique__ptr__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/checkpoint/serializers/unpacker.h</label>
        <link refid="unpacker_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>src/checkpoint/dispatch/dispatch_virtual.h</label>
        <link refid="dispatch__virtual_8h_source"/>
      </node>
      <node id="18">
        <label>src/checkpoint/container/variant_serialize.h</label>
        <link refid="variant__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/checkpoint/container/view_equality.h</label>
        <link refid="view__equality_8h_source"/>
      </node>
      <node id="30">
        <label>src/checkpoint/dispatch/dispatch.impl.h</label>
        <link refid="dispatch_8impl_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>src/checkpoint/traits/serializable_traits.h</label>
        <link refid="serializable__traits_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>src/checkpoint/container/kokkos_array.h</label>
        <link refid="kokkos__array_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/checkpoint/checkpoint_api.impl.h</label>
        <link refid="checkpoint__api_8impl_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>src/checkpoint/dispatch/dispatch_serializer_byte.h</label>
        <link refid="dispatch__serializer__byte_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/checkpoint/serializers/packer.h</label>
        <link refid="packer_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>src/checkpoint/container/view_traverse_manual.h</label>
        <link refid="view__traverse__manual_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>src/checkpoint/dispatch/dispatch.h</label>
        <link refid="dispatch_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/checkpoint/dispatch/dispatch_serializer_nonbyte.h</label>
        <link refid="dispatch__serializer__nonbyte_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/checkpoint/buffer/io_buffer.h</label>
        <link refid="io__buffer_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/checkpoint/container/kokkos_pair_serialize.h</label>
        <link refid="kokkos__pair__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>src/checkpoint/buffer/managed_buffer.h</label>
        <link refid="managed__buffer_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>src/checkpoint/dispatch/dispatch_serializer.h</label>
        <link refid="dispatch__serializer_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>src/checkpoint/container/vector_serialize.h</label>
        <link refid="vector__serialize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcheckpoint_1_1_serialized_info" prot="public">checkpoint::SerializedInfo</innerclass>
    <innernamespace refid="namespacecheckpoint">checkpoint</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="checkpoint__api_8h_1a70bc1b37eae8e32129df38d981ef90f6" prot="public" static="no">
        <type>std::function&lt; char *(std::size_t size)&gt;</type>
        <definition>using checkpoint::BufferCallbackType = typedef std::function&lt;char*(std::size_t size)&gt;</definition>
        <argsstring></argsstring>
        <name>BufferCallbackType</name>
        <briefdescription>
<para>Callback for user to allocate bytes during serialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.h" line="54" column="1" bodyfile="src/checkpoint/checkpoint_api.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="checkpoint__api_8h_1aa61e2b491f405a63a394f9aad528c37a" prot="public" static="no">
        <type>std::unique_ptr&lt; SerializedInfo &gt;</type>
        <definition>using checkpoint::SerializedReturnType = typedef std::unique_ptr&lt;SerializedInfo&gt;</definition>
        <argsstring></argsstring>
        <name>SerializedReturnType</name>
        <briefdescription>
<para>Convenience typedef for <computeroutput>std::unique_ptr&lt;SerializedInfo&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.h" line="64" column="1" bodyfile="src/checkpoint/checkpoint_api.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="checkpoint__api_8h_1a075da4e7344cf037943362517e606c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>SerializedReturnType</type>
        <definition>SerializedReturnType checkpoint::serialize</definition>
        <argsstring>(T &amp;target, BufferCallbackType fn=nullptr)</argsstring>
        <name>serialize</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>BufferCallbackType</type>
          <declname>fn</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Serialize <computeroutput>T</computeroutput> into a byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Serializes an object recursively by invoking the <computeroutput>serialize</computeroutput> functions/methods recursively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>T</computeroutput> to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fn</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) callback to supply buffer for to allow user allocation of the produced byte buffer. The callback will be passed the number of bytes required and return a char* to a buffer of at least that many bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>std::unique_ptr</computeroutput> to a <computeroutput><ref refid="structcheckpoint_1_1_serialized_info" kindref="compound">SerializedInfo</ref></computeroutput> containing the buffer with serialized data and the size of the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="57" column="22" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="57" bodyend="64" declfile="src/checkpoint/checkpoint_api.h" declline="82" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1aee0d7387d339b0275e9b95634748d63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * checkpoint::deserialize</definition>
        <argsstring>(char *buf, char *object_buf)</argsstring>
        <name>deserialize</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>object_buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a byte buffer and corresponding <computeroutput>size</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed on <computeroutput>user_buf</computeroutput> (or a system allocated buffer) or reconstructed based on a user-defined reconstruct method. If <computeroutput>user_buf</computeroutput> is not passed, the returned object point must be deallocated with <computeroutput>delete</computeroutput> </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the bytes to reify <computeroutput>T</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) buffer containing bytes allocated with sufficient size for <computeroutput>T</computeroutput>. If this buffer != null, the caller is responsible for deallocating the buffer. If it is not passed, the system will allocate a buffer that must be de-allocated with <computeroutput>delete</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the newly reified <computeroutput>T</computeroutput> based on bytes in <computeroutput>buf</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="67" column="3" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="67" bodyend="69" declfile="src/checkpoint/checkpoint_api.h" declline="105" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1ab8beefac6b3dc40c69e11dc430618c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserialize</definition>
        <argsstring>(char *buf)</argsstring>
        <name>deserialize</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a byte buffer and corresponding <computeroutput>size</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed or reconstructed based on a user-defined reconstruct method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the bytes to reify <computeroutput>T</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a unique pointer to the newly reified <computeroutput>T</computeroutput> based on bytes in <computeroutput>buf</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="72" column="17" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="72" bodyend="75" declfile="src/checkpoint/checkpoint_api.h" declline="122" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1af605968a3b8731448c68e5c9fff917ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::deserializeInPlace</definition>
        <argsstring>(char *buf, T *t)</argsstring>
        <name>deserializeInPlace</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a byte buffer and corresponding <computeroutput>size</computeroutput> in-place on the user-provided <computeroutput>t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: the other form of <computeroutput>deserialize</computeroutput> will either reconstruct to default construct <computeroutput>T</computeroutput> in-place. This overload will not allocate or construct <computeroutput>T</computeroutput> </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer containing the bytes to reify <computeroutput>T</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid pointer to a <computeroutput>T</computeroutput> that has been user-allocated and constructed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="84" column="6" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="84" bodyend="86" declfile="src/checkpoint/checkpoint_api.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1a1fa5c2e70f11308a1a94b163924d88f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserialize</definition>
        <argsstring>(SerializedReturnType &amp;&amp;in)</argsstring>
        <name>deserialize</name>
        <param>
          <type>SerializedReturnType &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convenience function for de-serializing and reify <computeroutput>T</computeroutput> directly from <computeroutput>in</computeroutput> the return value from <computeroutput>serialize</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer and size combo returned from <computeroutput>serialize</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a unique pointer to <computeroutput>T</computeroutput> that must be deallocated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="78" column="17" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="78" bodyend="81" declfile="src/checkpoint/checkpoint_api.h" declline="147" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1af0e68ef201b5e6831939bcd752e1b18b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t checkpoint::getSize</definition>
        <argsstring>(T &amp;target)</argsstring>
        <name>getSize</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Get the number of bytes that <computeroutput>target</computeroutput> requires for serialization. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to <computeroutput>T</computeroutput> to size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes for the <computeroutput>target</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="89" column="13" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="89" bodyend="91" declfile="src/checkpoint/checkpoint_api.h" declline="157" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1a3c06c0dd0b9bccfd2aa6b79570b9cda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t checkpoint::getMemoryFootprint</definition>
        <argsstring>(T &amp;target, std::size_t size_offset=0)</argsstring>
        <name>getMemoryFootprint</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get memory footprint of <computeroutput>target</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates memory footprint for both serializable and non-serializable objects. Uses serialize functions/methods recursively when they are available. For non-serializable objects, simplified footprinting is performed by just applying &apos;sizeof&apos; operator (note: this means that complex objects will not be traversed).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to <computeroutput>T</computeroutput> to measure footprint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>add an arbitrary <computeroutput>size_offset</computeroutput> to the footprint</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>memory footprint of the <computeroutput>target</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="94" column="13" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="94" bodyend="99" declfile="src/checkpoint/checkpoint_api.h" declline="174" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1a3d4326982e3c3feeb933e985758eea82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeToFile</definition>
        <argsstring>(T &amp;target, std::string const &amp;file)</argsstring>
        <name>serializeToFile</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Serialize <computeroutput>T</computeroutput> to file with filename <computeroutput>file</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Byte-serializes <computeroutput>T</computeroutput> to file, truncating <computeroutput>file</computeroutput> if it already exists. If any error occurs while opening/closing/mapping the file, <computeroutput>std::runtime_error</computeroutput> will be thrown with an appropriate error message containing the corresponding errno.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>T</computeroutput> to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="102" column="6" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="102" bodyend="107" declfile="src/checkpoint/checkpoint_api.h" declline="188" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1ad71bcfe197379c59aa16f737b7e2cf3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserializeFromFile</definition>
        <argsstring>(std::string const &amp;file)</argsstring>
        <name>deserializeFromFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed or reconstructed based on a user-defined reconstruct method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to read with bytes for <computeroutput>T</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique pointer to the new object <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="110" column="17" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="110" bodyend="117" declfile="src/checkpoint/checkpoint_api.h" declline="204" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1a4a98c599eb8a73519cd643bfafb739d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::deserializeInPlaceFromFile</definition>
        <argsstring>(std::string const &amp;file, T *buf)</argsstring>
        <name>deserializeInPlaceFromFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a file in place on an existing pointer to <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by invoking the <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to read with bytes for <computeroutput>T</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid, constructed <computeroutput>T</computeroutput> to deserialize into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="120" column="6" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="120" bodyend="124" declfile="src/checkpoint/checkpoint_api.h" declline="218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1a6d52d7faa50354bc079e1d864963d29c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename StreamT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::serializeToStream</definition>
        <argsstring>(T &amp;target, StreamT &amp;stream)</argsstring>
        <name>serializeToStream</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>StreamT &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Serialize <computeroutput>T</computeroutput> to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Byte-serializes <computeroutput>T</computeroutput> to stream. Handling of any errors during writing to the stream will be handled by the stream itself, e.g. any exceptions or status bits to check will depend on stream type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>the <computeroutput>T</computeroutput> to serialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>to serialize into, with tellp and write functions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="127" column="6" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="127" bodyend="132" declfile="src/checkpoint/checkpoint_api.h" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1aa9a7965554c62b089bb326961747368d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename StreamT</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; checkpoint::deserializeFromStream</definition>
        <argsstring>(StreamT &amp;stream)</argsstring>
        <name>deserializeFromStream</name>
        <param>
          <type>StreamT &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a stream. </para>
        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by first invoking the reconstruction strategy and then <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized. During reconstruction, based on trait detection, <computeroutput>T</computeroutput> will either be default constructed or reconstructed based on a user-defined reconstruct method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream to read with bytes for <computeroutput>T</computeroutput>, with tellg and read functions</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique pointer to the new object <computeroutput>T</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="135" column="17" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="135" bodyend="142" declfile="src/checkpoint/checkpoint_api.h" declline="247" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="checkpoint__api_8h_1ac5e1b98b72e9fa58cda71b79a009e1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename StreamT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkpoint::deserializeInPlaceFromStream</definition>
        <argsstring>(StreamT &amp;stream, T *buf)</argsstring>
        <name>deserializeInPlaceFromStream</name>
        <param>
          <type>StreamT &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>De-serialize and reify <computeroutput>T</computeroutput> from a stream in place on an existing pointer to <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>De-serializes an object recursively by invoking the <computeroutput>serialize</computeroutput> functions/methods recursively to rebuild the state of the object as serialized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream to read with bytes for <computeroutput>T</computeroutput>, with tellg and read functions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid, constructed <computeroutput>T</computeroutput> to deserialize into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/checkpoint/checkpoint_api.impl.h" line="145" column="6" bodyfile="src/checkpoint/checkpoint_api.impl.h" bodystart="145" bodyend="149" declfile="src/checkpoint/checkpoint_api.h" declline="261" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkpoint_api.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/magistrate<sp/>=&gt;<sp/>Serialization<sp/>Library</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_SRC_CHECKPOINT_CHECKPOINT_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_SRC_CHECKPOINT_CHECKPOINT_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">checkpoint<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>BufferCallbackType<sp/>=<sp/>std::function&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*(std::size_t<sp/>size)&gt;;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structcheckpoint_1_1_serialized_info" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcheckpoint_1_1_serialized_info" kindref="compound">SerializedInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::size_t<sp/>getSize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>getBuffer()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="structcheckpoint_1_1_serialized_info" kindref="compound">SerializedInfo</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SerializedReturnType<sp/>=<sp/>std::unique_ptr&lt;SerializedInfo&gt;;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">SerializedReturnType<sp/>serialize(T&amp;<sp/>target,<sp/>BufferCallbackType<sp/>fn<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">T*<sp/>deserialize(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>object_buf);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/>deserialize(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deserializeInPlace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf,<sp/>T*<sp/>t);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/>deserialize(SerializedReturnType&amp;&amp;<sp/>in);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">std::size_t<sp/>getSize(T&amp;<sp/>target);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">std::size_t<sp/>getMemoryFootprint(T&amp;<sp/>target,<sp/>std::size_t<sp/>size_offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serializeToFile(T&amp;<sp/>target,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>file);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/>deserializeFromFile(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>file);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deserializeInPlaceFromFile(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>file,<sp/>T*<sp/>buf);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StreamT&gt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>serializeToStream(T&amp;<sp/>target,<sp/>StreamT&amp;<sp/>stream);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StreamT&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/>deserializeFromStream(StreamT&amp;<sp/>stream);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StreamT&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deserializeInPlaceFromStream(StreamT&amp;<sp/>stream,<sp/>T*<sp/>buf);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>checkpoint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_SRC_CHECKPOINT_CHECKPOINT_API_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/checkpoint/checkpoint_api.h"/>
  </compounddef>
</doxygen>
