<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Introduction</title>
    <tableofcontents>
      <tocsect>
        <name>What is VT TV?</name>
        <reference>indexpage_1vttv_what_is</reference>
    </tocsect>
      <tocsect>
        <name>Getting Started</name>
        <reference>indexpage_1vttv_getting_started</reference>
    </tocsect>
      <tocsect>
        <name>Installation and Usage</name>
        <reference>indexpage_1vttv_installation_and_usage</reference>
    <tableofcontents>
      <tocsect>
        <name>Standalone</name>
        <reference>indexpage_1vttv_standalone</reference>
    <tableofcontents>
      <tocsect>
        <name>1. Build</name>
        <reference>indexpage_1vttv_standaone_build</reference>
    </tocsect>
      <tocsect>
        <name>2. Usage</name>
        <reference>indexpage_1vttv_standalone_usage</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>Python Module</name>
        <reference>indexpage_1vttv_python_module</reference>
    <tableofcontents>
      <tocsect>
        <name>Dependencies</name>
        <reference>indexpage_1vttv_python_module_deps</reference>
    </tocsect>
      <tocsect>
        <name>1. Install</name>
        <reference>indexpage_1vttv_python_module_install</reference>
    </tocsect>
      <tocsect>
        <name>2. Usage</name>
        <reference>indexpage_1vttv_python_module_usage</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>Design Information</name>
        <reference>indexpage_1vttv_design</reference>
    <tableofcontents>
      <tocsect>
        <name>1. Quantities of Interest</name>
        <reference>indexpage_1vttv_qoi</reference>
    <tableofcontents>
      <tocsect>
        <name>Rank Attributes</name>
        <reference>indexpage_1vttv_rank_attributes</reference>
    </tocsect>
      <tocsect>
        <name>Object Attributes</name>
        <reference>indexpage_1vttv_obj_attributes</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>2. General Structure</name>
        <reference>indexpage_1vttv_structure</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>License</name>
        <reference>indexpage_1License</reference>
    </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="index_1vttv_what_is">
<title>What is VT TV?</title>
<para><computeroutput>vt-tv</computeroutput> provides visualizations of the work-to-rank mappings, communications, and memory usage of an application.</para>
<para>Specifically, the task visualizer takes in JSON files that describe work as a series of phases and subphases that contain 1) tasks for each rank, 2) communications, and 3) other user-defined fields (such as memory usage).</para>
<para>Using such input data, the task visualizer produces Exodus meshes to describe the ranks and objects over time, which can be visualized using Paraview. Additionally, the task visualizer can produce PNGs directly using a VTK workflow to render a visualization of ranks and tasks over phases.</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="index_1vttv_getting_started">
<title>Getting Started</title>
<para>You need the following dependencies:</para>
<para><orderedlist>
<listitem><para>A C++ compiler that supports C++17</para>
</listitem><listitem><para><ulink url="https://cmake.org/cmake/help/latest/"><computeroutput>cmake</computeroutput></ulink> &gt;= 3.17</para>
</listitem><listitem><para><ulink url="https://docs.vtk.org/en/latest/index.html"><computeroutput>VTK</computeroutput></ulink> (build instructions <ulink url="https://gitlab.kitware.com/vtk/vtk/-/blob/master/Documentation/docs/build_instructions/build.md">here</ulink>)</para>
</listitem></orderedlist>
</para>
<para>Begin by cloning <computeroutput>vt-tv</computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/DARMA-tasking/vt-tv.git</highlight></codeline>
</programlisting></para>
<para><emphasis>From now on, we will assume that the <computeroutput>vt-tv</computeroutput> source is located in <computeroutput>${VTTV_SOURCE_DIR}</computeroutput>.</emphasis></para>
<para><hruler/>
</para>
</sect1>
<sect1 id="index_1vttv_installation_and_usage">
<title>Installation and Usage</title>
<para><computeroutput>vt-tv</computeroutput> can be installed as either a standalone C++ app or as a Python module.</para>
<sect2 id="index_1vttv_standalone">
<title>Standalone</title>
<sect3 id="index_1vttv_standaone_build">
<title>1. Build</title>
<para>For the simplest build, run from <computeroutput>${VTTV_SOURCE_DIR}</computeroutput>:</para>
<para><programlisting><codeline><highlight class="normal">VTK_DIR=/path/to/vtk/build<sp/>./build.sh</highlight></codeline>
</programlisting></para>
<para>To build and run tests, add the <computeroutput>--tests-run</computeroutput> flag:</para>
<para><programlisting><codeline><highlight class="normal">VTK_DIR=/path/to/vtk/build<sp/>./build.sh<sp/>--tests-run</highlight></codeline>
</programlisting></para>
<para>(More documentation for <computeroutput>build.sh</computeroutput> can be found within the script itself, including examples.)</para>
<para>Alternatively, for an interactive build process, run:</para>
<para><programlisting><codeline><highlight class="normal">./interactive_build.sh</highlight></codeline>
</programlisting></para>
<para><emphasis>From now on, we will assume that the <computeroutput>vt-tv</computeroutput> build is in <computeroutput>${VTTV_BUILD_DIR}</computeroutput>.</emphasis></para>
</sect3>
<sect3 id="index_1vttv_standalone_usage">
<title>2. Usage</title>
<para><computeroutput>vt-tv</computeroutput> requires two inputs:</para>
<para><orderedlist>
<listitem><para>One or more JSON data files</para>
</listitem><listitem><para>A YAML configuration file (which contains the path to the JSON data files)</para>
</listitem></orderedlist>
</para>
<para>The basic call to <computeroutput>vt-tv</computeroutput> is:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">${VTTV_BUILD_DIR}/apps/vt_standalone<sp/>-c<sp/>path/to/config</highlight></codeline>
</programlisting></para>
<para><emphasis>Note: The</emphasis> <computeroutput>path/to/config</computeroutput> <emphasis>argument should be relative to</emphasis> <computeroutput>${VTTV_SOURCE_DIR}</computeroutput> _(see example below)._</para>
<para><heading level="4">YAML Input</heading>
</para>
<para>A YAML configuration exemplar can be found in <computeroutput>${VTTV_SOURCE_DIR}/config/conf.yaml</computeroutput>. To use it, run</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">${VTTV_BUILD_DIR}/apps/vt_standalone<sp/>-c<sp/>config/conf.yaml</highlight></codeline>
</programlisting></para>
<para><heading level="4">JSON Data Files</heading>
</para>
<para>Sample JSON data files are provided in <computeroutput>${VTTV_SOURCE_DIR}/tests/unit/lb_test_data</computeroutput>.</para>
<para>Information regarding the JSON format can be found in vt&apos;s <ulink url="https://darma-tasking.github.io/docs/html/node-lb-data.html">documentation</ulink>; the JSON schema validator is located in the vt <ulink url="https://github.com/DARMA-tasking/vt/blob/develop/scripts/JSON_data_files_validator.py">repo</ulink>.</para>
<para>Additionally, DARMA-tasking&apos;s Load Balancing Analysis Framework (LBAF) provides a Python script (<ulink url="https://github.com/DARMA-tasking/LB-analysis-framework/blob/develop/src/lbaf/Utils/lbsJSONDataFilesMaker.py">lbsJSONDataFilesMaker.py</ulink>) that may be used to generate JSON data files.</para>
</sect3>
</sect2>
<sect2 id="index_1vttv_python_module">
<title>Python Module</title>
<sect3 id="index_1vttv_python_module_deps">
<title>Dependencies</title>
<para>In addition to the basic <computeroutput>vt-tv</computeroutput> dependencies listed above, you also need:</para>
<para><orderedlist>
<listitem><para>A Python version between 3.8 - 3.11</para>
</listitem><listitem><para><ulink url="https://nanobind.readthedocs.io/en/latest/"><computeroutput>nanobind</computeroutput></ulink>, which can be installed with:</para>
</listitem></orderedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">pip<sp/>install<sp/>nanobind</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1vttv_python_module_install">
<title>1. Install</title>
<para>First, specify the location of your <computeroutput>VTK</computeroutput> build (see above) with:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">export<sp/>VTK_DIR=/path/to/vtk/build</highlight></codeline>
</programlisting></para>
<para>Optional: To specify the number of parallel jobs to use during the build, you can set the <computeroutput>VT_TV_CMAKE_JOBS</computeroutput> environment variable:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">export<sp/>VT_TV_CMAKE_JOBS=8</highlight></codeline>
</programlisting></para>
<para>Then install the binded <computeroutput>vt-tv</computeroutput> Python module with:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">pip<sp/>install<sp/>${VTTV_SOURCE_DIR}</highlight></codeline>
</programlisting></para>
<para><emphasis>Note: Behind the scenes, the usual <computeroutput>cmake</computeroutput> and <computeroutput>make</computeroutput> commands are run. Depending on your system, this can cause the install process to be lengthy as it will be compiling the entire <computeroutput>vt-tv</computeroutput> library.</emphasis></para>
</sect3>
<sect3 id="index_1vttv_python_module_usage">
<title>2. Usage</title>
<para>Import the <computeroutput>vt-tv</computeroutput> module into your project using:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">import<sp/>vttv</highlight></codeline>
</programlisting></para>
<para>The only function you need is <computeroutput>vttv.tvFromJson</computeroutput>, which has the following (C++) function signature:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tvFromJson(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>input_json_per_rank_list,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input_yaml_params_str,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_ranks</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>The parameters are:<itemizedlist>
<listitem><para><computeroutput>input_json_per_rank_list</computeroutput>: A list of the input JSON data strings (one string per rank). In the C++ standalone app, this equates to the input JSON data files.</para>
</listitem><listitem><para><computeroutput>input_yaml_params_str</computeroutput>: The visualization and output configuration data, formatted as a dictionary but exported as a string (see example below). This equates to the standalone app&apos;s input YAML configuration file.</para>
</listitem><listitem><para><computeroutput>num_ranks</computeroutput>: The number of ranks to be visualized by <computeroutput>vt-tv</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>As an example, here is the (emptied) code used by the <ulink url="https://github.com/DARMA-tasking/LB-analysis-framework"><computeroutput>Load Balancing Analysis Framework</computeroutput></ulink> to call <computeroutput>vt-tv</computeroutput>:</para>
<para><programlisting filename=".python"><codeline><highlight class="normal">import<sp/>vttv</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Populate<sp/>with<sp/>the<sp/>JSON<sp/>data<sp/>from<sp/>each<sp/>rank</highlight></codeline>
<codeline><highlight class="normal">ranks_json_str<sp/>=<sp/>[]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Populate<sp/>with<sp/>the<sp/>desired<sp/>configuration<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">vttv_params<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;x_ranks&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;y_ranks&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;z_ranks&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;object_jitter&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;rank_qoi&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;object_qoi&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;save_meshes&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;force_continuous_object_qoi&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;output_visualization_dir&quot;:<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;output_visualization_file_stem&quot;:</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Populate<sp/>with<sp/>number<sp/>of<sp/>ranks<sp/>used<sp/>in<sp/>the<sp/>current<sp/>problem</highlight></codeline>
<codeline><highlight class="normal">num_ranks<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Call<sp/>vt-tv</highlight></codeline>
<codeline><highlight class="normal">vttv.tvFromJson(ranks_json_str,<sp/>str(vttv_params),<sp/>num_ranks)</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="index_1vttv_design">
<title>Design Information</title>
<sect2 id="index_1vttv_qoi">
<title>1. Quantities of Interest</title>
<para><computeroutput>vt-tv</computeroutput> visualizes various Quantities of Interest (QOI) as requested by the user in the YAML configuration file:</para>
<para><programlisting filename=".yaml"><codeline><highlight class="normal">visualization:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>Other<sp/>parameters...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rank_qoi:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>object_qoi:</highlight></codeline>
</programlisting></para>
<para>While <computeroutput>vt-tv</computeroutput> natively supports a variety of QOI, such as the <computeroutput>load</computeroutput>, <computeroutput>id</computeroutput>, or <computeroutput>volume</computeroutput> of ranks and objects[^1], we also support user-defined QOI, called <computeroutput>attributes</computeroutput>.</para>
<sect3 id="index_1vttv_rank_attributes">
<title>Rank Attributes</title>
<para>Rank <computeroutput>attributes</computeroutput> are defined in the <computeroutput>metadata</computeroutput> field of the JSON data files. For example:</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;metadata&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;rank&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;attributes&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;max_memory_usage&quot;:<sp/>8.0e+9</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In this example, the user defines <computeroutput>max_memory_usage</computeroutput> as a rank attribute. This can then be specified as a <computeroutput>rank_qoi</computeroutput> in the YAML configuration file.</para>
</sect3>
<sect3 id="index_1vttv_obj_attributes">
<title>Object Attributes</title>
<para>Object <computeroutput>attributes</computeroutput> are defined in the <computeroutput>tasks</computeroutput> field of the JSON data files. For example:</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;phases&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;id&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tasks&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;entity&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;home&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;id&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;migratable&quot;:<sp/>true,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type&quot;:<sp/>&quot;object&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;node&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;resource&quot;:<sp/>&quot;cpu&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;time&quot;:<sp/>2.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;attributes&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;shared_bytes&quot;:<sp/>10000.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;shared_id&quot;:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>In this case, the user has defined <computeroutput>shared_bytes</computeroutput> and <computeroutput>shared_id</computeroutput> as potential QOI.</para>
<para>In the YAML configuration file passed to <computeroutput>vt-tv</computeroutput>, they may specify either of these as their <computeroutput>object_qoi</computeroutput>.</para>
</sect3>
</sect2>
<sect2 id="index_1vttv_structure">
<title>2. General Structure</title>
<para><computeroutput>vt-tv</computeroutput> is designed according to the following hierarchy:</para>
<para><dot>
digraph G {
    rankdir=TD;
    Info -&gt; ObjectInfo;
    Info -&gt; Rank;
    Rank -&gt; PhaseWork;
    PhaseWork -&gt; ObjectWork;
    ObjectWork -&gt; ObjectCommunicator;
}
</dot>
</para>
<para><emphasis>Further information on each class, including methods and member variables, can be found in the documentation.</emphasis></para>
<para><heading level="4">Navigating the Hierarchy</heading>
</para>
<para>Users should interact mainly with the overarching <computeroutput>Info</computeroutput> class, which contains functions that drill down the hierarchy to get the desired information.</para>
<para>For example, an instance of <computeroutput>Info</computeroutput> holds getters to all object and rank QOI (including user_defined attributes):</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank_qoi<sp/>=<sp/>info.getRankQOIAtPhase(rank_id,<sp/>phase_id,<sp/>qoi_string);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_qoi<sp/>=<sp/>info.getObjectQOIAtPhase(obj_id,<sp/>phase_id,<sp/>qoi_string);</highlight></codeline>
</programlisting> where the <computeroutput>qoi_string</computeroutput> is the name of the desired QOI, like &quot;load&quot; or &quot;id&quot;. This string can also be a user-defined attribute, as described above.</para>
<para><heading level="4">ObjectInfo vs. ObjectWork</heading>
</para>
<para>There are two classes that hold object data: <computeroutput>ObjectInfo</computeroutput> and <computeroutput>ObjectWork</computeroutput>.</para>
<para><computeroutput>ObjectInfo</computeroutput> holds information about a given object across all ranks and phases. This includes:<itemizedlist>
<listitem><para>the ID</para>
</listitem><listitem><para>the home rank (where the object originated)</para>
</listitem><listitem><para>whether the object is migratable or sentinel (stays on the same rank)</para>
</listitem></itemizedlist>
</para>
<para><computeroutput>ObjectWork</computeroutput> holds information about an object that may vary as it changes rank or phase, such as:<itemizedlist>
<listitem><para>the attributes</para>
</listitem><listitem><para>the communications</para>
</listitem></itemizedlist>
</para>
<para><emphasis>Tip: As discussed above, users should utilize the getters present in <computeroutput>Info</computeroutput> rather than directly calling these classes.</emphasis></para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="index_1License">
<title>License</title>
<para>@m_class{m-note m-dim}</para>
<para><parblock><para>Copyright 2021-2024 National Technology &amp; Engineering Solutions of Sandia, LLC (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains certain rights in this software.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><itemizedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
</listitem></itemizedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </para>
</parblock></para>
</sect1>
    </detaileddescription>
    <location file="/home/runner/work/vt-tv/vt-tv/docs/md/mainpage.md"/>
  </compounddef>
</doxygen>
