<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvt_1_1tv_1_1utility_1_1_parse_render" kind="struct" language="C++" prot="public">
    <compoundname>vt::tv::utility::ParseRender</compoundname>
    <includes refid="parse__render_8h" local="no">parse_render.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structvt_1_1tv_1_1utility_1_1_parse_render_1a5d96ee0151987d1f5a814322c570b1c5" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string vt::tv::utility::ParseRender::filename_</definition>
        <argsstring></argsstring>
        <name>filename_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" line="85" column="15" bodyfile="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structvt_1_1tv_1_1utility_1_1_parse_render_1a78ed9aed212405a5bee215e7c97a9f75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>vt::tv::utility::ParseRender::ParseRender</definition>
        <argsstring>(std::string const &amp;in_filename)</argsstring>
        <name>ParseRender</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>in_filename</declname>
        </param>
        <briefdescription>
<para>Construct the class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the yaml file name to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" line="70" column="3" bodyfile="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structvt_1_1tv_1_1utility_1_1_parse_render_1a7dcd347d9d189d2b2b66da07113614e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vt::tv::utility::ParseRender::parseAndRender</definition>
        <argsstring>(PhaseType phase_id=std::numeric_limits&lt; PhaseType &gt;::max(), std::unique_ptr&lt; Info &gt; info=nullptr)</argsstring>
        <name>parseAndRender</name>
        <param>
          <type>PhaseType</type>
          <declname>phase_id</declname>
          <defval>std::numeric_limits&lt; PhaseType &gt;::max()</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structvt_1_1tv_1_1_info" kindref="compound">Info</ref> &gt;</type>
          <declname>info</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Parse yaml file and render. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">phase_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the phase ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">info</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to render</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If <computeroutput>phase_id</computeroutput> is max then all phases will be rendered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" line="80" column="8" bodyfile="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.cc" bodystart="53" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parse YAML file and render based on configuration. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" line="64" column="1" bodyfile="/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h" bodystart="64" bodyend="86"/>
    <listofallmembers>
      <member refid="structvt_1_1tv_1_1utility_1_1_parse_render_1a5d96ee0151987d1f5a814322c570b1c5" prot="private" virt="non-virtual"><scope>vt::tv::utility::ParseRender</scope><name>filename_</name></member>
      <member refid="structvt_1_1tv_1_1utility_1_1_parse_render_1a7dcd347d9d189d2b2b66da07113614e4" prot="public" virt="non-virtual"><scope>vt::tv::utility::ParseRender</scope><name>parseAndRender</name></member>
      <member refid="structvt_1_1tv_1_1utility_1_1_parse_render_1a78ed9aed212405a5bee215e7c97a9f75" prot="public" virt="non-virtual"><scope>vt::tv::utility::ParseRender</scope><name>ParseRender</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
