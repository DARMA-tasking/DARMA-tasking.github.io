<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="render_8cc" kind="file" language="C++">
    <compoundname>render.cc</compoundname>
    <includes refid="render_8h" local="yes">vt-tv/render/render.h</includes>
    <incdepgraph>
      <node id="46">
        <label>list</label>
      </node>
      <node id="10">
        <label>vtkCamera.h</label>
      </node>
      <node id="4">
        <label>vtkRenderWindow.h</label>
      </node>
      <node id="44">
        <label>vt-tv/api/object_communicator.h</label>
        <link refid="object__communicator_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>limits</label>
      </node>
      <node id="33">
        <label>vtkDiscretizableColorTransferFunction.h</label>
      </node>
      <node id="14">
        <label>vtkPointData.h</label>
      </node>
      <node id="60">
        <label>iterator</label>
      </node>
      <node id="23">
        <label>vtkArrayCalculator.h</label>
      </node>
      <node id="40">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>vtkPolyData.h</label>
      </node>
      <node id="37">
        <label>vt-tv/api/rank.h</label>
        <link refid="rank_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>variant</label>
      </node>
      <node id="3">
        <label>vtkActor.h</label>
      </node>
      <node id="35">
        <label>vtkExodusIIWriter.h</label>
      </node>
      <node id="16">
        <label>vtkGlyph2D.h</label>
      </node>
      <node id="58">
        <label>cmath</label>
      </node>
      <node id="54">
        <label>vt-tv/api/info.h</label>
        <link refid="info_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>vtkTextProperty.h</label>
      </node>
      <node id="42">
        <label>string</label>
      </node>
      <node id="15">
        <label>vtkGlyphSource2D.h</label>
      </node>
      <node id="24">
        <label>vtkThresholdPoints.h</label>
      </node>
      <node id="47">
        <label>map</label>
      </node>
      <node id="31">
        <label>vtkCellData.h</label>
      </node>
      <node id="48">
        <label>unordered_set</label>
      </node>
      <node id="19">
        <label>vtkColorTransferFunction.h</label>
      </node>
      <node id="51">
        <label>fmt-vt/format.h</label>
      </node>
      <node id="57">
        <label>ostream</label>
      </node>
      <node id="7">
        <label>vtkNamedColors.h</label>
      </node>
      <node id="17">
        <label>vtkTransform.h</label>
      </node>
      <node id="29">
        <label>vtkBitArray.h</label>
      </node>
      <node id="1">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/render/render.cc</label>
        <link refid="render_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vtkRenderWindowInteractor.h</label>
      </node>
      <node id="62">
        <label>tuple</label>
      </node>
      <node id="26">
        <label>vtkPNGWriter.h</label>
      </node>
      <node id="12">
        <label>vtkPolyDataMapper.h</label>
      </node>
      <node id="49">
        <label>vector</label>
      </node>
      <node id="55">
        <label>vt-tv/api/object_info.h</label>
        <link refid="object__info_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vt-tv/render/render.h</label>
        <link refid="render_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>vtkRegularPolygonSource.h</label>
      </node>
      <node id="50">
        <label>utility</label>
      </node>
      <node id="64">
        <label>array</label>
      </node>
      <node id="43">
        <label>vt-tv/api/object_work.h</label>
        <link refid="object__work_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>vt-tv/api/phase_work.h</label>
        <link refid="phase__work_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>vtkNew.h</label>
      </node>
      <node id="25">
        <label>vtkWindowToImageFilter.h</label>
      </node>
      <node id="61">
        <label>cstdlib</label>
      </node>
      <node id="13">
        <label>vtkDoubleArray.h</label>
      </node>
      <node id="45">
        <label>iostream</label>
      </node>
      <node id="52">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>vtkRenderer.h</label>
      </node>
      <node id="34">
        <label>vtkPolyDataWriter.h</label>
      </node>
      <node id="32">
        <label>vtkLookupTable.h</label>
      </node>
      <node id="28">
        <label>vtkSphereSource.h</label>
      </node>
      <node id="30">
        <label>vtkLine.h</label>
      </node>
      <node id="56">
        <label>set</label>
      </node>
      <node id="21">
        <label>vtkTextActor.h</label>
      </node>
      <node id="20">
        <label>vtkScalarBarActor.h</label>
      </node>
      <node id="59">
        <label>algorithm</label>
      </node>
      <node id="18">
        <label>vtkTransformPolyDataFilter.h</label>
      </node>
      <node id="9">
        <label>vtkProperty.h</label>
      </node>
      <node id="39">
        <label>vt-tv/api/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>vtkXMLPolyDataWriter.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1tv">vt::tv</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="render_8cc_1a9b837307097646bf750c464ddf0d28b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vt::tv::compareObjects</definition>
        <argsstring>(const std::pair&lt; ObjectWork, uint64_t &gt; &amp;p1, const std::pair&lt; ObjectWork, uint64_t &gt; &amp;p2)</argsstring>
        <name>compareObjects</name>
        <param>
          <type>const std::pair&lt; ObjectWork, uint64_t &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const std::pair&lt; ObjectWork, uint64_t &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/render/render.cc" line="345" column="6" bodyfile="/home/runner/work/vt-tv/vt-tv/src/vt-tv/render/render.cc" bodystart="345" bodyend="356"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render.cc</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt-tv<sp/>=&gt;<sp/>Virtual<sp/>Transport<sp/>--<sp/>Task<sp/>Visualizer</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019-2024<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vt-tv/render/render.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/nanobind.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>nb<sp/>=<sp/>nanobind;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>namespace<sp/>nb::literals;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vt::tv<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="structvt_1_1tv_1_1_render_1aa66d973e7c9db250b6e6753848e47ec2" kindref="member">Render::Render</ref>(Info<sp/>in_info)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>:<sp/>info_(in_info)<sp/></highlight><highlight class="comment">//<sp/>std:move<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>n_ranks_(in_info.getNumRanks()),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>n_phases_(in_info.getNumPhases())<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>selected_phase<sp/>is<sp/>not<sp/>provided,<sp/>use<sp/>all<sp/>phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>selected_phase_<sp/>=<sp/>std::numeric_limits&lt;PhaseType&gt;::max();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generically<sp/>set<sp/>rank<sp/>grid<sp/>dimensions<sp/>according<sp/>to<sp/>the<sp/>total<sp/>number<sp/>of<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>grid_size_[2]<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>we<sp/>assume<sp/>2D<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>uint64_t<sp/>sqrt_n_ranks<sp/>=</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n_ranks_)));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sqrt_n_ranks<sp/>*<sp/>sqrt_n_ranks<sp/>==<sp/>n_ranks_)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>n_ranks<sp/>is<sp/>a<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>grid_size_[0]<sp/>=<sp/>sqrt_n_ranks;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>grid_size_[1]<sp/>=<sp/>sqrt_n_ranks;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>n_ranks<sp/>is<sp/>not<sp/>a<sp/>perfect<sp/>square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>grid_size_[0]<sp/>=<sp/>sqrt_n_ranks;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>floor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>grid_size_[1]<sp/>=<sp/>sqrt_n_ranks<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>ceil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>3;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grid_size_[d]<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rank_dims_.insert(d);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>max_o_per_dim_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>info<sp/>selected_phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>this-&gt;info_.setSelectedPhase(selected_phase_);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>communication<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected_phase_<sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;info_.normalizeEdges(selected_phase_);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PhaseType<sp/>phase<sp/>=<sp/>0;<sp/>phase<sp/>&lt;<sp/>this-&gt;n_phases_;<sp/>phase++)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;info_.normalizeEdges(phase);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>jitter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::srand(std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>allObjects<sp/>=<sp/>info_.getAllObjectIDs();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objectID<sp/>:<sp/>allObjects)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>3&gt;<sp/>jitterDims;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>3;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>this-&gt;rank_dims_.find(d);<sp/>f<sp/>!=<sp/>this-&gt;rank_dims_.end())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitterDims[d]<sp/>=<sp/>((double)std::rand()<sp/>/<sp/>RAND_MAX<sp/>-<sp/>0.5)<sp/>*<sp/>object_jitter_;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitterDims[d]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>jitter_dims_.insert(std::make_pair(objectID,<sp/>jitterDims));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>object_qoi_range_<sp/>=<sp/>this-&gt;computeObjectQOIRange_();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>rank_qoi_range_<sp/>=<sp/>this-&gt;computeRankQOIRange_();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>object_volume_max_<sp/>=<sp/>this-&gt;computeMaxObjectVolume_();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>object_load_max_<sp/>=<sp/>this-&gt;info_.getMaxLoad();</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">Render::Render(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::array&lt;std::string,<sp/>3&gt;<sp/>in_qoi_request,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_continuous_object_qoi,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>Info&amp;<sp/>in_info,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>in_grid_size,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in_object_jitter,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>std::string<sp/>in_output_dir,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>std::string<sp/>in_output_file_stem,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in_resolution,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_save_meshes,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_save_pngs,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>PhaseType<sp/>in_selected_phase)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>:<sp/>rank_qoi_(in_qoi_request[0]),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>object_qoi_(in_qoi_request[2]),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>continuous_object_qoi_(in_continuous_object_qoi),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>info_(in_info),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>n_ranks_(in_info.getNumRanks()),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>n_phases_(in_info.getNumPhases()),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>grid_size_(in_grid_size),</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>object_jitter_(in_object_jitter),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>output_dir_(in_output_dir),</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>output_file_stem_(in_output_file_stem),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>grid_resolution_(in_resolution),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>save_meshes_(in_save_meshes),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>save_pngs_(in_save_pngs),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>selected_phase_(in_selected_phase)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>number<sp/>of<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>n_ranks_<sp/>=<sp/>info_.getNumRanks();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>rank<sp/>dimensions<sp/>according<sp/>to<sp/>given<sp/>grid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>3;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grid_size_[d]<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rank_dims_.insert(d);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>max_o_per_dim_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>info<sp/>selected_phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>this-&gt;info_.setSelectedPhase(selected_phase_);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>communication<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected_phase_<sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;info_.normalizeEdges(selected_phase_);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PhaseType<sp/>phase<sp/>=<sp/>0;<sp/>phase<sp/>&lt;<sp/>this-&gt;n_phases_;<sp/>phase++)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;info_.normalizeEdges(phase);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>jitter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>std::srand(std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>allObjects<sp/>=<sp/>info_.getAllObjectIDs();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objectID<sp/>:<sp/>allObjects)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>3&gt;<sp/>jitterDims;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>3;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>this-&gt;rank_dims_.find(d);<sp/>f<sp/>!=<sp/>this-&gt;rank_dims_.end())<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitterDims[d]<sp/>=<sp/>((double)std::rand()<sp/>/<sp/>RAND_MAX<sp/>-<sp/>0.5)<sp/>*<sp/>object_jitter_;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jitterDims[d]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>jitter_dims_.insert(std::make_pair(objectID,<sp/>jitterDims));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>object_qoi_range_<sp/>=<sp/>this-&gt;computeObjectQOIRange_();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>rank_qoi_range_<sp/>=<sp/>this-&gt;computeRankQOIRange_();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>object_volume_max_<sp/>=<sp/>this-&gt;computeMaxObjectVolume_();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>object_load_max_<sp/>=<sp/>this-&gt;info_.getMaxLoad();</highlight></codeline>
<codeline lineno="181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Render::computeMaxObjectVolume_()<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ov_max<sp/>=<sp/>this-&gt;info_.getMaxVolume();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ov_max;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">std::variant&lt;std::pair&lt;double,<sp/>double&gt;,<sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">Render::computeObjectQOIRange_()<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>object<sp/>QOI<sp/>range<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oq_max<sp/>=<sp/>-1<sp/>*<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oq_min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oq;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;<sp/>oq_all;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>QOI<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>updateQOIRange<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>maximum<sp/>object<sp/>qoi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oq<sp/>=<sp/>info_.getObjectQOIAtPhase(obj_id,<sp/>phase,<sp/>this-&gt;object_qoi_);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!continuous_object_qoi_)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>integer<sp/>categorical<sp/>QOI<sp/>(i.e.<sp/>rank_id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oq<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oq))<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oq_all.insert(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oq));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oq_all.insert(oq);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oq_all.size()<sp/>&gt;<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oq_all.clear();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continuous_object_qoi_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oq<sp/>&gt;<sp/>oq_max)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oq_max<sp/>=<sp/>oq;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oq<sp/>&lt;<sp/>oq_min)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oq_min<sp/>=<sp/>oq;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>all<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected_phase_<sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;info_.getPhaseObjects(selected_phase_);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>updateQOIRange(objects,<sp/>selected_phase_);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PhaseType<sp/>phase<sp/>=<sp/>0;<sp/>phase<sp/>&lt;<sp/>this-&gt;n_phases_;<sp/>phase++)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;info_.getPhaseObjects(phase);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateQOIRange(objects,<sp/>phase);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>extrema<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>this-&gt;object_qoi_max_<sp/>=<sp/>oq_max;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(continuous_object_qoi_)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(oq_min,<sp/>oq_max);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oq_all;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">std::pair&lt;double,<sp/>double&gt;<sp/>Render::computeRankQOIRange_()<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>rank<sp/>QOI<sp/>range<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rq_max<sp/>=<sp/>-1<sp/>*<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rq_min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rqmax_for_phase;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rqmin_for_phase;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>all<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank_id<sp/>=<sp/>0;<sp/>rank_id<sp/>&lt;<sp/>this-&gt;n_ranks_;<sp/>rank_id++)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;PhaseType,<sp/>double&gt;<sp/>rank_qoi_map;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>rank_qoi_map<sp/>=<sp/>this-&gt;info_.getAllQOIAtRank(rank_id,<sp/>this-&gt;rank_qoi_);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>max<sp/>qoi<sp/>for<sp/>this<sp/>rank<sp/>across<sp/>all<sp/>phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prmax<sp/>=<sp/>std::max_element(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(rank_qoi_map),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::end(rank_qoi_map),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;PhaseType,<sp/>double&gt;&amp;<sp/>p1,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;PhaseType,<sp/>double&gt;&amp;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p1.second<sp/>&lt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>rqmax_for_phase<sp/>=<sp/>prmax-&gt;second;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>min<sp/>qoi<sp/>for<sp/>this<sp/>rank<sp/>across<sp/>all<sp/>phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prmin<sp/>=<sp/>std::max_element(</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(rank_qoi_map),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::end(rank_qoi_map),</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;PhaseType,<sp/>double&gt;&amp;<sp/>p1,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;PhaseType,<sp/>double&gt;&amp;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p1.second<sp/>&gt;<sp/>p2.second;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>rqmin_for_phase<sp/>=<sp/>prmin-&gt;second;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rqmax_for_phase<sp/>&gt;<sp/>rq_max)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rq_max<sp/>=<sp/>rqmax_for_phase;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rqmin_for_phase<sp/>&lt;<sp/>rq_min)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rq_min<sp/>=<sp/>rqmin_for_phase;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(rq_min,<sp/>rq_max);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Render::computeRankQOIAverage_(PhaseType<sp/>phase,<sp/>std::string<sp/>qoi)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>rank<sp/>QOI<sp/>range<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rq_sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rank_loads_at_phase<sp/>=</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;info_.getAllRankQOIAtPhase(phase,<sp/>qoi);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[rank,<sp/>rank_load]<sp/>:<sp/>rank_loads_at_phase)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>rq_sum<sp/>+=<sp/>rank_load;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rq_sum<sp/>/<sp/>rank_loads_at_phase.size();</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">std::map&lt;NodeType,<sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;&gt;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">Render::createObjectMapping_(PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>std::map&lt;NodeType,<sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;&gt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>object_mapping;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>each<sp/>rank<sp/>and<sp/>its<sp/>corresponding<sp/>objects<sp/>at<sp/>the<sp/>given<sp/>phase<sp/>to<sp/>the<sp/>object<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank_id<sp/>=<sp/>0;<sp/>rank_id<sp/>&lt;<sp/>this-&gt;n_ranks_;<sp/>rank_id++)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>object_mapping.insert(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(rank_id,<sp/>this-&gt;info_.getRankObjects(rank_id,<sp/>phase)));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object_mapping;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">vtkNew&lt;vtkPolyData&gt;<sp/>Render::createRankMesh_(PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;-----<sp/>Creating<sp/>rank<sp/>mesh<sp/>for<sp/>phase<sp/>{}<sp/>-----\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkPoints&gt;<sp/>rank_points_;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>rank_points_-&gt;SetNumberOfPoints(this-&gt;n_ranks_);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkDoubleArray&gt;<sp/>rank_arr;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>std::string<sp/>rank_array_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Rank<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>this-&gt;rank_qoi_;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>rank_arr-&gt;SetName(rank_array_name.c_str());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>rank_arr-&gt;SetNumberOfTuples(this-&gt;n_ranks_);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank_id<sp/>=<sp/>0;<sp/>rank_id<sp/>&lt;<sp/>this-&gt;n_ranks_;<sp/>rank_id++)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>cartesian<sp/>=</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;globalIDToCartesian_(rank_id,<sp/>this-&gt;grid_size_);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>3&gt;<sp/>offsets<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cartesian[0]<sp/>*<sp/>this-&gt;grid_resolution_,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cartesian[1]<sp/>*<sp/>this-&gt;grid_resolution_,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cartesian[2]<sp/>*<sp/>this-&gt;grid_resolution_};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>point<sp/>based<sp/>on<sp/>cartesian<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>rank_points_-&gt;SetPoint(rank_id,<sp/>offsets[0],<sp/>offsets[1],<sp/>offsets[2]);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>objects<sp/>=<sp/>this-&gt;info_.getRankObjects(rank_id,<sp/>phase);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank_qoi_val<sp/>=</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;info_.getRankQOIAtPhase(rank_id,<sp/>phase,<sp/>this-&gt;rank_qoi_);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>rank_arr-&gt;SetTuple1(rank_id,<sp/>rank_qoi_val);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkPolyData&gt;<sp/>pd_mesh;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;SetPoints(rank_points_);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;GetPointData()-&gt;SetScalars(rank_arr);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;-----<sp/>Finished<sp/>creating<sp/>rank<sp/>mesh<sp/>for<sp/>phase<sp/>{}<sp/>-----\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pd_mesh;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compareObjects(</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;ObjectWork,<sp/>uint64_t&gt;&amp;<sp/>p1,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;ObjectWork,<sp/>uint64_t&gt;&amp;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>ElementIDType<sp/>lhsID<sp/>=<sp/>p1.first.getID();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>ElementIDType<sp/>rhsID<sp/>=<sp/>p2.first.getID();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>uint64_t<sp/>migratableLhs<sp/>=<sp/>p1.second;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>uint64_t<sp/>migratableRhs<sp/>=<sp/>p2.second;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(migratableLhs<sp/>!=<sp/>migratableRhs)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>migratableLhs<sp/>&lt;<sp/>migratableRhs;<sp/></highlight><highlight class="comment">//<sp/>non-migratable<sp/>comes<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhsID<sp/>&lt;<sp/>rhsID;<sp/></highlight><highlight class="comment">//<sp/>then<sp/>sort<sp/>by<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">vtkNew&lt;vtkPolyData&gt;<sp/>Render::createObjectMesh_(PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;-----<sp/>Creating<sp/>object<sp/>mesh<sp/>for<sp/>phase<sp/>{}<sp/>-----\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>number<sp/>of<sp/>mesh<sp/>points<sp/>and<sp/>bail<sp/>out<sp/>early<sp/>if<sp/>empty<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>uint64_t<sp/>n_o<sp/>=<sp/>this-&gt;info_.getPhaseObjects(phase).size();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Number<sp/>of<sp/>objects<sp/>in<sp/>phase:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>n_o);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>point<sp/>array<sp/>for<sp/>object<sp/>quantity<sp/>of<sp/>interest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkDoubleArray&gt;<sp/>q_arr;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>q_arr-&gt;SetName(this-&gt;object_qoi_.c_str());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>q_arr-&gt;SetNumberOfTuples(n_o);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>array<sp/>must<sp/>be<sp/>added<sp/>when<sp/>it<sp/>is<sp/>not<sp/>the<sp/>object<sp/>QOI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkDoubleArray&gt;<sp/>l_arr;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;object_qoi_<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>l_arr-&gt;SetName(</highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>l_arr-&gt;SetNumberOfTuples(n_o);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>bit<sp/>array<sp/>for<sp/>object<sp/>migratability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkBitArray&gt;<sp/>b_arr;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>b_arr-&gt;SetName(</highlight><highlight class="stringliteral">&quot;migratable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>b_arr-&gt;SetNumberOfTuples(n_o);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>size<sp/>point<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkPoints&gt;<sp/>points;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>points-&gt;SetNumberOfPoints(n_o);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>elements<sp/>constant<sp/>across<sp/>all<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>std::string<sp/>object_qoi<sp/>=<sp/>this-&gt;object_qoi_;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>ranks<sp/>and<sp/>objects<sp/>to<sp/>create<sp/>mesh<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>uint64_t<sp/>point_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>std::map&lt;ElementIDType,<sp/>uint64_t&gt;<sp/>objectid_to_index;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sent_volumes<sp/>is<sp/>a<sp/>vector<sp/>to<sp/>store<sp/>the<sp/>communications<sp/>(&quot;from&quot;<sp/>object<sp/>id,<sp/>&quot;sent<sp/>to&quot;<sp/>object<sp/>id,<sp/>and<sp/>volume)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>std::vector&lt;std::tuple&lt;ElementIDType,<sp/>ElementIDType,<sp/>double&gt;&gt;<sp/>sent_volumes;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>object_mapping<sp/>=<sp/>this-&gt;createObjectMapping_(phase);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>object<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[rankID,<sp/>objects]<sp/>:<sp/>object_mapping)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>ijk<sp/>=</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;globalIDToCartesian_(rankID,<sp/>this-&gt;grid_size_);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>3&gt;<sp/>offsets<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ijk[0]<sp/>*<sp/>this-&gt;grid_resolution_,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ijk[1]<sp/>*<sp/>this-&gt;grid_resolution_,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ijk[2]<sp/>*<sp/>this-&gt;grid_resolution_};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>local<sp/>object<sp/>block<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_o_rank<sp/>=<sp/>objects.size();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_o_per_dim<sp/>=<sp/>ceil(pow(n_o_rank,<sp/>1.0<sp/>/<sp/>this-&gt;rank_dims_.size()));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_o_per_dim<sp/>&gt;<sp/>this-&gt;max_o_per_dim_)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;max_o_per_dim_<sp/>=<sp/>n_o_per_dim;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>o_resolution<sp/>=<sp/>this-&gt;grid_resolution_<sp/>/<sp/>(n_o_per_dim<sp/>+<sp/>1.);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>point<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>rank_size<sp/>=<sp/>{1,<sp/>1,<sp/>1};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>3;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>this-&gt;rank_dims_.find(d);<sp/>f<sp/>!=<sp/>this-&gt;rank_dims_.end())<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_size[d]<sp/>=<sp/>n_o_per_dim;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_size[d]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>3&gt;<sp/>centering<sp/>=<sp/>{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>3;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>this-&gt;rank_dims_.find(d);<sp/>f<sp/>!=<sp/>this-&gt;rank_dims_.end())<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centering[d]<sp/>=<sp/>0.5<sp/>*<sp/>o_resolution<sp/>*<sp/>(n_o_per_dim<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centering[d]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;ObjectWork,<sp/>uint64_t&gt;&gt;<sp/>ordered_objects;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[objectID,<sp/>objectWork]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>migratable<sp/>=<sp/>this-&gt;info_.getObjectInfo().at(objectID).isMigratable();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ordered_objects.push_back(std::make_pair(objectWork,<sp/>migratable));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(ordered_objects.begin(),<sp/>ordered_objects.end(),<sp/>compareObjects);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>rank<sp/>objects<sp/>to<sp/>point<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[objectWork,<sp/>migratable]<sp/>:<sp/>ordered_objects)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;Object<sp/>ID:<sp/>{},<sp/>migratable:<sp/>{}\n&quot;,<sp/>objectWork.getID(),<sp/>migratable);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>point<sp/>using<sp/>offset<sp/>and<sp/>rank<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>3&gt;<sp/>currentPointPosition<sp/>=<sp/>{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>this-&gt;globalIDToCartesian_(i,<sp/>rank_size))<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPointPosition[d]<sp/>=<sp/>offsets[d]<sp/>-<sp/>centering[d]<sp/>+</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(jitter_dims_.at(objectWork.getID())[d]<sp/>+<sp/>c)<sp/>*<sp/>o_resolution;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d++;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>points-&gt;SetPoint(</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_index,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPointPosition[0],</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPointPosition[1],</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentPointPosition[2]);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>object<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ElementIDType<sp/>obj_id<sp/>=<sp/>objectWork.getID();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oq<sp/>=<sp/>this-&gt;info_.getObjectQOIAtPhase(obj_id,<sp/>phase,<sp/>this-&gt;object_qoi_);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q_arr-&gt;SetTuple1(point_index,<sp/>oq);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b_arr-&gt;SetTuple1(point_index,<sp/>migratable);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;object_qoi_<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_arr-&gt;SetTuple1(point_index,<sp/>objectWork.getLoad());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>objSent<sp/>=<sp/>objectWork.getSent();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[k,<sp/>v]<sp/>:<sp/>objSent)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent_volumes.push_back(std::make_tuple(point_index,<sp/>k,<sp/>v));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objectid_to_index.insert(std::make_pair(objectWork.getID(),<sp/>point_index));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>point_index++;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkDoubleArray&gt;<sp/>lineValuesArray;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>lineValuesArray-&gt;SetName(</highlight><highlight class="stringliteral">&quot;bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkCellArray&gt;<sp/>lines;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>uint64_t<sp/>n_e<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>std::</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;std::tuple&lt;ElementIDType,<sp/>ElementIDType&gt;,<sp/>std::tuple&lt;uint64_t,<sp/>double&gt;&gt;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_values;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Creating<sp/>inter-object<sp/>communication<sp/>edges\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[pt_index,<sp/>k,<sp/>v]<sp/>:<sp/>sent_volumes)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>point<sp/>index<sp/>and<sp/>the<sp/>object<sp/>id<sp/>in<sp/>the<sp/>&quot;ij&quot;<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;ElementIDType,<sp/>ElementIDType&gt;<sp/>ij;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt_index<sp/>&lt;=<sp/>objectid_to_index.at(k))<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ij<sp/>=<sp/>{pt_index,<sp/>objectid_to_index.at(k)};</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ij<sp/>=<sp/>{objectid_to_index.at(k),<sp/>pt_index};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;uint64_t,<sp/>double&gt;<sp/>edge_value;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e_ij<sp/>=<sp/>edge_values.find(ij);<sp/>e_ij<sp/>!=<sp/>edge_values.end())<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>line<sp/>already<sp/>exist<sp/>we<sp/>just<sp/>update<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_edge<sp/>=<sp/>std::get&lt;0&gt;(edge_values.at(ij));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_v<sp/>=<sp/>std::get&lt;1&gt;(edge_values.at(ij));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_values.at(ij)<sp/>=<sp/>{current_edge,<sp/>current_v<sp/>+<sp/>v};</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineValuesArray-&gt;SetTuple1(</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;0&gt;(edge_values.at(ij)),<sp/>std::get&lt;1&gt;(edge_values.at(ij)));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;\tupdating<sp/>edge<sp/>{}<sp/>({}--{}):<sp/>{}\n&quot;,<sp/>current_edge,<sp/>std::get&lt;0&gt;(ij),<sp/>std::get&lt;1&gt;(ij),<sp/>current_v+v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>doesn&apos;t,<sp/>we<sp/>create<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;\tcreating<sp/>edge<sp/>{}<sp/>({}--{}):<sp/>{}\n&quot;,<sp/>n_e,<sp/>std::get&lt;0&gt;(ij),<sp/>std::get&lt;1&gt;(ij),<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_value<sp/>=<sp/>{n_e,<sp/>v};</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_values.insert({ij,<sp/>edge_value});</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_e<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lineValuesArray-&gt;InsertNextTuple1(v);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkNew&lt;vtkLine&gt;<sp/>line;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line-&gt;GetPointIds()-&gt;SetId(0,<sp/>std::get&lt;0&gt;(ij));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>line-&gt;GetPointIds()-&gt;SetId(1,<sp/>std::get&lt;1&gt;(ij));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lines-&gt;InsertNextCell(line);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkPolyData&gt;<sp/>pd_mesh;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;SetPoints(points);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;SetLines(lines);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;GetPointData()-&gt;SetScalars(q_arr);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;GetPointData()-&gt;AddArray(b_arr);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;object_qoi_<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>pd_mesh-&gt;GetPointData()-&gt;AddArray(l_arr);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>pd_mesh-&gt;GetCellData()-&gt;SetScalars(lineValuesArray);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;-----<sp/>Finished<sp/>creating<sp/>object<sp/>mesh<sp/>-----\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pd_mesh;</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Render::getRgbFromTab20Colormap_(</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::tuple&lt;double,<sp/>double,<sp/>double&gt;&gt;<sp/>tab20_cmap<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.12156862745098039,<sp/>0.4666666666666667,<sp/>0.7058823529411765},</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6823529411764706,<sp/>0.7803921568627451,<sp/>0.9098039215686274},</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.0,<sp/>0.4980392156862745,<sp/>0.054901960784313725},</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.0,<sp/>0.7333333333333333,<sp/>0.47058823529411764},</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.17254901960784313,<sp/>0.6274509803921569,<sp/>0.17254901960784313},</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.596078431372549,<sp/>0.8745098039215686,<sp/>0.5411764705882353},</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.8392156862745098,<sp/>0.15294117647058825,<sp/>0.1568627450980392},</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.0,<sp/>0.596078431372549,<sp/>0.5882352941176471},</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.5803921568627451,<sp/>0.403921568627451,<sp/>0.7411764705882353},</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7725490196078432,<sp/>0.6901960784313725,<sp/>0.8352941176470589},</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.5490196078431373,<sp/>0.33725490196078434,<sp/>0.29411764705882354},</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7686274509803922,<sp/>0.611764705882353,<sp/>0.5803921568627451},</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.8901960784313725,<sp/>0.4666666666666667,<sp/>0.7607843137254902},</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.9686274509803922,<sp/>0.7137254901960784,<sp/>0.8235294117647058},</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.4980392156862745,<sp/>0.4980392156862745,<sp/>0.4980392156862745},</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7803921568627451,<sp/>0.7803921568627451,<sp/>0.7803921568627451},</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7372549019607844,<sp/>0.7411764705882353,<sp/>0.13333333333333333},</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.8588235294117647,<sp/>0.8588235294117647,<sp/>0.5529411764705883},</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.09019607843137255,<sp/>0.7450980392156863,<sp/>0.8117647058823529},</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6196078431372549,<sp/>0.8549019607843137,<sp/>0.8980392156862745}};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index)<sp/>&gt;=<sp/>tab20_cmap.size())<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds<sp/>for<sp/>tab20<sp/>colormap.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>std::tie(r,<sp/>g,<sp/>b)<sp/>=<sp/>tab20_cmap[index];</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>vtkSmartPointer&lt;vtkDiscretizableColorTransferFunction&gt;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">Render::createColorTransferFunction_(</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>std::variant&lt;std::pair&lt;double,<sp/>double&gt;,<sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_range,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>ColorType<sp/>ct)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkDiscretizableColorTransferFunction&gt;<sp/>ctf<sp/>=</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkDiscretizableColorTransferFunction&gt;::New();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>ctf-&gt;SetNanColorRGBA(1.,<sp/>1.,<sp/>1.,<sp/>0.);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>ctf-&gt;UseBelowRangeColorOn();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>ctf-&gt;UseAboveRangeColorOn();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>discrete<sp/>when<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;(</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attribute_range))<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&amp;<sp/>values<sp/>=</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;(attribute_range);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>set<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>ctf-&gt;DiscretizeOn();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_colors<sp/>=<sp/>values.size();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>ctf-&gt;IndexedLookupOn();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>ctf-&gt;SetNumberOfIndexedColors(n_colors);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::visit(</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;ctf](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>val)<sp/>{<sp/>ctf-&gt;SetAnnotation(val,<sp/>std::to_string(val));<sp/>},</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>discrete<sp/>color<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getRgbFromTab20Colormap_(i,<sp/>r,<sp/>g,<sp/>b);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rgb[3]<sp/>=<sp/>{r,<sp/>g,<sp/>b};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetIndexedColorRGB(i,<sp/>rgb);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>ctf-&gt;Build();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctf;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::pair&lt;double,<sp/>double&gt;&gt;(</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attribute_range))<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;double,<sp/>double&gt;&amp;<sp/>range<sp/>=</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::pair&lt;double,<sp/>double&gt;&gt;(attribute_range);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ct)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ColorType::BlueToRed:<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetColorSpaceToDiverging();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mid_point<sp/>=<sp/>(range.first<sp/>+<sp/>range.second)<sp/>*<sp/>.5;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.first,<sp/>.231,<sp/>.298,<sp/>.753);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(mid_point,<sp/>.865,<sp/>.865,<sp/>.865);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.second,<sp/>.906,<sp/>.016,<sp/>.109);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetBelowRangeColor(0.0,<sp/>1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetAboveRangeColor(1.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ColorType::HotSpot:<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetColorSpaceToDiverging();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mid_point1<sp/>=<sp/>(range.second<sp/>-<sp/>range.first)<sp/>*<sp/>0.25;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mid_point2<sp/>=<sp/>(range.second<sp/>-<sp/>range.first)<sp/>*<sp/>0.75;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.first,<sp/>0.0,<sp/>0.0,<sp/>1.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Blue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(mid_point1,<sp/>0.0,<sp/>1.0,<sp/>0.0);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Green</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(mid_point2,<sp/>1.0,<sp/>0.8,<sp/>0.0);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Orange</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.second,<sp/>1.0,<sp/>0.0,<sp/>0.0);<sp/></highlight><highlight class="comment">//<sp/>Red</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetBelowRangeColor(0.0,<sp/>1.0,<sp/>1.0);<sp/></highlight><highlight class="comment">//<sp/>Cyan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetAboveRangeColor(1.0,<sp/>1.0,<sp/>0.0);<sp/></highlight><highlight class="comment">//<sp/>Yellow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ColorType::WhiteToBlack:<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.first,<sp/>1.0,<sp/>1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.second,<sp/>0.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetBelowRangeColor(0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetAboveRangeColor(1.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ColorType::Default:<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mid_point<sp/>=<sp/>(range.first<sp/>+<sp/>range.second)<sp/>*<sp/>.5;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.first,<sp/>.431,<sp/>.761,<sp/>.161);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(mid_point,<sp/>.98,<sp/>.992,<sp/>.059);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;AddRGBPoint(range.second,<sp/>1.0,<sp/>.647,<sp/>0.0);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetBelowRangeColor(0.8,<sp/>0.8,<sp/>.8);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctf-&gt;SetAboveRangeColor(1.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctf;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>type<sp/>in<sp/>attribute_range<sp/>variant.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">/*static*/</highlight><highlight class="normal"><sp/>vtkSmartPointer&lt;vtkScalarBarActor&gt;<sp/>Render::createScalarBarActor_(</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkMapper&gt;<sp/>mapper,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>title,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>uint64_t<sp/>font_size,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkScalarBarActor&gt;<sp/>scalar_bar_actor<sp/>=</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkScalarBarActor&gt;::New();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;SetLookupTable(mapper-&gt;GetLookupTable());</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>default<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;SetOrientationToHorizontal();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;UnconstrainedFontSizeOn();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;SetHeight(0.08);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;SetWidth(0.42);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;SetBarRatio(0.3);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;DrawTickLabelsOn();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>scalar_bar_actor-&gt;SetLabelFormat(</highlight><highlight class="stringliteral">&quot;%.2G&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!values.empty())<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_bar_actor-&gt;SetNumberOfLabels(values.size());</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_bar_actor-&gt;SetAnnotationLeaderPadding(8);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>formatted_title<sp/>=<sp/>title;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>std::replace(formatted_title.begin(),<sp/>formatted_title.end(),<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>title_with_newline<sp/>=<sp/>formatted_title<sp/>+<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_bar_actor-&gt;SetTitle(title_with_newline.c_str());</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_bar_actor-&gt;SetNumberOfLabels(2);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>formatted_title<sp/>=<sp/>title;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>std::replace(formatted_title.begin(),<sp/>formatted_title.end(),<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_bar_actor-&gt;SetTitle(formatted_title.c_str());</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Modify<sp/>properties<sp/>for<sp/>all<sp/>text<sp/>in<sp/>scalar<sp/>bar<sp/>actor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>std::vector&lt;vtkTextProperty*&gt;<sp/>properties;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>properties.push_back(scalar_bar_actor-&gt;GetTitleTextProperty());</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>properties.push_back(scalar_bar_actor-&gt;GetLabelTextProperty());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>properties.push_back(scalar_bar_actor-&gt;GetAnnotationTextProperty());</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vtkTextProperty*<sp/>prop<sp/>:<sp/>properties)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;SetColor(0.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;ItalicOff();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;BoldOff();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;SetFontFamilyToArial();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>prop-&gt;SetFontSize(font_size);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>custom<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>vtkCoordinate*<sp/>position<sp/>=<sp/>scalar_bar_actor-&gt;GetPositionCoordinate();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>position-&gt;SetCoordinateSystemToNormalizedViewport();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>position-&gt;SetValue(x,<sp/>y,<sp/>0.0);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scalar_bar_actor;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>Render::globalIDToCartesian_(</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>uint64_t<sp/>flat_id,<sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>grid_sizes)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>std::array&lt;uint64_t,<sp/>3&gt;<sp/>cartesian<sp/>=<sp/>{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>uint64_t<sp/>n01<sp/>=<sp/>grid_sizes[0]<sp/>*<sp/>grid_sizes[1];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flat_id<sp/>&gt;=<sp/>n01<sp/>*<sp/>grid_sizes[2])<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>successive<sp/>Euclidean<sp/>divisions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>uint64_t<sp/>quot1<sp/>=<sp/>flat_id<sp/>/<sp/>n01;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>uint64_t<sp/>rem1<sp/>=<sp/>flat_id<sp/>%<sp/>n01;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>uint64_t<sp/>quot2<sp/>=<sp/>rem1<sp/>/<sp/>grid_sizes[0];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>uint64_t<sp/>rem2<sp/>=<sp/>rem1<sp/>%<sp/>grid_sizes[0];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>cartesian[0]<sp/>=<sp/>rem2;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>cartesian[1]<sp/>=<sp/>quot2;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>cartesian[2]<sp/>=<sp/>quot1;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cartesian;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>vtkSmartPointer&lt;vtkRenderer&gt;<sp/>Render::setupRenderer_()<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkRenderer&gt;<sp/>renderer<sp/>=<sp/>vtkSmartPointer&lt;vtkRenderer&gt;::New();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>renderer-&gt;SetBackground(1.0,<sp/>1.0,<sp/>1.0);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>background<sp/>to<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>renderer-&gt;GetActiveCamera()-&gt;ParallelProjectionOn();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renderer;</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>vtkSmartPointer&lt;vtkMapper&gt;<sp/>Render::createRanksMapper_(</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>vtkPolyData*<sp/>rank_mesh,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>std::variant&lt;std::pair&lt;double,<sp/>double&gt;,<sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>rank_qoi_range)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>square<sp/>glyphs<sp/>at<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkGlyphSource2D&gt;<sp/>rank_glyph<sp/>=</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkGlyphSource2D&gt;::New();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>rank_glyph-&gt;SetGlyphTypeToSquare();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>rank_glyph-&gt;SetScale(0.95);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>rank_glyph-&gt;FilledOn();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>rank_glyph-&gt;CrossOff();</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkGlyph2D&gt;<sp/>rank_glypher<sp/>=<sp/>vtkSmartPointer&lt;vtkGlyph2D&gt;::New();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>rank_glypher-&gt;SetSourceConnection(rank_glyph-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>rank_glypher-&gt;SetInputData(rank_mesh);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>rank_glypher-&gt;SetScaleModeToDataScalingOff();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lower<sp/>glyphs<sp/>slightly<sp/>for<sp/>visibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkTransform&gt;<sp/>z_lower<sp/>=<sp/>vtkSmartPointer&lt;vtkTransform&gt;::New();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>z_lower-&gt;Translate(0.0,<sp/>0.0,<sp/>-0.01);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;<sp/>trans<sp/>=</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;::New();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>trans-&gt;SetTransform(z_lower);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>trans-&gt;SetInputConnection(rank_glypher-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>mapper<sp/>for<sp/>rank<sp/>glyphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;<sp/>rank_mapper<sp/>=</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>rank_mapper-&gt;SetInputConnection(trans-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>rank_mapper-&gt;SetLookupTable(</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>createColorTransferFunction_(rank_qoi_range,<sp/>ColorType::BlueToRed));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>type<sp/>held<sp/>by<sp/>the<sp/>variant<sp/>qoi<sp/>range<sp/>and<sp/>set<sp/>the<sp/>scalar<sp/>range<sp/>appropriately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::pair&lt;double,<sp/>double&gt;&gt;(rank_qoi_range))<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_pair<sp/>=<sp/>std::get&lt;std::pair&lt;double,<sp/>double&gt;&gt;(rank_qoi_range);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>rank_mapper-&gt;SetScalarRange(range_pair.first,<sp/>range_pair.second);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;(</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_qoi_range))<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>range_set<sp/>=</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;(rank_qoi_range);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!range_set.empty())<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_begin<sp/>=<sp/>*range_set.begin();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_end<sp/>=<sp/>*range_set.rbegin();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;int&gt;(range_begin))<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_mapper-&gt;SetScalarRange(</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;int&gt;(range_begin),<sp/>std::get&lt;int&gt;(range_end));</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_mapper-&gt;SetScalarRange(</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;double&gt;(range_begin),<sp/>std::get&lt;double&gt;(range_end));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rank_mapper-&gt;SetScalarRange(0.,<sp/>0.);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>unexpected<sp/>type<sp/>or<sp/>set<sp/>a<sp/>default<sp/>scalar<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>type<sp/>in<sp/>rank<sp/>qoi<sp/>range<sp/>variant.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank_mapper;</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Render::renderPNG(</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>PhaseType<sp/>phase,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>vtkPolyData*<sp/>rank_mesh,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>vtkPolyData*<sp/>object_mesh,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>uint64_t<sp/>edge_width,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>glyph_factor,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>uint64_t<sp/>win_size,</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>uint64_t<sp/>font_size,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>std::string<sp/>output_dir,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>std::string<sp/>output_file_stem)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>rendering<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkRenderer&gt;<sp/>renderer<sp/>=<sp/>setupRenderer_();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>rank<sp/>mapper<sp/>for<sp/>later<sp/>use<sp/>and<sp/>create<sp/>corresponding<sp/>rank<sp/>actor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>std::variant&lt;std::pair&lt;double,<sp/>double&gt;,<sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>rank_qoi_variant(rank_qoi_range_);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkMapper&gt;<sp/>rank_mapper<sp/>=</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>createRanksMapper_(rank_mesh,<sp/>rank_qoi_variant);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkActor&gt;<sp/>rank_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkActor&gt;::New();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>rank_actor-&gt;SetMapper(rank_mapper);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>qoi<sp/>scale<sp/>legend<sp/>for<sp/>ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>std::string<sp/>rank_qoi_scale_title<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Rank<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>this-&gt;rank_qoi_;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkScalarBarActor&gt;<sp/>rank_qoi_scale_actor<sp/>=</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>createScalarBarActor_(</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rank_mapper,<sp/>rank_qoi_scale_title,<sp/>0.5,<sp/>0.9,<sp/>font_size);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>rank_qoi_scale_actor-&gt;DrawBelowRangeSwatchOn();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>rank_qoi_scale_actor-&gt;SetBelowRangeAnnotation(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>rank_qoi_scale_actor-&gt;DrawAboveRangeSwatchOn();</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>rank_qoi_scale_actor-&gt;SetAboveRangeAnnotation(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>rank<sp/>visualization<sp/>to<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>renderer-&gt;AddActor(rank_actor);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>renderer-&gt;AddActor2D(rank_qoi_scale_actor);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;object_qoi_<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>white<sp/>to<sp/>black<sp/>lookup<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkLookupTable&gt;<sp/>bw_lut<sp/>=</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkLookupTable&gt;::New();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_lut-&gt;SetTableRange(0.0,<sp/>this-&gt;object_volume_max_);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_lut-&gt;SetSaturationRange(0,<sp/>0);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_lut-&gt;SetHueRange(0,<sp/>0);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_lut-&gt;SetValueRange(1,<sp/>0);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_lut-&gt;SetNanColor(1.0,<sp/>1.0,<sp/>1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>bw_lut-&gt;Build();</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>mapper<sp/>for<sp/>inter-object<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;<sp/>edge_mapper<sp/>=</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_mapper-&gt;SetInputData(object_mesh);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_mapper-&gt;SetScalarModeToUseCellData();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_mapper-&gt;SetScalarRange(0.0,<sp/>this-&gt;object_volume_max_);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_mapper-&gt;SetLookupTable(bw_lut);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>communication<sp/>volume<sp/>and<sp/>its<sp/>scalar<sp/>bar<sp/>actors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkActor&gt;<sp/>edge_actor<sp/>=<sp/>vtkSmartPointer&lt;vtkActor&gt;::New();</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_actor-&gt;SetMapper(edge_mapper);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_actor-&gt;GetProperty()-&gt;SetLineWidth(edge_width);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkScalarBarActor&gt;<sp/>volume_actor<sp/>=<sp/>createScalarBarActor_(</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_mapper,<sp/></highlight><highlight class="stringliteral">&quot;Inter-Object<sp/>Volume&quot;</highlight><highlight class="normal">,<sp/>0.04,<sp/>0.04,<sp/>font_size);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>communications<sp/>visualization<sp/>to<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>renderer-&gt;AddActor(edge_actor);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>renderer-&gt;AddActor2D(volume_actor);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>square<sp/>root<sp/>of<sp/>object<sp/>loads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkArrayCalculator&gt;<sp/>sqrtL<sp/>=</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkArrayCalculator&gt;::New();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>sqrtL-&gt;SetInputData(object_mesh);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>sqrtL-&gt;AddScalarArrayName(</highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sqrtL_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sqrt(load)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>sqrtL-&gt;SetFunction(sqrtL_str.c_str());</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>sqrtL-&gt;SetResultArrayName(sqrtL_str.c_str());</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>sqrtL-&gt;Update();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkDataSet*<sp/>sqrtL_out<sp/>=<sp/>sqrtL-&gt;GetDataSetOutput();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>sqrtL_out-&gt;GetPointData()-&gt;SetActiveScalars(</highlight><highlight class="stringliteral">&quot;migratable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Glyph<sp/>sentinel<sp/>and<sp/>migratable<sp/>objects<sp/>separately:<sp/>0<sp/>is<sp/>for<sp/>non-migratable<sp/>objects,<sp/>1<sp/>for<sp/>migratable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;double,<sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;&gt;<sp/>glyph_mappers<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0.0,<sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New()},</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1.0,<sp/>vtkSmartPointer&lt;vtkPolyDataMapper&gt;::New()}};</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;double,<sp/>std::string&gt;<sp/>glyph_types<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0.0,<sp/></highlight><highlight class="stringliteral">&quot;Square&quot;</highlight><highlight class="normal">},<sp/>{1.0,<sp/></highlight><highlight class="stringliteral">&quot;Circle&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[k,<sp/>v]<sp/>:<sp/>glyph_types)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkThresholdPoints&gt;<sp/>thresh<sp/>=</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkThresholdPoints&gt;::New();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thresh-&gt;SetInputData(sqrtL_out);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thresh-&gt;ThresholdBetween(k,<sp/>k);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thresh-&gt;Update();</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkPolyData*<sp/>thresh_out<sp/>=<sp/>thresh-&gt;GetOutput();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thresh_out-&gt;GetNumberOfPoints()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thresh_out-&gt;GetPointData()-&gt;SetActiveScalars(sqrtL_str.c_str());</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Glyph<sp/>by<sp/>square<sp/>root<sp/>of<sp/>object<sp/>quantity<sp/>of<sp/>interest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkGlyphSource2D&gt;<sp/>glyph<sp/>=</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkGlyphSource2D&gt;::New();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Square&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph-&gt;SetGlyphTypeToSquare();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Circle&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph-&gt;SetGlyphTypeToCircle();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph-&gt;SetResolution(64);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph-&gt;SetScale(1.0);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph-&gt;FilledOn();</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph-&gt;CrossOff();</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkGlyph3D&gt;<sp/>glypher<sp/>=<sp/>vtkSmartPointer&lt;vtkGlyph3D&gt;::New();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glypher-&gt;SetSourceConnection(glyph-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glypher-&gt;SetInputData(thresh_out);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glypher-&gt;SetScaleModeToScaleByScalar();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glypher-&gt;SetScaleFactor(glyph_factor);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glypher-&gt;Update();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glypher-&gt;GetOutput()-&gt;GetPointData()-&gt;SetActiveScalars(</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;object_qoi_.c_str());</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransform&gt;<sp/>zRaise<sp/>=</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransform&gt;::New();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zRaise-&gt;Translate(0.0,<sp/>0.0,<sp/>0.01);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;<sp/>trans<sp/>=</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTransformPolyDataFilter&gt;::New();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trans-&gt;SetTransform(zRaise);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trans-&gt;SetInputData(glypher-&gt;GetOutput());</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph_mappers.at(k)-&gt;SetInputConnection(trans-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>glyph_mappers.at(k)-&gt;SetLookupTable(</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createColorTransferFunction_(this-&gt;object_qoi_range_));</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::pair&lt;double,<sp/>double&gt;&gt;(</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;object_qoi_range_))<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range<sp/>=</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::pair&lt;double,<sp/>double&gt;&gt;(this-&gt;object_qoi_range_);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>set<sp/>scalar<sp/>range<sp/>so<sp/>either<sp/>mapper<sp/>(migratable<sp/>vs<sp/>non-migratable)<sp/>can<sp/>be<sp/>used<sp/>for<sp/>the<sp/>scalar<sp/>bar<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph_mappers.at(k)-&gt;SetScalarRange(range.first,<sp/>range.second);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkActor&gt;<sp/>object_glyph_actor<sp/>=</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkActor&gt;::New();</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>object_glyph_actor-&gt;SetMapper(glyph_mappers.at(k));</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>objects<sp/>visualization<sp/>to<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderer-&gt;AddActor(object_glyph_actor);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glyph_mappers.at(1.0))<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>object_qoi_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>this-&gt;object_qoi_;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;<sp/>values<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>continuity<sp/>of<sp/>object<sp/>qoi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::pair&lt;double,<sp/>double&gt;&gt;(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;object_qoi_range_))<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;(</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;object_qoi_range_))<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>std::get&lt;std::set&lt;std::variant&lt;double,<sp/>int&gt;&gt;&gt;(</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;object_qoi_range_);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>type<sp/>in<sp/>object_qoi_range<sp/>variant.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkActor2D&gt;<sp/>object_qoi_scalar_bar_actor<sp/>=</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createScalarBarActor_(</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph_mappers.at(1.0),</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object_qoi_name.c_str(),</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.52,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.04,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font_size,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderer-&gt;AddActor2D(object_qoi_scalar_bar_actor);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>field<sp/>data<sp/>text<sp/>information<sp/>to<sp/>render</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected_phase_<sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Phase:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>phase<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Phase:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>phase<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(this-&gt;n_phases_<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Load<sp/>Imbalance:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>std::setprecision(2)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>this-&gt;info_.getImbalance(phase);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>text<sp/>actor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>vtkSmartPointer&lt;vtkTextActor&gt;<sp/>text_actor<sp/>=</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkSmartPointer&lt;vtkTextActor&gt;::New();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>text_actor-&gt;SetInput(ss.str().c_str());</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>vtkTextProperty*<sp/>textProp<sp/>=<sp/>text_actor-&gt;GetTextProperty();</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>textProp-&gt;SetColor(0.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>textProp-&gt;ItalicOff();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>textProp-&gt;BoldOff();</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>textProp-&gt;SetFontFamilyToArial();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>textProp-&gt;SetFontSize(font_size);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>textProp-&gt;SetLineSpacing(1.5);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Place<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>vtkCoordinate*<sp/>position<sp/>=<sp/>text_actor-&gt;GetPositionCoordinate();</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>position-&gt;SetCoordinateSystemToNormalizedViewport();</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>position-&gt;SetValue(0.04,<sp/>0.91,<sp/>0.0);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>text<sp/>to<sp/>render</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>renderer-&gt;AddActor(text_actor);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>rendering<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>renderer-&gt;ResetCamera();</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkRenderWindow&gt;<sp/>render_window;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>render_window-&gt;AddRenderer(renderer);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>render_window-&gt;SetWindowName(</highlight><highlight class="stringliteral">&quot;vt-tv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>render_window-&gt;SetSize(win_size,<sp/>win_size);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>render_window-&gt;Render();</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>image<sp/>from<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkWindowToImageFilter&gt;<sp/>w2i;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>w2i-&gt;SetInput(render_window);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>w2i-&gt;SetScale(1);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Export<sp/>the<sp/>PNG<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>vtkNew&lt;vtkPNGWriter&gt;<sp/>writer;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>writer-&gt;SetInputConnection(w2i-&gt;GetOutputPort());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>std::string<sp/>png_filename<sp/>=</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>output_dir<sp/>+<sp/>output_file_stem<sp/>+<sp/>std::to_string(phase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>writer-&gt;SetFileName(png_filename.c_str());</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>writer-&gt;SetCompressionLevel(2);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>writer-&gt;Write();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Render::generate(uint64_t<sp/>font_size,<sp/>uint64_t<sp/>win_size)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rank_qoi_min<sp/>=<sp/>rank_qoi_range_.first;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rank_qoi_max<sp/>=<sp/>rank_qoi_range_.second;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::pair&lt;double,<sp/>double&gt;&gt;(object_qoi_range_))<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_pair<sp/>=<sp/>std::get&lt;std::pair&lt;double,<sp/>double&gt;&gt;(object_qoi_range_);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>object_qoi_min<sp/>=<sp/>range_pair.first;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>object_qoi_max<sp/>=<sp/>range_pair.second;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Rank<sp/>{}<sp/>range:<sp/>{},<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>rank_qoi_,<sp/>rank_qoi_min,<sp/>rank_qoi_max);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>{}<sp/>range:<sp/>{},<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>object_qoi_,<sp/>object_qoi_min,<sp/>object_qoi_max);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;selected<sp/>phase={}\n&quot;</highlight><highlight class="normal">,<sp/>selected_phase_);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>createMeshAndRender<sp/>=<sp/>[&amp;](PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkNew&lt;vtkPolyData&gt;<sp/>object_mesh<sp/>=<sp/>this-&gt;createObjectMesh_(phase);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>vtkNew&lt;vtkPolyData&gt;<sp/>rank_mesh<sp/>=<sp/>this-&gt;createRankMesh_(phase);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(save_meshes_)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;==<sp/>Writing<sp/>object<sp/>mesh<sp/>for<sp/>phase<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkNew&lt;vtkXMLPolyDataWriter&gt;<sp/>writer;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>object_mesh_filename<sp/>=<sp/>output_dir_<sp/>+<sp/>output_file_stem_<sp/>+</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_object_mesh_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(phase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.vtp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer-&gt;SetFileName(object_mesh_filename.c_str());</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer-&gt;SetInputData(object_mesh);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer-&gt;Write();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;==<sp/>Writing<sp/>rank<sp/>mesh<sp/>for<sp/>phase<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vtkNew&lt;vtkXMLPolyDataWriter&gt;<sp/>writer2;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>rank_mesh_filneame<sp/>=<sp/>output_dir_<sp/>+<sp/>output_file_stem_<sp/>+</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_rank_mesh_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(phase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.vtp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer2-&gt;SetFileName(rank_mesh_filneame.c_str());</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer2-&gt;SetInputData(rank_mesh);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writer2-&gt;Write();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(save_pngs_)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;==<sp/>Rendering<sp/>visualization<sp/>PNG<sp/>for<sp/>phase<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>obj_qoi_range;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj_qoi_range<sp/>=</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::pair&lt;double,<sp/>double&gt;&gt;(this-&gt;object_qoi_range_);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj_qoi_range<sp/>=<sp/>{0,<sp/>1};</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>window_size<sp/>=<sp/>win_size;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>edge_width<sp/>=<sp/>0.03<sp/>*<sp/>window_size<sp/>/</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*std::max_element(this-&gt;grid_size_.begin(),<sp/>this-&gt;grid_size_.end());</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>glyph_factor<sp/>=<sp/>0.8<sp/>*<sp/>this-&gt;grid_resolution_<sp/>/</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((this-&gt;max_o_per_dim_<sp/>+<sp/>1)<sp/>*<sp/>std::sqrt(object_load_max_));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Image<sp/>size:<sp/>{}x{}px\n&quot;</highlight><highlight class="normal">,<sp/>win_size,<sp/>win_size);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Font<sp/>size:<sp/>{}pt\n&quot;</highlight><highlight class="normal">,<sp/>font_size);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;renderPNG(</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_mesh,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object_mesh,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_width,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glyph_factor,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_size,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font_size,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dir_,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_file_stem_);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected_phase_<sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>createMeshAndRender(selected_phase_);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PhaseType<sp/>phase<sp/>=<sp/>0;<sp/>phase<sp/>&lt;<sp/>this-&gt;n_phases_;<sp/>phase++)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>createMeshAndRender(phase);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vt::tv</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/render/render.cc"/>
  </compounddef>
</doxygen>
