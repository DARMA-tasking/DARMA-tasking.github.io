<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="info_8h" kind="file" language="C++">
    <compoundname>info.h</compoundname>
    <includes refid="types_8h" local="yes">vt-tv/api/types.h</includes>
    <includes refid="rank_8h" local="yes">vt-tv/api/rank.h</includes>
    <includes refid="object__info_8h" local="yes">vt-tv/api/object_info.h</includes>
    <includes local="no">fmt-vt/format.h</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">cassert</includes>
    <includes local="no">set</includes>
    <includedby refid="render_8h" local="yes">/home/runner/work/vt-tv/vt-tv/src/vt-tv/render/render.h</includedby>
    <includedby refid="json__generator_8h" local="yes">/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/json_generator.h</includedby>
    <includedby refid="json__reader_8h" local="yes">/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/json_reader.h</includedby>
    <includedby refid="parse__render_8cc" local="yes">/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.cc</includedby>
    <includedby refid="parse__render_8h" local="yes">/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>list</label>
      </node>
      <node id="9">
        <label>vt-tv/api/object_communicator.h</label>
        <link refid="object__communicator_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="6">
        <label>vt-tv/api/rank.h</label>
        <link refid="rank_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>variant</label>
      </node>
      <node id="1">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/api/info.h</label>
        <link refid="info_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="16">
        <label>fmt-vt/format.h</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="19">
        <label>vt-tv/api/object_info.h</label>
        <link refid="object__info_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vt-tv/api/object_work.h</label>
        <link refid="object__work_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>vt-tv/api/phase_work.h</label>
        <link refid="phase__work_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="20">
        <label>set</label>
      </node>
      <node id="2">
        <label>vt-tv/api/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/api/info.h</label>
        <link refid="info_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/render/render.h</label>
        <link refid="render_8h_source"/>
      </node>
      <node id="3">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/json_generator.h</label>
        <link refid="json__generator_8h_source"/>
      </node>
      <node id="4">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/json_reader.h</label>
        <link refid="json__reader_8h_source"/>
      </node>
      <node id="5">
        <label>/home/runner/work/vt-tv/vt-tv/src/vt-tv/utility/parse_render.h</label>
        <link refid="parse__render_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvt_1_1tv_1_1_info" prot="public">vt::tv::Info</innerclass>
    <innernamespace refid="namespacevt">vt</innernamespace>
    <innernamespace refid="namespacevt_1_1tv">vt::tv</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="4"><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.h</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DARMA/vt-tv<sp/>=&gt;<sp/>Virtual<sp/>Transport<sp/>--<sp/>Task<sp/>Visualizer</highlight></codeline>
<codeline lineno="7"><highlight class="comment">//</highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>Copyright<sp/>2019-2024<sp/>National<sp/>Technology<sp/>&amp;<sp/>Engineering<sp/>Solutions<sp/>of<sp/>Sandia,<sp/>LLC</highlight></codeline>
<codeline lineno="9"><highlight class="comment">//<sp/>(NTESS).<sp/>Under<sp/>the<sp/>terms<sp/>of<sp/>Contract<sp/>DE-NA0003525<sp/>with<sp/>NTESS,<sp/>the<sp/>U.S.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Government<sp/>retains<sp/>certain<sp/>rights<sp/>in<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="13"><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="14"><highlight class="comment">//</highlight></codeline>
<codeline lineno="15"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//</highlight></codeline>
<codeline lineno="18"><highlight class="comment">//<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//<sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">//<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="29"><highlight class="comment">//<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>Questions?<sp/>Contact<sp/>darma@sandia.gov</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>*****************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//@HEADER</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>INCLUDED_VT_TV_API_INFO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_VT_TV_API_INFO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vt-tv/api/types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vt-tv/api/rank.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vt-tv/api/object_info.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt-vt/format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vt::tv<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structvt_1_1tv_1_1_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_1_1tv_1_1_info" kindref="compound">Info</ref><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info" kindref="compound">Info</ref>(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectInfo&gt;<sp/>in_object_info,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;NodeType,<sp/>Rank&gt;<sp/>in_ranks)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>(std::move(in_object_info)),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>(std::move(in_ranks))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info" kindref="compound">Info</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structvt_1_1tv_1_1_info_1a74bc4f23cc454520bb4e0c52fb34a414" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a74bc4f23cc454520bb4e0c52fb34a414" kindref="member">addInfo</ref>(std::unordered_map&lt;ElementIDType,<sp/>ObjectInfo&gt;<sp/>object_info,<sp/><ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>object_info)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>.try_emplace(x.first,<sp/>std::move(x.second));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.find(r.<ref refid="structvt_1_1tv_1_1_rank_1a279909c1d0ac89ec73a01b20201e13c9" kindref="member">getRankID</ref>())<sp/>==<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Rank<sp/>must<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.try_emplace(r.<ref refid="structvt_1_1tv_1_1_rank_1a279909c1d0ac89ec73a01b20201e13c9" kindref="member">getRankID</ref>(),<sp/>std::move(r));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSelectedPhase(PhaseType<sp/>selected_phase)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" kindref="member">selected_phase_</ref><sp/>=<sp/>selected_phase;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="structvt_1_1tv_1_1_info_1a7fbefcb9546a84fc1bdc04cf24fecb53" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structvt_1_1tv_1_1_info_1a7fbefcb9546a84fc1bdc04cf24fecb53" kindref="member">getObjectInfo</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structvt_1_1tv_1_1_info_1abce89209820d8f373e6056f93c761fe9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structvt_1_1tv_1_1_info_1abce89209820d8f373e6056f93c761fe9" kindref="member">getRanks</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="structvt_1_1tv_1_1_info_1a7223ced5ac2895632024a73a133afdcd" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;NodeType&gt;<sp/><ref refid="structvt_1_1tv_1_1_info_1a7223ced5ac2895632024a73a133afdcd" kindref="member">getRankIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;NodeType&gt;<sp/>ids;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[rankid,<sp/>_]<sp/>:<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ids.push_back(rankid);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ids;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structvt_1_1tv_1_1_info_1a699e61b2dc73a472ee2f3123046e5861" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structvt_1_1tv_1_1_info_1a699e61b2dc73a472ee2f3123046e5861" kindref="member">getRank</ref>(NodeType<sp/>rank_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank_id);<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structvt_1_1tv_1_1_info_1a684d62b18dddfe41f65fda303fc86c5d" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structvt_1_1tv_1_1_info_1a684d62b18dddfe41f65fda303fc86c5d" kindref="member">getNumPhases</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_phases<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_phases<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(0).getNumPhases();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(NodeType<sp/>rank_id<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_id<sp/>&lt;<sp/>static_cast&lt;NodeType&gt;(this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank_id++)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank_id).getNumPhases()<sp/>!=<sp/>n_phases)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>phases<sp/>must<sp/>be<sp/>consistent<sp/>across<sp/>ranks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_phases;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>-----------------------------------<sp/><sp/>Getters<sp/><sp/>-----------------------------------<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QOIVariantTypes&amp;<sp/>variant)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;int&gt;(variant))<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::get&lt;int&gt;(variant));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;double&gt;(variant))<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;double&gt;(variant);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::string&gt;(variant))<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;QOI<sp/>type<sp/>must<sp/>be<sp/>numerical<sp/>(received<sp/>std::string).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>QOI<sp/>type<sp/>received<sp/>(must<sp/>be<sp/>numerical).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::function&lt;double(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref>,<sp/>PhaseType)&gt;</highlight></codeline>
<codeline lineno="180" refid="structvt_1_1tv_1_1_info_1a0070900700e21ac9273958d3a2117545" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a0070900700e21ac9273958d3a2117545" kindref="member">getRankQOIGetter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rank_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;double(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref>,<sp/>PhaseType)&gt;<sp/>qoi_getter;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a09e50312ce6d527a8bfb0199476739cd" kindref="member">getRankLoad</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;received_volume&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a5d6f575e379894ec1190f0366df3c15d" kindref="member">getRankReceivedVolume</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sent_volume&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a590c94d29b4a7eddccb34926f05f436e" kindref="member">getRankSentVolume</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;number_of_objects&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1ad199317705997629b8fd3bc2d04b160c" kindref="member">getRankNumObjects</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;number_of_migratable_objects&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a4831643b0eb665a401d48e80ea1f944f" kindref="member">getRankNumMigratableObjects</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;migratable_load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a109205a1d8334ce9b7a2d2527aba01b2" kindref="member">getRankMigratableLoad</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sentinel_load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a7304a8111f34ac224edbf72e86f5cc15" kindref="member">getRankSentinelLoad</ref>(rank,<sp/>phase));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)phase;<sp/></highlight><highlight class="comment">//<sp/>unused<sp/>for<sp/>this<sp/>qoi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a379baf8aa8c5d42794826dd10f31fe3e" kindref="member">getRankID</ref>(rank));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>in<sp/>attributes<sp/>(will<sp/>throw<sp/>an<sp/>error<sp/>if<sp/>QOI<sp/>doesn&apos;t<sp/>exist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)phase;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1aa7a56b31fc284336e01a3024d2d2bdfb" kindref="member">getRankAttribute</ref>(rank,<sp/>rank_qoi));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qoi_getter;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::function&lt;double(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref>)&gt;</highlight></codeline>
<codeline lineno="232" refid="structvt_1_1tv_1_1_info_1af620bdc340c4d90330bd353f201ae41a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1af620bdc340c4d90330bd353f201ae41a" kindref="member">getObjectQOIGetter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>object_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;double(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref>)&gt;<sp/>qoi_getter;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;load&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1aedea7f7156d0edc68bc8a5188fa63c95" kindref="member">getObjectLoad</ref>(obj));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;received_volume&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a22cffa71f5081a496bb1ae33a13791b3" kindref="member">getObjectReceivedVolume</ref>(obj));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sent_volume&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a29c6fd7415e3e817132f7845dbd19ace" kindref="member">getObjectSentVolume</ref>(obj));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;max_volume&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a35bff2a46ef1d53a6dc7ec78f440af5d" kindref="member">getObjectMaxVolume</ref>(obj));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1a7ca98cf4b6f0d9bd09e38599b97d1e10" kindref="member">getObjectID</ref>(obj));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_qoi<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;rank_id&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(<ref refid="structvt_1_1tv_1_1_info_1ac98bef9c0d9a38dc43e74f654c36ae22" kindref="member">getObjectRankID</ref>(obj));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>in<sp/>attributes<sp/>and<sp/>user_defined<sp/>(will<sp/>throw<sp/>an<sp/>error<sp/>if<sp/>QOI<sp/>doesn&apos;t<sp/>exist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qoi_getter<sp/>=<sp/>[&amp;](<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ab724e4a865b977d87655b2022dc8c3e2" kindref="member">convertQOIVariantTypeToDouble_</ref>(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1ac2e2d403a2f226b0e7525bc3df4ff64f" kindref="member">getObjectAttributeOrUserDefined</ref>(obj,<sp/>object_qoi));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qoi_getter;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>---------------------------------<sp/><sp/>Rank<sp/>Getters<sp/><sp/>---------------------------------<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="structvt_1_1tv_1_1_info_1a3b9043329ad717f287580594c77da3ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a3b9043329ad717f287580594c77da3ac" kindref="member">getRankQOIAtPhase</ref>(</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ElementIDType<sp/>rank_id,<sp/>PhaseType<sp/>phase,<sp/>std::string<sp/>rank_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>qoi_getter<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a0070900700e21ac9273958d3a2117545" kindref="member">getRankQOIGetter</ref>(rank_qoi);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rank<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank_id);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qoi_getter(rank,<sp/>phase);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;PhaseType,<sp/>double&gt;</highlight></codeline>
<codeline lineno="288" refid="structvt_1_1tv_1_1_info_1aa13fe6855e1e28de16b7fac3453dc569" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1aa13fe6855e1e28de16b7fac3453dc569" kindref="member">getAllQOIAtRank</ref>(ElementIDType<sp/>rank_id,<sp/>std::string<sp/>rank_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;PhaseType,<sp/>double&gt;<sp/>rank_qois;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>qoi_getter<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a0070900700e21ac9273958d3a2117545" kindref="member">getRankQOIGetter</ref>(rank_qoi);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rank<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank_id);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_work<sp/>=<sp/>rank.getPhaseWork();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[phase,<sp/>_]<sp/>:<sp/>phase_work)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rank_qois.insert(std::make_pair(phase,<sp/>qoi_getter(rank,<sp/>phase)));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank_qois;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>double&gt;</highlight></codeline>
<codeline lineno="306" refid="structvt_1_1tv_1_1_info_1a7a3b969658de1080e50bce785e3451ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a7a3b969658de1080e50bce785e3451ad" kindref="member">getAllRankQOIAtPhase</ref>(PhaseType<sp/>phase,<sp/>std::string<sp/>rank_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>double&gt;<sp/>rank_qois;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>qoi_getter<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a0070900700e21ac9273958d3a2117545" kindref="member">getRankQOIGetter</ref>(rank_qoi);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[rank_id,<sp/>rank]<sp/>:<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rank_qois.insert(std::make_pair(rank_id,<sp/>qoi_getter(rank,<sp/>phase)));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank_qois;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>--------------------------------<sp/><sp/>Object<sp/>Getters<sp/><sp/>--------------------------------<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="structvt_1_1tv_1_1_info_1a54e700145ffeee14ede76ebfeb2d57f1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a54e700145ffeee14ede76ebfeb2d57f1" kindref="member">getObjectQOIAtPhase</ref>(</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ElementIDType<sp/>obj_id,<sp/>PhaseType<sp/>phase,<sp/>std::string<sp/>obj_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>qoi_getter<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1af620bdc340c4d90330bd353f201ae41a" kindref="member">getObjectQOIGetter</ref>(obj_qoi);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" kindref="member">getPhaseObjects</ref>(phase);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>obj<sp/>=<sp/>objects.at(obj_id);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qoi_getter(obj);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;</highlight></codeline>
<codeline lineno="340" refid="structvt_1_1tv_1_1_info_1aab30c1defbcd612c77a799ec9e212629" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1aab30c1defbcd612c77a799ec9e212629" kindref="member">getRankObjects</ref>(ElementIDType<sp/>rank_id,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;<sp/>objects;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Rank<sp/>info<sp/>for<sp/>specified<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rank_info<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank_id);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>history<sp/>of<sp/>phases<sp/>for<sp/>this<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_history_at_rank<sp/>=<sp/>rank_info.getPhaseWork();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>phase<sp/>work<sp/>at<sp/>specified<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_work_at_rank<sp/>=<sp/>phase_history_at_rank.find(phase);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>objects<sp/>at<sp/>specified<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>object_work_at_phase_at_rank<sp/>=</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phase_work_at_rank-&gt;second.getObjectWork();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[elm_id,<sp/>obj_work]<sp/>:<sp/>object_work_at_phase_at_rank)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>objects.insert(std::make_pair(elm_id,<sp/>obj_work));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objects;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;</highlight></codeline>
<codeline lineno="371" refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" kindref="member">getPhaseObjects</ref>(PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;Phase:<sp/>{}\n&quot;,<sp/>phase);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>objects<sp/>at<sp/>given<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;<sp/>objects_at_phase;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>all<sp/>ranks<sp/>and<sp/>get<sp/>all<sp/>objects<sp/>at<sp/>given<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank<sp/>=<sp/>0;<sp/>rank<sp/>&lt;<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size();<sp/>rank++)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/>Rank:<sp/>{}\n&quot;,rank);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Rank<sp/>info<sp/>for<sp/>specified<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rank_info<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>history<sp/>of<sp/>phases<sp/>for<sp/>this<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_history<sp/>=<sp/>rank_info.getPhaseWork();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>phase<sp/>work<sp/>at<sp/>specified<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_work<sp/>=<sp/>phase_history.find(phase);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(phase_work<sp/>==<sp/>phase_history.end())<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ex<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info::getPhaseObjects:<sp/>Phase<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(phase)<sp/>+</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>doesn&apos;t<sp/>exist<sp/>for<sp/>rank<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(rank);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ex);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>objects<sp/>at<sp/>specified<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>object_work_at_phase<sp/>=<sp/>phase_work-&gt;second.getObjectWork();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[elm_id,<sp/>obj_work]<sp/>:<sp/>object_work_at_phase)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/><sp/><sp/>Object<sp/>Id:<sp/>{}\n&quot;,<sp/>elm_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects_at_phase.insert(std::make_pair(elm_id,<sp/>obj_work));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objects_at_phase;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="structvt_1_1tv_1_1_info_1a462f7e4b1d48be6f74eb7627dfb8b64a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a462f7e4b1d48be6f74eb7627dfb8b64a" kindref="member">getMaxVolume</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ov_max<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>all<sp/>phases:<sp/>each<sp/>object<sp/>is<sp/>re-initialized<sp/>when</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/>advancing<sp/>to<sp/>the<sp/>next<sp/>phase<sp/>(in<sp/>the<sp/>JSON-reader),<sp/>thus<sp/>different<sp/>memory<sp/>spaces</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/>are<sp/>used<sp/>for<sp/>an<sp/>object<sp/>of<sp/>the<sp/>same<sp/>id<sp/>but<sp/>of<sp/>a<sp/>different<sp/>phase.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>means<sp/>the<sp/>object<sp/>communications<sp/>are<sp/>not<sp/>phase<sp/>persistent,<sp/>so<sp/>one<sp/>can&apos;t<sp/>obtain</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>maximum<sp/>volume<sp/>by<sp/>iterated<sp/>through<sp/>object<sp/>ids.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_phases<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a684d62b18dddfe41f65fda303fc86c5d" kindref="member">getNumPhases</ref>();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" kindref="member">selected_phase_</ref><sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" kindref="member">getPhaseObjects</ref>(<ref refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" kindref="member">selected_phase_</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_max_v<sp/>=<sp/>obj_work.getMaxVolume();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_max_v<sp/>&gt;<sp/>ov_max)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ov_max<sp/>=<sp/>obj_max_v;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PhaseType<sp/>phase<sp/>=<sp/>0;<sp/>phase<sp/>&lt;<sp/>n_phases;<sp/>phase++)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" kindref="member">getPhaseObjects</ref>(phase);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_max_v<sp/>=<sp/>obj_work.getMaxVolume();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_max_v<sp/>&gt;<sp/>ov_max)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ov_max<sp/>=<sp/>obj_max_v;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ov_max;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="structvt_1_1tv_1_1_info_1a24c8fcf4795446af169bab31e519dff1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a24c8fcf4795446af169bab31e519dff1" kindref="member">getMaxLoad</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ol_max<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_phases<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a684d62b18dddfe41f65fda303fc86c5d" kindref="member">getNumPhases</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" kindref="member">selected_phase_</ref><sp/>!=<sp/>std::numeric_limits&lt;PhaseType&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" kindref="member">getPhaseObjects</ref>(<ref refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" kindref="member">selected_phase_</ref>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_load<sp/>=<sp/>obj_work.getLoad();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_load<sp/>&gt;<sp/>ol_max)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol_max<sp/>=<sp/>obj_load;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PhaseType<sp/>phase<sp/>=<sp/>0;<sp/>phase<sp/>&lt;<sp/>n_phases;<sp/>phase++)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1aa79cfc88ea62c249e2c90674dad86a92" kindref="member">getPhaseObjects</ref>(phase);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_load<sp/>=<sp/>obj_work.getLoad();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_load<sp/>&gt;<sp/>ol_max)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ol_max<sp/>=<sp/>obj_load;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ol_max;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;</highlight></codeline>
<codeline lineno="481" refid="structvt_1_1tv_1_1_info_1aa71dd445b53aee2f40ed48fcc7f5f6aa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1aa71dd445b53aee2f40ed48fcc7f5f6aa" kindref="member">createPhaseObjectsMapping</ref>(PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;Phase:<sp/>{}\n&quot;,<sp/>phase);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>objects<sp/>at<sp/>given<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectWork&gt;<sp/>objects_at_phase;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>all<sp/>ranks<sp/>and<sp/>get<sp/>all<sp/>objects<sp/>at<sp/>given<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank<sp/>=<sp/>0;<sp/>rank<sp/>&lt;<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size();<sp/>rank++)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/>Rank:<sp/>{}\n&quot;,rank);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Rank<sp/>info<sp/>for<sp/>specified<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rank_info<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>history<sp/>of<sp/>phases<sp/>for<sp/>this<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>phase_history<sp/>=<sp/>rank_info.getPhaseWork();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>phase<sp/>work<sp/>at<sp/>specified<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phase_work<sp/>=<sp/>phase_history.find(phase);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>objects<sp/>at<sp/>specified<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>object_work_at_phase<sp/>=<sp/>phase_work-&gt;second.getObjectWork();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[elm_id,<sp/>obj_work]<sp/>:<sp/>object_work_at_phase)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/><sp/><sp/>Object<sp/>Id:<sp/>{}\n&quot;,<sp/>elm_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects_at_phase.insert(std::make_pair(elm_id,<sp/>obj_work));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objects_at_phase;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="structvt_1_1tv_1_1_info_1aafae26bdf66d2e3e11687b700159f9b3" refkind="member"><highlight class="normal"><sp/><sp/>std::set&lt;ElementIDType&gt;<sp/><ref refid="structvt_1_1tv_1_1_info_1aafae26bdf66d2e3e11687b700159f9b3" kindref="member">getAllObjectIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>objects<sp/>at<sp/>given<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ElementIDType&gt;<sp/>objects;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>all<sp/>ranks<sp/>and<sp/>get<sp/>all<sp/>objects<sp/>at<sp/>given<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank<sp/>=<sp/>0;<sp/>rank<sp/>&lt;<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size();<sp/>rank++)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;Rank:<sp/>{}\n&quot;,rank);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Rank<sp/>info<sp/>for<sp/>specified<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rank_info<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.at(rank);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>history<sp/>of<sp/>phases<sp/>for<sp/>this<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_history<sp/>=<sp/>rank_info.getPhaseWork();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>history<sp/>of<sp/>all<sp/>phases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[phase,<sp/>phase_work]<sp/>:<sp/>phase_history)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;|-&gt;<sp/><sp/>Phase:<sp/>{}\n&quot;,<sp/>phase);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>objects<sp/>at<sp/>this<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>object_work_at_phase<sp/>=<sp/>phase_work.getObjectWork();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[elm_id,<sp/>obj_work]<sp/>:<sp/>object_work_at_phase)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;|<sp/><sp/><sp/><sp/>|-&gt;<sp/>Object<sp/>Id:<sp/>{}\n&quot;,<sp/>elm_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objects.insert(elm_id);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;Size<sp/>of<sp/>all<sp/>objects:<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>objects.size());</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objects;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="structvt_1_1tv_1_1_info_1a6a7a4e6db168a2bf7fdaabe6b275f0d6" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="structvt_1_1tv_1_1_info_1a6a7a4e6db168a2bf7fdaabe6b275f0d6" kindref="member">getNumRanks</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="structvt_1_1tv_1_1_info_1a04895a15b7ecedb0b11edebfaea051d7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a04895a15b7ecedb0b11edebfaea051d7" kindref="member">normalizeEdges</ref>(PhaseType<sp/>phase)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;\n----<sp/>Normalizing<sp/>Edges<sp/>for<sp/>phase<sp/>{}<sp/>----\n&quot;</highlight><highlight class="normal">,<sp/>phase);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>of<sp/>tuples<sp/>of<sp/>communications<sp/>to<sp/>add:<sp/>{side_to_be_modified,<sp/>id1,<sp/>id2,<sp/>bytes}<sp/>for<sp/>an<sp/>id1<sp/>-&gt;<sp/>id2<sp/>communication<sp/>(1<sp/>sends<sp/>to<sp/>2,<sp/>2<sp/>receives<sp/>from<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>type<sp/>is<sp/>&quot;sender&quot;,<sp/>communication<sp/>has<sp/>to<sp/>be<sp/>added<sp/>to<sp/>sent<sp/>communications<sp/>for<sp/>object<sp/>id1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>type<sp/>is<sp/>&quot;recipient&quot;,<sp/>communication<sp/>has<sp/>to<sp/>be<sp/>added<sp/>to<sp/>received<sp/>communications<sp/>for<sp/>object<sp/>id2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::tuple&lt;std::string,<sp/>ElementIDType,<sp/>ElementIDType,<sp/>double&gt;&gt;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>communications_to_add;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phase_objects<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1aa71dd445b53aee2f40ed48fcc7f5f6aa" kindref="member">createPhaseObjectsMapping</ref>(phase);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checking<sp/>all<sp/>communications<sp/>for<sp/>object<sp/>A<sp/>in<sp/>all<sp/>objects<sp/>of<sp/>all<sp/>ranks<sp/>at<sp/>given<sp/>phase:<sp/>A<sp/>&lt;-<sp/>...<sp/>and<sp/>A<sp/>-&gt;<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[A_id,<sp/>object_work]<sp/>:<sp/>phase_objects)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;-<sp/>Object<sp/>ID:<sp/>{}\n&quot;,<sp/>A_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sent<sp/>=<sp/>object_work.getSent();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/>Has<sp/>{}<sp/>sent<sp/>communications&quot;,<sp/>sent.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>received<sp/>=<sp/>object_work.getReceived();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/>and<sp/>{}<sp/>received<sp/>communications.\n&quot;,<sp/>received.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Going<sp/>through<sp/>A<sp/>-&gt;<sp/>...<sp/>communications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/>Checking<sp/>sent<sp/>communications:\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[B_id,<sp/>bytes]<sp/>:<sp/>sent)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/><sp/>Communication<sp/>sent<sp/>to<sp/>object<sp/>{}<sp/>of<sp/>{}<sp/>bytes:\n&quot;,<sp/>B_id,<sp/>bytes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>B<sp/>exists<sp/>for<sp/>the<sp/>A<sp/>-&gt;<sp/>B<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(phase_objects.find(B_id)<sp/>!=<sp/>phase_objects.end())<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/><sp/>Found<sp/>recipient<sp/>object<sp/>{}<sp/>when<sp/>searching<sp/>for<sp/>communication<sp/>sent<sp/>by<sp/>object<sp/>{}<sp/>of<sp/>{}<sp/>bytes.\n&quot;,<sp/>B_id,<sp/>A_id,<sp/>bytes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_object_work<sp/>=<sp/>phase_objects.at(B_id);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_received<sp/>=<sp/>to_object_work.getReceived();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(<sp/><sp/>&quot;Object<sp/>{}<sp/>has<sp/>{}<sp/>received<sp/>communications.\n&quot;,<sp/>B_id,<sp/>target_received.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>B<sp/>has<sp/>symmetric<sp/>B<sp/>&lt;-<sp/>A<sp/>received<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_received.find(A_id)<sp/>!=<sp/>target_received.end())<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(<sp/><sp/>&quot;<sp/><sp/><sp/>Object<sp/>{}<sp/>already<sp/>has<sp/>received<sp/>communication<sp/>from<sp/>object<sp/>{}.\n&quot;,<sp/>B_id,<sp/>A_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(<sp/><sp/>&quot;<sp/><sp/><sp/>Object<sp/>{}<sp/>doesn&apos;t<sp/>have<sp/>received<sp/>communication<sp/>from<sp/>object<sp/>{}.<sp/>Pushing<sp/>to<sp/>list<sp/>of<sp/>communications<sp/>to<sp/>add.\n&quot;,<sp/>B_id,<sp/>A_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communications_to_add.push_back(</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(</highlight><highlight class="stringliteral">&quot;recipient&quot;</highlight><highlight class="normal">,<sp/>A_id,<sp/>B_id,<sp/>bytes));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>/!\\<sp/>Didn&apos;t<sp/>find<sp/>recipient<sp/>object<sp/>{}<sp/>when<sp/>searching<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;communication<sp/>sent<sp/>by<sp/>object<sp/>{}<sp/>of<sp/>{}<sp/>bytes.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_id,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_id,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Going<sp/>through<sp/>A<sp/>&lt;-<sp/>...<sp/>communications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/>Checking<sp/>received<sp/>communications:\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[B_id,<sp/>bytes]<sp/>:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>received)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Going<sp/>through<sp/>A<sp/>&lt;-<sp/>...<sp/>communications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/><sp/>Communication<sp/>received<sp/>from<sp/>object<sp/>{}<sp/>of<sp/>{}<sp/>bytes:\n&quot;,<sp/>B_id,<sp/>bytes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>B<sp/>exists<sp/>for<sp/>the<sp/>A<sp/>&lt;-<sp/>B<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(phase_objects.find(B_id)<sp/>!=<sp/>phase_objects.end())<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/><sp/>Found<sp/>sender<sp/>object<sp/>{}<sp/>when<sp/>searching<sp/>for<sp/>communication<sp/>received<sp/>by<sp/>object<sp/>{}<sp/>of<sp/>{}<sp/>bytes.\n&quot;,<sp/>B_id,<sp/>A_id,<sp/>bytes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_object_work<sp/>=<sp/>phase_objects.at(B_id);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_sent<sp/>=<sp/>from_object_work.getSent();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(<sp/><sp/>&quot;Object<sp/>{}<sp/>has<sp/>{}<sp/>sent<sp/>communications.\n&quot;,<sp/>B_id,<sp/>target_sent.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>B<sp/>has<sp/>symmetric<sp/>B<sp/>-&gt;<sp/>A<sp/>received<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_sent.find(A_id)<sp/>!=<sp/>target_sent.end())<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(<sp/><sp/>&quot;<sp/><sp/><sp/>Object<sp/>{}<sp/>already<sp/>has<sp/>sent<sp/>communication<sp/>to<sp/>object<sp/>{}.\n&quot;,<sp/>B_id,<sp/>A_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(<sp/><sp/>&quot;<sp/><sp/><sp/>Object<sp/>{}<sp/>doesn&apos;t<sp/>have<sp/>sent<sp/>communication<sp/>to<sp/>object<sp/>{}.<sp/>Pushing<sp/>to<sp/>list<sp/>of<sp/>communications<sp/>to<sp/>add.\n&quot;,<sp/>B_id,<sp/>A_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communications_to_add.push_back(</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(</highlight><highlight class="stringliteral">&quot;sender&quot;</highlight><highlight class="normal">,<sp/>B_id,<sp/>A_id,<sp/>bytes));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(&quot;<sp/><sp/>/!\\<sp/>Didn&apos;t<sp/>find<sp/>sender<sp/>object<sp/>{}<sp/>when<sp/>searching<sp/>for<sp/>communication<sp/>received<sp/>by<sp/>object<sp/>{}<sp/>of<sp/>{}<sp/>bytes.\n&quot;,<sp/>B_id,<sp/>A_id,<sp/>bytes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>ranks<sp/>and<sp/>add<sp/>communications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;Updating<sp/>communications<sp/>for<sp/>phase<sp/>{}.\n&quot;,<sp/>phase);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[rank_id,<sp/>rank]<sp/>:<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/>Checking<sp/>objects<sp/>in<sp/>rank<sp/>{}.\n&quot;,<sp/>rank_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>phaseWork<sp/>=<sp/>rank.getPhaseWork();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>phaseWorkAtPhase<sp/>=<sp/>phaseWork.at(phase);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>objects<sp/>=<sp/>phaseWorkAtPhase.getObjectWork();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>objects)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/>Checking<sp/>if<sp/>object<sp/>{}<sp/>needs<sp/>to<sp/>be<sp/>updated.\n&quot;,<sp/>obj_id);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/>Communications<sp/>to<sp/>update:\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[object_to_update,<sp/>sender_id,<sp/>recipient_id,<sp/>bytes]<sp/>:</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communications_to_add)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/><sp/><sp/>{}<sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>in<sp/>{}<sp/>-&gt;<sp/>{}<sp/>communication<sp/>of<sp/>{}<sp/>bytes.\n&quot;,<sp/>object_to_update,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>sender_id,<sp/>recipient_id,<sp/>bytes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(object_to_update<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sender&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>sender_id<sp/>==<sp/>obj_id)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/><sp/><sp/>Sender<sp/>to<sp/>be<sp/>updated<sp/>is<sp/>object<sp/>on<sp/>this<sp/>rank.<sp/>Updating.\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank.addObjectSentCommunicationAtPhase(</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase,<sp/>obj_id,<sp/>recipient_id,<sp/>bytes);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communications_to_add.erase(communications_to_add.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object_to_update<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;recipient&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>recipient_id<sp/>==<sp/>obj_id)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/><sp/><sp/><sp/>Recipient<sp/>to<sp/>be<sp/>updated<sp/>is<sp/>object<sp/>on<sp/>this<sp/>rank.<sp/>Updating.\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank.addObjectReceivedCommunicationAtPhase(</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase,<sp/>obj_id,<sp/>sender_id,<sp/>bytes);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>communications_to_add.erase(communications_to_add.begin()<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(communications_to_add.empty())<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="structvt_1_1tv_1_1_info_1ac029643223d191701a913db83c5bcc26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1ac029643223d191701a913db83c5bcc26" kindref="member">getImbalance</ref>(PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>load_sum<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_load<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>rank<sp/>=<sp/>0;<sp/>rank<sp/>&lt;<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size();<sp/>rank++)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank_max_load<sp/>=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a699e61b2dc73a472ee2f3123046e5861" kindref="member">getRank</ref>(rank).getLoad(phase);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_max_load<sp/>&gt;<sp/>max_load)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_load<sp/>=<sp/>rank_max_load;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>load_sum<sp/>+=<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a699e61b2dc73a472ee2f3123046e5861" kindref="member">getRank</ref>(rank).getLoad(phase);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>load_avg<sp/>=<sp/>load_sum<sp/>/<sp/>this-&gt;<ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>.size();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>imbalance<sp/>=<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(load_avg<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imbalance<sp/>=<sp/>(max_load<sp/>/<sp/>load_avg)<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imbalance;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-------------------<sp/>Object<sp/>QOI<sp/>getters<sp/>-------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="structvt_1_1tv_1_1_info_1a7ca98cf4b6f0d9bd09e38599b97d1e10" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a7ca98cf4b6f0d9bd09e38599b97d1e10" kindref="member">getObjectID</ref>(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getID());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="structvt_1_1tv_1_1_info_1ac98bef9c0d9a38dc43e74f654c36ae22" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1ac98bef9c0d9a38dc43e74f654c36ae22" kindref="member">getObjectRankID</ref>(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_id<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getID();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_info<sp/>=<sp/><ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>.at(obj_id);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj_info.getHome();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="718" refid="structvt_1_1tv_1_1_info_1aedea7f7156d0edc68bc8a5188fa63c95" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1aedea7f7156d0edc68bc8a5188fa63c95" kindref="member">getObjectLoad</ref>(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getLoad();</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="structvt_1_1tv_1_1_info_1a22cffa71f5081a496bb1ae33a13791b3" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a22cffa71f5081a496bb1ae33a13791b3" kindref="member">getObjectReceivedVolume</ref>(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getReceivedVolume();</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="structvt_1_1tv_1_1_info_1a29c6fd7415e3e817132f7845dbd19ace" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a29c6fd7415e3e817132f7845dbd19ace" kindref="member">getObjectSentVolume</ref>(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getSentVolume();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="structvt_1_1tv_1_1_info_1a35bff2a46ef1d53a6dc7ec78f440af5d" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a35bff2a46ef1d53a6dc7ec78f440af5d" kindref="member">getObjectMaxVolume</ref>(<ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getMaxVolume();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="structvt_1_1tv_1_1_info_1ac2e2d403a2f226b0e7525bc3df4ff64f" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1ac2e2d403a2f226b0e7525bc3df4ff64f" kindref="member">getObjectAttributeOrUserDefined</ref>(</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvt_1_1tv_1_1_object_work" kindref="compound">ObjectWork</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>std::string<sp/>object_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_attributes<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getAttributes();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_attributes.count(object_qoi)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj_attributes.at(object_qoi);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obj_user_defined<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.getUserDefined();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj_user_defined.count(object_qoi)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj_user_defined.at(object_qoi);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Object<sp/>QOI:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>object_qoi);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>--------------------<sp/>Rank<sp/>QOI<sp/>getters<sp/>--------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="structvt_1_1tv_1_1_info_1a379baf8aa8c5d42794826dd10f31fe3e" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a379baf8aa8c5d42794826dd10f31fe3e" kindref="member">getRankID</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rank.<ref refid="structvt_1_1tv_1_1_rank_1a279909c1d0ac89ec73a01b20201e13c9" kindref="member">getRankID</ref>());</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="800" refid="structvt_1_1tv_1_1_info_1a09e50312ce6d527a8bfb0199476739cd" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a09e50312ce6d527a8bfb0199476739cd" kindref="member">getRankLoad</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a03c092efae53374ca7f19def3858abb8" kindref="member">getLoad</ref>(phase);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="812" refid="structvt_1_1tv_1_1_info_1a5d6f575e379894ec1190f0366df3c15d" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a5d6f575e379894ec1190f0366df3c15d" kindref="member">getRankReceivedVolume</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>received_volume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_objects<sp/>=<sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a1e9fa7df6efafef6c879186d6615eafb" kindref="member">getPhaseWork</ref>().at(phase).getObjectWork();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>phase_objects)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>received_volume<sp/>+=<sp/>obj_work.getReceivedVolume();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>received_volume;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="structvt_1_1tv_1_1_info_1a590c94d29b4a7eddccb34926f05f436e" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a590c94d29b4a7eddccb34926f05f436e" kindref="member">getRankSentVolume</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sent_volume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_objects<sp/>=<sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a1e9fa7df6efafef6c879186d6615eafb" kindref="member">getPhaseWork</ref>().at(phase).getObjectWork();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>phase_objects)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent_volume<sp/>+=<sp/>obj_work.getSentVolume();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sent_volume;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="846" refid="structvt_1_1tv_1_1_info_1ad199317705997629b8fd3bc2d04b160c" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1ad199317705997629b8fd3bc2d04b160c" kindref="member">getRankNumObjects</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_objects<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rank.<ref refid="structvt_1_1tv_1_1_rank_1a45698d701a6fd05407f1a6caacbc6c75" kindref="member">getNumObjects</ref>(phase));</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_objects;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>QOIVariantTypes</highlight></codeline>
<codeline lineno="860" refid="structvt_1_1tv_1_1_info_1a4831643b0eb665a401d48e80ea1f944f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvt_1_1tv_1_1_info_1a4831643b0eb665a401d48e80ea1f944f" kindref="member">getRankNumMigratableObjects</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_migratable_objects<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_objects<sp/>=<sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a1e9fa7df6efafef6c879186d6615eafb" kindref="member">getPhaseWork</ref>().at(phase).getObjectWork();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>_]<sp/>:<sp/>phase_objects)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>.at(obj_id).isMigratable())<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_migratable_objects++;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_migratable_objects;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="879" refid="structvt_1_1tv_1_1_info_1a109205a1d8334ce9b7a2d2527aba01b2" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a109205a1d8334ce9b7a2d2527aba01b2" kindref="member">getRankMigratableLoad</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>migratable_load<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_objects<sp/>=<sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a1e9fa7df6efafef6c879186d6615eafb" kindref="member">getPhaseWork</ref>().at(phase).getObjectWork();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>phase_objects)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>.at(obj_id).isMigratable())<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>migratable_load<sp/>+=<sp/>obj_work.getLoad();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>migratable_load;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="898" refid="structvt_1_1tv_1_1_info_1a7304a8111f34ac224edbf72e86f5cc15" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1a7304a8111f34ac224edbf72e86f5cc15" kindref="member">getRankSentinelLoad</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>PhaseType<sp/>phase)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sentinel_load<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>phase_objects<sp/>=<sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a1e9fa7df6efafef6c879186d6615eafb" kindref="member">getPhaseWork</ref>().at(phase).getObjectWork();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[obj_id,<sp/>obj_work]<sp/>:<sp/>phase_objects)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>.at(obj_id).isSentinel())<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sentinel_load<sp/>+=<sp/>obj_work.getLoad();</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sentinel_load;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="917" refid="structvt_1_1tv_1_1_info_1aa7a56b31fc284336e01a3024d2d2bdfb" refkind="member"><highlight class="normal"><sp/><sp/>QOIVariantTypes<sp/><ref refid="structvt_1_1tv_1_1_info_1aa7a56b31fc284336e01a3024d2d2bdfb" kindref="member">getRankAttribute</ref>(<ref refid="structvt_1_1tv_1_1_rank" kindref="compound">Rank</ref><sp/>rank,<sp/>std::string<sp/>rank_qoi)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rank_attributes<sp/>=<sp/>rank.<ref refid="structvt_1_1tv_1_1_rank_1a88be65a10e44a38648c29e976edbcfa7" kindref="member">getAttributes</ref>();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank_attributes.count(rank_qoi)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank_attributes.at(rank_qoi);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Rank<sp/>QOI:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>rank_qoi);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SerializerT&gt;</highlight></codeline>
<codeline lineno="934" refid="structvt_1_1tv_1_1_info_1a8ae2b679b302bd2647ab3ea1cdde6838" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvt_1_1tv_1_1_info_1a8ae2b679b302bd2647ab3ea1cdde6838" kindref="member">serialize</ref>(SerializerT&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/><ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>|<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="941" refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" refkind="member"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;ElementIDType,<sp/>ObjectInfo&gt;<sp/><ref refid="structvt_1_1tv_1_1_info_1a422689d2fa613374af10a47ec5a106b6" kindref="member">object_info_</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="944" refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" refkind="member"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;NodeType,<sp/>Rank&gt;<sp/><ref refid="structvt_1_1tv_1_1_info_1a6927872b1cad66e8fa590e37cecba79a" kindref="member">ranks_</ref>;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="947" refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" refkind="member"><highlight class="normal"><sp/><sp/>PhaseType<sp/><ref refid="structvt_1_1tv_1_1_info_1a4dfc8b78cdcf3deede5250ab3af32428" kindref="member">selected_phase_</ref><sp/>=<sp/>std::numeric_limits&lt;PhaseType&gt;::max();</highlight></codeline>
<codeline lineno="948"><highlight class="normal">};</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>end<sp/>namespace<sp/>vt::tv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*INCLUDED_VT_TV_API_INFO_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/vt-tv/vt-tv/src/vt-tv/api/info.h"/>
  </compounddef>
</doxygen>
